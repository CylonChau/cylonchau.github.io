<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>git on Cylon&#39;s Collection</title>
    <link>https://www.oomkill.com/categories/git/</link>
    <description>Recent content in git on Cylon&#39;s Collection</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 02 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.oomkill.com/categories/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>删除github上面的历史提交记录</title>
      <link>https://www.oomkill.com/2023/04/delete-github-commit/</link>
      <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/04/delete-github-commit/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>如果不小心提交github提交错了，而 <code>--amend</code> 也不能修改提交者的信息，可以通过尝试下面的方式</p>
<ol>
<li>
<p>Checkout</p>
<pre><code class="language-bash">git checkout --orphan &lt;latest_branch&gt;
</code></pre>
</li>
<li>
<p>Add all the files</p>
<pre><code class="language-bash">git add -A
</code></pre>
</li>
<li>
<p>Commit the changes</p>
<pre><code class="language-bash">git commit -am &quot;commit message&quot;
</code></pre>
</li>
<li>
<p>Delete the branch</p>
<pre><code class="language-bash">git branch -D main
</code></pre>
</li>
<li>
<p>Rename the current branch to main</p>
<pre><code class="language-bash">git branch -m main
</code></pre>
</li>
<li>
<p>Finally, force update your repository</p>
<pre><code class="language-bash">git push -f origin main
</code></pre>
</li>
</ol>
<p>缺点是：所有该分支的提交记录都将被删除</p>
<p><strong>Reference</strong></p>
<ul>
<li><a href="https://stackoverflow.com/questions/13716658/how-to-delete-all-commit-history-in-github" target="_blank"
   rel="noopener nofollow noreferrer" >how to delete all commit history in github?</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>git在windows上常用配置</title>
      <link>https://www.oomkill.com/2023/01/awesome-git-configration-in-windows/</link>
      <pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/01/awesome-git-configration-in-windows/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="windows-git-warning-lf-will-be-replaced-by-crlf-supa-href11asup">Windows git &ldquo;warning: LF will be replaced by CRLF&rdquo; <sup><a href="#1">[1]</a></sup></h2>
<pre><code class="language-bash">git config --global core.autocrlf false
</code></pre>
<h2 id="disable-credential-manager">Disable Credential Manager</h2>
<pre><code class="language-bash">git config --global credential.modalprompt false

git credential-manager remove -force

git credential-manager uninstall --force  
</code></pre>
<h2 id="multi-account-management--supa-href22asup">Multi account management  <sup><a href="#2">[2]</a></sup></h2>
<p>step1: clean globle setting</p>
<pre><code class="language-bash">git config --global --unset user.name
git config --global --unset user.email
</code></pre>
<p>step2： change config file only ssh</p>
<pre><code class="language-bash"></code></pre>
<h2 id="do-not-pop-ups-authtication-supa-href33asup">Do not Pop-ups authtication <sup><a href="#3">[3]</a></sup></h2>
<p>This question is the git shell prompt input user and password in an openssh popup on windows plateform</p>
<pre><code class="language-bash">git config --global core.askPass &quot;&quot;
</code></pre>
<h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://stackoverflow.com/questions/17628305/windows-git-warning-lf-will-be-replaced-by-crlf-is-that-warning-tail-backwar" target="_blank"
   rel="noopener nofollow noreferrer" ><em>Windows git &ldquo;warning: LF will be replaced by CRLF&rdquo;, is that warning tail backward?</em></a></p>
<p><sup id="2">[2]</sup> <a href="https://juejin.cn/post/6912337687366565895" target="_blank"
   rel="noopener nofollow noreferrer" ><em>window下git多账户管理</em></a></p>
<p><sup id="3">[3]</sup> <a href="https://stackoverflow.com/questions/36073859/git-shell-prompts-for-password-in-an-openssh-popup-window" target="_blank"
   rel="noopener nofollow noreferrer" ><em>Git shell prompts for password in an OpenSSH popup window</em></a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>awesome git command</title>
      <link>https://www.oomkill.com/2020/11/awesome-git-command/</link>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2020/11/awesome-git-command/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="tag">Tag</h2>
<table>
<thead>
<tr>
<th>command</th>
<th>describe</th>
</tr>
</thead>
<tbody>
<tr>
<td>git tag</td>
<td>列出所有tag</td>
</tr>
<tr>
<td>git tag -l v1.*</td>
<td>列出符合条件的tag（筛选作用）</td>
</tr>
<tr>
<td>git tag [tag_name]</td>
<td>创建轻量tag（无-m标注信息）</td>
</tr>
<tr>
<td>git push REMOTE TAG</td>
<td>推送一个tag到远端</td>
</tr>
<tr>
<td>git push origin &ndash;tags*</td>
<td>推送所有本地tag到远程</td>
</tr>
<tr>
<td>git push origin :refs/tags/[REMOTE TAG]<br>git push &ndash;delete REMOTE TAG</td>
<td>删除远程指定tag</td>
</tr>
<tr>
<td>git fetch origin [remote_tag_name]</td>
<td>拉取远程指定tag</td>
</tr>
<tr>
<td>git show [tag_name]</td>
<td>显示指定tag详细信息</td>
</tr>
<tr>
<td>git push origin [local_tag_name]</td>
<td>推送指定本地tag到远程</td>
</tr>
<tr>
<td>git tag NEW_TAG OLD_TAG<br>git tag -d OLD_TAG</td>
<td>重命名本地tag</td>
</tr>
<tr>
<td>git tag -d [local_tag_name]</td>
<td>删除本地指定tag</td>
</tr>
<tr>
<td>git ls-remote &ndash;tags origin</td>
<td>查询远程tags</td>
</tr>
<tr>
<td>git tag -a [tag_name]</td>
<td>创建含注解的tag</td>
</tr>
<tr>
<td>git fetch origin [remote_tag_name]<br/>git checkout  [remote_tag_name] <br/>git branch</td>
<td>checkout远端tag到本地</td>
</tr>
</tbody>
</table>
<h2 id="checking">Checking</h2>
<p>检查工作目录与暂存区的状态</p>
<table>
<thead>
<tr>
<th>command</th>
<th style="text-align:left">describe</th>
</tr>
</thead>
<tbody>
<tr>
<td>git status</td>
<td style="text-align:left">查看在你上次提交之后是否有对文件进行再次修改</td>
</tr>
<tr>
<td>git status -s</td>
<td style="text-align:left">获得简短的输出结果</td>
</tr>
<tr>
<td>git diff</td>
<td style="text-align:left">用于比较文件间差异</td>
</tr>
<tr>
<td>git diff &ndash;cached <br>git diff &ndash;staged</td>
<td style="text-align:left">显示<strong>暂存</strong>区(已add但未commit文件)和<strong>最后一次</strong>commit(HEAD)之间的所有不相同文件的增删改</td>
</tr>
<tr>
<td>git diff HEAD</td>
<td style="text-align:left"><strong>工作目录</strong>(已track但未add文件)和<strong>暂存区</strong>(已add但未commit文件)与最后一次commit之间的的所有不相同文件的增删改</td>
</tr>
<tr>
<td>git diff &lt;branch1&gt; &lt;branch2&gt;                          </td>
<td style="text-align:left">比较两个分支上最后 commit 的内容的差别</td>
</tr>
</tbody>
</table>
<h2 id="log">Log</h2>
<table>
<thead>
<tr>
<th>command</th>
<th style="text-align:left">describe</th>
</tr>
</thead>
<tbody>
<tr>
<td>git diff branch1 branch2 &ndash;stat </td>
<td style="text-align:left">显示出所有有差异的文件（无内容）</td>
</tr>
<tr>
<td>git log &lt;b1&gt;..&lt;b2&gt;</td>
<td style="text-align:left">查看 b1 中的 log 比 b2 中的 log 多提交了哪些内容</td>
</tr>
<tr>
<td>git log &ndash;oneline</td>
<td style="text-align:left">以 &lt;commit_id&gt;  &lt;comment&gt; 为一行来显示</td>
</tr>
<tr>
<td>git log -S &lt;&lsquo;LoginViewController&rsquo;&gt;</td>
<td style="text-align:left">log 的输出将添加火删除对应字符串</td>
</tr>
<tr>
<td>git log &ndash;all &ndash;grep=&lt;&lsquo;0117&rsquo;&gt;</td>
<td style="text-align:left">log 的输出将过滤出与对应字符串相关的commit</td>
</tr>
</tbody>
</table>
<h2 id="checkout">Checkout</h2>
<p>checkout 是指不同tag或分支间的切换行为</p>
<table>
<thead>
<tr>
<th>command</th>
<th style="text-align:left">describe</th>
</tr>
</thead>
<tbody>
<tr>
<td>git checkout TAG</td>
<td style="text-align:left">切换至一个tag</td>
</tr>
<tr>
<td>git checkout -b BRANCH TAG</td>
<td style="text-align:left">创建一个新分支，并切换至这个tag</td>
</tr>
<tr>
<td>git checkout BRANCH</td>
<td style="text-align:left">切换至一个分支</td>
</tr>
<tr>
<td>git checkout -m BRANCH</td>
<td style="text-align:left">在切换分支时如有冲突则合并</td>
</tr>
<tr>
<td>git checkout COMMIT_HASH</td>
<td style="text-align:left">切换至一个commit</td>
</tr>
<tr>
<td>git checkout -b BRANCH HEAD~4 <br>git checkout -b BRANCH COMMIT_HASH</td>
<td style="text-align:left">切换并创建为新分支</td>
</tr>
<tr>
<td>git checkout COMMIT &ndash; FILE_PATH          </td>
<td style="text-align:left">将 FILE_PATH 指定的文件恢复为当前分支的最新版本（仅未add）</td>
</tr>
</tbody>
</table>
<h2 id="remote">Remote</h2>
<p>remote 子命令用于管理repositories</p>
<table>
<thead>
<tr>
<th>command</th>
<th style="text-align:left">describe</th>
</tr>
</thead>
<tbody>
<tr>
<td>git remote</td>
<td style="text-align:left">List all remote</td>
</tr>
<tr>
<td>git remote rename OLD_REMOTE NEW_REMOTE</td>
<td style="text-align:left">Rename remote</td>
</tr>
<tr>
<td>git remote prune REMOTE</td>
<td style="text-align:left">Remove stale remote tracking branches</td>
</tr>
</tbody>
</table>
<h2 id="branch">Branch</h2>
<p>branch 用于管理分支</p>
<table>
<thead>
<tr>
<th>command</th>
<th style="text-align:left">describe</th>
</tr>
</thead>
<tbody>
<tr>
<td>git branch</td>
<td style="text-align:left">List all branches</td>
</tr>
<tr>
<td>git checkout -b BRANCH</td>
<td style="text-align:left">Create the branch on your local machine and switch in this branch</td>
</tr>
<tr>
<td>git branch BRANCH COMMIT_HASH    </td>
<td style="text-align:left">Create branch from commit</td>
</tr>
<tr>
<td>git push REMOTE BRANCH</td>
<td style="text-align:left">Push the branch to remote</td>
</tr>
<tr>
<td>git branch -m OLD_BRANCH NEW_BRANCH      </td>
<td style="text-align:left">Rename other branch</td>
</tr>
<tr>
<td>git branch -m NEW_BRANCH</td>
<td style="text-align:left">Rename current branch</td>
</tr>
<tr>
<td><em># Rename branch locally</em><br>git branch -m OLD_BRANCH NEW_BRANCH <br><br/><em># Delete the old branch</em><br>git push origin :OLD_BRANCH<br><br><em># Push the new branch, set local branch to track the new remote</em><br>git push &ndash;set-upstream REMOTE NEW_BRANCH</td>
<td style="text-align:left">Rename remote branch</td>
</tr>
<tr>
<td>git branch -D BRANCH<br>git push REMOTE :BRANCH</td>
<td style="text-align:left">Delete a branch locally and remote</td>
</tr>
<tr>
<td>git branch | grep -v &ldquo;master&rdquo; | xargs git branch -D</td>
<td style="text-align:left">Delete all local branches but master</td>
</tr>
</tbody>
</table>
<h2 id="commit">Commit</h2>
<p>Record changes to the repository</p>
<table>
<thead>
<tr>
<th>command</th>
<th style="text-align:left">describe</th>
</tr>
</thead>
<tbody>
<tr>
<td>git reset &ndash;hard HEAD~1</td>
<td style="text-align:left">Undo last commit</td>
</tr>
<tr>
<td>git rebase -i HEAD~5<br>git reset &ndash;soft HEAD~5<br>git add .<br>git commit -m &ldquo;Update&rdquo;<br>git push -f origin master</td>
<td style="text-align:left">Squash last n commits into one commit</td>
</tr>
<tr>
<td>git branch newbranch<br><br><em># Go back 3 commits. You will lose uncommitted work.1</em><br>git reset &ndash;hard HEAD~3<br><br/>git checkout newbranch</td>
<td style="text-align:left">Move last commits into new branch:</td>
</tr>
<tr>
<td>git rebase -i HEAD^^^<br>git add .<br>git rebase &ndash;continue</td>
<td style="text-align:left">Make changes to older commit</td>
</tr>
</tbody>
</table>
<h2 id="merge">Merge</h2>
<p>Join two or more development histories together</p>
<table>
<thead>
<tr>
<th>command</th>
<th style="text-align:left">describe</th>
</tr>
</thead>
<tbody>
<tr>
<td>git checkout BRANCH<br>git merge &ndash;no-ff BASE_BRANCH</td>
<td style="text-align:left">Merge commits from master into feature branch</td>
</tr>
<tr>
<td>git merge BRANCH</td>
<td style="text-align:left">Current branch merge to BRANCH branch</td>
</tr>
<tr>
<td>git merge -m  “Merge from Dev”</td>
<td style="text-align:left">When merge branch add comment</td>
</tr>
<tr>
<td>git merge -s ours obsolete</td>
<td style="text-align:left">Merge obsolete branch to current branch using ours policy</td>
</tr>
<tr>
<td>git merge &ndash;no-commit maint</td>
<td style="text-align:left">Merge maint branch to current, than do not make new comment</td>
</tr>
</tbody>
</table>
<h2 id="cherry-pick">Cherry Pick</h2>
<p>Apply the changes introduced by some existing commits</p>
<pre><code class="language-bash">git cherry-pick COMMIT_HASH_A COMMIT_HASH_B
</code></pre>
<h2 id="revert">Revert</h2>
<table>
<thead>
<tr>
<th>command</th>
<th style="text-align:left">describe</th>
</tr>
</thead>
<tbody>
<tr>
<td>git revert HEAD</td>
<td style="text-align:left">Revert the previous commit</td>
</tr>
<tr>
<td>git revert &ndash;no-commit HEAD~3..</td>
<td style="text-align:left">Revert the changes from previous 3 commits without making commit</td>
</tr>
</tbody>
</table>
<h2 id="amend">Amend</h2>
<table>
<thead>
<tr>
<th>command</th>
<th style="text-align:left">describe</th>
</tr>
</thead>
<tbody>
<tr>
<td>git commit &ndash;amend</td>
<td style="text-align:left">Amend previous commit</td>
</tr>
<tr>
<td>git commit &ndash;amend &ndash;no-edit</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>git commit &ndash;amend -m &ldquo;COMMIT_MESSAGE&rdquo;</td>
<td style="text-align:left">Changing git commit message</td>
</tr>
<tr>
<td>git commit &ndash;amend -m &ldquo;COMMIT_MESSAGE&rdquo;<br>git push &ndash;force REMOTE BRANCH</td>
<td style="text-align:left">Changing git commit message after push</td>
</tr>
</tbody>
</table>
<h2 id="reflog">Reflog</h2>
<p>reference log</p>
<table>
<thead>
<tr>
<th>command</th>
<th style="text-align:left">describe</th>
</tr>
</thead>
<tbody>
<tr>
<td>git reflog</td>
<td style="text-align:left">Show reflog</td>
</tr>
<tr>
<td></td>
<td style="text-align:left">Get commit</td>
</tr>
</tbody>
</table>
<h2 id="rebase">Rebase</h2>
<p>Rebase the current branch onto another branch</p>
<table>
<thead>
<tr>
<th>command</th>
<th style="text-align:left">describe</th>
</tr>
</thead>
<tbody>
<tr>
<td>git rebase BASE_BRANCH</td>
<td style="text-align:left">Rebase the current branch onto another branch</td>
</tr>
<tr>
<td>git rebase &ndash;continue</td>
<td style="text-align:left">Continue rebase</td>
</tr>
<tr>
<td>git rebase &ndash;abort</td>
<td style="text-align:left">Abort rebase</td>
</tr>
</tbody>
</table>
<h1 id="tracking">Tracking</h1>
<table>
<thead>
<tr>
<th>command</th>
<th style="text-align:left">describe</th>
</tr>
</thead>
<tbody>
<tr>
<td>git clean</td>
<td style="text-align:left">Remove untracked files</td>
</tr>
<tr>
<td>git reset FILE_PATH</td>
<td style="text-align:left">Remove file from index</td>
</tr>
<tr>
<td>git reset</td>
<td style="text-align:left">Reset the index to match the most recent commit</td>
</tr>
<tr>
<td>git reset &ndash;hard</td>
<td style="text-align:left">Reset the index and the working directory to match the most recent commit</td>
</tr>
<tr>
<td>git rm file</td>
<td style="text-align:left">Remove files from the working tree and from the index</td>
</tr>
<tr>
<td>git ls-files</td>
<td style="text-align:left">Show information about files in the index and the working tree</td>
</tr>
<tr>
<td>git ls-files -d</td>
<td style="text-align:left">Show deleted files in the output.</td>
</tr>
<tr>
<td>git ls-files -m</td>
<td style="text-align:left">Show modified files in the output.</td>
</tr>
<tr>
<td>git ls-files -i</td>
<td style="text-align:left">Show only ignored files in the output.</td>
</tr>
<tr>
<td>git ls-files &ndash;no-empty-directory</td>
<td style="text-align:left">Do not list empty directories. Has no effect without &ndash;directory.</td>
</tr>
</tbody>
</table>
<h2 id="config">Config</h2>
<table>
<thead>
<tr>
<th>command</th>
<th style="text-align:left">describe</th>
</tr>
</thead>
<tbody>
<tr>
<td>git config -l</td>
<td style="text-align:left">list all git config</td>
</tr>
<tr>
<td>git config &ndash;global [key] &ldquo;[value]&rdquo;</td>
<td style="text-align:left">set global configuation</td>
</tr>
<tr>
<td>git config [key] &ldquo;[value]&rdquo;</td>
<td style="text-align:left">set current repositories configuation</td>
</tr>
</tbody>
</table>
<blockquote>
<p><em><strong>Reference</strong></em>：</p>
<p><a href="https://github.com/onmyway133/awesome-git-commands" target="_blank"
   rel="noopener nofollow noreferrer" >awesome-git-commands</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
