<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>eBPF on Cylon&#39;s Collection</title>
    <link>https://www.oomkill.com/categories/ebpf/</link>
    <description>Recent content in eBPF on Cylon&#39;s Collection</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 02 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.oomkill.com/categories/ebpf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>科普ebpf</title>
      <link>https://www.oomkill.com/2022/10/what-is-ebpf/</link>
      <pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/10/what-is-ebpf/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="ebpf介绍">eBPF介绍</h2>
<p>eBPF是 <em><strong>Extended Berkeley Packet Filter</strong></em>，主要是用于包过滤的。为什么叫<em><strong>Berkeley Packet Filter</strong></em> 是因为论文出自 <em><strong>Lawrence Berkeley Laboratory</strong></em>（相对的论文可以<a href="https://www.tcpdump.org/papers/bpf-usenix93.pdf" target="_blank"
   rel="noopener nofollow noreferrer" >参考</a> <sup><a href="#1">[1]</a></sup>）。“<em><strong>E</strong></em>&quot; 是使BPF不仅仅是包过滤。</p>
<p><em><strong>eBPF</strong></em> 目前提供的功能不仅仅是包过滤，它是一个允许用户在操作系统内核加载自定义程序的框架，来自于 ”What Is eBPF?“</p>
<blockquote>
<p>eBPF is a framework that allows users to load and run custom programs within the kernel of the operating system. That means it can extend or even modify the way the kernel behaves. <sup><a href="#2">[2]</a></sup></p>
</blockquote>
<p>eBPF验证器</p>
<p>对于如果想改变Linux内核功能需要合并代码到内核或者编写内核模块。前者需要被社区接受，这需要很长一个周期；而后者可以很好的扩展内核功能，但都存在一个问题 ”==安全运行==“</p>
<p>”安全运行“ 问题包含”漏洞“和“崩溃”，考虑到这些，eBPF为安全运行提供了一个非常不同的方法**：<em>eBPF verifier</em>** ，<em><strong>eBPF verifier</strong></em> 将确保应用只能够在安全情况下被运行。</p>
<p><em><strong>eBPF verifier</strong></em> 保证了 eBPF 程序运行的 ”安全“ 和 ”验证“</p>
<p>”验证“ (Verification) 是指对程序进行分析，确保无论输入时什么，都会在有限的之阵内终止。例如在解除指针时，确保指针不是空置，解除对指针引用意味着将会 “查找这个地址的值”，解引用空置，会程序崩溃，而在内核中空指针会引起整个机器崩溃。</p>
<p>”安全“ (Security)是指将确保eBPF程序运行时安全的，这种场景将限制eBPF访问的内存为只能被访问的内存。例如，有一个 eBPF 程序出发在一个网络stack上，并通过内核的<strong>socket buffer</strong>，包括正在传输的数据。这里有一些特殊的辅助函数，例如 <code>bpf_skb_load_bytes()</code>，这个 eBPF 程序可以从套接字缓冲区中读取字节数据。与此同时，另一个由系统调用触发的 eBPF 程序，没有可用的套接字缓冲区，将不允许使用这个辅助函数（what is eBPF chapter2 <sup><a href="#2">[2]</a></sup>）。</p>
<p>eBPF的动态加载</p>
<p>上面也提到了eBPF是一个允许用户自定义程序加载内核功能的框架，也就意味着使用内核无需对内核代码的改变，<em>what is eBPF chapter2</em> 中提到的eBPF动态加载，可以理解为触发器与事件，eBFP可以使程序可以动态地加载到内核中和从内核中删除。当附加到事件上的程序遇到对应事件时就会被触发。</p>
<p>eBPF程序</p>
<p>eBPF是事件驱动型程序，它允许在内核中，并挂在到对应的挂载点上，当发生系统调用，函数的进入/退出，内核tracepoints，网络事件等发生，将触发对应程序的操作。</p>
<p>eBPF包含两部分，eBPF程序，eBPF工具</p>
<p>eBPF程序，只运行在内核空间内的代码，这部分仅可以用C或者Rust编写，目前eBPF使用的C语言编写</p>
<p>eBPF工具，是指运行在用户空间内的代码，这部分可以使用任意编程语言编写，例如Python, Go, C 等。</p>
<p>探针</p>
<p>探针 (<em><strong>probes</strong></em>) 是指内核定义的扩展点，可以通过eBPF程序将其附加到对应的扩展点上。常用的有<code>kprobe</code> 与 <code>uprobe</code></p>
<ul>
<li><code>kprobe</code> 是跟踪内核函数调用的探针（k是kernel的前缀），例如 <code>execve()</code></li>
<li><code>kprobe</code> 是跟踪用户空间程序调用的探针，例如对运行程序 <code>nginx</code> 状态的跟踪</li>
</ul>
<p>程序的加载</p>
<p>用户空间的程序在 eBPF验证器的允许下，可以使用 <code>bpf()</code> 系统调用从 ELF 文件中加载 eBPF程序到内核中；一旦将程序加载到内核时，就必须绑定到对应的 ”事件“ 上，每当事件发生时，对应的eBPF程序就会被触发。下面宝海一些常用的事件：</p>
<ul>
<li>函数的进入进出</li>
<li>Tracepoints，是Linux内核中定义的一些hook可以将 eBPF 程序附加到内核内定义的 <code>tracepoints</code> 中</li>
<li>Perf 是一个收集性能数据的子系统。可以将 eBPF 程序挂到所有收集 perf 数据的地方</li>
<li>Linux的安全模块 <em><strong>LSM</strong></em> 例如 <em><strong>SELinux</strong></em> 和 <em><strong>APPAmor</strong></em> 使用他们的接口，通过eBPF，可以将程序附加到对应的检查点上。</li>
<li>网络接口，<em><strong>eXpress Data Path</strong></em> (XDP) 允许将eBPF程序附加到网络接口上，当收到包时，会触发对应的事件，事件可以检查或者改变一个数据包。</li>
<li>套接字和网络钩子，当应用程序在网络套接字上打开或执行其他操作时，以及发出或收到数据包时，你可以附加运行eBPF程序。在内核网络stack中也被叫做 <em><strong>traffic control</strong></em> (TC)。</li>
</ul>
<p>eBPF MAP</p>
<p>在一些情况下，我们希望eBPF是从用户空间的应用来接收信息，或者将数据传递给用户空间的应用，允许eBPF程序与用户空间之间传递数据，或者不同的eBPF程序间传递数据的机制被称为 <em><strong>MAP</strong></em></p>
<p><em><strong>MAP</strong></em> 是数据类型，本质上是一个 <code>key-value</code> 的存储，用于存储不同类型数据的通用数据结构。允许不同eBPF程序之间以及内核和用户空间应用程序之间共享数据。</p>
<p>MAP用途：</p>
<ul>
<li>存储数据，供多eBPF程序信息协调</li>
<li>eBPF写入事件或指标供用户空间程序检索</li>
<li>用户空间配置，供eBPF程序读取并作出相应行为</li>
</ul>
<h2 id="ebpf在云原生">eBPF在云原生</h2>
<p>在kubernetes中，运行在机器上的Pod共享一个内核，可以通过eBPF检测该机器上运行的应用程序，将eBPF加载到内核并附加到事件之上，就会触发相关事件，而不需要考虑进程与事件的关系。</p>
<p>eBPF 与 sidecar</p>
<p>传统的可观测性应用都使用了 <em><strong>sidecar</strong></em> 方式进行部署的，这种模式是单独部署一个与应用相同的程序到pod中。</p>
<p><em><strong>sidecar</strong></em>  模式的两大缺点：</p>
<ul>
<li>浪费资源**：<em>sidecar</em>** 容器都会消耗大量资源，取决于注入的数量</li>
<li>安全运行：不能确保每个运行的Pod都被注入</li>
</ul>
<p>eBPF的隔离</p>
<p>eBPF 检查器可以确保 eBPF 程序只能访问它有权限的内存。检查器检查程序时不可能超出其职权范围，包括确保内存为当前进程所拥有或为当前网络包的一部分。这意味着 eBPF 代码比它周围的内核代码受到更严格的控制，内核代码不需要通过任何类型的检查器。当遇到攻击者通过容器化的应用程序部署到节点上，并且可以提权，那么该攻击程序就可以危害到同一节点上的其他应用程序。当然eBPF检查器可以避免这个问题。</p>
<p>eBPF的应用</p>
<p>eBPF 官网 ebpf.io 中介绍，在通常情况下eBPF不会被单独使用而是通过其他项目在eBPF之上提供一个用户空间工具进行使用，例如 Cilium, bcc等。</p>
<p>eBPF工具</p>
<p>通常情况下eBPF工具都是围绕 网络(<em><strong>networking</strong></em>) ，可观测性(<em><strong>observability</strong></em>) ，安全 (<em><strong>security</strong></em>） 这三个重要方面使用eBPF功能的。</p>
<p>eBPF程序可以连接到网络接口和内核的网络堆栈的各个点（可以通过tracepoint实现）。在每个追踪点上，eBPF程序都可以选择接收/丢弃/操作数据包。基于这个条件下eBPF就可以实现很强大的网络功能，常见的eBPF 实现的网络功能有 负载均衡，分布式防火墙，cni。</p>
<ul>
<li>Katran L4 LoadBalancer, facebook开源的4层负载均衡器，使用的eBPF与C++结合的技术</li>
<li>Cilium eBPF Kubernetes 网络插件</li>
</ul>
<p>eBPF Tools</p>
<p>BCC</p>
<p>BCC (<em><strong>BPF Compiler Collection</strong></em>)  是一组基于eBPF技术用于分析操作系统和网络性能的一组工具。主要提供了以下功能</p>
<ul>
<li>用于观测/追踪 在运行的Linux系统状态工具</li>
<li>对于</li>
</ul>
<h2 id="如何编写ebpf程序">如何编写eBPF程序</h2>
<p>eBPF 程序可以用受限的 C 来编写，使用 <code>clang</code> 编译器编译成 eBPF 字节码。</p>
<blockquote>
<p>Notes: 受限 C 语言是指省略了一些特性，例如循环，全局变量，可变参数函数，浮点数以及作为函数参数传递的结构。</p>
</blockquote>
<p>Go使用 <code>libbpfgo</code> 会包装 <code>libbpf</code> （一个C语言实现的系统调用库） 的系统调用 <code>BPF()</code> 函数，通过加载BPF对象（是通过C语言编写的BPF函数）然后绑定到对应的事件上。</p>
<p>eBPF程序必须使用C编写，通过clang编译为BPF code，然后Go/Python等代码去读取这个文件 <code>xxx.o</code> 将其插入到内核中。所以通常情况下，我们会看到是一个Go/Python或者其他语言来包裹C代码来运行的。</p>
<p>一个eBPF程序的结构如下图所示，包含两部分，在用户空间运行的应用程序与运行在内核空间的eBPF程序，用户空间的应用通过系统调用 <code>BPF()</code> 来调用运行在内核空间内的eBPF程序的函数。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220905214855458.png" alt="image-20220905214855458" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<center>图：eBPF program structure</center>
<center><em>Source：</em>https://files.gotocon.com/uploads/slides/conference_39/1688/original/Beginners%20guide%20to%20eBPF%20with%20Go.pdf</center><br>
<p>eBPF的加载过程如下图所示</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220905214046687.png" alt="image-20220905214046687" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<center>图：eBPF program loading flow</center>
<center><em>Source：</em>https://files.gotocon.com/uploads/slides/conference_39/1688/original/Beginners%20guide%20to%20eBPF%20with%20Go.pdf</center><br>
<p>一个 eBPF obj 代码在用户空间通过 <code>bpf()</code> 系统调用加载到内核中；在内核中首先需要验证器确保eBPF程序是可以安全运行的，如果可以安全运行，将开始在BPF 虚拟机中开始运行</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220905214108075.png" alt="image-20220905214108075" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<center>图：eBPF program lifetime</center>
<center><em>Source：</em>https://files.gotocon.com/uploads/slides/conference_39/1688/original/Beginners%20guide%20to%20eBPF%20with%20Go.pdf</center><br>
<p><a href="https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md#data" target="_blank"
   rel="noopener nofollow noreferrer" >https://github.com/iovisor/bcc/blob/master/docs/reference_guide.md#data</a></p>
<p><a href="https://man7.org/linux/man-pages/man7/bpf-helpers.7.html" target="_blank"
   rel="noopener nofollow noreferrer" >https://man7.org/linux/man-pages/man7/bpf-helpers.7.html</a></p>
<p><a href="https://gitlab.epfl.ch/debeule/bpf/-/blob/master/LOG.md" target="_blank"
   rel="noopener nofollow noreferrer" >https://gitlab.epfl.ch/debeule/bpf/-/blob/master/LOG.md</a></p>
<p><a href="https://github.com/lizrice/learning-ebpf/blob/main/chapter5/hello.bpf.c" target="_blank"
   rel="noopener nofollow noreferrer" >https://github.com/lizrice/learning-ebpf/blob/main/chapter5/hello.bpf.c</a></p>
<p><a href="https://medium.com/@phylake/bottom-up-ebpf-d7ca9cbe8321" target="_blank"
   rel="noopener nofollow noreferrer" >https://medium.com/@phylake/bottom-up-ebpf-d7ca9cbe8321</a></p>
<h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://www.tcpdump.org/papers/bpf-usenix93.pdf" target="_blank"
   rel="noopener nofollow noreferrer" >The BSD Packet Filter</a></p>
<p><sup id="2">[2]</sup> <a href="https://isovalent.com/data/liz-rice-what-is-ebpf.pdf" target="_blank"
   rel="noopener nofollow noreferrer" >What Is eBPF?</a></p>
<p><sup id="3">[3]</sup> <a href="https://ebpf.io/what-is-ebpf/#how-are-ebpf-programs-written" target="_blank"
   rel="noopener nofollow noreferrer" >how are ebpf programs written</a></p>
</blockquote>
<p><a href="https://www.youtube.com/watch?v=uBqRv8bDroc" target="_blank"
   rel="noopener nofollow noreferrer" >https://www.youtube.com/watch?v=uBqRv8bDroc</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
