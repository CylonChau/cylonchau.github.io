<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>cicd on Cylon&#39;s Collection</title>
    <link>https://www.oomkill.com/categories/cicd/</link>
    <description>Recent content in cicd on Cylon&#39;s Collection</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 13 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.oomkill.com/categories/cicd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Spinnaker进行金丝雀分析</title>
      <link>https://www.oomkill.com/2023/12/04-spinnaker-canary/</link>
      <pubDate>Wed, 13 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/12/04-spinnaker-canary/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>2018 年，Kayenta（一种用于自动化金丝雀分析的开源工具）作为 Spinnaker 项目的一部分推出。在本文中，我们描述了如何将 Kayenta 集成到我们现有的部署设施中，极大地提高了部署管道的可靠性并为自动化生产部署创造了先决条件。</p>
<h2 id="概念理解">概念理解</h2>
<h3 id="什么是金丝雀分析">什么是金丝雀分析？</h3>
<p><strong>金丝雀分析</strong> (<em>canary analysis</em>) 是一个两步的过程，分析将根据选定的指标和日志评估金丝雀，<font color="#f8070d" size=3>以推断我们是否要升级或回滚新版本</font>。因此，我们需要确保在测试过程中收集正确的信息（指标和日志）并进行可靠的分析。</p>
<h3 id="金丝雀分析的执行步骤">金丝雀分析的执行步骤</h3>
<ul>
<li>指标选择</li>
<li>指标评估</li>
</ul>
<h3 id="指标选择"><strong>指标选择</strong></h3>
<p>该步骤涉及选择正确的指标来监控应用程序和金丝雀健康状况。因此我们需要确保创建一套平衡的指标来评估指标。最后，需要根据彼此的相关性对指标进行分组。</p>
<p>对于指标的选择，根本不需要选择所有指标，因为目前流行的基于微服务的应用程序通常会生成大量监控指标数据，因此我们不能简单地分析所有指标。</p>
<h3 id="指标评估标准"><strong>指标评估标准</strong></h3>
<h4 id="选择重要的业务指标"><strong>选择重要的业务指标</strong></h4>
<p>最重要的指标是值对 可以反应服务 “成功/失败” 最重要的指标。例如，在在线购物结帐系统中，一定要测量每分钟的交易次数、失败率等。如果这些指标中的任何一个超出基线，您可能会决定回滚金丝雀。再例如，可以检测服务的数据库连接状态，初始化状态等指标，一旦指标超出基线则表示服务异常，这时候需要回滚。</p>
<h4 id="平衡一组慢速与快速指标">平衡一组慢速与快速指标</h4>
<p>一个有意义的金丝雀流程来说，单个指标是不够的。一些要监控的重要指标是立即生成的，而另一些则需要一些时间才能生成，因为它们依赖于负载，网络流量，高内存使用率或其他因素。在快速指标和慢速指标之间平衡您选择的指标非常重要。例如，服务器查询时间和延迟检查可以分别是慢度量和快度量的示例。因此选择一组平衡的指标，是对金丝雀的健康状况有全面的了解。</p>
<h4 id="冒烟测试"><strong>冒烟测试</strong></h4>
<p>从平衡组测试中，我们必须确保我们拥有直接表明金丝雀中存在问题的指标。所以冒烟测试很适合在这里使用，尽管我们的目标是找出金丝雀的健康状况，但使用此类指标找出金丝雀是否存在潜在问题也同样重要。例如，404 响应或其他意外的 HTTP 返回代码（200 秒、300 秒）可能意味着您的测试应立即停止并进行调试。CPU 使用率、内存占用、HTTP 响应码（200 秒、300 秒等）、响应延迟、正确性是一组很好的指标，但 HTTP 返回代码和响应延迟表明影响用户和服务的实际问题。</p>
<h4 id="metrics-标准范围">metrics 标准范围</h4>
<p>这些公制选择需要有一个可接受的发挥范围，通过商定的可接受的指标行为，这样将能够消除那些被错误评估为好金丝雀的坏金丝雀。</p>
<h3 id="金丝雀判断">金丝雀判断</h3>
<p>执行金丝雀分析的最后一步是评估指标的值。通过这个步骤，将能够评估金丝雀实例是否应该升级到生产环境。</p>
<p>在提出每个假设之前，我们将定义两个假设，并根据我们的数据证明其中一个假设是错误的。</p>
<ul>
<li>Unacceptable：回滚</li>
<li>Acceptable：部署到生产</li>
</ul>
<p>Kayenta 比较两个时间序列，并在偏差超过某个阈值时发出警报。作为这些应用程序指标的来源，我们使用 New Relic Insights。对于这个后端，我们还将代码作为开源代码贡献给<a href="https://github.com/spinnaker/kayenta">Kayenta</a> ³。还可以支持其他后端（Datadog、Prometheus 等）。有关自动金丝雀分析的一般信息，请参阅<a href="https://cloud.google.com/blog/products/gcp/introducing-kayenta-an-open-automated-canary-analysis-tool-from-google-and-netflix">Google</a>和<a href="https://medium.com/netflix-techblog/automated-canary-analysis-at-netflix-with-kayenta-3260bc7acc69">Netflix</a>的优秀文章。</p>
<h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://spinnaker.io/docs/setup/install/halyard/#install-halyard-on-docker">Install Halyard on Docker</a></p>
<p><sup id="2">[2]</sup> <a href="https://github.com/spinnaker/spinnaker/issues/3920">ERROR Could not load &ldquo;versions.yml&rdquo; from config bucket: 403 #3920</a></p>
<p><sup id="3">[3]</sup> <a href="https://stackoverflow.com/questions/54947839/spinnaker-how-to-bring-custom-boms-into-spinnaker-pod-to-be-able-to-deploy-it-w">Spinnaker: How to bring custom boms into spinnaker pod to be able to deploy it with hal?</a></p>
<p><sup id="4">[4]</sup> <a href="https://min.io/docs/minio/kubernetes/upstream/index.html#procedure">MinIO Object Storage for Kubernetes</a></p>
<p><sup id="5">[5]</sup> <a href="https://spinnaker.io/docs/guides/operator/custom-boms/#boms-and-configuration-on-your-filesystem">BOMs and Configuration on your Filesystem</a></p>
<p><sup id="6">[6]</sup> <a href="https://github.com/spinnaker/spinnaker/issues/5875">! ERROR No persistent storage type was configured.  #5875</a></p>
<p><sup id="7">[7]</sup> <a href="https://kimmj.github.io/spinnaker/installation/install-in-air-gaped-environment/">Install in Air Gaped Environment</a></p>
<p><sup id="8">[8]</sup> <a href="https://spinnaker.io/docs/setup/install/faq/#i-cant-load-the-applications-screen">I can’t load the Applications screen</a></p>
<p><sup id="9">[9]</sup> <a href="https://github.com/spinnaker/spinnaker/issues/4689">use k8s cluster private, how to access? not use localhost! #4689</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>初识Argo cd - 注册/删除k8s集群</title>
      <link>https://www.oomkill.com/2023/11/ch03-argo-add-cluster/</link>
      <pubDate>Sun, 05 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/11/ch03-argo-add-cluster/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="登录argo-cd">登录argo cd</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">argocd login argocd_server:argocd_port_here
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行后输入admin/sercert</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ argocd login 10.0.0.5:30908
</span></span><span class="line"><span class="cl">WARNING: server certificate had error: x509: cannot validate certificate <span class="k">for</span> 10.0.0.5 because it doesn<span class="s1">&#39;t contain any IP SANs. Proceed insecurely (y/n)? y
</span></span></span><span class="line"><span class="cl"><span class="s1">Username: admin
</span></span></span><span class="line"><span class="cl"><span class="s1">Password: 
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;</span>admin:login<span class="s1">&#39; logged in successfully
</span></span></span><span class="line"><span class="cl"><span class="s1">Context &#39;</span>10.0.0.5:30908<span class="err">&#39;</span> updated
</span></span></code></pre></td></tr></table>
</div>
</div><p>argocd cli 登录后的文件保存在 <code>~/.argocd/config</code> 中</p>
<h2 id="注册一个新集群">注册一个新集群</h2>
<p>argocd 通过 <em>kubectl</em> 来获取集群的信息，所以 argocd 的主机上必须有 kubeconfig 文件</p>
<blockquote>
<p>Note: KUBECONFIG 文件地址必须为实际路径，比如 ~/ 这种方式不可以</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">KUBECONFIG</span><span class="o">=</span><span class="s2">&#34;/root/admin.conf&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>从 kubeconfig 中提取当前集群的上下文名称</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl config get-contexts -o name
</span></span></code></pre></td></tr></table>
</div>
</div><p>向 argo 添加 kubernetes 集群</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ argocd cluster add k8s-admin@kubernetes
</span></span><span class="line"><span class="cl">INFO<span class="o">[</span>0000<span class="o">]</span> ServiceAccount <span class="s2">&#34;argocd-manager&#34;</span> created in namespace <span class="s2">&#34;kube-system&#34;</span> 
</span></span><span class="line"><span class="cl">INFO<span class="o">[</span>0000<span class="o">]</span> ClusterRole <span class="s2">&#34;argocd-manager-role&#34;</span> created    
</span></span><span class="line"><span class="cl">INFO<span class="o">[</span>0000<span class="o">]</span> ClusterRoleBinding <span class="s2">&#34;argocd-manager-role-binding&#34;</span> created 
</span></span><span class="line"><span class="cl">Cluster <span class="s1">&#39;https://10.0.0.4:6443&#39;</span> added
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在可以执行 argocd 命令来列出 argo 中的所有集群，这是为了验证 argocd-cluster 是否已成功添加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ argocd cluster list
</span></span><span class="line"><span class="cl">SERVER                          NAME                  VERSION  STATUS   MESSAGE
</span></span><span class="line"><span class="cl">https://10.0.0.4:6443           k8s-admin@kubernetes           Unknown  Cluster has no application and not being monitored.
</span></span><span class="line"><span class="cl">https://kubernetes.default.svc  in-cluster                     Unknown  Cluster has no application and not being monitored.
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="删除一个集群">删除一个集群</h2>
<p>命令 <code>argocd cluster rm </code> 用于从 argo server 中移除一个集群，例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">argocd cluster rm https://12.34.567.89
</span></span><span class="line"><span class="cl">argocd cluster rm cluster-name
</span></span></code></pre></td></tr></table>
</div>
</div><p>需要注意的是 <em>in-cluster</em> 集群是 argo 运行的集群，不能够被删除，如果不使用这个集群，需要修改配置 <code>cluster.inClusterEnabled</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># cluster.inClusterEnabled indicates whether to allow in-cluster server address. This is enabled by default.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">cluster.inClusterEnabled</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;true&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这个配置是在 argocd-cm 中保存的，可以在对应的 configMap 中添加，完整的 argocd 配置见附录1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl get cm argocd-cm -o yaml
</span></span><span class="line"><span class="cl">apiVersion: v1
</span></span><span class="line"><span class="cl">data:
</span></span><span class="line"><span class="cl">  cluster.inClusterEnabled: <span class="s2">&#34;false&#34;</span>
</span></span><span class="line"><span class="cl">kind: ConfigMap
</span></span><span class="line"><span class="cl">metadata:
</span></span><span class="line"><span class="cl">  labels:
</span></span><span class="line"><span class="cl">    app.kubernetes.io/name: argocd-cm
</span></span><span class="line"><span class="cl">    app.kubernetes.io/part-of: argocd
</span></span><span class="line"><span class="cl">  name: argocd-cm
</span></span><span class="line"><span class="cl">  namespace: default
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="reference">Reference</h2>
<p><sup id="1">[1]</sup> <a href="https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml">docs/operator-manual/argocd-cm.yaml</a></p>
<p><sup id="2">[2]</sup> <a href="https://www.opsmx.com/blog/getting-started-with-multi-cluster-k8s-deployments-using-argo-cd/">Getting started with multi-cluster K8S deployments using Argo CD</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>深入Argo - Application resources</title>
      <link>https://www.oomkill.com/2023/11/ch04-application/</link>
      <pubDate>Sun, 05 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/11/ch04-application/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>在安装和注册集群完成后，就需要引入第一个概念 “Application”（如何管理所有我的应用程序？）</p>
<h2 id="什么是-application">什么是 Application</h2>
<p>什么是 ArgoCD “Application”？ 对于 ArgoCD “Application”的快速解释：它是托管 ArgoCD 部署的 Kubernetes 集群 CRD 包含了应用程序的所有设置，如：</p>
<ul>
<li>要部署到哪个集群？</li>
<li>与哪个 Git 存储库进行同步？</li>
<li>其他部署设置</li>
<li></li>
</ul>
<p>应用程序的 YAML 包含了部署您的存储库资源所需的所有信息，充当了在 ArgoCD 中管理应用程序的关键控制点。</p>
<h2 id="reference">Reference</h2>
<p><sup id="1">[1]</sup> <a href="https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml">docs/operator-manual/argocd-cm.yaml</a></p>
<p><sup id="2">[2]</sup> <a href="https://www.opsmx.com/blog/getting-started-with-multi-cluster-k8s-deployments-using-argo-cd/">Getting started with multi-cluster K8S deployments using Argo CD</a></p>
<p><sup id="3">[3]</sup> <a href="https://medium.com/notive/managing-argocd-application-resources-1b2b4742ab90">https://medium.com/notive/managing-argocd-application-resources-1b2b4742ab90</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>初识Argo cd - 在k8s集群上安装argo cd</title>
      <link>https://www.oomkill.com/2023/10/argo-installtion/</link>
      <pubDate>Tue, 24 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/10/argo-installtion/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>GitOps 最初由 Weaveworks (weave cni的组织) 在 2017 年的博客中提出  <sup><a href="#1">[1]</a></sup>，使用 “Git” 作为 CI/CD 的 “单一事实来源”，将代码的更改集成到每个项目的存储库中，并使用拉取请求来管理 infra 和部署。 在理解上就可以理解为 “是一种基于 git 的操作框架”</p>
<p>Argo CD 是一种 kubernetes 之上的 “声明式” (<em>declarative</em>) 的 gitops CD， 在本文作为了解如何在 Kubernetes 集群中安装和配置 Argo CD。</p>
<h2 id="前提准备">前提准备</h2>
<p>想要安装 Argo CD 首先环境需要具备如下：</p>
<ul>
<li>已经安装好 kubectl 命令行工具</li>
<li>拥有 kubeconfig 文件</li>
<li>一个可供测试的 Kubernetes 集群，如：kind, minikube, kubeadm, binary 等任意的集群</li>
</ul>
<h2 id="步骤1---选择适配-kubernetes-版本的-argo">步骤1 - 选择适配 kubernetes 版本的 Argo</h2>
<p>根据官方的解释， Argo CD 在任何给定时刻所支持的版本，这些版本是 N 和 N - 1  次要版本的最新修补版本 (x.x.new)。这些 Argo CD 版本与 Kubernetes 项目官方支持的 Kubernetes 版本相一致，通常是  Kubernetes 的最近发布的 3 个版本。</p>
<p>即可以理解为 Argo N &amp; N-1 支持的 Kubernetes 版本为 N-2</p>
<p>举例来说，如果 Argo CD 的最新次要版本是 2.4.3 和 2.3.5, 那么所支持的 K8S 版本则如下面列表</p>
<ul>
<li>Argo CD 2.4.3 on Kubernetes 1.24</li>
<li>Argo CD 2.4.3 on Kubernetes 1.23</li>
<li>Argo CD 2.4.3 on Kubernetes 1.22</li>
<li>Argo CD 2.3.5 on Kubernetes 1.24</li>
<li>Argo CD 2.3.5 on Kubernetes 1.23</li>
<li>Argo CD 2.3.5 on Kubernetes 1.22</li>
</ul>
<p>而在较新版本中，Argo官方给出了 Argo CD 在 K8S 什么版本之上，测试什么版本的 Argo (2.8起)，而 Argo 版本又和 K8S 版本较为吻合，例如最新版 Kubernetes 为 1.28 (2023.10)，那么 Argo 最新版 (2.8).</p>
<p>假设现在你的 kubernetes 集群版本为 1.19.10, 那么按照这个规律基本上符合的为 1.8/2.0，如果 kubernetes 集群版本为 1.18.10, 那么符合的版本为 1.7/1.8，对于旧版本，尽量选择最符合的，不要按照这个规律，因为规律是 2.3+ 才提出的。</p>
<p>对于每一个版本的部署文件路径，可以通过 argo 仓库 manifest 目录中寻找 <code>github.com/argoproj/argo-cd/tree/version/manifests</code></p>
<h2 id="步骤2---执行安装">步骤2 - 执行安装</h2>
<p>在本实例中，安装环境为 kubernetes 1.19.10 ，选择的 Argo CD 版本为 2.0，那么只需要找到其 “资源清单” 文件即可，需要注意的是，版本号要与仓库中 “tag” 保持一致</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">ARGO_VERSION</span><span class="o">=</span>v2.0.5
</span></span><span class="line"><span class="cl">https://raw.githubusercontent.com/argoproj/argo-cd/<span class="si">${</span><span class="nv">ARGO_VERSION</span><span class="si">}</span>/manifests/install.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用 kubectl 应用这个文件即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-cd/<span class="si">${</span><span class="nv">ARGO_VERSION</span><span class="si">}</span>/manifests/install.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果需要部署在特定的 NS 内，可以使用下面命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/<span class="si">${</span><span class="nv">ARGO_VERSION</span><span class="si">}</span>/manifests/install.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>安装就是应用对应资源到 Kubernetes 集群</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">customresourcedefinition.apiextensions.k8s.io/applications.argoproj.io created
</span></span><span class="line"><span class="cl">customresourcedefinition.apiextensions.k8s.io/appprojects.argoproj.io created
</span></span><span class="line"><span class="cl">serviceaccount/argocd-application-controller created
</span></span><span class="line"><span class="cl">serviceaccount/argocd-dex-server created
</span></span><span class="line"><span class="cl">serviceaccount/argocd-redis created
</span></span><span class="line"><span class="cl">serviceaccount/argocd-server created
</span></span><span class="line"><span class="cl">role.rbac.authorization.k8s.io/argocd-application-controller created
</span></span><span class="line"><span class="cl">role.rbac.authorization.k8s.io/argocd-dex-server created
</span></span><span class="line"><span class="cl">role.rbac.authorization.k8s.io/argocd-redis created
</span></span><span class="line"><span class="cl">role.rbac.authorization.k8s.io/argocd-server created
</span></span><span class="line"><span class="cl">clusterrole.rbac.authorization.k8s.io/argocd-application-controller created
</span></span><span class="line"><span class="cl">clusterrole.rbac.authorization.k8s.io/argocd-server created
</span></span><span class="line"><span class="cl">rolebinding.rbac.authorization.k8s.io/argocd-application-controller created
</span></span><span class="line"><span class="cl">rolebinding.rbac.authorization.k8s.io/argocd-dex-server created
</span></span><span class="line"><span class="cl">rolebinding.rbac.authorization.k8s.io/argocd-redis created
</span></span><span class="line"><span class="cl">rolebinding.rbac.authorization.k8s.io/argocd-server created
</span></span><span class="line"><span class="cl">clusterrolebinding.rbac.authorization.k8s.io/argocd-application-controller created
</span></span><span class="line"><span class="cl">clusterrolebinding.rbac.authorization.k8s.io/argocd-server created
</span></span><span class="line"><span class="cl">configmap/argocd-cm created
</span></span><span class="line"><span class="cl">configmap/argocd-gpg-keys-cm created
</span></span><span class="line"><span class="cl">configmap/argocd-rbac-cm created
</span></span><span class="line"><span class="cl">configmap/argocd-ssh-known-hosts-cm created
</span></span><span class="line"><span class="cl">configmap/argocd-tls-certs-cm created
</span></span><span class="line"><span class="cl">secret/argocd-secret created
</span></span><span class="line"><span class="cl">service/argocd-dex-server created
</span></span><span class="line"><span class="cl">service/argocd-metrics created
</span></span><span class="line"><span class="cl">service/argocd-redis created
</span></span><span class="line"><span class="cl">service/argocd-repo-server created
</span></span><span class="line"><span class="cl">service/argocd-server created
</span></span><span class="line"><span class="cl">service/argocd-server-metrics created
</span></span><span class="line"><span class="cl">deployment.apps/argocd-dex-server created
</span></span><span class="line"><span class="cl">deployment.apps/argocd-redis created
</span></span><span class="line"><span class="cl">deployment.apps/argocd-repo-server created
</span></span><span class="line"><span class="cl">deployment.apps/argocd-server created
</span></span><span class="line"><span class="cl">statefulset.apps/argocd-application-controller created
</span></span><span class="line"><span class="cl">networkpolicy.networking.k8s.io/argocd-application-controller-network-policy created
</span></span><span class="line"><span class="cl">networkpolicy.networking.k8s.io/argocd-dex-server-network-policy created
</span></span><span class="line"><span class="cl">networkpolicy.networking.k8s.io/argocd-redis-network-policy created
</span></span><span class="line"><span class="cl">networkpolicy.networking.k8s.io/argocd-repo-server-network-policy created
</span></span><span class="line"><span class="cl">networkpolicy.networking.k8s.io/argocd-server-network-policy created
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="步骤3---访问argo-server">步骤3 - 访问argo server</h2>
<p>通常在部署好 Kubernetes 中的应用后，需要访问大概有四种方式：</p>
<ul>
<li>修改清单，将 service 端口改为 NodePort 模式</li>
<li>使用 Ingress</li>
<li>使用端口转发 ( <em>port-forward</em> )</li>
</ul>
<p>这里选择最简单方式，使用 kubectl 的 port-forward 进行访问，随机端口</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl port-forward svc/argocd-server :443 --address<span class="o">=</span><span class="s1">&#39;0.0.0.0&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>指定本地端口</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl port-forward svc/argocd-server 8888:443 --address<span class="o">=</span><span class="s1">&#39;0.0.0.0&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>还可以指定任意的资源进行映射，比如 deployment, Pod</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl port-forward pod/<span class="o">{</span>pod_name<span class="o">}</span> 8888:443 --address<span class="o">=</span><span class="s1">&#39;0.0.0.0&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Notes: 使用 port-forwad 需要在 Kubernetes 集群所有 Node 之上安装 <em>socat</em> , 否则会出现下面问题</p>
<p>E1030 23:34:25.973226   36174 portforward.go:400] an error occurred forwarding 8181 -&gt; 8080: error forwarding port 8080 to pod xxxxxxxxx, uid : unable to do port forwarding: socat not found</p>
</blockquote>
<p>此时 WEB UI 可以开启了，还需要获得默认的用户才可以登录到集群内，这里 ArgoCD 首次登陆密码被以 secert 形式保存在集群内，使用下面命令可以获取，默认用户名是 <em>”admin“</em></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=&#34;{.data.password}&#34; | base64 -d &amp;&amp; echo
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="安装-argocd-cli">安装 ArgoCD CLI</h2>
<p>安装 ArgoCD CLI 工具有两种主要方法，mac 之上可以通过 brew 安装，其他操作系统需要从 <a href="https://github.com/argoproj/argo-cd/releases/latest">github release</a> 下载安装二进制文件，下载后可以使用 <code>argocd login</code> 登录集群，登录的地址是 argo server 的地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">argocd login localhost:8080
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过 argocd cli 也可以更新密码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">argocd account update-password
</span></span></code></pre></td></tr></table>
</div>
</div><p>至此，一个简单的 Argo CD 就部署完了，当然 Argo CD 也有高可用版本，可以参考官方给出的高可用版本的清单进行安装 <sup><a href="#2">[2]</a></sup></p>
<h2 id="reference">Reference</h2>
<p><sup id="1">[1]</sup> <a href="https://tanzu.vmware.com/developer/guides/argocd-gs/">Getting Started with ArgoCD on Kubernetes</a></p>
<p><sup id="2">[2]</sup> <a href="https://argo-cd.readthedocs.io/en/stable/operator-manual/installation/">Installation</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>初识Argo cd - argo cd架构</title>
      <link>https://www.oomkill.com/2023/10/ch01-argo-beginning/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/10/ch01-argo-beginning/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="argo组件">Argo组件</h2>
<ul>
<li>API Server</li>
<li>Repository Server</li>
<li>Application Controller</li>
</ul>
<p><strong>API Server</strong>：一个 gRPC/REST 服务器，提供了 “Web UI”、“CLI” 和 “CI/CD” 使用的 API</p>
<ul>
<li>应用管理和状态报告</li>
<li>调用应用操作（例如同步、回滚、用户定义的操作）</li>
<li>存储库和 Cluster credential  管理（作为 kubernetes secret 存储）</li>
<li>为外部提供身份认证和代理授权功能</li>
<li>RBAC 试试</li>
<li>Git webhook 事件的 listener/forwarder</li>
</ul>
<p><strong>Repository Server</strong>：内部服务，用于维护 git 中的应用清单 (manifests) 的本地缓存。负责接收生成和返回 kubernetes 清单</p>
<ul>
<li>仓库URL</li>
<li>revision (commit, tag, branch)</li>
<li>APP PATH</li>
<li>模板特定的参数</li>
</ul>
<p><strong>Application Controller</strong>：Kubernetes controller，主要做的工作是持续监控运行的 Application，并于当前实时状态和目标所需状态进行对比（与 Kubernetes Controller 功能是相同的），并且不仅仅是 <em>KC</em> 还会和存储库中指定目标状态进行比较，检测到 <code>OutOfSync</code> 状态将进行纠正。</p>
<h2 id="argo-架构">Argo 架构</h2>
<p>Argo CD 时最常见的三种架构：<strong>单实例方案</strong>, <strong>集群级方案</strong>，以及<strong>折衷方案</strong> (<em>compromise between the two</em>)。</p>
<h3 id="单实例方案">单实例方案</h3>
<p>单实例 (One instance) 是指 “通过一个实例 (Argo) 来管理多个集群”，这是一种比较流行的方式，这种方式最大的特点是在用户角度看，是用户对 <em>Application</em> 有单一的视图层。单一的 “视图层” 为用户简化了 API 的集成与 CLI 的登录的配置与体验；为管理员提供了一个统一配置，如 “密钥”, “CRD” 等。</p>
<p>
  <img loading="lazy" src="https://akuity.io/static/ab5139bc189e1b7e6e49cdd10bf7c8bd/3c492/one-instance.png" alt=""  /></p>
<center>图：单实例集群架构图</center>
<center><em>Source：</em>https://akuity.io/blog/argo-cd-architectures-explained/</center>
<p>单实例方案的优缺点如下：</p>
<ul>
<li>跨所有集群的单一视图层。</li>
<li>统一控制平面，简化安装和维护。</li>
<li>单实例可轻松集成 API/CLI。</li>
</ul>
<p>缺点：</p>
<ul>
<li>单点故障。</li>
<li>扩展需要调整各个组件。</li>
<li>需要一个单独的“管理”集群 (Kubernetes)。</li>
<li>所有集群的 “集群凭证” (kubeconfig) 存储在单集群上，掌握了管理集群或Argo实例，等于可以直接访问所有集群</li>
<li>单独的 Application Controller 去管理所有集群的资源，AC 压力较大</li>
<li>Argo CD 和集群之间存在大量网络流量。</li>
</ul>
<h3 id="集群级别方案">集群级别方案</h3>
<p>集群级别方案 (separation instance for cluster) 是指将 Argo 分到每一个集群内，这样可以简化安全与控制难度；为什么说这种方式相对安全，因为在这种模式下， Argo CD 在集群内运行，这意味着不需要将集群 API 暴露给外部控制平面。另外也没有任何中心化实例包含了所有集群的凭证 (kubeconfig)，这种模式下就将 “安全域” 限制为 Argo CD 所在集群，而不是共享（中心化）。</p>
<p>
  <img loading="lazy" src="https://akuity.io/static/e20b9a08332c8f8e64ef55848027bfc1/3c492/instance-per-cluster.png" alt="每个集群的 Argo CD 实例图。"  /></p>
<center>图：SIC集群架构</center>
<center><em>Source：</em>https://akuity.io/blog/argo-cd-architectures-explained/</center>
<p>集群级方案的优缺点如下：</p>
<ul>
<li>每个集群一个 Argo CD workload</li>
<li>不需要外部访问，消除 Argo CD 离开集群的流量</li>
<li>一个集群中断不会引起其他集群的正常工作</li>
<li>集群安全凭证仅限制该集群自己</li>
<li>减少了网络流量的成本（集群内使用内外，跨集群可能需要公网流量）</li>
<li>安全域与故障半径得到控制</li>
</ul>
<p>缺点：</p>
<ul>
<li>维护成本增加，需要维护不同配置的多个实例，或相同配置的多个实例</li>
<li>集群规模不同，Argo 实例也不同</li>
<li>API/CLI 需要分别绑定集群</li>
<li>在计算资源的总成本相对增加</li>
</ul>
<h2 id="折衷方案---根据逻辑组划分">折衷方案 - 根据逻辑组划分</h2>
<p>这个方案是根据 “单实例” 与 “SIC” 两个方案的优缺点进行折衷的一种方式，是将多个 Kubernetes 集群按照 “逻辑组” 划分，分组可以按团队, 区域或环境进行。只要是对你有意义的。此架构非常有用。它消除了维护过多 Argo CD 的成文。对于实例管理的所有集群来说，RBAC, AppProject 和其他配置可能是相似的。因此，与为每个集群运行一个实例相比，减少了配置重复。</p>
<p>
  <img loading="lazy" src="https://akuity.io/static/dc08374ddad6d26a56c80519709d67fa/3c492/instance-per-logical-group.png" alt=""  /></p>
<center>图：折衷方案架构图</center>
<center><em>Source：</em>https://akuity.io/blog/argo-cd-architectures-explained/</center>
<p>折衷方案的优缺点如下：</p>
<ul>
<li>按组分配 Argo 负载</li>
<li>一个集群的中断不会影响其他分组</li>
<li>可以控制对外网络流量，进一步缩小了凭证等信息的安全域，以及限制了问题半径</li>
<li>减少配置</li>
</ul>
<p>缺点：</p>
<ul>
<li>有相对的维护成本</li>
<li>也需要单独的“管理集群”</li>
</ul>
<h2 id="reference">Reference</h2>
<p><sup id="1">[1]</sup> <a href="https://codefresh.io/blog/a-comprehensive-overview-of-argo-cd-architectures-2023/">A Comprehensive Overview of Argo CD Architectures – 2023</a></p>
<p><sup id="2">[2]</sup> <a href="https://akuity.io/blog/argo-cd-architectures-explained/">How many do you need? - Argo CD Architectures Explained</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>什么是Spinnaker中的应用 - Application</title>
      <link>https://www.oomkill.com/2023/07/ch03-spinnaker-application/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/07/ch03-spinnaker-application/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="概念理解">概念理解</h2>
<p>Applicaiton 在 Spinnaker 中可以理解为是要部署的微服务，但是又不完全是，而这个 Application 可以分为两个维度：管理与部署，通常包括下面部分组成：</p>
<ul>
<li>Pipeline</li>
<li>承载运行服务的基础设施，是 Spinnaker 用于描述服务的概念
<ul>
<li>Cluster：实例的集合</li>
<li>Server Group：运行实例的集合（可以是VM，可以是Pod）；例如集群组由DEV,PROD 等环境组成</li>
<li>Firewall：流量控制</li>
<li>Load Blalencer：实例间的流量控制，例如 Kubernetes中是 Service</li>
</ul>
</li>
<li>金丝雀</li>
</ul>
<h2 id="project">Project</h2>
<p>在 Spinnaker WEB UI 有一个 Project，Project 概念可以理解为业务（项目），而 Project 包含的内容就是 Application 中与 Cluster；这么理解的话就是“对应业务的不同集群”，如下图所示</p>
<h2 id="安装执行步骤">安装执行步骤</h2>
<h3 id="安装-halyard">安装 Halyard</h3>
<p>可以直接使用 Docker 方式安装，这个没什么必要性，就是管理工具而已，参考附录1 <sup><a href="#1">[1]</a></sup></p>
<p>首先创建映射目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir ~/.hal -pv
</span></span><span class="line"><span class="cl">mkdir ~/.kubeconfig -pv
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后执行 docker run 运行容器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -d -p 8084:8084 -p 9000:9000 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name halyard --rm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v ~/.hal:/home/spinnaker/.hal <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v ~/.kubeconfig:/home/spinnaker/.kube <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /usr/local/bin:/usr/local/sbin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /etc/kubernetes/auth/admin.conf:/home/spinnaker/.kube/config <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
</span></span></code></pre></td></tr></table>
</div>
</div><p>因为 docker 环境不能重启服务，需要修改配置文件，这里可以在外部创建一个配置文件来映射进去，这里后面会说到 GCS 的问题</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run -it --rm us-docker.pkg.dev/spinnaker-community/docker/halyard:stable cat /opt/halyard/config/halyard.yml &gt; /tmp/halyard.yml
</span></span></code></pre></td></tr></table>
</div>
</div><p>修改 spinnaker 部分的配置，将 <code>enabled: true</code> ，改为 <code>enabled: false</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spinnaker</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">artifacts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">debian</span><span class="p">:</span><span class="w"> </span><span class="l">https://us-apt.pkg.dev/projects/spinnaker-community</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">docker</span><span class="p">:</span><span class="w"> </span><span class="l">us-docker.pkg.dev/spinnaker-community/docker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">input</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">gcs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">writerEnabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">bucket</span><span class="p">:</span><span class="w"> </span><span class="l">halconfig</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>然后将输出的配置文件保存到宿主机，而后映射到容器内即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -d -p 8084:8084 -p 9000:9000 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name halyard --rm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v ~/.hal:/home/spinnaker/.hal <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v ~/.kubeconfig:/home/spinnaker/.kube <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /usr/local/bin:/usr/local/sbin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /etc/kubernetes/auth/admin.conf:/home/spinnaker/.kube/config <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /tmp/halyard.yml:/opt/halyard/config/halyard.yml <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装kubectl">安装kubectl</h3>
<blockquote>
<p>这部分在上一章中注明了挂载 kubectl 的路径</p>
</blockquote>
<p>使用 Docker 运行的 Halyard 可以直接挂在 kubectl 到 容器内就可以了，halyard 默认的路径在 <code>/usr/local/bin</code>  只要避免和这个路径冲突就可以了。</p>
<blockquote>
<p>halyard 中附带的 kubectl 不一定与你的集群版本一致</p>
</blockquote>
<p>最后进入容器就可以管理 spinnaker 了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it halyard bash
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="生成一个-halyard-config-supa-href33asup">生成一个 Halyard config <sup><a href="#3">[3]</a></sup></h3>
<p>离线安装时，需要生成一个 Halyard config 文件，默认在 <code>~/.hal/config</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hal config version edit --version local:1.19.2
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Notes:</p>
<ul>
<li>如果是选择离线安装或者 Local 方式安装，那么 local 关键字必须加</li>
<li>如果主机没有网，此时需要指定参数 <code>--no-validate</code> 来控制关闭验证，验证通常要联网</li>
<li>对于执行大部分的 hal 命令都会在 <code>~/.hal/config</code> 生成配置文件</li>
</ul>
</blockquote>
<h3 id="选择云供应商">选择云供应商</h3>
<p>这里可以指选择一个 Kubernetes 集群将其添加到 Halyard config 中</p>
<blockquote>
<p>注意，这里需要时 Kubectl 可以正常请求集群，即需要 kubectl 与 kubeconfig</p>
</blockquote>
<p>但在选择 Kubernetes 作为 Halyard 的 provider 之前，可以在 Kubernetes 中创建一个新的 service 以在 Halyard 中使用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Run in Halyard container</span>
</span></span><span class="line"><span class="cl"><span class="nv">CONTEXT</span><span class="o">=</span><span class="k">$(</span>kubectl config current-context<span class="k">)</span>
</span></span><span class="line"><span class="cl">kubectl apply --context <span class="nv">$CONTEXT</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -f https://spinnaker.io/downloads/kubernetes/service-account.yml
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">TOKEN</span><span class="o">=</span><span class="k">$(</span>kubectl get secret --context <span class="nv">$CONTEXT</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   <span class="k">$(</span>kubectl get serviceaccount spinnaker-service-account <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>       --context <span class="nv">$CONTEXT</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>       -n spinnaker <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>       -o <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">&#39;{.secrets[0].name}&#39;</span><span class="k">)</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   -n spinnaker <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   -o <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">&#39;{.data.token}&#39;</span> <span class="p">|</span> base64 --decode<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">kubectl config set-credentials <span class="si">${</span><span class="nv">CONTEXT</span><span class="si">}</span>-token-user --token <span class="nv">$TOKEN</span>
</span></span><span class="line"><span class="cl">kubectl config set-context <span class="nv">$CONTEXT</span> --user <span class="si">${</span><span class="nv">CONTEXT</span><span class="si">}</span>-token-user
</span></span></code></pre></td></tr></table>
</div>
</div><p>启用 kubernetes，并配置使用的 kubernetes 用户</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Run in Halyard container</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">hal config provider kubernetes <span class="nb">enable</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">ACCOUNT</span><span class="o">=</span><span class="s2">&#34;my-k8s-account&#34;</span>
</span></span><span class="line"><span class="cl">hal config provider kubernetes account add <span class="si">${</span><span class="nv">ACCOUNT</span><span class="si">}</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --context <span class="si">${</span><span class="nv">CONTEXT</span><span class="si">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Halyard 有几种部署 Spinnaker 服务的选项，例如Local, git 和 Distributed，这里使用 Distributed 模式，将 Spinnaker 以分布式方式部署到 Kubernetes内。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hal config deploy edit --type distributed --account-name <span class="nv">$ACCOUNT</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="配置s3存储">配置S3存储</h3>
<p>Spinnaker 需要外部存储，例如 S3 对象存储置，为此，我使用 Minio 作为外部存储服务。这里使用 docker 进行部署，作为学习，也可以使用 minIO 官方提供的 minIO-dev <sup><a href="#4">[4]</a></sup>，可以快速在 Kubernetes 集群上部署一个单实例的 minIO</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># System</span>
</span></span><span class="line"><span class="cl"><span class="nv">MINIO_ROOT_USER</span><span class="o">=</span><span class="k">$(</span>&lt; /dev/urandom tr -dc a-z <span class="p">|</span> head -c<span class="si">${</span><span class="nv">1</span><span class="k">:-</span><span class="nv">4</span><span class="si">}</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">MINIO_ROOT_PASSWORD</span><span class="o">=</span><span class="k">$(</span>&lt; /dev/urandom tr -dc _A-Z-a-z-0-9 <span class="p">|</span> head -c<span class="si">${</span><span class="nv">1</span><span class="k">:-</span><span class="nv">8</span><span class="si">}</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">MINIO_PORT</span><span class="o">=</span><span class="s2">&#34;9010&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Start the container</span>
</span></span><span class="line"><span class="cl">docker run -it -d --rm -v ~/.minio-data/:/data --name minio-4-spinnaker -p <span class="si">${</span><span class="nv">MINIO_PORT</span><span class="si">}</span>:<span class="si">${</span><span class="nv">MINIO_PORT</span><span class="si">}</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-e <span class="nv">MINIO_ROOT_USER</span><span class="o">=</span><span class="si">${</span><span class="nv">MINIO_ROOT_USER</span><span class="si">}</span> -e  <span class="nv">MINIO_ROOT_PASSWORD</span><span class="o">=</span><span class="si">${</span><span class="nv">MINIO_ROOT_PASSWORD</span><span class="si">}</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> minio/minio  server /data --address :<span class="si">${</span><span class="nv">MINIO_PORT</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># This information is used in next {.1}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">MINIO_ROOT_USER=</span><span class="si">${</span><span class="nv">MINIO_ROOT_USER</span><span class="si">}</span><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">MINIO_ROOT_PASSWORD=</span><span class="si">${</span><span class="nv">MINIO_ROOT_PASSWORD</span><span class="si">}</span><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">ENDPOINT=http://</span><span class="k">$(</span>docker inspect -f <span class="s1">&#39;{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}&#39;</span> minio-4-spinnaker<span class="k">)</span><span class="s2">:</span><span class="si">${</span><span class="nv">MINIO_PORT</span><span class="si">}</span><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果需要开启，那么需要在目录 <code>~/.hal/default/profiles/front50-local.yml</code> 创建文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">spinnaker:
</span></span><span class="line"><span class="cl">  s3:
</span></span><span class="line"><span class="cl">    versioning: <span class="nb">false</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后使用以下命令进行配置到 halyard config 文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">ENDPOINT</span><span class="o">=</span>http://10.0.2.4:9000
</span></span><span class="line"><span class="cl"><span class="nv">MINIO_ACCESS_KEY</span><span class="o">=</span>minio
</span></span><span class="line"><span class="cl"><span class="nv">MINIO_SECRET_KEY</span><span class="o">=</span>minio123
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$MINIO_SECRET_KEY</span> <span class="p">|</span> hal config storage s3 edit --endpoint <span class="nv">$ENDPOINT</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --access-key-id <span class="nv">$MINIO_ACCESS_KEY</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --secret-access-key
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">hal config storage edit --type s3
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="生成一个bom文件">生成一个BOM文件</h3>
<p>找一台有外网的主机，执行下列命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hal version bom 1.19.2 -q -o yaml
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Note: 如果开启了 <code>gcs.enabled: true</code> 需要重新启动一个容器，因为这个步骤需要联网查询</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nv">DOCKERID</span><span class="o">=</span><span class="sb">`</span>docker run -d --rm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v ~/.hal:/home/spinnaker/.hal <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    us-docker.pkg.dev/spinnaker-community/docker/halyard:stable<span class="sb">`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ docker <span class="nb">exec</span> -it <span class="si">${</span><span class="nv">DOCKERID</span><span class="si">}</span> hal version bom 1.19.2 -q -o yaml <span class="o">&amp;&amp;</span> docker stop <span class="si">${</span><span class="nv">DOCKERID</span><span class="si">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>将输出的文件保存在 halyard 容器内 <code>~/.hal/.boms/bom/{version}.yml</code> ，将 <code>{version}</code> 替换为你安装的版本，例如这里为 1.19.2</p>
<p>其次，要在本地执行此操作的容器内，需要在 <code>halconfig</code> 目录下有对应的 BOM 清单，清单格式如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ tree ~/.hal/.boms/
</span></span><span class="line"><span class="cl">/root/.hal/.boms/
</span></span><span class="line"><span class="cl">├── bom
</span></span><span class="line"><span class="cl">│   └── 1.19.2.yml
</span></span><span class="line"><span class="cl">├── clouddriver
</span></span><span class="line"><span class="cl">│   └── clouddriver.yml
</span></span><span class="line"><span class="cl">├── deck
</span></span><span class="line"><span class="cl">│   └── settings.js
</span></span><span class="line"><span class="cl">├── <span class="nb">echo</span>
</span></span><span class="line"><span class="cl">│   └── echo.yml
</span></span><span class="line"><span class="cl">├── fiat
</span></span><span class="line"><span class="cl">│   └── fiat.yml
</span></span><span class="line"><span class="cl">├── front50
</span></span><span class="line"><span class="cl">│   └── front50.yml
</span></span><span class="line"><span class="cl">├── gate
</span></span><span class="line"><span class="cl">│   └── gate.yml
</span></span><span class="line"><span class="cl">├── igor
</span></span><span class="line"><span class="cl">│   └── igor.yml
</span></span><span class="line"><span class="cl">├── kayenta
</span></span><span class="line"><span class="cl">│   └── kayenta.yml
</span></span><span class="line"><span class="cl">├── orca
</span></span><span class="line"><span class="cl">│   └── orca.yml
</span></span><span class="line"><span class="cl">└── rosco
</span></span><span class="line"><span class="cl">    └── rosco.yml
</span></span></code></pre></td></tr></table>
</div>
</div><p>这些文件夹需要自行创建，并且里面的配置文件也需要自行创建，如果不知道格式如何，可以参考 Spinnaker github 仓库上，每一个上面的文件夹都是一个项目仓库，而这些仓库的根目录都存在一个 <em><strong>halconfig</strong></em> 目录，此时需要你将对应的文件保存到对应目录下，例如，clouddriver 文件夹需要选择 <a href="https://github.com/spinnaker/clouddriver/tree/master/halconfig">github.com/spinnaker/clouddriver</a> 项目，而配置文件需要选择 <code>{service_name}.yml</code> 为命名的，例如 clouddriver 就需要选择 clouddriver.yml，这个需要自行下载。</p>
<p>可以使用下列脚本进行生成这些配置文件（需要上网）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1">####################################################################################</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                         Install Spinnaker scripts for CentOS                     #</span>
</span></span><span class="line"><span class="cl"><span class="c1">####################################################################################</span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> -e
</span></span><span class="line"><span class="cl"><span class="nv">START_TIME</span><span class="o">=</span><span class="sb">`</span>date +%s<span class="sb">`</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span>/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">ROOT</span><span class="o">=</span><span class="k">$(</span><span class="nb">cd</span> <span class="k">$(</span>dirname <span class="nv">$0</span><span class="k">)</span><span class="p">;</span> <span class="nb">pwd</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">BASE_URL</span><span class="o">=</span><span class="s2">&#34;https://raw.githubusercontent.com/spinnaker&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">DECK_FILE_NAME</span><span class="o">=</span><span class="s2">&#34;halconfig/settings.js&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">FILE_PREFIX</span><span class="o">=</span><span class="s2">&#34;halconfig&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">usage<span class="o">(){</span>
</span></span><span class="line"><span class="cl">	cat <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">Usage: $CMD &lt;bom_file&gt; &lt;output_dir&gt;
</span></span></span><span class="line"><span class="cl"><span class="s">    $CMD ~/.hal/.boms/bom/1.20.0.yml ~/.hal/.boms
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> install_json_tools<span class="o">(){</span>
</span></span><span class="line"><span class="cl">    which jq <span class="p">&amp;</span>&gt; /dev/null <span class="o">||</span> sudo yum install jq -y
</span></span><span class="line"><span class="cl">    which yq <span class="o">||</span> <span class="o">(</span> wget https://github.com/mikefarah/yq/releases/download/v4.16.2/yq_linux_amd64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> chmod +x yq_linux_amd64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> mv yq_linux_amd64 /usr/local/bin/yq <span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> remove_json_tools<span class="o">(){</span>
</span></span><span class="line"><span class="cl">   rm -f a/usr/local/bin/yq
</span></span><span class="line"><span class="cl">   rpm -e jq --force
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> pull_packer<span class="o">(){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">##check paramter##</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[[</span> <span class="si">${#}</span> -ne <span class="m">1</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> -e <span class="s2">&#34;\033[32m Paramter amount error. \033[0m&#34;</span> <span class="o">&amp;&amp;</span> <span class="nb">exit</span> <span class="si">${</span><span class="nv">MALFORMEDPARAMTER</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nb">export</span> <span class="nv">SPIN_TMP_DIR</span><span class="o">=</span><span class="si">${</span><span class="nv">ROOT</span><span class="si">}</span>/spin_installer
</span></span><span class="line"><span class="cl">    <span class="o">[</span> -d <span class="si">${</span><span class="nv">SPIN_TMP_DIR</span><span class="si">}</span> <span class="o">]</span> <span class="o">||</span> mkdir -pv <span class="si">${</span><span class="nv">SPIN_TMP_DIR</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">cd</span> <span class="si">${</span><span class="nv">SPIN_TMP_DIR</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">    git init
</span></span><span class="line"><span class="cl">    <span class="c1"># 配置远程仓库地址</span>
</span></span><span class="line"><span class="cl">    git remote add origin https://github.com/spinnaker/rosco
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 启用 sparse checkout</span>
</span></span><span class="line"><span class="cl">    git config core.sparsecheckout <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 指定要克隆的目录</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;halconfig/packer&#34;</span> &gt;&gt; .git/info/sparse-checkout
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 拉取远程仓库的内容</span>
</span></span><span class="line"><span class="cl">    git pull origin <span class="si">${</span><span class="nv">1</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">    tar zcf packer.tar.gz -C ./halconfig packer
</span></span><span class="line"><span class="cl">    mv packer.tar.gz <span class="si">${</span><span class="nv">BOM_PATH_I</span><span class="si">}</span>/
</span></span><span class="line"><span class="cl">    <span class="c1"># clean work dir</span>
</span></span><span class="line"><span class="cl">    <span class="nb">cd</span> <span class="si">${</span><span class="nv">ROOT</span><span class="si">}</span> <span class="o">&amp;&amp;</span> rm -fr <span class="si">${</span><span class="nv">SPIN_TMP_DIR</span><span class="si">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> gererate_bom<span class="o">(){</span>
</span></span><span class="line"><span class="cl">    yq <span class="nb">eval</span> -o json <span class="si">${</span><span class="nv">BOM_FILE_NAME</span><span class="si">}</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">    jq <span class="s1">&#39;.services&#39;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">    jq <span class="s1">&#39;del(.defaultArtifact ,.[&#34;monitoring-third-party&#34;], .[&#34;monitoring-daemon&#34;])&#39;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">    jq -r <span class="s1">&#39;to_entries[] | &#34;\(.key)=\(.value)&#34;&#39;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="nv">IFS</span><span class="o">=</span><span class="s2">&#34;=&#34;</span> <span class="nb">read</span> -r key value<span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">        <span class="nv">VERSION</span><span class="o">=</span><span class="s2">&#34;version-`echo </span><span class="nv">$value</span><span class="s2"> | jq &#39;.version&#39;|awk -F &#39;=&#39; &#39;{print </span><span class="nv">$1</span><span class="s2">}&#39; | awk -F &#39;-&#39; &#39;{print </span><span class="nv">$1</span><span class="s2">}&#39;| tr -d &#39;&#34;</span><span class="s1">&#39;`&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">        
</span></span></span><span class="line"><span class="cl"><span class="s1">        export BOM_PATH_I=${BOM_PATH}/${key}
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">        [ -d ${BOM_PATH_I} ] || mkdir -pv ${BOM_PATH_I}; chmod 777 ${BOM_PATH_I}
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">        case ${key} in
</span></span></span><span class="line"><span class="cl"><span class="s1">            &#34;deck&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s1">                curl &#34;${BASE_URL}/${key}/${VERSION}/${FILE_PREFIX}/settings.js&#34; -o ${BOM_PATH_I}/settings.js
</span></span></span><span class="line"><span class="cl"><span class="s1">                ;;
</span></span></span><span class="line"><span class="cl"><span class="s1">            &#34;rosco&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s1">                curl &#34;${BASE_URL}/${key}/${VERSION}/${FILE_PREFIX}/${key}.yml&#34; -o ${BOM_PATH_I}/${key}.yml
</span></span></span><span class="line"><span class="cl"><span class="s1">                curl &#34;${BASE_URL}/${key}/${VERSION}/${FILE_PREFIX}/images.yml&#34; -o ${BOM_PATH_I}/images.yml
</span></span></span><span class="line"><span class="cl"><span class="s1">                pull_packer ${VERSION}
</span></span></span><span class="line"><span class="cl"><span class="s1">                ;;
</span></span></span><span class="line"><span class="cl"><span class="s1">            *)
</span></span></span><span class="line"><span class="cl"><span class="s1">                curl &#34;${BASE_URL}/${key}/${VERSION}/${FILE_PREFIX}/${key}.yml&#34;  -o ${BOM_PATH_I}/${key}.yml
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">        esac
</span></span></span><span class="line"><span class="cl"><span class="s1">    done
</span></span></span><span class="line"><span class="cl"><span class="s1">    chmod 777 ${BOM_PATH} -R
</span></span></span><span class="line"><span class="cl"><span class="s1">}
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">function MAIN(){
</span></span></span><span class="line"><span class="cl"><span class="s1">    ##check user##
</span></span></span><span class="line"><span class="cl"><span class="s1">    if [[ $UID != 0 ]];then
</span></span></span><span class="line"><span class="cl"><span class="s1">        echo -e &#34;\033[41;05m Sorry, this script must be run as root! \033[0m&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">        exit ${ILLEGALUSER}
</span></span></span><span class="line"><span class="cl"><span class="s1">    fi
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    ##check paramter##
</span></span></span><span class="line"><span class="cl"><span class="s1">    if [[ ${#} -lt 2 ]]; then
</span></span></span><span class="line"><span class="cl"><span class="s1">        usage &amp;&amp; exit ${MALFORMEDPARAMTER}
</span></span></span><span class="line"><span class="cl"><span class="s1">    fi
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    export BOM_FILE_NAME=$1; shift
</span></span></span><span class="line"><span class="cl"><span class="s1">    export BOM_PATH=$1; shift
</span></span></span><span class="line"><span class="cl"><span class="s1">    
</span></span></span><span class="line"><span class="cl"><span class="s1">    ##cheking command line##
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    install_json_tools
</span></span></span><span class="line"><span class="cl"><span class="s1">    
</span></span></span><span class="line"><span class="cl"><span class="s1">    ##processing bom##
</span></span></span><span class="line"><span class="cl"><span class="s1">    gererate_bom
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">	END_TIME=`date +%s`
</span></span></span><span class="line"><span class="cl"><span class="s1">	EXECUTING_TIME=`expr $END_TIME - $START_TIME`
</span></span></span><span class="line"><span class="cl"><span class="s1">	echo -e &#34;\033[42;30m Time had spent $EXECUTING_TIME seconds. \033[0m&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">	echo -e &#34;\033[40;34m ######################################################### \033[0m&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">	echo -e &#39;</span><span class="se">\n</span><span class="err">&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">MAIN <span class="nv">$1</span> <span class="nv">$2</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>在执行脚本时需要在容器运行的宿主机进行，如果这台主机没有网络，那么可以在其他机器执行</p>
</blockquote>
<h3 id="额外下载一个-packertargz">额外下载一个 packer.tar.gz</h3>
<p>这里 进入文件夹 <code>rosco/master </code> <code>rosco</code> 有一个文件夹叫packer，这将其移至文件夹并解压缩为 <code>packer.tar.gz </code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mv ~/.hal/.boms/rosco/master/packer.tar.gz ~/.hal/.boms/rosco
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ~/.hal/.boms/rosco
</span></span><span class="line"><span class="cl">tar xvf packer.tar.gz
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="为bom服务配置local关键字">为BOM服务配置local关键字</h3>
<p>对于离线安装，我们需要为 BOM 中的每个服务使用的镜像名称都增加一个 <code>local:</code> 前缀，这是官方的固定格式 <sup><a href="#5">[5]</a></sup></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">dependencies</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">consul</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">0.7.5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">redis</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="p">:</span><span class="m">2.8.4-2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">vault</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">0.7.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">clouddriver</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">commit</span><span class="p">:</span><span class="w"> </span><span class="l">024b9220a1322f80ed732de9f58aec2768e93d1b</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">local:6.4.3-20191210131345</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">...</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="配置镜像获取源">配置镜像获取源</h3>
<p>这里可以选择 直接 docker 导入镜像到每个 Kubernetes worker 节点上，也可以选择配置私有镜像仓库。</p>
<p>如果需要使用私有镜像，那么需要修改  <code>VERSION.yml</code> 中的dockerRegistry 选项，将其修改为你自己的镜像仓库</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">artifactSources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">debianRepository</span><span class="p">:</span><span class="w"> </span><span class="l">https://dl.bintray.com/spinnaker-releases/debians</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#dockerRegistry: gcr.io/spinnaker-marketplace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">dockerRegistry</span><span class="p">:</span><span class="w"> </span><span class="l">private-docker-registry/repository-name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">gitPrefix</span><span class="p">:</span><span class="w"> </span><span class="l">https://github.com/spinnaker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">googleImageProject</span><span class="p">:</span><span class="w"> </span><span class="l">marketplace-spinnaker-release</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>或者使用 <code>docker save</code> 通过命令导出镜像为 <code>tar.gz</code> 文件，然后导入到所有的 Kubernetes 的工作节点上</p>
<h3 id="部署">部署</h3>
<p>可以直接执行 <code>hal deploy</code> 命令可以进行部署，更新，删除等操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hal deploy apply <span class="c1"># 部署</span>
</span></span><span class="line"><span class="cl">hal deploy clean <span class="c1"># 一键清理已经部署的服务</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="troubleshooting">Troubleshooting</h2>
<h3 id="could-not-load-versionsyml-from-config-bucket-xx-supa-href22asup">Could not load &ldquo;versions.yml&rdquo; from config bucket: xx <sup><a href="#2">[2]</a></sup></h3>
<p>这是因为默认情况下从GCS读取配置文件，可以通过修改配置文件 <code>/opt/spinanker/config/halyard-local.yml</code> 关闭 gcs 功能（或 <code>/opt/halyard/config/halyard.yml </code>）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8064</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spinnaker</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">artifacts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">debian</span><span class="p">:</span><span class="w"> </span><span class="l">https://us-apt.pkg.dev/projects/spinnaker-community</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">docker</span><span class="p">:</span><span class="w"> </span><span class="l">us-docker.pkg.dev/spinnaker-community/docker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">input</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">gcs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">writerEnabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">bucket</span><span class="p">:</span><span class="w"> </span><span class="l">halconfig</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Notes: 修改完成后需要重启进程，并且修改时需要使用root用户进入容器内</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">docker exec -it 4f3c037d2e3c bash
</span></span><span class="line"><span class="cl">hal shutdown
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<h3 id="unable-to-retrieve-profile-clouddriveryml">Unable to retrieve profile &ldquo;clouddriver.yml&rdquo;</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Validation in Global:
</span></span><span class="line"><span class="cl">! ERROR Unable to retrieve profile <span class="s2">&#34;clouddriver.yml&#34;</span>: connect timed out
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决：BOM需要按照固定格式，创建对应每个配置文件的清单</p>
<h3 id="unable-to-retrieve-profile-versionsyml">Unable to retrieve profile &ldquo;versions.yml&rdquo;</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Validation in Global:
</span></span><span class="line"><span class="cl">! ERROR Unable to retrieve profile <span class="s2">&#34;versions.yml&#34;</span>: connect timed out
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决：关闭 GCS 即可</p>
<h3 id="no-persistent-storage-type-was-configured">No persistent storage type was configured</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Validation in Global:
</span></span><span class="line"><span class="cl">! ERROR No persistent storage <span class="nb">type</span> was configured.
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决：<code>hal config storage s3 edit</code></p>
<h3 id="error-retirveing-contentes-of-archive-packertargz">Error retirveing contentes of archive packer.tar.gz</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Validation in Global:
</span></span><span class="line"><span class="cl">! ERROR Error retirveing contentes of archive packer.tar.gz
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决：拷贝对应服务的 github 仓库中的 packer 文件夹</p>
<h3 id="no-profile-reader-exists-to-read">No profile reader exists to read</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">! ERROR No profile reader exists to <span class="nb">read</span> <span class="s1">&#39;6.7.1-20200319123809&#39;</span>.
</span></span><span class="line"><span class="cl">  Consider setting <span class="s1">&#39;spinnaker.config.input.gcs.enabled: true&#39;</span> in
</span></span><span class="line"><span class="cl">  /opt/spinnaker/config/halyard.yml
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决：因为 bom 文件中镜像没有设置 <code>local</code></p>
<h3 id="-error-no-persistent-storage-type-was-configured">! ERROR No persistent storage type was configured.</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">  Failure
</span></span><span class="line"><span class="cl">Validation in Global:
</span></span><span class="line"><span class="cl">! ERROR No persistent storage <span class="nb">type</span> was configured.
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决：<code>hal config storage edit --type s3 --no-validate</code></p>
<h3 id="cors-error">CORS error</h3>
<p>如下图所示：</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20230719230037546.png" alt="image-20230719230037546"  /></p>
<p>官方给出的检查方法是“排查 gate 服务的可用性” <sup><a href="#8">[8]</a></sup>，但检查 gate 日志没有问题，service ip 请求也是通的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">2023-07-19 15:01:05.150  INFO <span class="m">1</span> --- <span class="o">[</span>applications-10<span class="o">]</span> c.n.s.g.s.internal.ClouddriverService    : ---&gt; HTTP GET http://spin-clouddriver.spinnaker:7002/applications?restricted<span class="o">=</span>false<span class="p">&amp;</span><span class="nv">expand</span><span class="o">=</span><span class="nb">true</span>
</span></span><span class="line"><span class="cl">2023-07-19 15:01:05.186  INFO <span class="m">1</span> --- <span class="o">[</span>applications-10<span class="o">]</span> c.n.s.g.s.internal.ClouddriverService    : &lt;--- HTTP <span class="m">200</span> http://spin-clouddriver.spinnaker:7002/applications?restricted<span class="o">=</span>false<span class="p">&amp;</span><span class="nv">expand</span><span class="o">=</span><span class="nb">true</span> <span class="o">(</span>31ms<span class="o">)</span>
</span></span><span class="line"><span class="cl">2023-07-19 15:01:05.227  INFO <span class="m">1</span> --- <span class="o">[</span>-applications-9<span class="o">]</span> c.n.s.g.s.internal.Front50Service        : &lt;--- HTTP <span class="m">200</span> http://spin-front50.spinnaker:8080/v2/applications?restricted<span class="o">=</span><span class="nb">false</span> <span class="o">(</span>83ms<span class="o">)</span>
</span></span><span class="line"><span class="cl">2023-07-19 15:01:08.343  INFO <span class="m">1</span> --- <span class="o">[</span>TaskScheduler-6<span class="o">]</span> c.n.s.gate.plugins.deck.DeckPluginCache  : Refreshing plugin cache
</span></span><span class="line"><span class="cl">2023-07-19 15:01:08.343  INFO <span class="m">1</span> --- <span class="o">[</span>TaskScheduler-6<span class="o">]</span> c.n.s.gate.plugins.deck.DeckPluginCache  : Cached <span class="m">0</span> deck plugins
</span></span></code></pre></td></tr></table>
</div>
</div><p>请求 service ip + port</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl 10.111.192.125:8084 -vv
</span></span><span class="line"><span class="cl">* About to connect<span class="o">()</span> to 10.111.192.125 port <span class="m">8084</span> <span class="o">(</span><span class="c1">#0)</span>
</span></span><span class="line"><span class="cl">*   Trying 10.111.192.125...
</span></span><span class="line"><span class="cl">* Connected to 10.111.192.125 <span class="o">(</span>10.111.192.125<span class="o">)</span> port <span class="m">8084</span> <span class="o">(</span><span class="c1">#0)</span>
</span></span><span class="line"><span class="cl">&gt; GET / HTTP/1.1
</span></span><span class="line"><span class="cl">&gt; User-Agent: curl/7.29.0
</span></span><span class="line"><span class="cl">&gt; Host: 10.111.192.125:8084
</span></span><span class="line"><span class="cl">&gt; Accept: */*
</span></span><span class="line"><span class="cl">&gt; 
</span></span><span class="line"><span class="cl">&lt; HTTP/1.1 <span class="m">302</span> 
</span></span><span class="line"><span class="cl">&lt; Access-Control-Allow-Credentials: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">&lt; Access-Control-Allow-Origin: *
</span></span><span class="line"><span class="cl">&lt; Access-Control-Allow-Methods: POST, GET, OPTIONS, DELETE, PUT, PATCH
</span></span><span class="line"><span class="cl">&lt; Access-Control-Max-Age: <span class="m">3600</span>
</span></span><span class="line"><span class="cl">&lt; Access-Control-Allow-Headers: x-requested-with, content-type, authorization, X-RateLimit-App, X-Spinnaker-Priority
</span></span><span class="line"><span class="cl">&lt; Access-Control-Expose-Headers: X-AUTH-REDIRECT-URL
</span></span><span class="line"><span class="cl">&lt; X-SPINNAKER-REQUEST-ID: 6b96a924-9bcb-496c-9389-12cc6834aff7
</span></span><span class="line"><span class="cl">&lt; X-Content-Type-Options: nosniff
</span></span><span class="line"><span class="cl">&lt; X-XSS-Protection: 1<span class="p">;</span> <span class="nv">mode</span><span class="o">=</span>block
</span></span><span class="line"><span class="cl">&lt; Cache-Control: no-cache, no-store, max-age<span class="o">=</span>0, must-revalidate
</span></span><span class="line"><span class="cl">&lt; Pragma: no-cache
</span></span><span class="line"><span class="cl">&lt; Expires: <span class="m">0</span>
</span></span><span class="line"><span class="cl">&lt; X-Frame-Options: DENY
</span></span><span class="line"><span class="cl">&lt; Location: http://spin-deck.spinnaker:9000
</span></span><span class="line"><span class="cl">&lt; Content-Length: <span class="m">0</span>
</span></span><span class="line"><span class="cl">&lt; Date: Wed, <span class="m">19</span> Jul <span class="m">2023</span> 15:01:28 GMT
</span></span><span class="line"><span class="cl">&lt; 
</span></span><span class="line"><span class="cl">* Connection <span class="c1">#0 to host 10.111.192.125 left intact</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>浏览器访问 gate url 也是正常的</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20230719230307938.png" alt="image-20230719230307938"  /></p>
<h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://spinnaker.io/docs/setup/install/halyard/#install-halyard-on-docker">Install Halyard on Docker</a></p>
<p><sup id="2">[2]</sup> <a href="https://github.com/spinnaker/spinnaker/issues/3920">ERROR Could not load &ldquo;versions.yml&rdquo; from config bucket: 403 #3920</a></p>
<p><sup id="3">[3]</sup> <a href="https://stackoverflow.com/questions/54947839/spinnaker-how-to-bring-custom-boms-into-spinnaker-pod-to-be-able-to-deploy-it-w">Spinnaker: How to bring custom boms into spinnaker pod to be able to deploy it with hal?</a></p>
<p><sup id="4">[4]</sup> <a href="https://min.io/docs/minio/kubernetes/upstream/index.html#procedure">MinIO Object Storage for Kubernetes</a></p>
<p><sup id="5">[5]</sup> <a href="https://spinnaker.io/docs/guides/operator/custom-boms/#boms-and-configuration-on-your-filesystem">BOMs and Configuration on your Filesystem</a></p>
<p><sup id="6">[6]</sup> <a href="https://github.com/spinnaker/spinnaker/issues/5875">! ERROR No persistent storage type was configured.  #5875</a></p>
<p><sup id="7">[7]</sup> <a href="https://kimmj.github.io/spinnaker/installation/install-in-air-gaped-environment/">Install in Air Gaped Environment</a></p>
<p><sup id="8">[8]</sup> <a href="https://spinnaker.io/docs/setup/install/faq/#i-cant-load-the-applications-screen">I can’t load the Applications screen</a></p>
<p><sup id="9">[9]</sup> <a href="https://github.com/spinnaker/spinnaker/issues/4689">use k8s cluster private, how to access? not use localhost! #4689</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>无互联网环境下安装Spinnaker - Offline Install Spinnaker</title>
      <link>https://www.oomkill.com/2023/07/ch02-offline-installtation/</link>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/07/ch02-offline-installtation/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="prerequisites">Prerequisites</h2>
<ul>
<li>具有一个 Kubernetes 集群 以部署 Spinnaker</li>
<li>可运行 Docker 的环境  (1 vCPU, 3.75 GB) 或者是 Ubuntu，用以安装 <em>Halyard</em> (用于 spinnaker 的服务)</li>
<li>对象存储 (MinIO)，用于持久化 Spinnaker 的数据</li>
<li>对象存储的 Bucket 的访问账号</li>
</ul>
<h2 id="安装执行步骤">安装执行步骤</h2>
<h3 id="安装-halyard">安装 Halyard</h3>
<p>可以直接使用 Docker 方式安装，这个没什么必要性，就是管理工具而已，参考附录1 <sup><a href="#1">[1]</a></sup></p>
<p>首先创建映射目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir ~/.hal -pv
</span></span><span class="line"><span class="cl">mkdir ~/.kubeconfig -pv
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后执行 docker run 运行容器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -d -p 8084:8084 -p 9000:9000 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name halyard --rm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v ~/.hal:/home/spinnaker/.hal <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v ~/.kubeconfig:/home/spinnaker/.kube <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /usr/local/bin:/usr/local/sbin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /etc/kubernetes/auth/admin.conf:/home/spinnaker/.kube/config <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
</span></span></code></pre></td></tr></table>
</div>
</div><p>因为 docker 环境不能重启服务，需要修改配置文件，这里可以在外部创建一个配置文件来映射进去，这里后面会说到 GCS 的问题</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run -it --rm us-docker.pkg.dev/spinnaker-community/docker/halyard:stable cat /opt/halyard/config/halyard.yml &gt; /tmp/halyard.yml
</span></span></code></pre></td></tr></table>
</div>
</div><p>修改 spinnaker 部分的配置，将 <code>enabled: true</code> ，改为 <code>enabled: false</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spinnaker</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">artifacts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">debian</span><span class="p">:</span><span class="w"> </span><span class="l">https://us-apt.pkg.dev/projects/spinnaker-community</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">docker</span><span class="p">:</span><span class="w"> </span><span class="l">us-docker.pkg.dev/spinnaker-community/docker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">input</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">gcs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">writerEnabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">bucket</span><span class="p">:</span><span class="w"> </span><span class="l">halconfig</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>然后将输出的配置文件保存到宿主机，而后映射到容器内即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -d -p 8084:8084 -p 9000:9000 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --name halyard --rm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v ~/.hal:/home/spinnaker/.hal <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v ~/.kubeconfig:/home/spinnaker/.kube <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /usr/local/bin:/usr/local/sbin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /etc/kubernetes/auth/admin.conf:/home/spinnaker/.kube/config <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v /tmp/halyard.yml:/opt/halyard/config/halyard.yml <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    us-docker.pkg.dev/spinnaker-community/docker/halyard:stable
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装kubectl">安装kubectl</h3>
<blockquote>
<p>这部分在上一章中注明了挂载 kubectl 的路径</p>
</blockquote>
<p>使用 Docker 运行的 Halyard 可以直接挂在 kubectl 到 容器内就可以了，halyard 默认的路径在 <code>/usr/local/bin</code>  只要避免和这个路径冲突就可以了。</p>
<blockquote>
<p>halyard 中附带的 kubectl 不一定与你的集群版本一致</p>
</blockquote>
<p>最后进入容器就可以管理 spinnaker 了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker <span class="nb">exec</span> -it halyard bash
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="生成一个-halyard-config-supa-href33asup">生成一个 Halyard config <sup><a href="#3">[3]</a></sup></h3>
<p>离线安装时，需要生成一个 Halyard config 文件，默认在 <code>~/.hal/config</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hal config version edit --version local:1.19.2
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Notes:</p>
<ul>
<li>如果是选择离线安装或者 Local 方式安装，那么 local 关键字必须加</li>
<li>如果主机没有网，此时需要指定参数 <code>--no-validate</code> 来控制关闭验证，验证通常要联网</li>
<li>对于执行大部分的 hal 命令都会在 <code>~/.hal/config</code> 生成配置文件</li>
</ul>
</blockquote>
<h3 id="选择云供应商">选择云供应商</h3>
<p>这里可以指选择一个 Kubernetes 集群将其添加到 Halyard config 中</p>
<blockquote>
<p>注意，这里需要时 Kubectl 可以正常请求集群，即需要 kubectl 与 kubeconfig</p>
</blockquote>
<p>但在选择 Kubernetes 作为 Halyard 的 provider 之前，可以在 Kubernetes 中创建一个新的 service 以在 Halyard 中使用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Run in Halyard container</span>
</span></span><span class="line"><span class="cl"><span class="nv">CONTEXT</span><span class="o">=</span><span class="k">$(</span>kubectl config current-context<span class="k">)</span>
</span></span><span class="line"><span class="cl">kubectl apply --context <span class="nv">$CONTEXT</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -f https://spinnaker.io/downloads/kubernetes/service-account.yml
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">TOKEN</span><span class="o">=</span><span class="k">$(</span>kubectl get secret --context <span class="nv">$CONTEXT</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   <span class="k">$(</span>kubectl get serviceaccount spinnaker-service-account <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>       --context <span class="nv">$CONTEXT</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>       -n spinnaker <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>       -o <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">&#39;{.secrets[0].name}&#39;</span><span class="k">)</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   -n spinnaker <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   -o <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">&#39;{.data.token}&#39;</span> <span class="p">|</span> base64 --decode<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">kubectl config set-credentials <span class="si">${</span><span class="nv">CONTEXT</span><span class="si">}</span>-token-user --token <span class="nv">$TOKEN</span>
</span></span><span class="line"><span class="cl">kubectl config set-context <span class="nv">$CONTEXT</span> --user <span class="si">${</span><span class="nv">CONTEXT</span><span class="si">}</span>-token-user
</span></span></code></pre></td></tr></table>
</div>
</div><p>启用 kubernetes，并配置使用的 kubernetes 用户</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># Run in Halyard container</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">hal config provider kubernetes <span class="nb">enable</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">ACCOUNT</span><span class="o">=</span><span class="s2">&#34;my-k8s-account&#34;</span>
</span></span><span class="line"><span class="cl">hal config provider kubernetes account add <span class="si">${</span><span class="nv">ACCOUNT</span><span class="si">}</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --context <span class="si">${</span><span class="nv">CONTEXT</span><span class="si">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Halyard 有几种部署 Spinnaker 服务的选项，例如Local, git 和 Distributed，这里使用 Distributed 模式，将 Spinnaker 以分布式方式部署到 Kubernetes内。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hal config deploy edit --type distributed --account-name <span class="nv">$ACCOUNT</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="配置s3存储">配置S3存储</h3>
<p>Spinnaker 需要外部存储，例如 S3 对象存储置，为此，我使用 Minio 作为外部存储服务。这里使用 docker 进行部署，作为学习，也可以使用 minIO 官方提供的 minIO-dev <sup><a href="#4">[4]</a></sup>，可以快速在 Kubernetes 集群上部署一个单实例的 minIO</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># System</span>
</span></span><span class="line"><span class="cl"><span class="nv">MINIO_ROOT_USER</span><span class="o">=</span><span class="k">$(</span>&lt; /dev/urandom tr -dc a-z <span class="p">|</span> head -c<span class="si">${</span><span class="nv">1</span><span class="k">:-</span><span class="nv">4</span><span class="si">}</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">MINIO_ROOT_PASSWORD</span><span class="o">=</span><span class="k">$(</span>&lt; /dev/urandom tr -dc _A-Z-a-z-0-9 <span class="p">|</span> head -c<span class="si">${</span><span class="nv">1</span><span class="k">:-</span><span class="nv">8</span><span class="si">}</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nv">MINIO_PORT</span><span class="o">=</span><span class="s2">&#34;9010&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Start the container</span>
</span></span><span class="line"><span class="cl">docker run -it -d --rm -v ~/.minio-data/:/data --name minio-4-spinnaker -p <span class="si">${</span><span class="nv">MINIO_PORT</span><span class="si">}</span>:<span class="si">${</span><span class="nv">MINIO_PORT</span><span class="si">}</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-e <span class="nv">MINIO_ROOT_USER</span><span class="o">=</span><span class="si">${</span><span class="nv">MINIO_ROOT_USER</span><span class="si">}</span> -e  <span class="nv">MINIO_ROOT_PASSWORD</span><span class="o">=</span><span class="si">${</span><span class="nv">MINIO_ROOT_PASSWORD</span><span class="si">}</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> minio/minio  server /data --address :<span class="si">${</span><span class="nv">MINIO_PORT</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># This information is used in next {.1}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">MINIO_ROOT_USER=</span><span class="si">${</span><span class="nv">MINIO_ROOT_USER</span><span class="si">}</span><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">MINIO_ROOT_PASSWORD=</span><span class="si">${</span><span class="nv">MINIO_ROOT_PASSWORD</span><span class="si">}</span><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">ENDPOINT=http://</span><span class="k">$(</span>docker inspect -f <span class="s1">&#39;{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}&#39;</span> minio-4-spinnaker<span class="k">)</span><span class="s2">:</span><span class="si">${</span><span class="nv">MINIO_PORT</span><span class="si">}</span><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果需要开启，那么需要在目录 <code>~/.hal/default/profiles/front50-local.yml</code> 创建文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">spinnaker:
</span></span><span class="line"><span class="cl">  s3:
</span></span><span class="line"><span class="cl">    versioning: <span class="nb">false</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后使用以下命令进行配置到 halyard config 文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">ENDPOINT</span><span class="o">=</span>http://10.0.2.4:9000
</span></span><span class="line"><span class="cl"><span class="nv">MINIO_ACCESS_KEY</span><span class="o">=</span>minio
</span></span><span class="line"><span class="cl"><span class="nv">MINIO_SECRET_KEY</span><span class="o">=</span>minio123
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">$MINIO_SECRET_KEY</span> <span class="p">|</span> hal config storage s3 edit --endpoint <span class="nv">$ENDPOINT</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --access-key-id <span class="nv">$MINIO_ACCESS_KEY</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --secret-access-key
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">hal config storage edit --type s3
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="生成一个bom文件">生成一个BOM文件</h3>
<p>找一台有外网的主机，执行下列命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hal version bom 1.19.2 -q -o yaml
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Note: 如果开启了 <code>gcs.enabled: true</code> 需要重新启动一个容器，因为这个步骤需要联网查询</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nv">DOCKERID</span><span class="o">=</span><span class="sb">`</span>docker run -d --rm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    -v ~/.hal:/home/spinnaker/.hal <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    us-docker.pkg.dev/spinnaker-community/docker/halyard:stable<span class="sb">`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ docker <span class="nb">exec</span> -it <span class="si">${</span><span class="nv">DOCKERID</span><span class="si">}</span> hal version bom 1.19.2 -q -o yaml <span class="o">&amp;&amp;</span> docker stop <span class="si">${</span><span class="nv">DOCKERID</span><span class="si">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>将输出的文件保存在 halyard 容器内 <code>~/.hal/.boms/bom/{version}.yml</code> ，将 <code>{version}</code> 替换为你安装的版本，例如这里为 1.19.2</p>
<p>其次，要在本地执行此操作的容器内，需要在 <code>halconfig</code> 目录下有对应的 BOM 清单，清单格式如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ tree ~/.hal/.boms/
</span></span><span class="line"><span class="cl">/root/.hal/.boms/
</span></span><span class="line"><span class="cl">├── bom
</span></span><span class="line"><span class="cl">│   └── 1.19.2.yml
</span></span><span class="line"><span class="cl">├── clouddriver
</span></span><span class="line"><span class="cl">│   └── clouddriver.yml
</span></span><span class="line"><span class="cl">├── deck
</span></span><span class="line"><span class="cl">│   └── settings.js
</span></span><span class="line"><span class="cl">├── <span class="nb">echo</span>
</span></span><span class="line"><span class="cl">│   └── echo.yml
</span></span><span class="line"><span class="cl">├── fiat
</span></span><span class="line"><span class="cl">│   └── fiat.yml
</span></span><span class="line"><span class="cl">├── front50
</span></span><span class="line"><span class="cl">│   └── front50.yml
</span></span><span class="line"><span class="cl">├── gate
</span></span><span class="line"><span class="cl">│   └── gate.yml
</span></span><span class="line"><span class="cl">├── igor
</span></span><span class="line"><span class="cl">│   └── igor.yml
</span></span><span class="line"><span class="cl">├── kayenta
</span></span><span class="line"><span class="cl">│   └── kayenta.yml
</span></span><span class="line"><span class="cl">├── orca
</span></span><span class="line"><span class="cl">│   └── orca.yml
</span></span><span class="line"><span class="cl">└── rosco
</span></span><span class="line"><span class="cl">    └── rosco.yml
</span></span></code></pre></td></tr></table>
</div>
</div><p>这些文件夹需要自行创建，并且里面的配置文件也需要自行创建，如果不知道格式如何，可以参考 Spinnaker github 仓库上，每一个上面的文件夹都是一个项目仓库，而这些仓库的根目录都存在一个 <em><strong>halconfig</strong></em> 目录，此时需要你将对应的文件保存到对应目录下，例如，clouddriver 文件夹需要选择 <a href="https://github.com/spinnaker/clouddriver/tree/master/halconfig">github.com/spinnaker/clouddriver</a> 项目，而配置文件需要选择 <code>{service_name}.yml</code> 为命名的，例如 clouddriver 就需要选择 clouddriver.yml，这个需要自行下载。</p>
<p>可以使用下列脚本进行生成这些配置文件（需要上网）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1">####################################################################################</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                         Install Spinnaker scripts for CentOS                     #</span>
</span></span><span class="line"><span class="cl"><span class="c1">####################################################################################</span>
</span></span><span class="line"><span class="cl"><span class="nb">set</span> -e
</span></span><span class="line"><span class="cl"><span class="nv">START_TIME</span><span class="o">=</span><span class="sb">`</span>date +%s<span class="sb">`</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span>/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">ROOT</span><span class="o">=</span><span class="k">$(</span><span class="nb">cd</span> <span class="k">$(</span>dirname <span class="nv">$0</span><span class="k">)</span><span class="p">;</span> <span class="nb">pwd</span><span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">BASE_URL</span><span class="o">=</span><span class="s2">&#34;https://raw.githubusercontent.com/spinnaker&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">DECK_FILE_NAME</span><span class="o">=</span><span class="s2">&#34;halconfig/settings.js&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">FILE_PREFIX</span><span class="o">=</span><span class="s2">&#34;halconfig&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">usage<span class="o">(){</span>
</span></span><span class="line"><span class="cl">	cat <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">Usage: $CMD &lt;bom_file&gt; &lt;output_dir&gt;
</span></span></span><span class="line"><span class="cl"><span class="s">    $CMD ~/.hal/.boms/bom/1.20.0.yml ~/.hal/.boms
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> install_json_tools<span class="o">(){</span>
</span></span><span class="line"><span class="cl">    which jq <span class="p">&amp;</span>&gt; /dev/null <span class="o">||</span> sudo yum install jq -y
</span></span><span class="line"><span class="cl">    which yq <span class="o">||</span> <span class="o">(</span> wget https://github.com/mikefarah/yq/releases/download/v4.16.2/yq_linux_amd64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> chmod +x yq_linux_amd64 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="o">&amp;&amp;</span> mv yq_linux_amd64 /usr/local/bin/yq <span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> remove_json_tools<span class="o">(){</span>
</span></span><span class="line"><span class="cl">   rm -f a/usr/local/bin/yq
</span></span><span class="line"><span class="cl">   rpm -e jq --force
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> pull_packer<span class="o">(){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">##check paramter##</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[[</span> <span class="si">${#}</span> -ne <span class="m">1</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="nb">echo</span> -e <span class="s2">&#34;\033[32m Paramter amount error. \033[0m&#34;</span> <span class="o">&amp;&amp;</span> <span class="nb">exit</span> <span class="si">${</span><span class="nv">MALFORMEDPARAMTER</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nb">export</span> <span class="nv">SPIN_TMP_DIR</span><span class="o">=</span><span class="si">${</span><span class="nv">ROOT</span><span class="si">}</span>/spin_installer
</span></span><span class="line"><span class="cl">    <span class="o">[</span> -d <span class="si">${</span><span class="nv">SPIN_TMP_DIR</span><span class="si">}</span> <span class="o">]</span> <span class="o">||</span> mkdir -pv <span class="si">${</span><span class="nv">SPIN_TMP_DIR</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">cd</span> <span class="si">${</span><span class="nv">SPIN_TMP_DIR</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">    git init
</span></span><span class="line"><span class="cl">    <span class="c1"># 配置远程仓库地址</span>
</span></span><span class="line"><span class="cl">    git remote add origin https://github.com/spinnaker/rosco
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 启用 sparse checkout</span>
</span></span><span class="line"><span class="cl">    git config core.sparsecheckout <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 指定要克隆的目录</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;halconfig/packer&#34;</span> &gt;&gt; .git/info/sparse-checkout
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 拉取远程仓库的内容</span>
</span></span><span class="line"><span class="cl">    git pull origin <span class="si">${</span><span class="nv">1</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">    tar zcf packer.tar.gz -C ./halconfig packer
</span></span><span class="line"><span class="cl">    mv packer.tar.gz <span class="si">${</span><span class="nv">BOM_PATH_I</span><span class="si">}</span>/
</span></span><span class="line"><span class="cl">    <span class="c1"># clean work dir</span>
</span></span><span class="line"><span class="cl">    <span class="nb">cd</span> <span class="si">${</span><span class="nv">ROOT</span><span class="si">}</span> <span class="o">&amp;&amp;</span> rm -fr <span class="si">${</span><span class="nv">SPIN_TMP_DIR</span><span class="si">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">function</span> gererate_bom<span class="o">(){</span>
</span></span><span class="line"><span class="cl">    yq <span class="nb">eval</span> -o json <span class="si">${</span><span class="nv">BOM_FILE_NAME</span><span class="si">}</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">    jq <span class="s1">&#39;.services&#39;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">    jq <span class="s1">&#39;del(.defaultArtifact ,.[&#34;monitoring-third-party&#34;], .[&#34;monitoring-daemon&#34;])&#39;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">    jq -r <span class="s1">&#39;to_entries[] | &#34;\(.key)=\(.value)&#34;&#39;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="nv">IFS</span><span class="o">=</span><span class="s2">&#34;=&#34;</span> <span class="nb">read</span> -r key value<span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">        <span class="nv">VERSION</span><span class="o">=</span><span class="s2">&#34;version-`echo </span><span class="nv">$value</span><span class="s2"> | jq &#39;.version&#39;|awk -F &#39;=&#39; &#39;{print </span><span class="nv">$1</span><span class="s2">}&#39; | awk -F &#39;-&#39; &#39;{print </span><span class="nv">$1</span><span class="s2">}&#39;| tr -d &#39;&#34;</span><span class="s1">&#39;`&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">        
</span></span></span><span class="line"><span class="cl"><span class="s1">        export BOM_PATH_I=${BOM_PATH}/${key}
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">        [ -d ${BOM_PATH_I} ] || mkdir -pv ${BOM_PATH_I}; chmod 777 ${BOM_PATH_I}
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">        case ${key} in
</span></span></span><span class="line"><span class="cl"><span class="s1">            &#34;deck&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s1">                curl &#34;${BASE_URL}/${key}/${VERSION}/${FILE_PREFIX}/settings.js&#34; -o ${BOM_PATH_I}/settings.js
</span></span></span><span class="line"><span class="cl"><span class="s1">                ;;
</span></span></span><span class="line"><span class="cl"><span class="s1">            &#34;rosco&#34;)
</span></span></span><span class="line"><span class="cl"><span class="s1">                curl &#34;${BASE_URL}/${key}/${VERSION}/${FILE_PREFIX}/${key}.yml&#34; -o ${BOM_PATH_I}/${key}.yml
</span></span></span><span class="line"><span class="cl"><span class="s1">                curl &#34;${BASE_URL}/${key}/${VERSION}/${FILE_PREFIX}/images.yml&#34; -o ${BOM_PATH_I}/images.yml
</span></span></span><span class="line"><span class="cl"><span class="s1">                pull_packer ${VERSION}
</span></span></span><span class="line"><span class="cl"><span class="s1">                ;;
</span></span></span><span class="line"><span class="cl"><span class="s1">            *)
</span></span></span><span class="line"><span class="cl"><span class="s1">                curl &#34;${BASE_URL}/${key}/${VERSION}/${FILE_PREFIX}/${key}.yml&#34;  -o ${BOM_PATH_I}/${key}.yml
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">        esac
</span></span></span><span class="line"><span class="cl"><span class="s1">    done
</span></span></span><span class="line"><span class="cl"><span class="s1">    chmod 777 ${BOM_PATH} -R
</span></span></span><span class="line"><span class="cl"><span class="s1">}
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">function MAIN(){
</span></span></span><span class="line"><span class="cl"><span class="s1">    ##check user##
</span></span></span><span class="line"><span class="cl"><span class="s1">    if [[ $UID != 0 ]];then
</span></span></span><span class="line"><span class="cl"><span class="s1">        echo -e &#34;\033[41;05m Sorry, this script must be run as root! \033[0m&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">        exit ${ILLEGALUSER}
</span></span></span><span class="line"><span class="cl"><span class="s1">    fi
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    ##check paramter##
</span></span></span><span class="line"><span class="cl"><span class="s1">    if [[ ${#} -lt 2 ]]; then
</span></span></span><span class="line"><span class="cl"><span class="s1">        usage &amp;&amp; exit ${MALFORMEDPARAMTER}
</span></span></span><span class="line"><span class="cl"><span class="s1">    fi
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    export BOM_FILE_NAME=$1; shift
</span></span></span><span class="line"><span class="cl"><span class="s1">    export BOM_PATH=$1; shift
</span></span></span><span class="line"><span class="cl"><span class="s1">    
</span></span></span><span class="line"><span class="cl"><span class="s1">    ##cheking command line##
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">    install_json_tools
</span></span></span><span class="line"><span class="cl"><span class="s1">    
</span></span></span><span class="line"><span class="cl"><span class="s1">    ##processing bom##
</span></span></span><span class="line"><span class="cl"><span class="s1">    gererate_bom
</span></span></span><span class="line"><span class="cl"><span class="s1">
</span></span></span><span class="line"><span class="cl"><span class="s1">	END_TIME=`date +%s`
</span></span></span><span class="line"><span class="cl"><span class="s1">	EXECUTING_TIME=`expr $END_TIME - $START_TIME`
</span></span></span><span class="line"><span class="cl"><span class="s1">	echo -e &#34;\033[42;30m Time had spent $EXECUTING_TIME seconds. \033[0m&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">	echo -e &#34;\033[40;34m ######################################################### \033[0m&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">	echo -e &#39;</span><span class="se">\n</span><span class="err">&#39;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">MAIN <span class="nv">$1</span> <span class="nv">$2</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>在执行脚本时需要在容器运行的宿主机进行，如果这台主机没有网络，那么可以在其他机器执行</p>
</blockquote>
<h3 id="额外下载一个-packertargz">额外下载一个 packer.tar.gz</h3>
<p>这里 进入文件夹 <code>rosco/master </code> <code>rosco</code> 有一个文件夹叫packer，这将其移至文件夹并解压缩为 <code>packer.tar.gz </code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mv ~/.hal/.boms/rosco/master/packer.tar.gz ~/.hal/.boms/rosco
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ~/.hal/.boms/rosco
</span></span><span class="line"><span class="cl">tar xvf packer.tar.gz
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="为bom服务配置local关键字">为BOM服务配置local关键字</h3>
<p>对于离线安装，我们需要为 BOM 中的每个服务使用的镜像名称都增加一个 <code>local:</code> 前缀，这是官方的固定格式 <sup><a href="#5">[5]</a></sup></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">dependencies</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">consul</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">0.7.5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">redis</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="p">:</span><span class="m">2.8.4-2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">vault</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">0.7.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">clouddriver</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">commit</span><span class="p">:</span><span class="w"> </span><span class="l">024b9220a1322f80ed732de9f58aec2768e93d1b</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">local:6.4.3-20191210131345</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">...</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="配置镜像获取源">配置镜像获取源</h3>
<p>这里可以选择 直接 docker 导入镜像到每个 Kubernetes worker 节点上，也可以选择配置私有镜像仓库。</p>
<p>如果需要使用私有镜像，那么需要修改  <code>VERSION.yml</code> 中的dockerRegistry 选项，将其修改为你自己的镜像仓库</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">artifactSources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">debianRepository</span><span class="p">:</span><span class="w"> </span><span class="l">https://dl.bintray.com/spinnaker-releases/debians</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#dockerRegistry: gcr.io/spinnaker-marketplace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">dockerRegistry</span><span class="p">:</span><span class="w"> </span><span class="l">private-docker-registry/repository-name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">gitPrefix</span><span class="p">:</span><span class="w"> </span><span class="l">https://github.com/spinnaker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">googleImageProject</span><span class="p">:</span><span class="w"> </span><span class="l">marketplace-spinnaker-release</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>或者使用 <code>docker save</code> 通过命令导出镜像为 <code>tar.gz</code> 文件，然后导入到所有的 Kubernetes 的工作节点上</p>
<h3 id="部署">部署</h3>
<p>可以直接执行 <code>hal deploy</code> 命令可以进行部署，更新，删除等操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hal deploy apply <span class="c1"># 部署</span>
</span></span><span class="line"><span class="cl">hal deploy clean <span class="c1"># 一键清理已经部署的服务</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在默认部署情况下，igor 与 fiat 是不开启的，如果你配置了授权与CI的配置，那么会部署上这两个服务sss</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20230723163140283.png" alt="image-20230723163140283"  /></p>
<p>这里会生成 Kubernetes 的资源，而手动创建的资源会存在 S3 对象存储中</p>
<h2 id="troubleshooting">Troubleshooting</h2>
<h3 id="could-not-load-versionsyml-from-config-bucket-xx-supa-href22asup">Could not load &ldquo;versions.yml&rdquo; from config bucket: xx <sup><a href="#2">[2]</a></sup></h3>
<p>这是因为默认情况下从GCS读取配置文件，可以通过修改配置文件 <code>/opt/spinanker/config/halyard-local.yml</code> 关闭 gcs 功能（或 <code>/opt/halyard/config/halyard.yml </code>）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8064</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spinnaker</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">artifacts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">debian</span><span class="p">:</span><span class="w"> </span><span class="l">https://us-apt.pkg.dev/projects/spinnaker-community</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">docker</span><span class="p">:</span><span class="w"> </span><span class="l">us-docker.pkg.dev/spinnaker-community/docker</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">config</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">input</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">gcs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">writerEnabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">bucket</span><span class="p">:</span><span class="w"> </span><span class="l">halconfig</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Notes: 修改完成后需要重启进程，并且修改时需要使用root用户进入容器内</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">docker exec -it 4f3c037d2e3c bash
</span></span><span class="line"><span class="cl">hal shutdown
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<h3 id="unable-to-retrieve-profile-clouddriveryml">Unable to retrieve profile &ldquo;clouddriver.yml&rdquo;</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Validation in Global:
</span></span><span class="line"><span class="cl">! ERROR Unable to retrieve profile <span class="s2">&#34;clouddriver.yml&#34;</span>: connect timed out
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决：BOM需要按照固定格式，创建对应每个配置文件的清单</p>
<h3 id="unable-to-retrieve-profile-versionsyml">Unable to retrieve profile &ldquo;versions.yml&rdquo;</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Validation in Global:
</span></span><span class="line"><span class="cl">! ERROR Unable to retrieve profile <span class="s2">&#34;versions.yml&#34;</span>: connect timed out
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决：关闭 GCS 即可</p>
<h3 id="no-persistent-storage-type-was-configured">No persistent storage type was configured</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Validation in Global:
</span></span><span class="line"><span class="cl">! ERROR No persistent storage <span class="nb">type</span> was configured.
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决：<code>hal config storage s3 edit</code></p>
<h3 id="error-retirveing-contentes-of-archive-packertargz">Error retirveing contentes of archive packer.tar.gz</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Validation in Global:
</span></span><span class="line"><span class="cl">! ERROR Error retirveing contentes of archive packer.tar.gz
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决：拷贝对应服务的 github 仓库中的 packer 文件夹</p>
<h3 id="no-profile-reader-exists-to-read">No profile reader exists to read</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">! ERROR No profile reader exists to <span class="nb">read</span> <span class="s1">&#39;6.7.1-20200319123809&#39;</span>.
</span></span><span class="line"><span class="cl">  Consider setting <span class="s1">&#39;spinnaker.config.input.gcs.enabled: true&#39;</span> in
</span></span><span class="line"><span class="cl">  /opt/spinnaker/config/halyard.yml
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决：因为 bom 文件中镜像没有设置 <code>local</code></p>
<h3 id="access-to-xmlhttprequest-at-xxx-has-been-blocked-by-cors-policy">Access to XMLHttpRequest at &lsquo;xxx&rsquo; has been blocked by CORS policy</h3>
<p>如下图所示：</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20230719230037546.png" alt="image-20230719230037546"  /></p>
<p>官方给出的检查方法是“排查 gate 服务的可用性” <sup><a href="#8">[8]</a></sup>，但检查 gate 日志没有问题，service ip 请求也是通的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">2023-07-19 15:01:05.150  INFO <span class="m">1</span> --- <span class="o">[</span>applications-10<span class="o">]</span> c.n.s.g.s.internal.ClouddriverService    : ---&gt; HTTP GET http://spin-clouddriver.spinnaker:7002/applications?restricted<span class="o">=</span>false<span class="p">&amp;</span><span class="nv">expand</span><span class="o">=</span><span class="nb">true</span>
</span></span><span class="line"><span class="cl">2023-07-19 15:01:05.186  INFO <span class="m">1</span> --- <span class="o">[</span>applications-10<span class="o">]</span> c.n.s.g.s.internal.ClouddriverService    : &lt;--- HTTP <span class="m">200</span> http://spin-clouddriver.spinnaker:7002/applications?restricted<span class="o">=</span>false<span class="p">&amp;</span><span class="nv">expand</span><span class="o">=</span><span class="nb">true</span> <span class="o">(</span>31ms<span class="o">)</span>
</span></span><span class="line"><span class="cl">2023-07-19 15:01:05.227  INFO <span class="m">1</span> --- <span class="o">[</span>-applications-9<span class="o">]</span> c.n.s.g.s.internal.Front50Service        : &lt;--- HTTP <span class="m">200</span> http://spin-front50.spinnaker:8080/v2/applications?restricted<span class="o">=</span><span class="nb">false</span> <span class="o">(</span>83ms<span class="o">)</span>
</span></span><span class="line"><span class="cl">2023-07-19 15:01:08.343  INFO <span class="m">1</span> --- <span class="o">[</span>TaskScheduler-6<span class="o">]</span> c.n.s.gate.plugins.deck.DeckPluginCache  : Refreshing plugin cache
</span></span><span class="line"><span class="cl">2023-07-19 15:01:08.343  INFO <span class="m">1</span> --- <span class="o">[</span>TaskScheduler-6<span class="o">]</span> c.n.s.gate.plugins.deck.DeckPluginCache  : Cached <span class="m">0</span> deck plugins
</span></span></code></pre></td></tr></table>
</div>
</div><p>请求 service ip + port</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl 10.111.192.125:8084 -vv
</span></span><span class="line"><span class="cl">* About to connect<span class="o">()</span> to 10.111.192.125 port <span class="m">8084</span> <span class="o">(</span><span class="c1">#0)</span>
</span></span><span class="line"><span class="cl">*   Trying 10.111.192.125...
</span></span><span class="line"><span class="cl">* Connected to 10.111.192.125 <span class="o">(</span>10.111.192.125<span class="o">)</span> port <span class="m">8084</span> <span class="o">(</span><span class="c1">#0)</span>
</span></span><span class="line"><span class="cl">&gt; GET / HTTP/1.1
</span></span><span class="line"><span class="cl">&gt; User-Agent: curl/7.29.0
</span></span><span class="line"><span class="cl">&gt; Host: 10.111.192.125:8084
</span></span><span class="line"><span class="cl">&gt; Accept: */*
</span></span><span class="line"><span class="cl">&gt; 
</span></span><span class="line"><span class="cl">&lt; HTTP/1.1 <span class="m">302</span> 
</span></span><span class="line"><span class="cl">&lt; Access-Control-Allow-Credentials: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">&lt; Access-Control-Allow-Origin: *
</span></span><span class="line"><span class="cl">&lt; Access-Control-Allow-Methods: POST, GET, OPTIONS, DELETE, PUT, PATCH
</span></span><span class="line"><span class="cl">&lt; Access-Control-Max-Age: <span class="m">3600</span>
</span></span><span class="line"><span class="cl">&lt; Access-Control-Allow-Headers: x-requested-with, content-type, authorization, X-RateLimit-App, X-Spinnaker-Priority
</span></span><span class="line"><span class="cl">&lt; Access-Control-Expose-Headers: X-AUTH-REDIRECT-URL
</span></span><span class="line"><span class="cl">&lt; X-SPINNAKER-REQUEST-ID: 6b96a924-9bcb-496c-9389-12cc6834aff7
</span></span><span class="line"><span class="cl">&lt; X-Content-Type-Options: nosniff
</span></span><span class="line"><span class="cl">&lt; X-XSS-Protection: 1<span class="p">;</span> <span class="nv">mode</span><span class="o">=</span>block
</span></span><span class="line"><span class="cl">&lt; Cache-Control: no-cache, no-store, max-age<span class="o">=</span>0, must-revalidate
</span></span><span class="line"><span class="cl">&lt; Pragma: no-cache
</span></span><span class="line"><span class="cl">&lt; Expires: <span class="m">0</span>
</span></span><span class="line"><span class="cl">&lt; X-Frame-Options: DENY
</span></span><span class="line"><span class="cl">&lt; Location: http://spin-deck.spinnaker:9000
</span></span><span class="line"><span class="cl">&lt; Content-Length: <span class="m">0</span>
</span></span><span class="line"><span class="cl">&lt; Date: Wed, <span class="m">19</span> Jul <span class="m">2023</span> 15:01:28 GMT
</span></span><span class="line"><span class="cl">&lt; 
</span></span><span class="line"><span class="cl">* Connection <span class="c1">#0 to host 10.111.192.125 left intact</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>浏览器访问 gate url 也是正常的</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20230719230307938.png" alt="image-20230719230307938"  /></p>
<p>访问首页提示如下错误，但是单独访问 gate 页面没有问题</p>
<p>报错如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Access to XMLHttpRequest at &#39;http://gate.spinnaker.fuck:30080/credentials?expand=true&#39; from origin &#39;http://deck.spinnaker.fuck:30080&#39; has been blocked by CORS policy: Response to preflight request doesn&#39;t pass access control check: The value of the &#39;Access-Control-Allow-Origin&#39; header in the response must not be the wildcard &#39;*&#39; when the request&#39;s credentials mode is &#39;include&#39;. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.Access to XMLHttpRequest at &#39;http://gate.spinnaker.fuck:30080/credentials?expand=true&#39; from origin &#39;http://deck.spinnaker.fuck:30080&#39; has been blocked by CORS policy: Response to preflight request doesn&#39;t pass access control check: The value of the &#39;Access-Control-Allow-Origin&#39; header in the response must not be the wildcard &#39;*&#39; when the request&#39;s credentials mode is &#39;include&#39;. The credentials mode of requests initiated by the XMLHttpRequest is controlled by the withCredentials attribute.
</span></span></code></pre></td></tr></table>
</div>
</div><p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20230723162227426.png" alt="image-20230723162227426"  /></p>
<center>图：spinnaker首页报错 - 跨源资源共享问题</center>
<p>解决：如果使用 Halyard 部署 Spinnaker，则可以使用以下设置创建文件 <code>~/.hal/default/profiles/gate-local.yml</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">cors</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">allowedOriginsPattern</span><span class="p">:</span><span class="w"> </span>{<span class="l">you gate url}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://spinnaker.io/docs/setup/install/halyard/#install-halyard-on-docker">Install Halyard on Docker</a></p>
<p><sup id="2">[2]</sup> <a href="https://github.com/spinnaker/spinnaker/issues/3920">ERROR Could not load &ldquo;versions.yml&rdquo; from config bucket: 403 #3920</a></p>
<p><sup id="3">[3]</sup> <a href="https://stackoverflow.com/questions/54947839/spinnaker-how-to-bring-custom-boms-into-spinnaker-pod-to-be-able-to-deploy-it-w">Spinnaker: How to bring custom boms into spinnaker pod to be able to deploy it with hal?</a></p>
<p><sup id="4">[4]</sup> <a href="https://min.io/docs/minio/kubernetes/upstream/index.html#procedure">MinIO Object Storage for Kubernetes</a></p>
<p><sup id="5">[5]</sup> <a href="https://spinnaker.io/docs/guides/operator/custom-boms/#boms-and-configuration-on-your-filesystem">BOMs and Configuration on your Filesystem</a></p>
<p><sup id="6">[6]</sup> <a href="https://github.com/spinnaker/spinnaker/issues/5875">! ERROR No persistent storage type was configured.  #5875</a></p>
<p><sup id="7">[7]</sup> <a href="https://kimmj.github.io/spinnaker/installation/install-in-air-gaped-environment/">Install in Air Gaped Environment</a></p>
<p><sup id="8">[8]</sup> <a href="https://spinnaker.io/docs/setup/install/faq/#i-cant-load-the-applications-screen">I can’t load the Applications screen</a></p>
<p><sup id="9">[9]</sup> <a href="https://github.com/spinnaker/spinnaker/issues/4689">use k8s cluster private, how to access? not use localhost! #4689</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>初识 Spinnaker</title>
      <link>https://www.oomkill.com/2023/06/ch01-spinnaker-introduction/</link>
      <pubDate>Sun, 18 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/06/ch01-spinnaker-introduction/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="介绍">介绍</h2>
<p>Spinnaker 是一个由 Netflix 和 Google 领导开发的开源持续交付系统，用于管理不同计算平台上的应用部署。</p>
<p>开源，多云持续交付平台，可以帮助快速而稳定的发布软件更改，主要提供两个核心功能：“应用管理” 与 “应用程序部署”。</p>
<p>目前支持的云供应商：</p>
<ul>
<li>Kubernetes</li>
<li>Oracle</li>
<li>GCP</li>
<li>App Engine</li>
<li>Kubernetes</li>
<li>Microsoft</li>
<li>Cloud Foundry</li>
<li>Tencent</li>
<li>&hellip;.</li>
</ul>
<p>Netflix曾经有一个零散的连续输送的故事。每个组织的交付系统都是专门为该组织构建的，因此其他组织通常无法从该工作中受益。团队认为自己与众不同，并与Asgard一起致力于詹金斯的工作。所有这些重复的工作不仅浪费，而且使团队难以掌握最新的交付最佳实践并保持最新状态。</p>
<p>2014年，团队同意 Jenkins 之类的通用持续集成（CI）工具无法为构建具有所需安全性和灵活性的持续交付平台提供合适的基础。为此，一个新的工具诞生了。 Netflix 的交付工程团队与 Google 合作，构建了 Spinnaker，这是一个多云连续输送和基础架构管理工具，该工具可以集中管理并且足够灵活，可以让团队自定义交付内容，但是要进行标准化，以便为所有人带来最佳实践和安全性。 Spinnaker 汇集了数十年的经验，将软件编写和交付到每个人都可以使用的东西中，而无需经历同样的痛苦。</p>
<p>自从 Spinnaker 在开源社区中被广泛采用以来，维护者一直在不断添加新功能和集成，从而使 Spinnaker 在 Netflix，Google，Airbnb，Pinterest和 Snap 等公司中变得更加有用和具有粘性。</p>
<h2 id="spinnaker-功能">Spinnaker 功能</h2>
<ul>
<li>CI 工具集成：监听事件 , 收集制品。支持触发 Jenkins/TravisCI 管道。</li>
<li>cli 配置管理工具:使用 halyard 安装、配置和更新 Spinnaker 实例。</li>
<li>监控集成:使用指标进行金丝雕分析。支持Prometheus、Datadog等。</li>
<li>部署策略:内置highlander、red/black、canary、自定义策略。</li>
<li>基于角色访问控制:支持 oAuth、SAML、LDAP、X.509 证书等身份验证方式。</li>
<li>事件通知:设置email、Slack、HipChat或SMS的事件通知。</li>
<li>受限发布窗口:将阶段的执行限制在特定的时间范围内,确保在非高峰部署。</li>
</ul>
<h2 id="spinnaker-应用管理">Spinnaker 应用管理</h2>
<p>Spinnaker 应用程序对此概念进行了建模。应用程序，集群和服务器组是Spinnaker用来描述服务的</p>
<p>关键概念。负载均衡器和防火墙描述了服务如何向用户公开。</p>
<ul>
<li>应用：将要部罩的服务,该服务的所有配置以及将在其上运行的所有基础结构。可以通俗理解为，一个 Spiinaker 的应用程序，就是现实中的一个服务</li>
<li>集群：实例的集合(这里的集群不是 k8s 集群)。</li>
<li>服务器组：运行服务的实例(VM实例, Kubernetes容器)的集合。</li>
<li>“负载均衡器”：实例之间的流量控制，对应集群中的service（Kubernetes中的service）。</li>
<li>防火墙：网络流量的访问。它实际上是由IP范围(CIDR〉以及通信协议(例如TCP)和端口范围定义的一组防火墙规则。</li>
</ul>
<h2 id="应用部署">应用部署</h2>
<p>使用Spinnaker的应用程序部署功能来构建和管理连续交付工作流程。由一系列阶段组成。可配置根据事件自动触发。管道消息通知。</p>
<h2 id="spinnaker-架构组成">Spinnaker 架构组成</h2>
<ul>
<li>Deck：前端 web页面 “端口9000”</li>
<li>Gate：AP1网关，所有程序通过 gate 与spinnaker通信。端口8084</li>
<li>Orca：编排引攀,定义管道或任务，并管理阶段和任务，协调其他Spinnaker服务。端口8083</li>
<li>Clouddriver：云厂商适配器，负责对云厂商的变更资源调用。端口7002</li>
<li>Front50：用于保存应用程序、管道、项目和通知的元数据。端口8080</li>
<li>Rosco：为各种运供应商生成不可变的VM镜像。端口80871</li>
<li>Igor：持续集成系统集成,触发管道。端口8088</li>
<li>Echo：消息通知,负责发送通知。端口8089</li>
<li>Fiat：认证授权服务。端口7003</li>
<li>Kayenta：自动化的金丝雕分析。端口8090</li>
<li>Halyard：Spinnaker 生命周期配置管理工具。端口8064</li>
</ul>
<h2 id="halyard">Halyard</h2>
<p>Halyard是用于配置,安装和更新Spinnaker的工具。</p>
<p>Halconfig：是 Spinnaker 部署的所有配置的来源。它通常位于 “/.hal/config“，但可以通过<code>halyard.halconfig.directorySpring</code> 的 config 属性更改其目录。</p>
<h2 id="安装-spinnaker">安装 Spinnaker</h2>
<ol>
<li>部署 Minio 存信服务(S3)</li>
<li>配置Docker代理</li>
<li>部署 Nalyard 容器并进行代理配置。</li>
<li>使用 Nalyard 配置 Spinnaker</li>
<li>使用 Nalyard 部署 Spinnaker</li>
<li>检查 Spinnaker pod正常</li>
<li>创建Ingress 访问</li>
<li>备份配置</li>
<li>删除安装</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">以 root 身 份 进 入 容 器 , 修 改 配 置 文 件
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker exec -i -u root halyard bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">vi /opt/halyard/bin/halyard
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">挂 找 到 DEFAULT_JVWL_0PTS 参 数 , 添 加 代 理 配 置 DEFAULT_IVMLOPTS=「“-Djava.security.egd=file:/dev/./urandom「“- Dspring.config.additional-location=/opt/spinnaker/config/““- Dhttp.proxyHost=192.168.1.289“ “-Dhttp.proxyPort=16879“-
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Dhttps .proxyHost=192.168.1.289““-Dhttps.proxyPort=1887““- Dhttp.nonProxyHostS=V“spinnaker-Spinnaker-halyard|localhost|*.Spinnaker.comyo 
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>jenkins pipline demo</title>
      <link>https://www.oomkill.com/2019/10/jenkins-pipline-demo/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2019/10/jenkins-pipline-demo/</guid>
      <description></description>
      <content:encoded><![CDATA[<h4 id="pipline-demo">pipline demo</h4>
<ul>
<li><a href="https://jenkins.io/zh/doc/book/pipeline/syntax/">https://jenkins.io/zh/doc/book/pipeline/syntax/</a></li>
<li>git 插件 <a href="https://jenkins.io/doc/pipeline/steps/git/">https://jenkins.io/doc/pipeline/steps/git/</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">pipeline{
</span></span><span class="line"><span class="cl">    agent any
</span></span><span class="line"><span class="cl">    stages{
</span></span><span class="line"><span class="cl">        stage(&#34;build&#34;){
</span></span><span class="line"><span class="cl">            steps{
</span></span><span class="line"><span class="cl">                echo &#34;11111&#34;
</span></span><span class="line"><span class="cl">            }
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="pipeline总体介绍">pipeline总体介绍</h4>
<blockquote>
<p><strong>基本结构</strong></p>
</blockquote>
<p>以下每一个部分都是必须的，少一个Jenkins都会报错</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">pipeline{
</span></span><span class="line"><span class="cl">    agent any
</span></span><span class="line"><span class="cl">    stages{
</span></span><span class="line"><span class="cl">        stage(&#34;build&#34;){
</span></span><span class="line"><span class="cl">            steps{
</span></span><span class="line"><span class="cl">                echo &#34;hellp&#34;
</span></span><span class="line"><span class="cl">            }
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>pipeline</strong> 代表整个流水线，包含整条流水线的逻辑</li>
<li><strong>stage</strong> 阶段，代表流水线的阶段，每个阶段都必须有名称。</li>
<li><strong>stages</strong> 流水线中多个stage的容器，stages部分至少包含一个stage.</li>
<li><strong>steps</strong> 代表stage中的一个活多个具体步骤的容器，steps部分至少包含一个步骤</li>
<li><strong>agent</strong> 制定流水线的执行位置，流水线中每个阶段都必须在某个地方执行（master节点/slave节点/物理机/虚拟机/docker容器），agent部分指定具体在哪里执行。<code>agent { label '***-slave'}</code></li>
</ul>
<blockquote>
<p><strong>可选步骤</strong></p>
</blockquote>
<ul>
<li>
<p><strong>post</strong> 包含的是在整个pipeline或stage完成后的附件条件</p>
<ul>
<li>always 论Pipeline运行的完成状态如何都会执行这段代码</li>
<li>changes 只有当前Pipeline运行的状态与先前完成的Pipeline的状态不同时，才能触发运行。</li>
<li>failure 当前状态为失败时执行</li>
<li>success 当前完成状态为成功时执行</li>
</ul>
</li>
<li>
<p><strong>demo</strong></p>
<p>使用<code>${test}</code>，可以引入自定义变量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">post {
</span></span><span class="line"><span class="cl">    always {
</span></span><span class="line"><span class="cl">        script {
</span></span><span class="line"><span class="cl">            allure includeProperties: false, jdk: &#39;&#39;,report: &#39;jenkins-allure-report&#39;, results: [[path: &#39;allure-results&#39;]]     
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    failure {
</span></span><span class="line"><span class="cl">        script {
</span></span><span class="line"><span class="cl">            if (gitpuller == &#39;noerr&#39;) {
</span></span><span class="line"><span class="cl">                mail to: &#34;${email_list}&#34;,
</span></span><span class="line"><span class="cl">                        subject: &#34;[jenkins Build Notification] ${JOB_NAME} - Build # ${BUILD_NUMBER} 构建失败&#34;,
</span></span><span class="line"><span class="cl">                        body: &#34;&#39;${env.JOB_NAME}&#39; (${env.BUILD_NUMBER}) 执行失败\n请及时前往 ${env.BUILD_URL} 进行查看&#34;
</span></span><span class="line"><span class="cl">            } else {
</span></span><span class="line"><span class="cl">                echo &#39;scm pull err ignore send mail&#39;
</span></span><span class="line"><span class="cl">            }
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>pipeline支持的指令</p>
<ul>
<li>
<p><strong><code>environment</code></strong>：用于设置环境变量，可以定义在stage或pipeline部分，环境变量可以向下面的示例设置为全局的，也可以是阶段<code>stage</code>级别的。如你所想，阶段<code>stage</code>级别的环境变量只能在定义变量的阶段<code>stage</code>使用。</p>
</li>
<li>
<p><strong><code>tools</code></strong>：可定义在pipeline或stage部分，会自动下载并安装我们指定的工具，并将其加入到PATH变量中</p>
</li>
<li>
<p><strong><code>input</code></strong>：定义在stage部分，会暂停pipeline，提示你输入内容</p>
</li>
<li>
<p><strong><code>options</code></strong>：用于配置Jenkins pipeline本身的选项，options指令可以定义在stage或pipeline部分</p>
</li>
<li>
<p><strong><code>parallel</code></strong>：并行执行多个step</p>
</li>
<li>
<p><strong><code>parameters</code></strong>：与input不同，parameters时执行pipeline前传入的一些参数</p>
</li>
<li>
<p><strong><code>triggers</code></strong>：定义执行pipeline的触发器</p>
</li>
<li>
<p><strong><code>when</code></strong>：当满足when条件时，阶段才会执行
在使用指令时注意每个指令都有自己的作用域，如果指令使用的位置不正确，Jenkins会报错</p>
</li>
</ul>
<blockquote>
<p><strong>变量定义（全局）</strong></p>
</blockquote>
<p>通过def project_name，定义job名称
通过def upstream_list= &lsquo;<strong><strong>,</strong></strong>&rsquo; 定义上游job名称，用在触发器里面</p>
<blockquote>
<p><strong>options</strong></p>
</blockquote>
<p>用于配置整个pipeline本身的选项</p>
<ul>
<li>
<p><code>buildDiscarder</code> 保存最近历史构建记录的数量</p>
</li>
<li>
<p><code>disableConcurrentBuilds</code> 同一个pipline，Jenkins是默认可以同时执行多次的，此选项是为了禁止pipeline同时执行</p>
</li>
<li>
<p><code>retry</code>：当发生失败是进行重试<code>retry(4)</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">options {
</span></span><span class="line"><span class="cl">    buildDiscarder{logRotator(numToKeepStr: &#39;30&#39;)} # 保存最近x个job执行记录
</span></span><span class="line"><span class="cl">    timeout(time:1, unit: &#39;HOURS&#39;) # 1小时内未执行完，自动结束
</span></span><span class="line"><span class="cl">    disableConcurrentBuilds() # 不允许两个job同时执行
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<blockquote>
<p><strong>parameters</strong></p>
</blockquote>
<p>该parameters指令提供用户在触发Pipeline时应提供的参数列表。这些用户指定的参数的值通过该params对象可用于Pipeline步骤</p>
<p>字符串类型的参数，例如：<code>parameters { string(name: 'DEPLOY_ENV', defaultValue: 'staging', description: '') }</code></p>
<p>booleanParam，一个布尔参数，例如：<code>booleanParam(name: 'DEPLOY_BUILD', defaultValue: true, description: '') }</code></p>
<p>目前支持<code>[booleanParam, choice, credentials ,file, test, password, run, string]</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">parameters {
</span></span><span class="line"><span class="cl">    choice(name: &#39;environ&#39;,choices: &#39;test\ndev\nstg&#39;, description: &#39;测试环境，请选择dev? test? stg? &#39;)
</span></span><span class="line"><span class="cl">    string(name: &#39;keywords&#39;, defaultValue: &#39;&#39;, description: &#39;测试用例名的关键字，用于过滤测试用例&#39;)
</span></span><span class="line"><span class="cl">    string(name: &#39;folder&#39;, defaultValue: &#39;&#39;, description: &#39;文件夹名称，用于指定具体包那个文件夹下的case&#39;)
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>triggers配置</strong></p>
</blockquote>
<p>triggers指定定义了流水线被重新出发的自动化方法。当前可用的触发器是cron, pollSCM, upstream, gitlab。例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">triggers {
</span></span><span class="line"><span class="cl">    poolSCM(&#39;H * * * 1-5&#39;) // 周一到周五，每小时
</span></span><span class="line"><span class="cl">    cron(&#39;H H * * *&#39;) // 每天
</span></span><span class="line"><span class="cl">    gitlab(triggerOnPush: true, triggerOnMergeRequest: false, branchFilterType: &#39;All&#39;)
</span></span><span class="line"><span class="cl">    upstream(upstreamPorjects: &#34;${upstream_list}&#34;, threshold: hudson.model.Result.SUCCESS)
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>定时触发：cron</strong></p>
</blockquote>
<p>接收cron样式的字符串来定义要重新出发流水线的常规间隔，比如<code>cron('H H * * *')</code> ，每天轮询代码仓库：pollSCM</p>
<p>接收cron样式的字符串来定义一个固定的间隔，在这个间隔中，Jenkins会检查新的源代码更新。如果存在更改，流水线就会被重新出发。例如pollSCM(&lsquo;H * * * 1-5&rsquo;) 周一到周五，每小时</p>
<p>由上游任务触发：upstream</p>
<p>接受逗号分割的工作字符串和阈值，当字符串中的任何作业以最小阈值结束时，流水线被重新触发。例如：<code>triggers { upstream(upstreamPorjects: &quot;job1,job2&quot;, threshold: hudson.model.Result.SUCCESS) }</code></p>
<p>hudson.model.Result包括以下状态：</p>
<ul>
<li><code>ABORTED</code>：任务被手动终止，</li>
<li><code>FAILURE</code>：构建失败</li>
<li><code>SUCCESS</code>：构建成功</li>
<li><code>UNSTABLE</code>：存在一些错误，但构建没失败</li>
<li><code>NOT_BUILT</code>：多阶段构建时，前面阶段问题导致后面阶段无法执行</li>
</ul>
<p>由gitlab触发：gitlab <code>gitlab(triggerOnPush: true, triggerOnMergeRequest: false, branchFilterType: 'All')</code>，更改后push到远端。</p>
<ul>
<li><code>triggerOnPush: true</code> 代表有push就会触发job</li>
<li><code>triggerOnMergeRequest: false</code> 代码有merge不会触发</li>
<li><code>branchFilterType: 'All'</code> 所有分支均会触发</li>
</ul>
<p><a href="https://blog.csdn.net/qq_30758629/article/details/93353437">https://blog.csdn.net/qq_30758629/article/details/93353437</a></p>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">environment {
</span></span><span class="line"><span class="cl">    git_url = &#39;https://gitlab.com/lc.chow/jenkins-test.git&#39;
</span></span><span class="line"><span class="cl">    git_key = &#39;176b96d4-0865-4cb8-871d-f9b65a84cecc&#39;
</span></span><span class="line"><span class="cl">    git_branch = &#39;master&#39;
</span></span><span class="line"><span class="cl">    gitpullerr = &#39;noerr&#39;
</span></span><span class="line"><span class="cl">    email_list = &#39;test.com@gmail.com&#39;
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">options {
</span></span><span class="line"><span class="cl">    buildDiscarder{logRotator(numToKeepStr: &#39;30&#39;)} # 保存最近x个job执行记录
</span></span><span class="line"><span class="cl">    timeout(time:1, unit: &#39;HOURS&#39;) # 1小时内未执行完，自动结束
</span></span><span class="line"><span class="cl">    disableConcurrentBuilds() # 不允许两个job同时执行
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">parameters {
</span></span><span class="line"><span class="cl">    choice(name: &#39;environ&#39;,choices: &#39;test\ndev\nstg&#39;, description: &#39;测试环境，请选择dev? test? stg? &#39;)
</span></span><span class="line"><span class="cl">    string(name: &#39;keywords&#39;, defaultValue: &#39;&#39;, description: &#39;测试用例名的关键字，用于过滤测试用例&#39;)
</span></span><span class="line"><span class="cl">    string(name: &#39;folder&#39;, defaultValue: &#39;&#39;, description: &#39;文件夹名称，用于指定具体包那个文件夹下的case&#39;)
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">stags {
</span></span><span class="line"><span class="cl">    stage(&#39;拉去测试代码&#39;) {
</span></span><span class="line"><span class="cl">        steps {
</span></span><span class="line"><span class="cl">            git branch: &#34;${git_branch}&#34;, credentialsId: &#34;$git_key&#34;, url: &#34;$git_url&#34;
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    stage(&#39;安装测试依赖&#39;) {
</span></span><span class="line"><span class="cl">        steps {
</span></span><span class="line"><span class="cl">            sh &#34;pipenv --rm&#34;
</span></span><span class="line"><span class="cl">            sh &#34;pipenv install --skip-lock --ignore-pipfile&#34;
</span></span><span class="line"><span class="cl">            sh &#34;pipenv graph&#34;
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    stage(&#39;执行测试用例&#39;) {
</span></span><span class="line"><span class="cl">        steps {
</span></span><span class="line"><span class="cl">            sh &#34;rm -fr $env.WORKSPACE/allure-*&#34;
</span></span><span class="line"><span class="cl">            sh &#34;pipenv run py.test --env &#39;${params.environ}&#39; -k &#39;${params.keywords}&#39; tests/{params.folder}&#34;
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">post {
</span></span><span class="line"><span class="cl">    always {
</span></span><span class="line"><span class="cl">         
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="demo">demo</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">pipeline  {
</span></span><span class="line"><span class="cl">    agent any
</span></span><span class="line"><span class="cl">    stages {
</span></span><span class="line"><span class="cl">        stage(&#39;Depoly pay13&#39;){
</span></span><span class="line"><span class="cl">            steps {
</span></span><span class="line"><span class="cl">                sshPublisher(publishers: [sshPublisherDesc(configName: &#39;52.229.166.83 pay13&#39;, transfers: [sshTransfer(cleanRemote: false, excludes: &#39;&#39;, execCommand: &#34;cd /data/paysCenter &amp;&amp; sudo git pull &amp;&amp; sudo chown -R nginx.nginx /data/paysCenter&#34;, execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: &#39;[, ]+&#39;, remoteDirectory: &#39;&#39;, remoteDirectorySDF: false, removePrefix: &#39;&#39;, sourceFiles: &#39;&#39;)], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])   
</span></span><span class="line"><span class="cl">                sshPublisher(publishers: [sshPublisherDesc(configName: &#39;52.229.166.83 pay13&#39;, transfers: [sshTransfer(cleanRemote: false, excludes: &#39;&#39;, execCommand: &#39;cd /data/paysCenter &amp;&amp; sudo git pull &amp;&amp; echo `git show|head -1|awk \&#39;{print $2}\&#39;`&#39;, execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: &#39;[, ]+&#39;, remoteDirectory: &#39;&#39;, remoteDirectorySDF: false, removePrefix: &#39;&#39;, sourceFiles: &#39;&#39;)], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
</span></span><span class="line"><span class="cl">            }
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    post {
</span></span><span class="line"><span class="cl">        success {
</span></span><span class="line"><span class="cl">            sh &#39;&#39;&#39;
</span></span><span class="line"><span class="cl">            echo &#34;push success&#34;
</span></span><span class="line"><span class="cl">            &#39;&#39;&#39;
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        failure {
</span></span><span class="line"><span class="cl">            sh &#39;&#39;&#39;
</span></span><span class="line"><span class="cl">                echo &#34;push fail&#34;
</span></span><span class="line"><span class="cl">            &#39;&#39;&#39;
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">pipeline{
</span></span><span class="line"><span class="cl">    agent any
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    environment {
</span></span><span class="line"><span class="cl">        host = &#34;192.168.50.32&#34;
</span></span><span class="line"><span class="cl">        path1 = &#34;/data/appdown&#34;
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    options {
</span></span><span class="line"><span class="cl">        timeout(time: 1, unit: &#39;HOURS&#39;)
</span></span><span class="line"><span class="cl">        buildDiscarder(logRotator(numToKeepStr: &#39;100&#39;))
</span></span><span class="line"><span class="cl">        disableConcurrentBuilds()
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    stages{
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        stage(&#34;pull&#34;){
</span></span><span class="line"><span class="cl">            steps{
</span></span><span class="line"><span class="cl">                git branch: &#39;pre&#39;, credentialsId: &#39;abe7e165-b646-472e-ab48-024004ecc589&#39;, url: &#39;http://j7.hnxmny.com:8088/a/front/appdown&#39;
</span></span><span class="line"><span class="cl">            }
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        stage(&#34;build&#34;){
</span></span><span class="line"><span class="cl">            steps{
</span></span><span class="line"><span class="cl">                withEnv([&#39;PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin&#39;]) {
</span></span><span class="line"><span class="cl">                    sh &#34;sudo npm i &amp;&amp; sudo npm run isol&#34;
</span></span><span class="line"><span class="cl">                }
</span></span><span class="line"><span class="cl">                
</span></span><span class="line"><span class="cl">            }
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        stage(&#34;deploy&#34;){
</span></span><span class="line"><span class="cl">            steps{
</span></span><span class="line"><span class="cl">                sh &#39;&#39;&#39;
</span></span><span class="line"><span class="cl">                    file=`date +%Y%m%d%H%M%S`
</span></span><span class="line"><span class="cl">                    sudo mv dist dist.${file}
</span></span><span class="line"><span class="cl">                    tar zcf dist.${file}.tar.gz dist.${file}
</span></span><span class="line"><span class="cl">                    
</span></span><span class="line"><span class="cl">                    ansible ${host} -b -m copy -a &#34;src=dist.${file}.tar.gz dest=/tmp/&#34;
</span></span><span class="line"><span class="cl">                    ansible ${host} -b -m raw -a &#34;tar xf /tmp/dist.${file}.tar.gz -C ${path1}/ &amp;&amp; rm -f /tmp/dist.${file}.tar.gz&#34;
</span></span><span class="line"><span class="cl">                    ansible ${host} -b -m raw -a &#34;ln -svnf ${path1}/dist.${file} ${path1}/dist&#34;
</span></span><span class="line"><span class="cl">                &#39;&#39;&#39;
</span></span><span class="line"><span class="cl">            }
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    post {
</span></span><span class="line"><span class="cl">        cleanup {
</span></span><span class="line"><span class="cl">            echo &#39;One way or another, I have finished&#39;
</span></span><span class="line"><span class="cl">            deleteDir() /* clean up our workspace */
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>pipline 报错</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">nohup: failed to run command ‘sh’: No such file or directory
</span></span><span class="line"><span class="cl">Sending interrupt signal to process
</span></span></code></pre></td></tr></table>
</div>
</div><p>原因：<code>environment</code>设置了<code>path</code>环境变量导致重写出现的原因</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">    environment {
</span></span><span class="line"><span class="cl">        host = &#34;192.168.50.32&#34;
</span></span><span class="line"><span class="cl">        path1 = &#34;/data/appdown&#34;
</span></span><span class="line"><span class="cl">    }
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决方法：</p>
<ul>
<li><a href="https://stackoverflow.com/questions/43987005/jenkins-does-not-recognize-command-sh">https://stackoverflow.com/questions/43987005/jenkins-does-not-recognize-command-sh</a></li>
</ul>
<p>withEnv</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">node {
</span></span><span class="line"><span class="cl">  stage (&#39;STAGE NAME&#39;) {
</span></span><span class="line"><span class="cl">    withEnv([&#39;PATH+EXTRA=/usr/sbin:/usr/bin:/sbin:/bin&#39;]) {
</span></span><span class="line"><span class="cl">      sh &#39;//code block&#39;
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">  }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>避免使用系统环境变量名称</strong></li>
</ul>
<blockquote>
<p><strong>进入某个路径下操作</strong></p>
</blockquote>
<p>执行完后会退回原目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">dir(path: &#39;ssr-server&#39;) {
</span></span><span class="line"><span class="cl">    sh &#39;&#39;&#39;2
</span></span><span class="line"><span class="cl">        rm -fr  node_modules &amp;&amp; npm install
</span></span><span class="line"><span class="cl">        npm run prestart:prod
</span></span><span class="line"><span class="cl">    &#39;&#39;&#39;
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>使用参数</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">parameters {
</span></span><span class="line"><span class="cl">	choice(name: &#39;vernum&#39;,choices: &#39;v1\nv2&#39;, description: &#39;请选择v1? v2?&#39;)
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>if</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">stage(&#34;build&#34;){
</span></span><span class="line"><span class="cl">	steps{
</span></span><span class="line"><span class="cl">		script {
</span></span><span class="line"><span class="cl">			if ( params.vernum == &#39;v1&#39; ) {
</span></span><span class="line"><span class="cl">				dir(path: &#39;v1&#39;) {
</span></span><span class="line"><span class="cl">                    sh &#39;&#39;&#39;
</span></span><span class="line"><span class="cl">                    	npm i
</span></span><span class="line"><span class="cl">                    &#39;&#39;&#39;
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			} else {
</span></span><span class="line"><span class="cl">				dir(path: &#39;v2&#39;) {
</span></span><span class="line"><span class="cl">                    sh &#39;&#39;&#39;
</span></span><span class="line"><span class="cl">                    npm i
</span></span><span class="line"><span class="cl">                    &#39;&#39;&#39;
</span></span><span class="line"><span class="cl">				}
</span></span><span class="line"><span class="cl">			}
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>jenkins的用户授权与管理</title>
      <link>https://www.oomkill.com/2019/10/jenkins-user-authentication/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2019/10/jenkins-user-authentication/</guid>
      <description></description>
      <content:encoded><![CDATA[<h3 id="需要安装的插件">需要安装的插件</h3>
<p>Role-Based Strategy（可以对构建的项目进行授权管理，让不同的用户管理不同的项目，将测试和生产环境分开）</p>
<h3 id="选择授权策略">选择授权策略</h3>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025230035715.png" alt="image-20221025230035715"  /></p>
<p>当Role-based Authorization Strategy 这个插件安装好之后，授权策略会多出一个Role-Based Strategy 选项，选择此项</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/clipboard-1567528458259.png" alt="image"  /></p>
<h3 id="添加配置权限">添加配置权限</h3>
<p>系统设置 &raquo; Manage and Assign Roles</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/clipboard-1567528458323.png" alt="image"  /></p>
<h3 id="manage-roles">Manage Roles</h3>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/clipboard-1567528458295.png" alt="image"  /></p>
<p>设置全局角色（全局角色可以对jenkins系统进行设置与项目的操作）</p>
<ul>
<li>admin:对整个jenkins都可以进行操作</li>
<li>root:可以对所有的job进行管理</li>
<li>other:只有读的权限 other必须有，否则给用户分配角色时分配没有全局role会导致分配失效</li>
</ul>
<h3 id="assign-roles为用户指派角色">Assign Roles为用户指派角色</h3>
<p>项目角色是根据正则匹配的，</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/clipboard-1567528458429.png" alt="image"  /></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/clipboard-1567528458465.png" alt="image"  /></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/clipboard-1567528458386.png" alt="image"  /></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/clipboard-1567528458720.png" alt="image"  /></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>jenkins历史比较</title>
      <link>https://www.oomkill.com/2019/10/jenkins-recode-history/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2019/10/jenkins-recode-history/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>文中的代码来自可以从github下载： <a href="https://github.com/ciandcd">https://github.com/ciandcd</a></p>
<p>插件 <a href="https://wiki.jenkins-ci.org/display/JENKINS/JobConfigHistory+Plugin">jobConfigHistory</a>，可以查看job配置的修改历史。</p>
<p>安装后重启jenkins，然后对job的配置修改后，可以点击job config history连接查看修改历史。</p>
<p>选择需要比较的版本，可以diff两个版本间的差别。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025230300033.png" alt="image-20221025230300033"  /></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025230305616.png" alt="image-20221025230305616"  /></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>jenkins在Mac OS下的迁移记录</title>
      <link>https://www.oomkill.com/2019/10/jenkens-migrant-in-macos/</link>
      <pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2019/10/jenkens-migrant-in-macos/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>修改启动用户</p>
<p>先停止jenkins服务</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist
</span></span><span class="line"><span class="cl">sudo vim /Library/LaunchDaemons/org.jenkins-ci.plist
</span></span></code></pre></td></tr></table>
</div>
</div><p>授权jenkins工作目录和临时目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo chown -R zhulangren:wheel /Users/Shared/Jenkins/
</span></span><span class="line"><span class="cl">sudo chown -R zhulangren:wheel /var/log/jenkins/
</span></span></code></pre></td></tr></table>
</div>
</div><p>启动jenkins</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist
</span></span></code></pre></td></tr></table>
</div>
</div><p>jenkins自启动文件路径</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/Library/LaunchDaemons/org.jenkins-ci.plist
</span></span></code></pre></td></tr></table>
</div>
</div><p>卸载脚本文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/Library/Application\ Support/Jenkins/Uninstall.command
</span></span></code></pre></td></tr></table>
</div>
</div><p>修改jenkins启动端口</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo defaults write /Library/Preferences/org.jenkins-ci httpPort &#39;9999&#39;
</span></span></code></pre></td></tr></table>
</div>
</div><p>读取jenkins配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">defaults read /Library/Preferences/org.jenkins-ci
</span></span></code></pre></td></tr></table>
</div>
</div><p>设置自启动</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plis
</span></span></code></pre></td></tr></table>
</div>
</div><p>取消自启动</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist
</span></span></code></pre></td></tr></table>
</div>
</div><p>jenkins war路径</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/Applications/Jenkins/jenkins.war
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Reference</p>
<p><a href="https://www.cnblogs.com/ihojin/p/jenkins-permission.html">Mac Jenkins 权限问题</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>jenkins pipeline docker方式</title>
      <link>https://www.oomkill.com/2018/11/jenkins-docker/</link>
      <pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2018/11/jenkins-docker/</guid>
      <description></description>
      <content:encoded><![CDATA[<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">def timestr() { 
</span></span><span class="line"><span class="cl">    script {  
</span></span><span class="line"><span class="cl">        return sh(script: &#39;date +%Y%m%d%H%M%S&#39;, returnStdout: true).trim()
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">def dockerImage
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">pipeline{
</span></span><span class="line"><span class="cl">    agent any
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    environment {
</span></span><span class="line"><span class="cl">        time = timestr()
</span></span><span class="line"><span class="cl">        registry = &#34;xxx.com/payapp-test&#34;
</span></span><span class="line"><span class="cl">        registryhub = &#34;txhub.xxx.com&#34;
</span></span><span class="line"><span class="cl">        appName = &#34;api&#34;
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    options {
</span></span><span class="line"><span class="cl">        timeout(time: 1, unit: &#39;HOURS&#39;)
</span></span><span class="line"><span class="cl">        buildDiscarder(logRotator(numToKeepStr: &#39;15&#39;))
</span></span><span class="line"><span class="cl">        disableConcurrentBuilds()
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    stages{
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        stage(&#34;Pull Code&#34;){
</span></span><span class="line"><span class="cl">            steps{
</span></span><span class="line"><span class="cl">                git branch: &#39;testing&#39;, credentialsId: &#39;422fb2c7-4d58-440a-98a4-e242b66f3800&#39;, url: &#39;http://gitlab.fgry45iy.com:90/pay/payGateway.git&#39;
</span></span><span class="line"><span class="cl">            }
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        stage(&#34;Maven Package&#34;){
</span></span><span class="line"><span class="cl">            steps{
</span></span><span class="line"><span class="cl">                withEnv([&#39;PATH+EXTRA=/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/apache-maven-3.6.2/bin:/usr/local/maven/bin:/root/bin&#39;]) {
</span></span><span class="line"><span class="cl">                    sh &#34;mvn package&#34;
</span></span><span class="line"><span class="cl">                }
</span></span><span class="line"><span class="cl">            }
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">//         stage(&#39;Building Image&#39;) {
</span></span><span class="line"><span class="cl">//             steps{
</span></span><span class="line"><span class="cl">//                 script {
</span></span><span class="line"><span class="cl">//                     dockerImage = docker.build( registry + &#34;/&#34; + appName + &#34;:$BUILD_NUMBER&#34;)
</span></span><span class="line"><span class="cl">//                 }
</span></span><span class="line"><span class="cl">//             }
</span></span><span class="line"><span class="cl">//         }
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">//         stage(&#39;Push Images To Registry&#39;) {
</span></span><span class="line"><span class="cl">//             steps {
</span></span><span class="line"><span class="cl">//                 script {
</span></span><span class="line"><span class="cl">//                      dockerImage.push()
</span></span><span class="line"><span class="cl">//                 }
</span></span><span class="line"><span class="cl">//             }
</span></span><span class="line"><span class="cl">//         }
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">//         stage(&#39;update&#39;) {
</span></span><span class="line"><span class="cl">//             steps {
</span></span><span class="line"><span class="cl">//                 sh &#34;&#34;&#34;
</span></span><span class="line"><span class="cl">//               curl -k --cert /root/ca/ca.crt --key /root/ca/ca.key  -X PUT -H  &#39;Content-Type: application/yaml&#39; --data &#34;
</span></span><span class="line"><span class="cl">// apiVersion: apps/v1
</span></span><span class="line"><span class="cl">// kind: Deployment
</span></span><span class="line"><span class="cl">// metadata:
</span></span><span class="line"><span class="cl">//   name: tyapi-api-deploy
</span></span><span class="line"><span class="cl">//   namespace: pay
</span></span><span class="line"><span class="cl">// spec:
</span></span><span class="line"><span class="cl">//   replicas: 2
</span></span><span class="line"><span class="cl">//   selector:
</span></span><span class="line"><span class="cl">//     matchLabels:
</span></span><span class="line"><span class="cl">//       app: pay-api
</span></span><span class="line"><span class="cl">//   template:
</span></span><span class="line"><span class="cl">//     metadata:
</span></span><span class="line"><span class="cl">//       labels:
</span></span><span class="line"><span class="cl">//         app: pay-api
</span></span><span class="line"><span class="cl">//     spec:
</span></span><span class="line"><span class="cl">//       containers:
</span></span><span class="line"><span class="cl">//       - name: pay-jv2-api
</span></span><span class="line"><span class="cl">//         image: txhub.99xyp.com/payapp-test/api:$BUILD_NUMBER
</span></span><span class="line"><span class="cl">//         ports:
</span></span><span class="line"><span class="cl">//         - name: payapi
</span></span><span class="line"><span class="cl">//           containerPort: 8081
</span></span><span class="line"><span class="cl">// &#34; https://47.156.81.22:6443/apis/apps/v1/namespaces/pay/deployments/tyapi-api-deploy
</span></span><span class="line"><span class="cl">//                 &#34;&#34;&#34;
</span></span><span class="line"><span class="cl">//             }
</span></span><span class="line"><span class="cl">//         }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">//     post {
</span></span><span class="line"><span class="cl">//         cleanup {
</span></span><span class="line"><span class="cl">//             echo &#39;I have finished, delete dir&#39;
</span></span><span class="line"><span class="cl">//             deleteDir()
</span></span><span class="line"><span class="cl">//         }
</span></span><span class="line"><span class="cl">//     }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>Jenkins在windows平台自动化构建代码</title>
      <link>https://www.oomkill.com/2018/10/jenkins-in-windows/</link>
      <pubDate>Tue, 02 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2018/10/jenkins-in-windows/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>Jenkins服务端：centos6.8</p>
<p>客户端：windows server2012 windows10</p>
<p>工具：cwRsync</p>
<p><strong>注：复制为jenkins工作目录到网站目录，无需服务端。</strong></p>
<h2 id="配置安装slave端">配置安装slave端</h2>
<p>所用的插件：<a href="https://wiki.jenkins.io/display/JENKINS/Copy+Data+To+Workspace+Plugin">Copy Data To Workspace Plugin</a></p>
<h3 id="配置windows节点">配置windows节点</h3>
<p>\1. 主界面-&gt;【系统管理】-&gt;【管理节点】-&gt;【新建节点】，进行节点的添加：</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025230809664.png" alt="image-20221025230809664"  /></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025230814531.png" alt="image-20221025230814531"  /></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025230819220.png" alt="image-20221025230819220"  /></p>
<p>\2. 输入节点名称，选择【Permanent Agent】。如果添加过slave的话会出现【复制现有节点】操作</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025230830765.png" alt="image-20221025230830765"  /></p>
<p>\3. 配置节点的详细信息</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025230848946.png" alt="image-20221025230848946"  /></p>
<p>此处配置需要注意的有以下几个方面</p>
<ul>
<li>
<p>【# of executors】：建议不要超过CPU核心数，一般不要写特别大。</p>
</li>
<li>
<p>【远程工作目录】：master将代码库中的代码复制到slave时，存放的临时目录，如slave的daemon服务也会放在此目录。一个job一个文件夹。</p>
</li>
<li>
<p>【用法】：选择【<strong>只允许运行绑定到这台机器的Job</strong>】，此模式下，Jenkins只会构建哪些分配到这台机器的Job。这允许一个节点专门保留给某种类型的Job。例如，在Jenkins上连续的执行测试，你可以设置执行者数量为1，那么同一时间就只会有一个构建，一个实行者不会阻止其它构建，其它构建会在另外的节点运行。</p>
</li>
<li>
<p>【启动方式】：选择【<strong>Launch agent via Java Web Start</strong>】，以windows服务的方式启动，这个为最好配置的。注意：2.x版本的默认没有这个选项，需要单独开启。</p>
</li>
</ul>
<p>\4. 配置slave端并且添加至windows服务</p>
<p>在点击保存后，在node列表中会存在此列表默认是未连通状态</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025230936940.png" alt="image-20221025230936940"  /></p>
<p>点击进入详情页面会提示slave端的安装方法，此处讲解下载文件方式。</p>
<p>【Launch】：浏览器下载文件方式</p>
<p>【Run from agent command line】：从远端代理命令运行</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025230952380.png" alt="image-20221025230952380"  /></p>
<p><strong>注意：这是java服务，每个slave端必须安装jdk后才可运行。</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;jnlp</span> <span class="na">codebase=</span><span class="s">&#34;http://10.0.0.11:8080/jenkins/computer/test/&#34;</span> <span class="na">spec=</span><span class="s">&#34;1.0+&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;information&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;title&gt;</span>Agent for test<span class="nt">&lt;/title&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;vendor&gt;</span>Jenkins project<span class="nt">&lt;/vendor&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;homepage</span> <span class="na">href=</span><span class="s">&#34;https://jenkins-ci.org/&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/information&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;security&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;all-permissions/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/security&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;resources&gt;&lt;j2se</span> <span class="na">version=</span><span class="s">&#34;1.8+&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;jar</span> <span class="na">href=</span><span class="s">&#34;http://10.0.0.11:8080/jenkins/jnlpJars/remoting.jar&#34;</span><span class="nt">/&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/resources&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;application-desc</span> <span class="na">main-class=</span><span class="s">&#34;hudson.remoting.jnlp.Main&#34;</span><span class="nt">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;argument&gt;</span>c55442e04b03c2fc721ec718b70646c234b4c79a678ff10ccadc59541dbb843<span class="nt">&lt;/argument&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;argument&gt;</span>test1<span class="nt">&lt;/argument&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;argument&gt;</span>-workDir<span class="nt">&lt;/argument&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;argument&gt;</span>d:\jenkins<span class="nt">&lt;/argument&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;argument&gt;</span>-internalDir<span class="nt">&lt;/argument&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;argument&gt;</span>remoting<span class="nt">&lt;/argument&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;argument&gt;</span>-url<span class="nt">&lt;/argument&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;argument&gt;</span>http://10.0.0.11:8080/jenkins/<span class="nt">&lt;/argument&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/application-desc&gt;&lt;/jnlp&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>注意：每个slave的内容都不一样至。多个slave需要多次下载或修改此内容</strong></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025231027942.png" alt="image-20221025231027942"  /></p>
<p>安装出现如下错误的原因，没有权限，使用管理员方式运行。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025231041933.png" alt="image-20221025231041933"  /></p>
<p>这种文件右键没有管理员方式运行的菜单，打开【任务管理器】-&gt;【运行】-&gt;【以管理员方式运行】</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025231052705.png" alt="image-20221025231052705"  /></p>
<p>卸载系统服务方式:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sc delete jenkinsslave-c__jenkins
</span></span></code></pre></td></tr></table>
</div>
</div><p>安装完成后slave设置的远端目录会生成如下文件</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025231125859.png" alt="image-20221025231125859"  /></p>
<p>返回master的节点列表里，发现此处已经连接上了。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025231139284.png" alt="image-20221025231139284"  /></p>
<h2 id="新建工程">新建工程</h2>
<p>选择自由构建方式。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025231156436.png" alt="image-20221025231156436"  /></p>
<p>【Restrict where this project can be run】：限制运行此项目的节点为刚才设置node时标签填写的windows。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025231211038.png" alt="image-20221025231211038"  /></p>
<p>下载安装插件后会出现此选项。实测，填写路径没什么卵用。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025231220377.png" alt="image-20221025231220377"  /></p>
<p>此处选择执行windows命令</p>
<blockquote>
<p><strong>注：此处存在以下问题。</strong></p>
<p><strong>1、此处如果代码库中不存在此文件，或更新后此文件被删除，那么使用xcopy会存在代码库中的文件以删除，而slave node文件夹中的文件还存在。无法清除。解决方法使用rsync –delete 或执行脚本文件进行判断。</strong></p>
<p><strong>2、如slave node中需要存在代码库中不存在的文件，使用rsync会将需要存在的文件删除。</strong></p>
<p><strong>3、此处无环境变量，执行命令需要使用全路径，不能存在中文和空格</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bat" data-lang="bat"><span class="line"><span class="cl">$ rsync -avz ./ /cygdrive/c/test1/ --delete --exclude=.svn
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">xcopy /y /e /r ./ /cygdrive/c/test1/
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>jenkins多个slave遇到的坑</title>
      <link>https://www.oomkill.com/2018/05/jenkins-multi-slave-problem/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2018/05/jenkins-multi-slave-problem/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="jenkins配置如下">jenkins配置如下</h2>
<p>在Jenkins上添加了两个节点(Slave Node)，且为这两个节点设置了一个相同的标签 &ldquo;windows&rdquo;。创建了一个新Job –  &ldquo;test-windows&rdquo;，选择的是”构建一个自由风格的软件项目”。并且为了使多个slave并行构建，我选择了&quot;只允许绑定到这台机器的job”，在&quot;Label Expression&quot;中选择了&quot;windows&quot;。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025231428874.png" alt="image-20221025231428874"  /></p>
<p>然而这种方式并不能实现多个slave并行操作。网上90%说的都不靠谱。</p>
<p>在我使用的过程中，使用了label 去管理多个 Slave，给一个项目的构建指定了这个 label，会发现这个项目的多次构建，都使用同一个 Slave，并没有使用 label 里的其它 Slave去构建。</p>
<p>查了很多资料才发现原来从 jenkins 的调度算法使用了一致性的哈希算法，jenkins根据添加的信息评测出优先级列表，选择优先级最高的Slave去构建，当最优slave不满足条件或者没有可用的 execut时，才会选用下一个slave。</p>
<p>查了很多资料发现构造多配置项目可以选择构建时的slave。这样可以实现多slave并行构建。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025231449517.png" alt="image-20221025231449517"  /></p>
<p>multi configuration project比起构建自由风格的软件项目多个Configuration Matrix，在这里可以选择多个slave。这里选择lable的话，还是会使用默认算法从lable中选择最优slave进行构建。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025231504755.png" alt="image-20221025231504755"  /></p>
<p>配置完成后再构建时，会同时在多个slave上进行并行构建</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025231536022.png" alt="image-20221025231536022"  /></p>
<p>禁止在master上运行job或和业务相关的操作</p>
<p>将 [executors] 设置为0</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025231520553.png" alt="image-20221025231520553"  /></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>jenkins检查代码 如没更新停止构建步骤</title>
      <link>https://www.oomkill.com/2018/05/jenkins-checkcode/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2018/05/jenkins-checkcode/</guid>
      <description></description>
      <content:encoded><![CDATA[<h3 id="需求分析">需求分析</h3>
<p>在jenkins中没有找到构建前插件，每次构建时间很长，希望可以实现判断代码是否更新，如果没更细则停止构建步骤。</p>
<h3 id="实现步骤">实现步骤</h3>
<p>在构建时执行shell命令，而jenkins提供的的环境变量可以实现此判断 <a href="https://wiki.jenkins.io/display/JENKINS/Conditional+BuildStep+Plugin">https://wiki.jenkins.io/display/JENKINS/Conditional+BuildStep+Plugin</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">GIT_COMMIT
</span></span><span class="line"><span class="cl">    The commit hash being checked out.
</span></span><span class="line"><span class="cl">GIT_PREVIOUS_COMMIT
</span></span><span class="line"><span class="cl">    The hash of the commit last built on this branch, if any.
</span></span><span class="line"><span class="cl">GIT_PREVIOUS_SUCCESSFUL_COMMIT
</span></span><span class="line"><span class="cl">    The hash of the commit last successfully built on this branch, if any.
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>GIT_COMMIT</code> 当前拉取版本的commit id
<code>GIT_PREVIOUS_COMMIT</code>  最后在此分支上构建的 commit id
<code>GIT_PREVIOUS_SUCCESSFUL_COMMIT</code> 最后在此分支上成功构建的 commit id号</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="nv">$GIT_PREVIOUS_SUCCESSFUL_COMMIT</span> <span class="o">==</span> <span class="nv">$GIT_COMMIT</span> <span class="o">]</span><span class="p">;</span><span class="k">then</span>
</span></span><span class="line"><span class="cl">　　<span class="nb">echo</span> <span class="s2">&#34;no change，skip build&#34;</span>
</span></span><span class="line"><span class="cl">　　<span class="nb">exit</span> <span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl">　　<span class="nb">echo</span> <span class="s2">&#34;git pull commmit id not equals to current commit id trigger build&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>注意，不能使用-eq 只能使用 “==”

  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20210801143636307-915398192.png" alt=""  /></p>
<p>提交新版本后，构建提示如下：</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/1380340-20210801143624033-1191327542.png" alt=""  /></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ git show|head -1
</span></span><span class="line"><span class="cl">commit 27617e680d2e6bf00062700623792aef63926edd
</span></span></code></pre></td></tr></table>
</div>
</div><p>在jenkins中执行构建</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/1380340-20210801143657919-271057259.png" alt=""  /></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>jenkins github tag使用方式</title>
      <link>https://www.oomkill.com/2018/02/jenkins-github-tag/</link>
      <pubDate>Fri, 02 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2018/02/jenkins-github-tag/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>jenkins github tag</p>
<p>测试项目地址：<a href="https:%5Cgithub.com%5Cgo-redis%5Credis">GitHub - go-redis\redis: Type-safe Redis client for Golang</a></p>
<p>插件下载地址：[git-parameter](http:\updates.jenkins-ci.org\download\plugins\git-parameter)</p>
<p>pt-online-schema-change</p>
<p><a href="https://blog.csdn.net/itfootball/article/details/45023805">Jenkins中配置gradle项目的坑 - doctorq - CSDN博客</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
