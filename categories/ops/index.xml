<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ops on Cylon&#39;s Collection</title>
    <link>https://www.oomkill.com/categories/ops/</link>
    <description>Recent content in ops on Cylon&#39;s Collection</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 02 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.oomkill.com/categories/ops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使nginx支持分布式追踪</title>
      <link>https://www.oomkill.com/2022/07/opentracing-nginx/</link>
      <pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/07/opentracing-nginx/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="background">Background</h2>
<p>NGINX 是一个通用且流行的应用程序。也是最流行的 Web 服务器，它可用于提供静态文件内容，但也通常与其他服务一起用作分布式系统中的组件，在其中它用作反向代理、负载均衡 或 API 网关。</p>
<p>分布式追踪 <code>distributed tracing</code> 是一种可用于分析与监控应用程序的机制，将追踪在从源到目的的整个过程中的单个请求，这与仅通过单个应用程序域来追踪请求的形式不同。</p>
<p>换句话说，我们可以说分布式追踪是对跨多个系统的多个请求的拼接。拼接通常由一个或多个相关 ID 完成，并且跟踪通常是一组记录的、跨所有系统的结构化日志事件，存储在一个中心位置。</p>
<p>在这种背景的情况下， <code>OpenTracing</code> 应运而生。<code>OpenTracing </code> 是一个与应用供应商无关的 API，它可帮助开发人员轻松地跟踪单一请求的域。目前有多种开源产品都支持 OpenTracing（例如，<code>Jaeger</code>, <code>skywalking </code>等），并将其作为一种检测分布式追踪的标准化方法。</p>
<p>本文将围绕，从0到1实现在nginx配置分布式追踪的架构的简单实例说明。本文实例使用的组件为</p>
<ul>
<li><a href="https://nginx.org/en/download.html" target="_blank"
   rel="noopener nofollow noreferrer" >nginx</a> v1.22</li>
<li><a href="https://www.jaegertracing.io/docs/1.35/getting-started/" target="_blank"
   rel="noopener nofollow noreferrer" >jaeger-all-in-on</a> v1.38</li>
<li><a href="https://github.com/opentracing-contrib/nginx-opentracing" target="_blank"
   rel="noopener nofollow noreferrer" >nginx-opentracing</a> v1.22</li>
<li><a href="https://github.com/jaegertracing/jaeger-client-cpp" target="_blank"
   rel="noopener nofollow noreferrer" >jaeger-client-cpp</a> v0.9</li>
</ul>
<h2 id="源码构建nginx-opentracing">源码构建nginx-opentracing</h2>
<h3 id="准备nginx-opentracing">准备nginx-opentracing</h3>
<p><a href="https://github.com/opentracing-contrib/nginx-opentracing" target="_blank"
   rel="noopener nofollow noreferrer" >nginx-opentracing</a> 仓库中可以看到，官方为每个nginx版本都提供了一个编译好的动态库（Nginx1.19.13+），我们可以直接拿来使用这个动态库，如果你想将这个利用Nginx 提供的编译参数 <code>--add-module=/path/to/module</code> 构建为nginx的内置功能的话，可能会出现一些问题，例如下面的一些错误：</p>
<pre><code>ngx_http_opentracing_module.so/config was found
</code></pre>
<pre><code class="language-bash">	/root/nginx-opentracing-0.25.0/opentracing//src/ngx_http_opentracing_module.cpp
In file included from /root/nginx-opentracing-0.25.0/opentracing//src/ngx_http_opentracing_module.cpp:1:0:
/root/nginx-opentracing-0.25.0/opentracing//src/load_tracer.h:3:38: fatal error: opentracing/dynamic_load.h: No such file or directory
</code></pre>
<p>根据 <a href="https://github.com/opentracing-contrib/nginx-opentracing/issues/120" target="_blank"
   rel="noopener nofollow noreferrer" >issue</a> 中查询得知 <code>nginx-opentracing</code> 需要嵌入到nginx中，是需要一些 <a href="https://github.com/opentracing/opentracing-cpp" target="_blank"
   rel="noopener nofollow noreferrer" >opentracing-cpp</a> 因为对c++不熟，尝试调试很久还是上面的错误，故直接使用了官方提供的动态库。</p>
<h3 id="准备jaeger-client-cpp">准备jaeger-client-cpp</h3>
<p>根据 <code>nginx-opentracing</code> 中提到的，还需要一个 <a href="https://github.com/jaegertracing/jaeger-client-cpp" target="_blank"
   rel="noopener nofollow noreferrer" >jaeger-client-cpp</a> 的 <code>tracer</code> 才可以正常运行（这也是作为jaeger架构中的角色）</p>
<p>来到 <code>jaeger-client-cpp</code> 看到Release提供的编译好的动态库已经很久了，而最新版都没有提供相应编译的版本，需要我们自己编译</p>
<blockquote>
<p><strong>说明</strong>： 编译依赖CMake 3.3+，gcc 4.9.2+</p>
</blockquote>
<p>我们的编译环境使用CentOS 7 默认gcc与CMake都符合要求需要自行编译两个的版本。</p>
<h4 id="编译gcc">编译gcc</h4>
<p>gcc下载地址：<a href="https://ftp.gnu.org/gnu/gcc/" target="_blank"
   rel="noopener nofollow noreferrer" >https://ftp.gnu.org/gnu/gcc/</a></p>
<pre><code class="language-bash">cd gcc-5.4.0
./contrib/download_prerequisites

mkdir gcc-build-5.4.0
cd gcc-build-5.4.0

/usr/local/src/gcc-5.4.0/configure \
	--enable-checking=release \
	--enable-languages=c,c++ \
	--disable-multilib
	
make &amp;&amp; make install
</code></pre>
<p>引用处理 <sup>refer 1</sup></p>
<pre><code class="language-bash">cd /usr/bin/
mv gcc gcc_back
mv g++ g++_back
ln -s /usr/local/bin/gcc gcc
ln -s /usr/local/bin/g++ g++
</code></pre>
<p>编译时遇到几个问题</p>
<p><code>/lib64/libstdc++.so.6: version GLIBCXX_3.4.20' not found</code></p>
<p>gcc 编译，<code>libgcc</code>动态库有改动，恢复原状即可</p>
<pre><code>configure: error: C++ compiler missing or inoperational

make[2]: \*** [configure-stage1-libcpp] Error 1    
make[2]: Leaving directory `/home/clay/programming/C++/gcc-4.8.1'    
make[1]: \*** [stage1-bubble] Error 2    
make[1]: Leaving directory `/home/clay/programming/C++/gcc-4.8.1'    
make: \*** [all] Error 2
</code></pre>
<h4 id="编译cmake">编译cmake</h4>
<pre><code class="language-bash">./configure --prefix=/path/to/app

make
make install
</code></pre>
<p>这里遇到一个小问题 编译过程中遇到 <code>[libstdc++.so.6: version GLIBCXX_3.4.20 not found</code></p>
<p>因为这里使用了自己编译的gcc版本，需要指定下动态库的路径 <sup>refer 2</sup></p>
<pre><code class="language-bash">LD_LIBRARY_PATH=/usr/local/lib64 ./configure --prefix=/usr/local/cmake
</code></pre>
<h4 id="编译jaeger-client-cpp">编译jaeger-client-cpp</h4>
<p>这里根据官方提供的步骤操作即可</p>
<pre><code class="language-bash">cd jaeger-client-cpp-0.9.0/
mkdir build
cd build
# 这里建议使用下科学上网，编译过程中会使用Hunter自动下载所需的依赖项
ALL_PROXY=http://x.0.0.x:10811 /usr/local/cmake/bin/cmake .. 
make
</code></pre>
<blockquote>
<p>注：依赖项挺大的，下载时间可能很长，会hang主，只需等待结束即可</p>
<p>​		编译完成后 <code>libjaegertracing.so.0.9.0</code> 则是我们需要的</p>
</blockquote>
<h4 id="编译nginx">编译nginx</h4>
<pre><code class="language-bash">./configure \
	--user=web_www \
	--group=web_www \
	--with-pcre \
	--with-compat \
	--with-http_ssl_module  \
	--with-http_gzip_static_module \
	--prefix=/root/nginx  \
	--with-http_stub_status_module
</code></pre>
<p><code>--with-compat</code> 必须加上，表面允许使用动态库，否则编译完在启动时会报下面的错误</p>
<pre><code class="language-bash">nginx: [emerg] module &quot;/root/nginx/conf/ngx_http_opentracing_module.so&quot; is not binary compatible in /root/nginx/conf/nginx.conf:1
</code></pre>
<p>遇到的问题，<code>cc nou found</code>，这里只需将 <code>gcc</code> 软连接一份为 <code>cc</code> 即可</p>
<h2 id="配置nginx">配置nginx</h2>
<h3 id="准备jaeger-client的配置">准备jaeger-client的配置</h3>
<p>jaeger.json，参数的说明可以参考<a href="https://github.com/jaegertracing/jaeger-client-cpp#configuration-via-environment" target="_blank"
   rel="noopener nofollow noreferrer" >configuration</a></p>
<pre><code class="language-json">{
  &quot;service_name&quot;: &quot;nginx&quot;, // 服务名
  &quot;sampler&quot;: {
    &quot;type&quot;: &quot;const&quot;,
    &quot;param&quot;: 1
  },
  &quot;reporter&quot;: {
    &quot;localAgentHostPort&quot;: &quot;jaeger:6831&quot; // jaeger agent的地址
  },
  &quot;headers&quot;: { // jaeger的默认的jaeger Baggage头设置
    &quot;jaegerDebugHeader&quot;: &quot;jaeger-debug-id&quot;,
    &quot;jaegerBaggageHeader&quot;: &quot;jaeger-baggage&quot;,
    &quot;traceBaggageHeaderPrefix&quot;: &quot;uberctx-&quot;
  },
  &quot;baggage_restrictions&quot;: {
    &quot;denyBaggageOnInitializationFailure&quot;: false,
    &quot;hostPort&quot;: &quot;&quot;
  }
}
</code></pre>
<h3 id="在nginx中开启opentracing">在nginx中开启opentracing</h3>
<p>对于 <code>nginx-opentracing</code> 更多的参数可以参考 <a href="https://github.com/opentracing-contrib/nginx-opentracing/blob/master/doc/Reference.md" target="_blank"
   rel="noopener nofollow noreferrer" >Reference.md</a></p>
<pre><code class="language-conf"># 加载 OpenTracing 动态模块。
load_module conf/ngx_http_opentracing_module.so;
worker_processes  1;
user root root;

events {
    worker_connections  1024;
}
http {
    log_format opentracing '{&quot;timestamp&quot;:&quot;$time_iso8601&quot;,'
                       '&quot;source&quot;:&quot;$server_addr&quot;,'
                       '&quot;hostname&quot;:&quot;$hostname&quot;,'
                       '&quot;ip&quot;:&quot;$http_x_forwarded_for&quot;,'
                       '&quot;traceID&quot;:&quot;$opentracing_context_uber_trace_id&quot;,'
                       '&quot;client&quot;:&quot;$remote_addr&quot;,'
                       '&quot;request_method&quot;:&quot;$request_method&quot;,'
                       '&quot;scheme&quot;:&quot;$scheme&quot;,'
                       '&quot;domain&quot;:&quot;$server_name&quot;,'
                       '&quot;referer&quot;:&quot;$http_referer&quot;,'
                       '&quot;request&quot;:&quot;$request_uri&quot;,'
                       '&quot;args&quot;:&quot;$args&quot;,'
                       '&quot;size&quot;:$body_bytes_sent,'
                       '&quot;status&quot;: $status,'
                       '&quot;responsetime&quot;:$request_time,'
                       '&quot;upstreamtime&quot;:&quot;$upstream_response_time&quot;,'
                       '&quot;upstreamaddr&quot;:&quot;$upstream_addr&quot;,'
                       '&quot;http_user_agent&quot;:&quot;$http_user_agent&quot;,'
                       '&quot;https&quot;:&quot;$https&quot;'
                       '}';
	# 加载 tracer，这里使用的jaeger，需要传递配置文件
    opentracing_load_tracer conf/libjaegertracing.so conf/jaeger.json;
    # 启用 tracing 
    opentracing on; 
    # 设置tag，可选参数
    opentracing_tag http_user_agent $http_user_agent;
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;
    server {
        listen       80;
        server_name  localhost;
        location / {
            opentracing_operation_name $uri;
	    opentracing_propagate_context;
            root   html;
            index  index.html index.htm;
        }
	access_log logs/access.log opentracing;
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
</code></pre>
<blockquote>
<p>注：这里使用的 <code>opentracing-nginx</code> 的动态库为 ot16 ，<code>linux-amd64-nginx-1.22.0-ot16-ngx_http_module.so.tgz</code> ，另外一个版本不兼容，<code>-t</code> 检查语法时会提示</p>
</blockquote>
<p><strong>配置说明</strong></p>
<p>对于每一个location都可以对其设置别名，这个就是 <code>opentracing_operation_name</code> 与 <code>opentracing_location_operation_name</code> 的区别</p>
<pre><code class="language-conf">http {
...
    location = /upload/animal {
      opentracing_location_operation_name upload;
    ...
</code></pre>
<p>更多的配置说明可以参考 <a href="https://github.com/opentracing-contrib/nginx-opentracing/blob/master/doc/Tutorial.md" target="_blank"
   rel="noopener nofollow noreferrer" >Tutorial.md</a></p>
<p>此时我们可以在jaeger上查看，可以看到 NGINX 的 span（因为这里只配置了NGINX，没有配置更多的后端）。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220704002209142.png" alt="image-20220704002209142" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220704002227865.png" alt="image-20220704002227865" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<blockquote>
<p>Reference</p>
<p>1 <a href="https://www.jianshu.com/p/8ce98a06492f" target="_blank"
   rel="noopener nofollow noreferrer" >CentOS7 升级 GCC 到 5.4.0 版本</a></p>
<p>2 <a href="https://stackoverflow.com/questions/53592796/libstdc-so-6-version-glibcxx-3-4-20-not-found" target="_blank"
   rel="noopener nofollow noreferrer" >libstdc++.so.6: version GLIBCXX_3.4.20 not found</a></p>
<p>3 <a href="https://nginx.org/en/docs/ngx_core_module.html#load_module" target="_blank"
   rel="noopener nofollow noreferrer" >nginx load_module</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>用于监控nginx的exporter：nginx-module-vts</title>
      <link>https://www.oomkill.com/2019/07/prome-nginx-module-vts/</link>
      <pubDate>Tue, 02 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2019/07/prome-nginx-module-vts/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>prometheus 监控nginx的模块 <a href="https://github.com/vozlt/nginx-module-vts" target="_blank"
   rel="noopener nofollow noreferrer" >nginx-module-vts</a></p>
<p>下载后配置</p>
<pre><code class="language-conf">http{
    vhost_traffic_status_zone; 
    vhost_traffic_status_zone shared:vhost_traffic_status:32m; #  设置共享内存大小
    server {
    
        vhost_traffic_status_filter_by_set_key  $status $server_name; # 计算详细的http状态代码的流量
    
        location /status {
            vhost_traffic_status_display; # 设置了该指令，则可以访问如下：
            vhost_traffic_status_display_format html;
            vhost_traffic_status off; ## 启用或禁用模块工作
        }
        
        
    }
}
</code></pre>
<p>不想统计流量的server区域禁用<code>vhost_traffic_statu off</code></p>
<p>例： 计算upstream后端响应时间 <code>nginx_upstream_responseMsec{upstream=“group1”}</code></p>
<ul>
<li>一个完整的配置文件：<a href="https://github.com/arquivei/nginx-vts/blob/master/nginx.conf" target="_blank"
   rel="noopener nofollow noreferrer" >nginx.conf</a></li>
<li>关于GEO相关：<a href="https://github.com/vozlt/nginx-module-vts/issues/162" target="_blank"
   rel="noopener nofollow noreferrer" >GeoIP.dat file format #162</a></li>
<li>ngx如何配置GEO：<a href="https://medium.com/@karljohnson/geoip-discontinuation-upgrade-to-geoip2-with-nginxon-centos-c2a3dbcf8fd" target="_blank"
   rel="noopener nofollow noreferrer" >GeoIP discontinuation; Upgrade to GeoIP2 with nginx on CentOS</a></li>
</ul>
<p>删除所zone内存中的数据</p>
<pre><code class="language-bash">curl localhost/status/control?cmd=delete&amp;group=*
</code></pre>
]]></content:encoded>
    </item>
    
    <item>
      <title>prometheus传统架构安装</title>
      <link>https://www.oomkill.com/2019/04/prometheus-install/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2019/04/prometheus-install/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>全局配置选项</p>
<pre><code>scrape_interval: 采集生命周期
scrape_timeout: 采集超时时间
evaluation_interval: 告警评估周期
rule_files 监控告警规则
scrape_config: 被监控端

altering 
</code></pre>
<p>检查配置文件语法</p>
<pre><code>$ promtool check config \etc\prometheus.yml 
Checking \etc\prometheus.yml
  SUCCESS: 0 rule files found
</code></pre>
<p>100 - (node_memory_MemFree_bytes+node_memory_Cached_bytes+node_memory_Buffers_bytes) \ node_memory_MemTotal_bytes * 100</p>
<p>计算剩余空间</p>
<p>node_filesystem_free_bytes{mountpoint=&quot;&quot;,fstype=~&ldquo;ext4|xfs&rdquo;} \ node_filesystem_size_bytes{mountpoint=&quot;&quot;,fstype=~&ldquo;ext4|xfs&rdquo;} * 100</p>
<p>查看使用的百分比</p>
<p>100-node_filesystem_free_bytes{mountpoint=&quot;&quot;,fstype=~&ldquo;ext4|xfs&rdquo;} \ node_filesystem_size_bytes{mountpoint=&quot;&quot;,fstype=~&ldquo;ext4|xfs&rdquo;} * 100</p>
<p>prometheus使用influxdb [Prometheus endpoints support in InfluxDB | InfluxData Documentation](https:\docs.influxdata.com\influxdb\v1.7\supported_protocols\prometheus)</p>
<p>[Configuration | Prometheus](https:\prometheus.io\docs\prometheus\latest\configuration\configuration)</p>
<p>配置文件参考</p>
<pre><code class="language-yaml">global:
alerting:
  alertmanagers:
  - static_configs:
    - targets:
rule_files:
scrape_configs:
  - job_name: 'prometheus1'
    file_sd_configs:
    - files: ['\data\sd_config\test.yml']
      refresh_interval: 5s
    relabel_configs:
    - action: replace
      source_labels: ['prometheous1']
      regex: (.*)
      replacement: $1
      target_label: ids
    - action: keep
      source_labels: [&quot;job&quot;]
  - job_name: 'k8s_master'
    file_sd_configs:
    - files: ['\data\sd_config\master.yml']
      refresh_interval: 5s
remote_write:
- url: &quot;http:\\localhost:8086\api\v1\prom\write?db=prometheus&quot;
remote_read:
- url: &quot;http:\\localhost:8086\api\v1\prom\read?db=prometheus&quot;
</code></pre>
<p>influxdb使用</p>
<p><a href="https:%5c%5cwww.linuxdaxue.com%5cinfluxdb-basic-operation.html" target="_blank"
   rel="noopener nofollow noreferrer" >InfluxDB学习之InfluxDB的基本操作 | Linux大学</a></p>
<p>查看所有表</p>
<pre><code class="language-sql">SHOW MEASUREMENTS
</code></pre>
<pre><code class="language-sql">select * from up
</code></pre>
<p>https:\github.com\kubernetes\kubernetes\tree\master\cluster\addons\prometheus</p>
<p>文件主要包括一下几个部分</p>
<ul>
<li>Prometheus的安装 包括 rbac service configmap</li>
<li>Prometheus-metrics 获取资源对象</li>
<li>node-exporter 获取工作节点资源信息</li>
<li>alertmanager 告警</li>
</ul>
<p>安装顺序</p>
<p>prometheus-rbac.yaml Prometheus访问apiserver的授权
prometheus-configmap.yaml 管理Prometheus的配置文件
prometheus-service.yaml 将Prometheus端口暴漏
prometheus-statefulset.yaml</p>
<p>原因为 prometheus-statefulset.yaml中的<code>accessModes</code>不能为<code>ReadWriteOnce</code>
prometheus&quot;is invalid: spec: Forbidden: updates to statefulset spec for fields other than &lsquo;replicas&rsquo;, &rsquo;template&rsquo;, and &lsquo;updateStrategy&rsquo; are forbidden</p>
<p>日志中报错<code>pod has unbound immediate persistentvolumeclaims back-off restarting failed container</code></p>
<p>错误原因：动态绑定至其他sc上，查看<code>kubectl describe pvc prometheus-data-prometheus-0 -n kube-system</code>pvc中报错<code>storageclass.storage.k8s.io &quot;nfs&quot; not found</code></p>
<p>prometheus时间不一致问题</p>
<pre><code class="language-yaml">spec:
  containers:
  - name: myweb
    image: harbor/tomcat:8.5-jre8
    volumeMounts:
    - name: host-time
      mountPath: /etc/localtime
    ports:
    - containerPort: 80
  volumes:
  - name: host-time
    hostPath:
      path: /etc/localtime
</code></pre>
<p>部署应用时，单独读取主机的“/etc/localtime”文件，即创建pod时同步时区，无需修改镜像，但是每个应用都要单独设置。</p>
<p>prometheus server down</p>
<p>编辑prometheus-statusfullset.yaml 修改其配置localhost 改为 127.0.0.1</p>
<pre><code>time=&quot;2020-11-20T18:44:48+08:00&quot; level=error msg=&quot;subset not found for kube-system/prometheus-server&quot; providerName=kubernetescrd ingress=promserver namespace=kube-system
</code></pre>
<p>查找原因kubernetes svc 匹配错误 service endpoint没有匹配到内容</p>
<pre><code>$ kubectl describe svc  prometheus-server  -n kube-system 
Name:              prometheus-server
Namespace:         kube-system
Labels:            &lt;none&gt;
Annotations:       Selector:  monitor=prometheus
Type:              ClusterIP
IP:                10.110.116.203
Port:              &lt;unset&gt;  9090/TCP
TargetPort:        9090/TCP
Endpoints:         &lt;none&gt;
Session Affinity:  None
Events:            &lt;none&gt;
</code></pre>
<p>修改后正常</p>
<p>数学理论基础实现的</p>
<p>配置文件</p>
<pre><code class="language-yaml">- job_name: 'prometheus' 首先定义任务名称
</code></pre>
<p>prometheus的客户端主要有两种方式采集</p>
<ul>
<li>pull 主动输影的形式</li>
<li>push 被动推送的形式</li>
</ul>
<h3 id="put">put</h3>
<p>put指的是客户端（被监控机器）先安装各类已有exporters（由社区组积或企业开发的监控客户端插件）在系统上之后，exporter以守护进程的模式运行并开始采集数据</p>
<p>exporter 本身也是一个htp_server 可以对http请求作出响应返回数据（KV metrics）</p>
<p>prometheua用pull 这种主动拉的方式（HTTP get）去访问每个节点上exporter并采样回需要的数据</p>
<h3 id="push">push：</h3>
<p>push指的是在客户端（或者服务端）安装这个官方提供的pushgateway插件然后，使用我们自行开发的各种脚本把监控数据组织成K/V的形式，metrics形式发送给pushgateway之后 puahgataway会再推送给prometheus</p>
<p>这种是一种被动的数据采集模式</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
