<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ssh on Cylon&#39;s Collection</title>
    <link>https://www.oomkill.com/tags/ssh/</link>
    <description>Recent content in ssh on Cylon&#39;s Collection</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 18 May 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://www.oomkill.com/tags/ssh/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SSH客户端应用场景</title>
      <link>https://www.oomkill.com/2018/05/ssh-client-application/</link>
      <pubDate>Fri, 18 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2018/05/ssh-client-application/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="ssh命令详解">SSH命令详解</h2>
<table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-1 </td>
<td>强制使用ssh协议版本1；</td>
</tr>
<tr>
<td style="text-align:center">-2</td>
<td>强制使用ssh协议版本2；</td>
</tr>
<tr>
<td style="text-align:center">-4</td>
<td>强制使用IPv4地址；</td>
</tr>
<tr>
<td style="text-align:center">-6</td>
<td>强制使用IPv6地址；</td>
</tr>
<tr>
<td style="text-align:center">-A</td>
<td>开启认证代理连接转发功能；</td>
</tr>
<tr>
<td style="text-align:center">-a</td>
<td>关闭认证代理连接转发功能；</td>
</tr>
<tr>
<td style="text-align:center">-b</td>
<td>使用本机指定地址作为对应连接的源ip地址；</td>
</tr>
<tr>
<td style="text-align:center"><strong><font color="#f8070d" size=3>-C</font></strong></td>
<td>请求压缩所有数据；</td>
</tr>
<tr>
<td style="text-align:center">-F</td>
<td>指定ssh指令的配置文件；</td>
</tr>
<tr>
<td style="text-align:center"><strong><font color="#f8070d" size=3>-f</font></strong></td>
<td>后台执行ssh指令；</td>
</tr>
<tr>
<td style="text-align:center">-g</td>
<td>允许远程主机连接主机的转发端口；</td>
</tr>
<tr>
<td style="text-align:center">-i</td>
<td>指定身份文件；</td>
</tr>
<tr>
<td style="text-align:center">-l</td>
<td>指定连接远程服务器登录用户名；</td>
</tr>
<tr>
<td style="text-align:center"><strong><font color="#f8070d" size=3>-N</font></strong></td>
<td>不执行远程指令；</td>
</tr>
<tr>
<td style="text-align:center">-o</td>
<td>指定配置选项；</td>
</tr>
<tr>
<td style="text-align:center">-p</td>
<td>指定远程服务器上的端口；</td>
</tr>
<tr>
<td style="text-align:center">-q</td>
<td>静默模式；</td>
</tr>
<tr>
<td style="text-align:center">-X</td>
<td>开启X11转发功能；</td>
</tr>
<tr>
<td style="text-align:center">-x</td>
<td>关闭X11转发功能；</td>
</tr>
<tr>
<td style="text-align:center">-y</td>
<td>开启信任X11转发功能。</td>
</tr>
<tr>
<td style="text-align:center"><strong><font color="#f8070d" size=3>-D</font></strong></td>
<td>指定本地 “动态” 应用程序级端口转发。这通过分配套接字来侦听本地端口，可选地绑定到指定的bind_address。只要与此端口建立连接，就会通过安全通道转发连接，然后使用应用程序协议确定从远程计算机连接的位置。</td>
</tr>
</tbody>
</table>
<h2 id="ssh端口转发实战">SSH端口转发实战</h2>
<h3 id="概述">概述</h3>
<p>在通常情况下，网络防火墙会阻碍你进行某些必要的网络传输。公司的安全策略可能不允许你把SSH密钥存储在某些主机上。或者，你也可能需要在原本安全的环境中运行一些不安全的网络应用程序。</p>
<p>SSH提供了一个重要功能，称为转发<font color="#f8070d" size=3><code>forwarding</code></font>或者称为隧道传输<font color="#f8070d" size=3><code>tunneling</code></font>，它能够将其他 TCP 端口的网络数据通过 SSH 链接来转发，并且自动提供了相应的加密及解密服务。这一过程有时也被叫做<font color="#f8070d" size=3><code>tunneling</code></font>，这是因为 SSH 为其他 TCP 链接提供了一个安全的通道来进行传输而得名。</p>
<p><strong>SSH端口转发主要用来解决如下两方面问题：</strong></p>
<ol>
<li>突破防火墙的限制完成无法建立的 TCP 连接。</li>
<li>加密 Client 端至 Server 端之间的通讯数据。</li>
</ol>
<h3 id="开启ssh的端口转发功能">开启ssh的端口转发功能</h3>
<p>ssh端口转发功能默认是打开的。如需修改的话，修改后需要重启sshd服务才会生效。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">AllowTcpForwarding yes
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="常用ssh转发类型">常用SSH转发类型</h3>
<p>在ssh连接的基础上，指定<code>ssh client</code>或<code>ssh server</code>的某个端口作为源地址，所有发至该端口的数据包都会透过ssh连接被转发出去；至于转发的目标地址，目标地址既可以指定，也可以不指定，如果指定了目标地址，称为定向转发，如果不指定目标地址则称为动态转发：</p>
<p><strong>定向转发</strong></p>
<p>定向转发把数据包转发到指定的目标地址。目标地址不限定是ssh client 或 ssh server，既可以是二者之一，也可以是二者以外的其他机器。</p>
<p><strong>动态转发</strong></p>
<p>动态转发不指定目标地址，数据包转发的目的地是动态决定的。</p>
<h4 id="本地端口转发">本地端口转发</h4>
<p>本地转发中的本地是指将本地的某个端口(1024-65535)通过SSH隧道转发至其他主机的套接字，这样当我们的程序连接本地的这个端口时，其实间接连上了其他主机的某个端口，当我们发数据包到这个端口时数据包就自动转发到了那个远程端口上了</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20200730182255288.png" alt="image-20200730182255288"  /></p>
<blockquote>
<p><strong>语法</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ssh -L <span class="o">[</span>bind_address:<span class="o">]</span>port:host:port ssh_host
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ssh -fNC -L 3333:100.109.9.249:22 111.44.246.139
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>命令说明</strong></p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>bind_address</td>
<td>表示客户端主机的ip，这是针对系统有多块网卡，不指定默认是127.0.0.1</td>
</tr>
<tr>
<td>port</td>
<td>本地主机指定监听的端口</td>
</tr>
<tr>
<td>host</td>
<td>远程主机的ip</td>
</tr>
<tr>
<td>hostport</td>
<td>指定远程主机的端口，如果远程主机是HTTP，就是80，FTP（21）。</td>
</tr>
<tr>
<td>ssh_host</td>
<td>远程主机的ip，也可以是能够访问到远程主机的另一个ip</td>
</tr>
</tbody>
</table>
<p><font color="#f8070d" size=3><code>-L</code></font>表明是本地转发，此时<font color="#f8070d" size=2><code>TCP客户端</code></font>与<font color="#f8070d" size=2><code>SSH客户端</code></font>同在本地主机上。后面接着三个值，由冒号分开，分别表示：需要监听的本地端口，远程主机名或IP地址，及远程的转发目标端口号。</p>
<h4 id="远程端口转发">远程端口转发</h4>
<p>远程转发和本地很相似，原理也差不多，但是不同的是，本地转发是在本地主机指定的一个端口，而远程转发是由SSH服务器经由SSH客户端转发，连接至目标服务器上。本质一样，区别在于需要转发的端口是在远程主机上还是在本地主机上</p>
<p>现在SSH就可以把连接从（39.104.112.253:80）转发到（10.0.0.10:85）。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20200730182352895.png" alt="image-20200730182352895"  /></p>
<blockquote>
<p><strong>语法</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ssh -R <span class="o">[</span>bind_ip<span class="o">]</span>:bind_port:host_ip:host_port sshserver
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>参数说明</strong></p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-R</td>
<td>表示远程转发。</td>
</tr>
<tr>
<td>bind_ip</td>
<td>表示绑定的远程主机iP</td>
</tr>
<tr>
<td>bind_port</td>
<td>远程主机监听端口</td>
</tr>
<tr>
<td>host_ip</td>
<td>被访问的主机IP</td>
</tr>
<tr>
<td>host_port</td>
<td>被访问主机的端口</td>
</tr>
<tr>
<td>sshserver</td>
<td>使用sshclient建立隧道的sshserver</td>
</tr>
</tbody>
</table>
<h4 id="动态端口转发">动态端口转发</h4>
<p>定向转发（包括本地转发和远程转发）的局限性是必须指定某个目标地址，如果需要借助一台中间服务器访问很多目标地址，一个一个地定向转发显然不是好办法，这时就要用的是ssh动态端口转发，它相当于建立一个SOCKS服务器。各种应用经由SSH客户端转发，经过SSH服务器，到达目标服务器，不固定端口。</p>
<blockquote>
<p><strong>语法</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ssh -fN -D <span class="o">[</span>ssh client port<span class="o">]</span> ssh server
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>参数说明</strong></p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-D</td>
<td>动态转发</td>
</tr>
<tr>
<td>-f</td>
<td>后台执行</td>
</tr>
<tr>
<td>-N</td>
<td>不执行任何命令</td>
</tr>
<tr>
<td>ssh client port</td>
<td>监听的端口</td>
</tr>
<tr>
<td>ssh server</td>
<td>当作sock5代理服务器(127.0.0.1)</td>
</tr>
</tbody>
</table>
<h2 id="ssh端口转发实战-1">SSH端口转发实战</h2>
<h3 id="实验1本地端口转发应用">实验1：本地端口转发应用</h3>
<h4 id="实验环境">实验环境</h4>
<table>
<thead>
<tr>
<th>主机</th>
<th>公网IP</th>
<th>内网IP</th>
<th>地位</th>
</tr>
</thead>
<tbody>
<tr>
<td>node01</td>
<td>39.104.116.253</td>
<td>172.24.104.10</td>
<td>client</td>
</tr>
<tr>
<td>node02</td>
<td>112.35.76.212</td>
<td>172.16.16.18</td>
<td>mysql server</td>
</tr>
</tbody>
</table>
<p>实现在生产内网里有一台mysql服务器（mysql Server），但是限制了只有本机上部署的应用才能直接连接此 mysql服务器。现在我们想临时从本地机器（mysql Client）直接连接到这个mysql服务器，只需要在mysql Client上运用本地端口转发。</p>
<h4 id="查看node01系统状态">查看node01系统状态</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ ps -ef<span class="p">|</span>grep mysql
</span></span><span class="line"><span class="cl">root     <span class="m">21764</span> <span class="m">21724</span>  <span class="m">0</span> 23:15 pts/0    00:00:00 grep --color<span class="o">=</span>auto mysql
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ ss -lnt
</span></span><span class="line"><span class="cl">State      Recv-Q    Send-Q           Local Address:Port        Peer Address:Port              
</span></span><span class="line"><span class="cl">LISTEN     <span class="m">0</span>         <span class="m">128</span>              *:22                      *:*    
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看node02系统状态</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ ps -ef<span class="p">|</span>grep mysql
</span></span><span class="line"><span class="cl">mysql    <span class="m">2042</span>     <span class="m">1</span>   <span class="m">0</span> Aug30 ?      /usr/sbin/mysqld --daemonize --pid-file<span class="o">=</span>/var/run/mysqld/mysqld.pid
</span></span><span class="line"><span class="cl">root     <span class="m">18250</span> <span class="m">18194</span>  <span class="m">0</span> 23:15 pts/0  grep --color<span class="o">=</span>auto mysql
</span></span></code></pre></td></tr></table>
</div>
</div><p>在主机A上执行命令：<strong><font color="#f8070d" size=3><code>ssh -Nf -L *:7000:127.0.0.1:3306 112.35.76.212</code></font></strong></p>
<p>需要注意的是，在选择端口号时要注意非管理员帐号是无权绑定 1-1023 端口的，所以一般是选用一个 1024-65535 之间的并且尚未使用的端口号即可。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ ss -lnt
</span></span><span class="line"><span class="cl">State      Recv-Q Send-Q          Local Address:Port          Peer Address:Port              
</span></span><span class="line"><span class="cl">LISTEN     <span class="m">0</span>      <span class="m">128</span>              *:22                        *:*                  
</span></span><span class="line"><span class="cl">LISTEN     <span class="m">0</span>      <span class="m">128</span>              *:7000                      *:*                  
</span></span><span class="line"><span class="cl">LISTEN     <span class="m">0</span>      <span class="m">128</span>             :::7000                     :::*                  
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以发现，node01的7000端口已被监听了，是被ssh（ssh就是客服端）监听的，和node02建立了一个SSH隧道，并且我们知道node01和node02是可以通信的，我们可以通过主机A的端口访问时，其实就是间接用主机B在访问。可以看到可以正常登陆mysql。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/babde631.gif" alt=""  /></p>
<hr>
<p><font color="#0215cd" size=2>注：mysql经过转发实际登陆mysql的用户组成的ip为sshserver登陆的ip。而不是sshclient的ip</font></p>
<hr>
<h3 id="实验2远程端口转发应用">实验2：远程端口转发应用</h3>
<p>内网通过路由器（SNAT）可以访问外网，而外网是无法访问到内网的，我们利用ssh来实现访问内网，要搭建这种环境，首先想到的是VMware的NAT模式，我将node03设置NAT模式。</p>
<table>
<thead>
<tr>
<th>主机</th>
<th>公网IP</th>
<th>内网IP</th>
<th>地位</th>
</tr>
</thead>
<tbody>
<tr>
<td>node01</td>
<td>112.35.26.104</td>
<td>172.24.104.10</td>
<td>sshserver</td>
</tr>
<tr>
<td>node02</td>
<td>112.35.76.212</td>
<td>172.16.16.18</td>
<td>sshclient</td>
</tr>
<tr>
<td>node03</td>
<td></td>
<td>172.16.16.11</td>
<td>mysql</td>
</tr>
<tr>
<td>node04</td>
<td></td>
<td></td>
<td>客户端</td>
</tr>
</tbody>
</table>
<p>在node02执行命令：<code>ssh -Nf -R *:7706:172.16.16.11:3306 112.35.26.104</code>，sshclient与sshserver建立隧道连接。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ netstat -nt<span class="p">|</span>grep <span class="m">104</span>
</span></span><span class="line"><span class="cl">tcp        <span class="m">0</span>      <span class="m">0</span> 172.16.16.18:50676      112.35.26.104:22        ESTABLISHED
</span></span></code></pre></td></tr></table>
</div>
</div><p>sshserver上可见到监听的端口。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ ss -lnt<span class="p">|</span>grep <span class="m">7706</span>
</span></span><span class="line"><span class="cl">LISTEN     <span class="m">0</span>      <span class="m">128</span>         127.0.0.1:7706              *:*     
</span></span><span class="line"><span class="cl">LISTEN     <span class="m">0</span>      <span class="m">128</span>               ::1:7706             :::*     
</span></span></code></pre></td></tr></table>
</div>
</div><p>登陆环境进行测试</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/13acf536.gif" alt=""  /></p>
<p>翻墙命令 <code>ssh -TfnN -D {Port} {User}@{Host}</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ssh -TfnN -D 7070 root@195.133.11.43
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>SSH服务详解</title>
      <link>https://www.oomkill.com/2016/08/ssh-service/</link>
      <pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2016/08/ssh-service/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="什么是-ssh-">什么是 SSH ？</h2>
<p>SSH全称(<font color="#f8070d" size=3><strong>S</strong></font>ecure<font color="#f8070d" size=3><strong>SH</strong></font>ell)是一种网络协议，顾名思义就是非常安全的shell，主要用于计算机间加密传输。早期，互联网通信都是基于明文通信，一旦被截获，内容就暴露无遗。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。</p>
<p>SSH服务是由OpenSSH服务端软件OpenSSH和客户端（常见的由SSH，SecureCRT，Xshell，putty）组成，默认使用<font color="#f8070d" size=3><strong>22</strong></font>端口提供服务，有两个不兼容的ssh协议版本，分别为1.x和2.x。</p>
<p>SSH协议目前有SSH1和SSH2两个主流版本，SSH2协议兼容SSH1，强烈建议使用SSH2版本。目前实现SSH1和SSH2协议的主要软件有OpenSSH 和SSH Communications Security Corporation　公司的SSH Communications 软件。前者是OpenBSD组织开发的一款免费的SSH软件，后者是商业软件，因此在linux、FreeBSD、OpenBSD 、NetBSD等免费类UNIX系统种，通常都使用OpenSSH作为SSH协议的实现软件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ rpm -qa openssh openssl
</span></span><span class="line"><span class="cl">openssl-1.0.1e-30.el6.x86_64
</span></span><span class="line"><span class="cl">openssh-5.3p1-104.el6.x86_64
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>SSH1.x</strong></p>
</blockquote>
<p>每台ssh服务器主机都可以使用rsa加密方式来产生一个1024bit的RSAKey，这个RSA的加密方式就是用来产生公钥与私钥的算法之一，SSH1.x的整个联机加密步骤如下：
当SSH服务启动时，会产生一个768-bit的临时公钥（sshd_config配置文件中ServerKeyBits 768）存放在server中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># centos5为768 centos6为1024</span>
</span></span><span class="line"><span class="cl">$ grep ServerKey /etc/ssh/sshd_config 
</span></span><span class="line"><span class="cl"><span class="c1">#ServerKeyBits 1024</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>当客户端联机请求传送过来时，服务器就会将这个768-bit的公钥传给客户端，此时客户端会将此公钥与先前存储的公钥进行对比，看是否一致。判断标准是服务器端联机用户目录下~/.ssh/know_hosts文件的内容（linux客户端）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ ssh -p22 lamp@192.168.65.62
</span></span><span class="line"><span class="cl">$ ll .ssh/known_hosts 
</span></span><span class="line"><span class="cl">-rw-r--r--. <span class="m">1</span> root root <span class="m">395</span> Jun <span class="m">16</span> 13:15 .ssh/known_hosts
</span></span></code></pre></td></tr></table>
</div>
</div><p>windows SecureCRT图示
在客户端接收到这个768-bit的Server Key后，客户端本地也会产生一个256bit的私钥（private key或host key），并且以加密的方式（具体的加密算法由客户端在服务器提供的所有可用算法中选择，默认为3DES算法），将Server key与host</p>
<h2 id="sshd_config配置文件详解">SSHD_CONFIG配置文件详解</h2>
<table>
<thead>
<tr>
<th>参数选项</th>
<th>注释说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Port <em>Num</em></td>
<td>指定sshd服务器侦听端口num。将num改成非标准端口可以提高安全性。默认端口为22。</td>
</tr>
<tr>
<td>Protocol 1|2|2,1</td>
<td>指定 sshd 支持的SSH协议的版本号。<code>'1'</code>和<code>'2'</code>表示仅仅支持SSH-1和SSH-2协议。<code>&quot;2,1&quot;</code>表示同时支持SSH-1和SSH-2协议。</td>
</tr>
<tr>
<td>PubkeyAuthentication</td>
<td>是否允许公钥认证。仅可以用于SSH-2。默认值为<font color="#f8070d" size=3><code>&quot;yes&quot;</code></font>。</td>
</tr>
<tr>
<td>ListenAddress 0.0.0.0</td>
<td>监听的IP，默认监听所有地址（可指定多个监听的地址），可使用以下格式：<br>ListenAddress<br>  host | IPv4_addr | IPv6_addr<br>  ListenAddress host | IPv4_addr:port<br> ListenAddress [host|IPv6_addr]:port<br>举例说明：如果您有两个 IP，分别是 192.168.0.100 及 192.168.2.20 ，那么只想要开放 192.168.0.100 时，就可以写如同下面的样式：ListenAddress 192.168.0.100只监听来自 192.168.0.100 这个 IP 的SSH联机。</td>
</tr>
<tr>
<td>HostKey /etc/ssh/ssh_host_key</td>
<td>SSH version 1 使用的私钥</td>
</tr>
<tr>
<td>HostKey /etc/ssh/ssh_host_rsa_key</td>
<td>SSH version 2 使用的 RSA 私钥</td>
</tr>
<tr>
<td>HostKey /etc/ssh/ssh_host_dsa_key</td>
<td>SSH version 2 使用的 DSA 私钥</td>
</tr>
<tr>
<td>KeyRegenerationInterval 1h</td>
<td>由前面联机的说明可以知道， version 1 会使用 server 的 Public Key ，那么如果这个 Public Key 被偷的话，岂不完蛋？所以需要每隔一段时间来重新建立一次！这里的时间为秒！</td>
</tr>
<tr>
<td>ServerKeyBits 768</td>
<td>定义服务器密匙的位数，centos5 768，centos6 1024</td>
</tr>
<tr>
<td>SyslogFacility</td>
<td>指定 sshd(8) 将日志消息通过哪个日志子系统(facility)发送。有效值是：DAEMON, USER, AUTH(默认), LOCAL0, LOCAL1, LOCAL2, LOCAL3, LOCAL4, LOCAL5, LOCAL6, LOCAL7</td>
</tr>
<tr>
<td>LogLevel</td>
<td>指定 sshd(8) 的日志等级(详细程度)。可用值如下：QUIET, FATAL, ERROR, INFO(默认), VERBOSE, DEBUG, DEBUG1, DEBUG2, DEBUG3<br>DEBUG 与 DEBUG1 等价；DEBUG2 和 DEBUG3 则分别指定了更详细、更罗嗦的日志输出。<br><font color="#0215cd" size=3>注：比 DEBUG 更详细的日志可能会泄漏用户的敏感信息，因此反对使用。<font></td>
</tr>
<tr>
<td>LoginGraceTime 2m</td>
<td>当使用者连上 SSH server 之后，会出现输入密码的画面，在该画面中，在多久时间内没有成功连上 SSH server ，就断线！时间为默认为秒，可加时间标志m,h</td>
</tr>
<tr>
<td>PermitRootLogin</td>
<td>是否允许 root 登录。可用值如下：<br>&ldquo;yes&rdquo;(默认) 表示允许。&ldquo;no&quot;表示禁止。<br>&ldquo;without-password&quot;表示禁止使用密码认证登录。<br>&ldquo;forced-commands-only&quot;表示只有在指定了 command 选项的情况下才允许使用公钥认证登录。同时其它认证方法全部被禁止。这个值常用于做远程备份之类的事情。</td>
</tr>
<tr>
<td>StrictModes</td>
<td>指定是否要求 sshd 在接受连接请求前对用户主目录和相关的配置文件进行宿主和权限检查。强烈建议使用默认值&quot;yes&quot;来预防可能出现的低级错误。</td>
</tr>
<tr>
<td>MaxAuthTries</td>
<td>指定每个连接最大允许的认证次数。默认值是 6 。如果失败认证的次数超过这个数值的一半，连接将被强制断开，且会生成额外的失败日志消息。</td>
</tr>
<tr>
<td>PubkeyAuthentication</td>
<td>是否允许公钥认证。仅可以用于SSH-2。默认值为<font color="#f8070d" size=3><code>&quot;yes&quot;</code></font>。</td>
</tr>
<tr>
<td>AuthorizedKeysFile</td>
<td>存放该用户可以用来登录的 RSA/DSA 公钥。该指令中可以使用下列根据连接时的实际情况进行展开的符号：<br><em><strong>%% 表示&rsquo;%&rsquo;</strong></em><br><em><strong>%h 表示用户的主目录</strong></em><br><em><strong>%u 表示该用户的用户名</strong></em>。<br>经过扩展之后的值必须要么是绝对路径，要么是相对于用户主目录的相对路径。默认值是<font color="#f8070d" size=3><code>&quot;.ssh/authorized_keys&quot;</code></font>。</td>
</tr>
<tr>
<td>IgnoreRhosts</td>
<td>是否在 RhostsRSAAuthentication 或 HostbasedAuthentication 过程中忽略 .rhosts 和 .shosts 文件。不过 /etc/hosts.equiv 和 /etc/shosts.equiv 仍将被使用。推荐设为默认值<font color="#f8070d" size=3><code>&quot;yes&quot;</code></font></td>
</tr>
<tr>
<td>IgnoreUserKnownHosts</td>
<td>是否在 RhostsRSAAuthentication 或 HostbasedAuthentication 过程中忽略用户的 ~/.ssh/known_hosts 文件。<br>默认值是<font color="#f8070d" size=3><code>&quot;no&quot;</code></font>。为了提高安全性，可以设为<font color="#f8070d" size=3><code>&quot;yes&quot;</code></font>。</td>
</tr>
<tr>
<td>PasswordAuthentication</td>
<td>是否允许使用基于密码的认证。默认为<font color="#f8070d" size=3><code>&quot;yes&quot;</code></font>。</td>
</tr>
<tr>
<td>PermitEmptyPasswords</td>
<td>是否允许密码为空的用户远程登录。默认为<font color="#f8070d" size=3><code>&quot;no&quot;</code></font>。</td>
</tr>
<tr>
<td>UseDNS</td>
<td>指定 sshd是否应该对远程主机名进行反向解析，以检查此主机名是否与其IP地址真实对应。默认值为<font color="#f8070d" size=3><code>&quot;yes&quot;</code></font>。。</td>
</tr>
<tr>
<td>PidFile</td>
<td>指定在哪个文件中存放SSH守护进程的进程号，默认为<font color="#f8070d" size=3><code>/var/run/sshd.pid</code></font>。文件。</td>
</tr>
<tr>
<td>MaxStartups</td>
<td>最大允许保持多少个未认证的连接。默认值是 10 。到达限制后，将不再接受新连接，除非先前的连接认证成功或超出 LoginGraceTime 的限制。</td>
</tr>
</tbody>
</table>
<h2 id="ssh服务的认证类型">SSH服务的认证类型</h2>
<p>从ssh客户端来看，SSH服务主要提供两种级别的安全验证，具体级别如下：</p>
<h3 id="基于口令的安全验证">基于口令的安全验证</h3>
<p>基于口令的安全验证是大家一直用的，只要知道服务器的SSH连接账号和口令（对应的服务器IP与开放的SSH端口，默认22），就可以通过ssh客户端登陆到这台远程主机。此时联机过程中所有传输的数据都是加密的。</p>
<blockquote>
<p><strong>口令验证测试</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ ssh -p52113 root@192.168.252.61
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  The authenticity of host <span class="s1">&#39;[192.168.252.61]:52113 ([192.168.252.61]:52113)&#39;</span> can<span class="s1">&#39;t be established.
</span></span></span><span class="line"><span class="cl"><span class="s1">RSA key fingerprint is 38:68:34:4e:09:c0:75:18:be:72:17:20:2c:95:0a:e6.
</span></span></span><span class="line"><span class="cl"><span class="s1">Are you sure you want to continue connecting (yes/no)? yes 
</span></span></span><span class="line"><span class="cl"><span class="s1">Warning: Permanently added &#39;</span><span class="o">[</span>192.168.252.61<span class="o">]</span>:52113<span class="s1">&#39; (RSA) to the list of known hosts.
</span></span></span><span class="line"><span class="cl"><span class="s1">root@192.168.252.61&#39;</span>s password: 
</span></span><span class="line"><span class="cl">Last login: Thu May <span class="m">11</span> 21:37:33 <span class="m">2017</span> from 192.168.252.1
</span></span><span class="line"><span class="cl">$   
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="基于秘钥的安全验证">基于秘钥的安全验证</h3>
<p>基于秘钥的安全验证方式是指，需要依靠秘钥。也就是必须实现建立一对秘钥对，然后吧<font style="background:#ffff00;" size=3>公用秘钥<font color="#f8070d" size=3>（public key）</font>放在需要访问的目标服务器上</font>，另外，还需要把<font style="background:#ffff00;" size=3>私钥<font color="#f8070d" size=3>（private key）</font>放到SSH客户端或对应的客户端服务器上</font>。</p>
<p>此时，如果想要连接到这个带有公用秘钥的SSH服务器，客户端SSH软件或客户端服务器就会向SSH服务器发出请求，请求用联机的用户秘钥进行安全验证。SSH服务器收到请求后，会先在该SSH服务器上连接的用户的家目录下寻找事先放上去的对应用户的公共密钥，然后把它和连接的SSH客户端发送过来的公用密钥进行比较。如果两个密钥一致，SSH服务器就用公用密钥加密“质询”（challenge）并把他发送给SSH客户端。</p>
<p>SSH客户端收到“质询”之后就可以用自己的私钥解密，再把发送给SSH服务器。使用这种方式，需要使用联机用户的密钥文件。与第一种基于口令验证的方式相比，第二种方式<font style="background:#ffff00;" size=3>不需要在网络上传送口令密码</font>，所以安全性更高了，这时我们也要注意保护我们的密钥文件。特别是私钥文件，一旦被黑客获取，危险就大了。</p>
<p>基于密钥的安全认证也有windows客户端与linux客户端的区别</p>
<h2 id="windows下使用秘钥方式登陆linux">WINDOWS下使用秘钥方式登陆linux</h2>
<blockquote>
<p><strong>方法一：在linux服务器上生成密钥对</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ ssh-keygen -t dsa
</span></span><span class="line"><span class="cl">Generating public/private dsa key pair.
</span></span><span class="line"><span class="cl"><span class="c1"># 输入文件中要保存的key</span>
</span></span><span class="line"><span class="cl">Enter file in which to save the key <span class="o">(</span>/root/.ssh/id_dsa<span class="o">)</span>: zhangsan
</span></span><span class="line"><span class="cl"><span class="c1"># 输入一个要解密的密码，空为无密码</span>
</span></span><span class="line"><span class="cl">Enter passphrase <span class="o">(</span>empty <span class="k">for</span> no passphrase<span class="o">)</span>: 
</span></span><span class="line"><span class="cl"><span class="c1"># 再次输入密码，空为无密码</span>
</span></span><span class="line"><span class="cl">Enter same passphrase again: 
</span></span><span class="line"><span class="cl"><span class="c1"># 身份证明以保存至zhangsan这个文件</span>
</span></span><span class="line"><span class="cl">Your identification has been saved in zhangsan.
</span></span><span class="line"><span class="cl"><span class="c1"># 公钥以保存为zhangsan.pub这个文件</span>
</span></span><span class="line"><span class="cl">Your public key has been saved in zhangsan.pub.
</span></span><span class="line"><span class="cl"><span class="c1"># lamp主机的root用户的key的指纹为那些</span>
</span></span><span class="line"><span class="cl">The key fingerprint is:
</span></span><span class="line"><span class="cl">10:d2:e8:03:30:4b:c9:8b:76:97:d0:6e:09:52:f7:06 root@lamp
</span></span><span class="line"><span class="cl">The key<span class="err">&#39;</span>s randomart image is:
</span></span><span class="line"><span class="cl">+--<span class="o">[</span> DSA 1024<span class="o">]</span>----+
</span></span><span class="line"><span class="cl"><span class="p">|</span>+oo.oE.          	<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>.*.ooo+.         	<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>o oo+ +o         	<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>.o .o*..         	<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>. . o.  S        	<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>                 	<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>                 	<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>                 	<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>                 	<span class="p">|</span>
</span></span><span class="line"><span class="cl">+-----------------+
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ ls
</span></span><span class="line"><span class="cl">known_hosts  zhangsan  zhangsan.pub
</span></span><span class="line"><span class="cl"><span class="c1"># 在服务器上将公钥重命名,名字错误将验证不成功</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ mv id_dsa.pub authorized_keys
</span></span><span class="line"><span class="cl"><span class="c1"># 查看是否重命名成功</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ ll
</span></span><span class="line"><span class="cl">-rw-r--r--. <span class="m">1</span> root root <span class="m">599</span> Jun <span class="m">17</span> 03:23 authorized_keys
</span></span><span class="line"><span class="cl">-rw-------. <span class="m">1</span> root root <span class="m">668</span> Jun <span class="m">17</span> 03:23 id_dsa
</span></span><span class="line"><span class="cl"><span class="c1"># 修改公钥权限</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ chmod <span class="m">600</span> authorized_keys 
</span></span><span class="line"><span class="cl"><span class="c1"># 查看公钥权限是否修改成功</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ ll
</span></span><span class="line"><span class="cl">-rw-------. <span class="m">1</span> root root <span class="m">599</span> Jun <span class="m">17</span> 03:23 authorized_keys
</span></span><span class="line"><span class="cl">-rw-------. <span class="m">1</span> root root <span class="m">668</span> Jun <span class="m">17</span> 03:23 id_dsa  
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用SecureCRT将私钥转换为openSSH格式的私钥</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214233019524.png" alt="image-20221214233019524"  /></p>
<p>选择之前下载的私钥的路径</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214233039966.png" alt="image-20221214233039966"  /></p>
<p>如果没输入密码则无这一步</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214233124937.png" alt="image-20221214233124937"  /></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214233209994.png" alt="image-20221214233209994"  /></p>
<p>测试过程</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214233231147.png" alt="image-20221214233231147"  /></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214233248106.png" alt="image-20221214233248106"  /></p>
<blockquote>
<p><strong>方法二：使用SecureCRT创建秘钥对</strong></p>
</blockquote>
<ol>
<li><strong>选择当前要生成的秘钥窗口，然后点击“工具”中的创建公钥选项，如下图所示</strong>：</li>
</ol>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214233337089.png" alt="image-20221214233337089"  /></p>
<ol start="2">
<li><strong>秘钥生成向导选择下一步，如下图所示</strong>：</li>
</ol>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214233355827.png" alt="image-20221214233355827"  /></p>
<ol start="3">
<li><strong>秘钥类型选择DSA或RSA，然后点击下一步，如下图所示</strong>：</li>
</ol>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214233415756.png" alt="image-20221214233415756"  /></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214233427261.png" alt="image-20221214233427261"  /></p>
<ol start="4">
<li><strong>生成秘钥长度，保持默认即可，如下图所示</strong>：</li>
</ol>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214233507874.png" alt="image-20221214233507874"  /></p>
<ol start="5">
<li><strong>秘钥生成过程，如下图所示</strong>：</li>
</ol>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214233520164.png" alt="image-20221214233520164"  /></p>
<ol start="6">
<li><strong>秘钥生成后选择下一步，如下图所示</strong>：</li>
</ol>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214233539086.png" alt="image-20221214233539086"  /></p>
<ol start="7">
<li><strong>秘钥生成后，点击下一步，选择秘钥的私钥保存的路径和，然后点击完成。如下图所示</strong>：</li>
</ol>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214233550840.png" alt="image-20221214233550840"  /></p>
<ol start="8">
<li><strong>点击完成后，弹出是否使用此秘钥为全局公钥，以个人习惯选择是或否，这里选择否，如下图所示</strong>：</li>
</ol>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214233610803.png" alt="image-20221214233610803"  /></p>
<ol start="9">
<li><strong>将SecureCRT生成的公钥上传到linux服务器上</strong></li>
</ol>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214233646475.png" alt="image-20221214233646475"  /></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 创建公钥存放目录</span>
</span></span><span class="line"><span class="cl">$ mkdir .ssh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 修改.ssh目录的权限</span>
</span></span><span class="line"><span class="cl">$ chmod <span class="m">700</span> .ssh/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看ssh2兼容格式转换成openssh的格式结果</span>
</span></span><span class="line"><span class="cl">$ ssh-keygen -i -f Identity.pub  
</span></span><span class="line"><span class="cl">ssh-dss AAAAB3NzaC1kc3MAAACBAIJLJsIZJ0G/RKBnWQ04uRfqnv3Vkm8iusrI3Bm784lP64kn/IVZnC/2wcs6xjwjuGFt8GgNVKty+
</span></span><span class="line"><span class="cl">s5/jf4uMBse7Ju3alIv42iOmS5+qeztb3Yio1r0rEjLcEdFZVEW3dbVsYX3ufwvBa9GhPum4q3eYwY7TziKR9ub2UJZTqVzAAAAFQDSfk
</span></span><span class="line"><span class="cl">HVhjW7J80YBBI2PdqVcRfZ3wAAAIBwmHcLm+BVCcMmpKfYzl+W1/79Cd7vSbeFMW+linn82Li/RcVnWF47hxeKwOwJ/O2UJ879cW1xPUG
</span></span><span class="line"><span class="cl">nJUNfEvHJs93rn3zthlbwLCmyH8Ugp2pF38DgyydbU6Xs/6lyiUc14WlzvL3QqO1H+QBX/18ZgXsZjoxakd86pz329r9wTgAAAIAVakBN
</span></span><span class="line"><span class="cl">8DtSRZqPLeaXDhevg3texOTlmDsmhmqBcAOmH6VnzP1VB0E8DhTB8/MWJChSJalslyEzaa1PhBNwZEn3SmG6vWe+CXSuEtHBXbVBQHsDb
</span></span><span class="line"><span class="cl">xois6L+oqkL86PA7JdzTDSfiZKoGOks5f37Qb+CREnhyYcXJIjPZTE/0aIsdA<span class="o">==</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 将ssh2兼容格式转换成openssl的格式结果</span>
</span></span><span class="line"><span class="cl">$ ssh-keygen -i -f Identity.pub &gt;&gt;.ssh/authorized_keys
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 修改公钥的权限</span>
</span></span><span class="line"><span class="cl">$ chmod <span class="m">600</span> .ssh/authorized_keys 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看权限是否修改成功</span>
</span></span><span class="line"><span class="cl">$ ll .ssh/
</span></span><span class="line"><span class="cl">-rw-------. <span class="m">1</span> root root <span class="m">589</span> Jun <span class="m">17</span> 04:37 authorized_keys  
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="10">
<li><strong>测试结果</strong>
新建快速链接，在鉴权中选择公钥，如下图所示：</li>
</ol>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214233705203.png" alt="image-20221214233705203"  /></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214233722816.png" alt="image-20221214233722816"  /></p>
<p>如果设置了通行短语，就会出现以下框</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214233734945.png" alt="image-20221214233734945"  /></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214233756074.png" alt="image-20221214233756074"  /></p>
<p><a href="http://blog.51cto.com/phenixikki/1546669">裸奔的后果！一次ssh被篡改的入侵事件</a></p>
<p>扫描端口实例：牤牛阵解决ssh安全问题</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ nmap 192.168.65.62 -p1-65535
</span></span><span class="line"><span class="cl">Starting Nmap 5.51 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2016-06-17 05:11 CST
</span></span><span class="line"><span class="cl">Nmap scan report <span class="k">for</span> 192.168.65.62
</span></span><span class="line"><span class="cl">Host is up <span class="o">(</span>0.0000040s latency<span class="o">)</span>.
</span></span><span class="line"><span class="cl">Not shown: <span class="m">65532</span> closed ports
</span></span><span class="line"><span class="cl">PORT     STATE SERVICE
</span></span><span class="line"><span class="cl">22/tcp   open  ssh
</span></span><span class="line"><span class="cl">80/tcp   open  http
</span></span><span class="line"><span class="cl">3306/tcp open  mysql
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Nmap <span class="k">done</span>: <span class="m">1</span> IP address <span class="o">(</span><span class="m">1</span> host up<span class="o">)</span> scanned in 0.79 seconds  
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>使用SSH协议来传输文件</title>
      <link>https://www.oomkill.com/2016/07/scp/</link>
      <pubDate>Sun, 24 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2016/07/scp/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="ssh客户端附带的远程拷贝scp命令">SSH客户端附带的远程拷贝scp命令</h2>
<p>    scp是加密 的远程拷贝，可以把数据从一台机器推送到另一台机器，也可以从其他服务器把数据拉回到本地执行命令的服务器，但是，每次都是全量拷贝（rsync增量拷贝），因此效率不高。
scp的基本语法使用
secure copy （remote file copy ）</p>
<table>
<thead>
<tr>
<th>参数选项</th>
<th>注释说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-p</td>
<td>拷贝前后保持文件或目录属性</td>
</tr>
<tr>
<td>-P</td>
<td>（大写）	接端口，默认22端口时可省略</td>
</tr>
<tr>
<td>-r</td>
<td>拷贝目录</td>
</tr>
<tr>
<td>-l</td>
<td>限制速度</td>
</tr>
</tbody>
</table>
<p>推：scp -Pport 源 目标(user@host_ip):/path</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ touch <span class="o">{</span>a..f<span class="o">}</span>.txt
</span></span><span class="line"><span class="cl">$ ls
</span></span><span class="line"><span class="cl">a.txt  
</span></span><span class="line"><span class="cl">b.txt  
</span></span><span class="line"><span class="cl">c.txt  
</span></span><span class="line"><span class="cl">d.txt  
</span></span><span class="line"><span class="cl">e.txt  
</span></span><span class="line"><span class="cl">f.txt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ scp -P22 a.txt root@192.168.65.62:/
</span></span><span class="line"><span class="cl">root@192.168.65.62<span class="err">&#39;</span>s password: 
</span></span><span class="line"><span class="cl">a.txt                       100%    <span class="m">0</span>     0.0KB/s   00:00
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$   ls /
</span></span><span class="line"><span class="cl">app  
</span></span><span class="line"><span class="cl">a.txt
</span></span></code></pre></td></tr></table>
</div>
</div><p>拉：scp -Pport 源(user@host_ip):/path 目标</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$   ll /
</span></span><span class="line"><span class="cl">total <span class="m">98</span>
</span></span><span class="line"><span class="cl">app  a.txt
</span></span><span class="line"><span class="cl">$ ls
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ scp -P22 root@192.168.65.62:/a.txt ./
</span></span><span class="line"><span class="cl">-rw-r--r--. <span class="m">1</span> root root <span class="m">0</span> Jun <span class="m">16</span> 18:20 a.txt
</span></span><span class="line"><span class="cl">root@192.168.65.62<span class="err">&#39;</span>s password: 
</span></span><span class="line"><span class="cl">a.txt             100%    <span class="m">0</span>     0.0KB/s   00:00    
</span></span><span class="line"><span class="cl">$ ls
</span></span><span class="line"><span class="cl">a.txt
</span></span></code></pre></td></tr></table>
</div>
</div><p>拷贝目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ touch <span class="o">{</span>a..g<span class="o">}</span>.txt
</span></span><span class="line"><span class="cl">$ ls
</span></span><span class="line"><span class="cl"> a.txt  b.txt  c.txt  d.txt  e.txt  f.txt  g.txt
</span></span><span class="line"><span class="cl">$ scp -P22 -r /test1 root@192.168.65.62:/
</span></span><span class="line"><span class="cl">root@192.168.65.62<span class="err">&#39;</span>s password: 
</span></span><span class="line"><span class="cl">c.txt                                       100%    <span class="m">0</span>     0.0KB/s   00:00    
</span></span><span class="line"><span class="cl">b.txt                                       100%    <span class="m">0</span>     0.0KB/s   00:00    
</span></span><span class="line"><span class="cl">g.txt                                       100%    <span class="m">0</span>     0.0KB/s   00:00    
</span></span><span class="line"><span class="cl">e.txt                                       100%    <span class="m">0</span>     0.0KB/s   00:00    
</span></span><span class="line"><span class="cl">a.txt                                       100%    <span class="m">0</span>     0.0KB/s   00:00    
</span></span><span class="line"><span class="cl">d.txt                                       100%    <span class="m">0</span>     0.0KB/s   00:00    
</span></span><span class="line"><span class="cl">f.txt                                       100%    <span class="m">0</span>     0.0KB/s   00:00    
</span></span><span class="line"><span class="cl">$ l
</span></span><span class="line"><span class="cl">$ ll /
</span></span><span class="line"><span class="cl">drwxr-xr-x.   <span class="m">2</span> root root  <span class="m">4096</span> Jun <span class="m">17</span> 06:52 test1
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="ssh服务附带sftp功能服务">SSH服务附带sftp功能服务</h2>
<p>安全的FTP的功能，即通过ssh加密数据后进行传输</p>
<h3 id="linux-ftp客户端连接sftp服务器方法">Linux FTP客户端连接sftp服务器方法</h3>
<p>linux客户端连接 sftp user@ip 如果端口为52113则登陆命令如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ sftp -oPort<span class="o">=</span><span class="m">22</span> root@192.168.65.62
</span></span><span class="line"><span class="cl">Connecting to 192.168.65.62...
</span></span><span class="line"><span class="cl">root@192.168.65.62<span class="err">&#39;</span>s password:
</span></span><span class="line"><span class="cl"><span class="c1"># sftp默认的目录为用户家目录</span>
</span></span><span class="line"><span class="cl">sftp&gt; ls -l
</span></span><span class="line"><span class="cl">Identity.pub
</span></span><span class="line"><span class="cl">anaconda-ks.cfg
</span></span><span class="line"><span class="cl">install.log
</span></span><span class="line"><span class="cl">install.log.syslog
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 上传，默认上传到对方家目录</span>
</span></span><span class="line"><span class="cl">sftp&gt; put /test/1
</span></span><span class="line"><span class="cl">Uploading /test/1 to /root/1
</span></span><span class="line"><span class="cl">/test/1                       100%    <span class="m">0</span>     0.0KB/s   00:00
</span></span><span class="line"><span class="cl">$ ll
</span></span><span class="line"><span class="cl">-rw-r--r--. <span class="m">1</span> root root     <span class="m">0</span> Jun <span class="m">17</span> 08:43 <span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sftp&gt; ls -l
</span></span><span class="line"><span class="cl"><span class="m">1</span>
</span></span><span class="line"><span class="cl">Identity.pub
</span></span><span class="line"><span class="cl">anaconda-ks.cfg
</span></span><span class="line"><span class="cl">install.log
</span></span><span class="line"><span class="cl">install.log.syslog
</span></span><span class="line"><span class="cl"><span class="c1"># sftp不支持tab键</span>
</span></span><span class="line"><span class="cl">sftp&gt; cat <span class="m">1</span>
</span></span><span class="line"><span class="cl">Invalid command.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 下载，默认下载到用户家目录</span>
</span></span><span class="line"><span class="cl">sftp&gt; get install.log
</span></span><span class="line"><span class="cl">Fetching /root/install.log to install.log
</span></span><span class="line"><span class="cl">/root/install.log                                100%   21KB  21.2KB/s   00:00    
</span></span><span class="line"><span class="cl"><span class="c1"># sftp并不锁定目录，可以自行选择文件上传</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 把/etc/passwd从客户端本地传到sftp服务端指定目录/根下</span>
</span></span><span class="line"><span class="cl">sftp&gt; put /etc/passwd /
</span></span><span class="line"><span class="cl">Uploading /etc/passwd to /passwd
</span></span><span class="line"><span class="cl">/etc/passwd                     100% <span class="m">1202</span>     1.2KB/s   00:00    
</span></span><span class="line"><span class="cl"><span class="c1"># lnmp长传自sftp服务器上的passwd文件</span>
</span></span><span class="line"><span class="cl">$ ll /
</span></span><span class="line"><span class="cl">-rw-r--r--.   <span class="m">1</span> root root  <span class="m">1202</span> Jun <span class="m">17</span> 08:51 passwd
</span></span><span class="line"><span class="cl"><span class="c1"># sftp不能下载/上传目录</span>
</span></span><span class="line"><span class="cl">sftp&gt; get asdc
</span></span><span class="line"><span class="cl">Fetching /root/asdc to asdc
</span></span><span class="line"><span class="cl">Cannot download non-regular file: /root/asdc
</span></span></code></pre></td></tr></table>
</div>
</div><p>小结：</p>
<ol>
<li><code>sftp -oPort=22 root@1.1.1.1</code></li>
<li>上传put加客户端本地路径，也可以指定路径上传，put /etc/hosts(客户端目录) /tmp（服务器目录）</li>
<li>下载直接get服务端的内容，下载到本地的当前目录</li>
</ol>
<h3 id="windows客户端连接sftp方法">windows客户端连接sftp方法</h3>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214234154054.png" alt="image-20221214234154054"  /></p>
<p>这时是windows连接的lnmp而和lamp无关，相当于rz sz上传下载的功能</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214234207465.png" alt="image-20221214234207465"  /></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 上传，路径要加双引号</span>
</span></span><span class="line"><span class="cl">sftp&gt; put <span class="s2">&#34;D:\vmware-0.log&#34;</span>
</span></span><span class="line"><span class="cl">Uploading vmware-0.log to /root/vmware-0.log
</span></span><span class="line"><span class="cl">  100% 193KB    193KB/s 00:00:00     
</span></span><span class="line"><span class="cl">D:/vmware-0.log: <span class="m">197820</span> bytes transferred in <span class="m">0</span> seconds <span class="o">(</span><span class="m">193</span> KB/s<span class="o">)</span>
</span></span><span class="line"><span class="cl">sftp&gt; ls
</span></span><span class="line"><span class="cl">anaconda-ks.cfg       install.log           install.log.syslog
</span></span><span class="line"><span class="cl">vmware-0.log
</span></span></code></pre></td></tr></table>
</div>
</div><p>下载</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sftp&gt; get install.log
</span></span><span class="line"><span class="cl">Downloading install.log from /root/install.log
</span></span><span class="line"><span class="cl">  100% 21KB     21KB/s 00:00:00     
</span></span><span class="line"><span class="cl">/root/install.log: <span class="m">21682</span> bytes transferred in <span class="m">0</span> seconds <span class="o">(</span><span class="m">21</span> KB/s<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sftp&gt; get install.log <span class="s2">&#34;D:\&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">Downloading install.log from /root/install.log
</span></span></span><span class="line"><span class="cl"><span class="s2">get: D:/: 系统找不到指定的文件。 
</span></span></span><span class="line"><span class="cl"><span class="s2">  100% 21KB     21KB/s 00:00:00     
</span></span></span><span class="line"><span class="cl"><span class="s2">/root/install.log: 21682 bytes transferred in 0 seconds (21 KB/s)
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>下载的目录是CRT设置的目录，注意设置后需要重新启动软件</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221214234228671.png" alt="image-20221214234228671"  /></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
