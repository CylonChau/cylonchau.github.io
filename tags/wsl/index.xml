<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>wsl on Cylon&#39;s Collection</title>
    <link>https://www.oomkill.com/tags/wsl/</link>
    <description>Recent content in wsl on Cylon&#39;s Collection</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 18 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.oomkill.com/tags/wsl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>H3C Cloud与WSL2共存</title>
      <link>https://www.oomkill.com/2022/05/h3c-hcl-preparation/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/05/h3c-hcl-preparation/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="背景">背景</h2>
<p>由于Windows10 开启WSL2后无法和 <em>eNSP</em> 做到兼容，但是 <em>H3C HCL</em> 在版本 <strong>HCL_v2.1.2.1</strong> 提供了 <strong>VirtualBox 6.0.14</strong> 作为虚拟化后端，理论上来说可以做到 WSL2 与 HCL 共存。</p>
<p>并且开启了WSL2后并于其他虚拟化平台（VirtualBox, Vmvare）做到兼容的情况下，这种情况大部分禁止套娃（虚拟化下在虚拟化），通过安装虚拟机的方式再安装 <em>eNSP</em> 发现启动不报错，但是很长时间起不来。</p>
<blockquote>
<p>Notes <sup><a href="#1">[1]</a></sup>：HCL官方给的建议是，对于windows7装的版本为<em>HCL_v2.1.1</em>；对于Windows10 并且开启了 <em>Hype-v</em> 或者 <em>Dokcer-Desktop</em>，推荐使用 <em>HCL_v3.0.1.1</em></p>
</blockquote>
<p>下载地址：<a href="http://www.h3c.com/cn/Service/Document_Software/Software_Download/Other_Product/H3C_Cloud_Lab/Catalog/HCL/" target="_blank"
   rel="noopener nofollow noreferrer" >HCL Download</a></p>
<h2 id="安装过程">安装过程</h2>
<p>下载好安装时，直接下一步直至完成即可，VirtualBox已被内嵌至安装包内了。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220811201205362.png" alt="image-20220811201205362" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<center>图：HCL安装界面</center>
<blockquote>
<p>Notes：如果需要抓包，自行安装<em>Wireshark</em>，安装好后，在<em>HCL</em>设置中配置 <code>wireshark.exe</code> 的路径即可</p>
</blockquote>
<h2 id="virtualbox启用hyper-v支持-supa-href22asup">VirtualBox启用hyper-v支持 <sup><a href="#2">[2]</a></sup></h2>
<p>进入VirtualBox安装目录, 确定当前目录下存在VBoxManage.exe文件, 在当前目录打开powershell. 或者你将VBoxManage.exe所在目录加入环境变量, 任意路径下打开powershell.</p>
<pre><code class="language-powershell"># 或指定vbox所有虚拟系统开启
./VBoxManage.exe setextradata global &quot;VBoxInternal/NEM/UseRing0Runloop&quot; 0
</code></pre>
<p>开启后，HCL所有的设备就工作正常了，这种情况下也不用牺牲<em>WSL2</em>或者<em>Dokcer-Desktop</em>。因为eNSP官方没有再更新，导致hype-v与VirtualBox无法兼容，暂时无解。</p>
<h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://www.h3c.com/en/d_201811/1129464_294551_0.htm" target="_blank"
   rel="noopener nofollow noreferrer" >H3C Cloud Lab</a></p>
<p><sup id="2">[2]</sup> <a href="https://blog.csdn.net/qq_36992069/article/details/104750248" target="_blank"
   rel="noopener nofollow noreferrer" >Windows 10 (2004) 启用wsl2, 并与VirtualBox 6.0+共存</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Windows Terminal无法加载WSL  [process exited with code 4294967295 (0xffffffff)]</title>
      <link>https://www.oomkill.com/2022/03/wsl-problem-with-windows-terminal/</link>
      <pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/03/wsl-problem-with-windows-terminal/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>在Windows Terminal中WSL无法打开错误代码是 <code>process exited with code 4294967295 (0xffffffff)</code>，但在命令行中 通过 <code>&quot;C:\Windows\System32\wsl.exe&quot; -d ubuntu18</code> 是正常的</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20220330221629562-2038164960.png" alt="" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<p><strong>解决方法是</strong>：通过修改启动的命令为 <code>wsl.exe ~ -d Ubuntu</code> 中间加一个 <code>~</code> 可以很好的解决掉</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20220330222938218-1759026485.png" alt="" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<p>这种方法存在一个问题，打开的wsl终端将为根目录而不是当前windows目录</p>
<h2 id="reference">Reference</h2>
<blockquote>
<p><a href="https://github.com/microsoft/terminal/issues/12474" target="_blank"
   rel="noopener nofollow noreferrer" >Unable to launch WSL Ubuntu</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>WSL与Windows环境共享</title>
      <link>https://www.oomkill.com/2021/07/wsl-share-to-win/</link>
      <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/07/wsl-share-to-win/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>在使用 wsl 时，总是需要执行 windows 的 cmd，但是windows命令行对于大多数人使用起来还是不习惯，微软提供了在 windows 中Linux与Windows的命令互通，即可以使用cmd shell执行Linux命令，也可以使用bash shell来执行windows命令。</p>
<p>WSL可对 Windows 与 Linux 之间的集成操作：</p>
<ul>
<li>从 Linux shell（如 Ubuntu）运行 Windows 工具（任意 <code>.exe</code>）。</li>
<li>从 Windows shell（即 PowerShell or cmd ）运行 Linux 命令（如 cd ls grep）。</li>
<li>在 WSL与windows之间共享环境变量。 （版本 17063+）</li>
</ul>
<p>满足上述要求，可以很好地使用windows的软件在WSL中畅快的操作，即空WSL环境拥有了python解析器 docker等操作。</p>
<h2 id="如何在-wsl和-windows-之间共享环境变量">如何在 WSL和 Windows 之间共享环境变量</h2>
<p>从<code>Build 17063</code> 开始，可以利用 <code>WSLENV</code> 来增强 Win/WSL 之间的环境变量互操作。</p>
<h3 id="什么是wslenv">什么是WSLENV</h3>
<ul>
<li>WSLENV 是一个以冒号分隔的环境变量列表，当从 WSL 启动 WSL进程或 Win进程时包含的变量</li>
<li>每个变量都可以以斜杠作为后缀，后跟标识位以指定它的转换方式</li>
<li>WSLENV 可以在 WSL 和 Win32 之间转换的路径</li>
<li>WSLENV。在WSL中，是以冒号分隔的列表。在Win中，是以分号分隔的列表</li>
<li>可以在<code>.bashrc</code>或者windows自定义环境变量中设置<code>WSLENV</code></li>
</ul>
<p>例如：一个<code>WSLENV</code>应该设置为</p>
<pre><code>WSLENV=GOPATH/l:USERPROFILE/w:SOMEVAR/wp
</code></pre>
<p>在17063之前，WSL访问Windows环境变量唯一方法是使用全路径（可以使用全路径从WSL下启动Win32可执行文件）。但是没有办法在WSL中设置环境变量，调用Win进程，并期望将该变量传送到进程。</p>
<p>在17063之后，引入一个名为<code>WSLENV</code>的特殊环境变量，以帮助WSL和Win之间的共享。 <code>WSLENV</code>存在于两个环境中。用户可以将WSLENV的值设置为耦合值与环境变量串联，每个都以 <code>\</code> 为标志，以指定应该如何解析该变量。例如：</p>
<h3 id="p">/p</h3>
<p><code>/p</code> 表示应在WSL和Win32之间转换path。例如。在WSL中设置变量，将其添加到WSLENV设置<code>/p</code> 标志，然后在win环境cmd.exe中读取变量，该值会随着rootfs的转变而转换为对应的值。</p>
<pre><code class="language-bash">$ /mnt/d# export TRANSLATABLE=`pwd`
$ /mnt/d# echo $TRANSLATABLE
/mnt/d
$ /mnt/d# export WSLENV=TRANSLATABLE\p
$ /mnt/d# export WSLENV=TRANSLATABLE/p
$ /mnt/d# echo $WSLENV
TRANSLATABLE/p
$ /mnt/d# cmd.exe
Microsoft Windows [版本 10.0.19043.1052]
(c) Microsoft Corporation。保留所有权利。

D:\&gt;set TRANSLATABLE # 在windows中查看环境变量
TRANSLATABLE=D:\
</code></pre>
<h3 id="l">/l</h3>
<p><code>/l</code> 表示该值是路径列表（如Linux的PATH）。在Linux中，是以冒号分隔的路径列表。在Win中，是以分号分隔的路径列表。<code>/l</code> 可以将路径列表适当对不通系统进行转换。</p>
<pre><code class="language-bash">$ /mnt/d# export TEMPORARY=/usr/local/go/bin:/usr/local/python/bin

$ /mnt/d# WSLENV=$WSLENV:TEMPORARY/l

$ /mnt/d# echo $WSLENV
TRANSLATABLE/p:TEMPORARY/l

$ /mnt/d# cmd.exe
Microsoft Windows [版本 10.0.19043.1052]
(c) Microsoft Corporation。保留所有权利。

D:\&gt;set TEMPORARY
TEMPORARY=\\wsl$\ubuntu1\usr\local\go\bin;\\wsl$\ubuntu1\usr\local\python\bin

</code></pre>
<h3 id="u">/u</h3>
<p><code>/u</code> 表示仅在Linux（WSL）中调用变量的值为 Win 类型的变量值，及windows向Linux传递环境变量，但格式不变</p>
<pre><code class="language-bash">D:\compose&gt;set zhangsan=D:\compose

D:\compose&gt;set zhangsan
zhangsan=D:\compose

D:\compose&gt;set WSLENV=zhangsan/u

D:\compose&gt;wsl -d ubuntu1
$ /mnt/d/compose# echo $zhangsan
D:\compose
</code></pre>
<blockquote>
<p>如需要自动适应转换，则需要 使用<code>/up</code></p>
</blockquote>
<h3 id="w">/w</h3>
<p><code>/w</code> 表示仅在从Win调用WSL环境变量是的值，该参数并不会自动转换，如需转换一样需要使用 <code>/wp</code> 。</p>
<pre><code class="language-bash">$ /mnt/d/compose# export FROMWSL=/mnt/d/compose
$ /mnt/d/compose# export WSLENV=FROMWSL/w
$ /mnt/d/compose# cmd.exe
Microsoft Windows [版本 10.0.19043.1052]
(c) Microsoft Corporation。保留所有权利。

D:\compose&gt;set FROMWSL
FROMWSL=/mnt/d/compose

D:\compose&gt;exit
$ /mnt/d/compose# export WSLENV=FROMWSL/wp
$ /mnt/d/compose# cmd.exe
Microsoft Windows [版本 10.0.19043.1052]
(c) Microsoft Corporation。保留所有权利。

D:\compose&gt;set FROMWSL
FROMWSL=D:\compose
</code></pre>
<h2 id="使用脚本传递变量">使用脚本传递变量</h2>
<p>如果需要BASH脚本传递对应的变量到windows程序执行，例如</p>
<pre><code class="language-bash">#!/bin/bash

export MYPATH=/mnt/c/Users/

WSLENV=$WSLENV:MYPATH/p cmd.exe /c set MYPATH
</code></pre>
<p>通过WSL shell环境执行，可以得到windows程序处理的结果，并且可以拿到环境变量</p>
<pre><code class="language-bash">$ /mnt/d/compose# bash 1.sh
MYPATH=C:\Users\
</code></pre>
<h2 id="实例设置一个开发环境使其共享环境变量">实例：设置一个开发环境，使其共享环境变量</h2>
<p>例如，希望在WSL中设置DEV环境。使用WSLENV VAR，将其配置为在WSL和Win之间共享GoPath。</p>
<h3 id="安装golang">安装golang</h3>
<p>首先，我们需要安装两个平台。要在Windows与WSL安装，步骤不说了。（如果是python等解析语言，可以使用alias直接使用windows的解析器则不需要安装了）</p>
<h3 id="设置项目">设置项目</h3>
<p>接下来，需要配置的GO项目。该项目需要在Windows文件系统下。在PowerShell中发出以下命令：(这里在桌面配置的)</p>
<pre><code class="language-bash">mkdir $env:USERPROFILE\desktop\goProject
cd $env:USERPROFILE\desktop\goProject
New-Item hello.go
</code></pre>
<p>配置环境变量，然后将gopath添加到WSLENV，此时，两个文件系统间，会使用同一个GOPATH</p>
<pre><code class="language-bash">setx GOPATH &quot;$env:USERPROFILE\desktop\goProject&quot;
setx WSLENV &quot;$env:WSLENV:GOPATH&quot;/p
</code></pre>
<blockquote>
<p>需要事项</p>
<ul>
<li>WSL（通过.profile或其他）中的定义将在通过WSL访问时覆盖默认WSLENV中定义的值。</li>
<li>在关闭WSL后，WSLENV不会持久化，需要修改相应的配置文件（.profile，.bash_rc等）。</li>
<li>WSL可以设置任何值。如果仅设置当前文件系统变量，则不会自动转换。通过WSLENV可以自动翻译成两种不通的文件系统下的环境变量。</li>
</ul>
</blockquote>
<h2 id="题外话cmdexe-跨文件系统常用参数">题外话cmd.exe 跨文件系统常用参数</h2>
<table>
<thead>
<tr>
<th>options</th>
<th>describe</th>
</tr>
</thead>
<tbody>
<tr>
<td>/C</td>
<td>使用cmd.exe运行一个命令并终止，类似于 bash -c</td>
</tr>
</tbody>
</table>
<h2 id="reference">Reference</h2>
<p>更多cmd.exe帮助参考</p>
<blockquote>
<p><a href="https://ss64.com/nt/cmd.html" target="_blank"
   rel="noopener nofollow noreferrer" >cmd_helps</a></p>
<p><a href="https://www.cnblogs.com/woki/p/14967604.html" target="_blank"
   rel="noopener nofollow noreferrer" >WSL备份及windows Docker安装</a></p>
<p><a href="https://www.cnblogs.com/woki/p/13946476.html" target="_blank"
   rel="noopener nofollow noreferrer" >WSL安装维护</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>适用于windows10 Linux子系统的安装管理配置</title>
      <link>https://www.oomkill.com/2020/11/linux-subsystem-in-win10/</link>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2020/11/linux-subsystem-in-win10/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="什么是wsl">什么是WSL</h2>
<p><code>Windows Subsystem for Linux</code> 简称WLS，适用于Linux的Windows子系统，可以直接在Windows上运行Linux环境（包括大部分命令行工具）</p>
<h3 id="linux-containers与windows-subsystem-for-linuxwsl区别">Linux containers与Windows Subsystem for Linux（WSL）区别</h3>
<p>　　此处以docker与wsl进行一些比较，主要为个人的理解之处。</p>
<p>　　docker与wsl同样运行在本机环境中运行，不依赖其他管理程序与虚拟化。
　　docker与wsl同样为应用容器。</p>
<h2 id="安装wsl">安装WSL</h2>
<p>在Windows10上，用于Linux的Windows子系，可运行受支持的Linux版本（例如Ubuntu，OpenSuse，Debian等），而无需设置操作系统的复杂性。虚拟机或其他计算机。</p>
<h3 id="使用设置为linux启用windows子系统">使用设置为Linux启用Windows子系统</h3>
<ol>
<li><strong>打开设置</strong></li>
<li><strong>点击“应用”</strong>。</li>
<li><strong>在“相关设置”部分下，单击“程序和功能”选项</strong></li>
</ol>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/1380340-20201108233007245-1313186627.png" alt="" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<ol start="4">
<li><strong>单击左窗格中的“打开或关闭Windows功能”选项。</strong></li>
</ol>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/1380340-20201108233019164-2093713154.png" alt="" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<ol start="5">
<li><strong>检查Windows Subsystem for Linux选项。</strong></li>
</ol>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/1380340-20201108233050628-1621985294.png" alt="" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<p>完成这些步骤后，将配置该环境以下载并运行Windows 10上的Linux版本。</p>
<h3 id="使用microsoft-store安装linux发行版">使用Microsoft Store安装Linux发行版</h3>
<p>要在Windows 10上安装Linux发行版，请使用以下步骤：</p>
<p>打开Microsoft Store。搜索要安装的Linux发行版。一些可用的发行版包括：</p>
<ul>
<li><a href="https://www.windowscentral.com/e?link=https%3A%2F%2Fclick.linksynergy.com%2Fdeeplink%3Fid%3DkXQk6%252AivFEQ%26mid%3D24542%26u1%3DUUwpUdUnU72700YYw%26murl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fen-us%252Fp%252Fubuntu%252F9nblggh4msv6%26ourl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fstore%252FproductId%252F9NBLGGH4MSV6&amp;token=ti9ZlPH4" target="_blank"
   rel="noopener nofollow noreferrer" >Ubuntu</a></li>
<li><a href="https://www.windowscentral.com/e?link=https%3A%2F%2Fclick.linksynergy.com%2Fdeeplink%3Fid%3DkXQk6%252AivFEQ%26mid%3D24542%26u1%3DUUwpUdUnU72700YYw%26murl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fen-us%252Fp%252Fopensuse-leap-15-1%252F9njfzk00fgkv%26ourl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fstore%252FproductId%252F9NJFZK00FGKV&amp;token=0vM0S7vS" target="_blank"
   rel="noopener nofollow noreferrer" >OpenSuse</a></li>
<li><a href="https://www.windowscentral.com/e?link=https%3A%2F%2Fclick.linksynergy.com%2Fdeeplink%3Fid%3DkXQk6%252AivFEQ%26mid%3D24542%26u1%3DUUwpUdUnU72700YYw%26murl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fen-us%252Fp%252Fkali-linux%252F9pkr34tncv07%26ourl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fstore%252FproductId%252F9PKR34TNCV07&amp;token=cG6n6K_6" target="_blank"
   rel="noopener nofollow noreferrer" >Kali Linux</a></li>
<li><a href="https://www.windowscentral.com/e?link=https%3A%2F%2Fclick.linksynergy.com%2Fdeeplink%3Fid%3DkXQk6%252AivFEQ%26mid%3D24542%26u1%3DUUwpUdUnU72700YYw%26murl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fen-us%252Fp%252Fdebian%252F9msvkqc78pk6%26ourl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fstore%252FproductId%252F9MSVKQC78PK6&amp;token=BjqzImNu" target="_blank"
   rel="noopener nofollow noreferrer" >Debian</a></li>
<li><a href="https://www.windowscentral.com/e?link=https%3A%2F%2Fclick.linksynergy.com%2Fdeeplink%3Fid%3DkXQk6%252AivFEQ%26mid%3D24542%26u1%3DUUwpUdUnU72700YYw%26murl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fen-us%252Fp%252Falpine-wsl%252F9p804crf0395%26ourl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fstore%252FproductId%252F9P804CRF0395&amp;token=D9eFavB7" target="_blank"
   rel="noopener nofollow noreferrer" >Alpine WSL</a></li>
<li><a href="https://www.windowscentral.com/e?link=https%3A%2F%2Fclick.linksynergy.com%2Fdeeplink%3Fid%3DkXQk6%252AivFEQ%26mid%3D24542%26u1%3DUUwpUdUnU72700YYw%26murl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fen-us%252Fp%252Fsuse-linux-enterprise-server-12%252F9p32mwbh6cns%26ourl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fstore%252FproductId%252F9P32MWBH6CNS&amp;token=J65kn0Rn" target="_blank"
   rel="noopener nofollow noreferrer" >Suse Linux Enterprise</a></li>
</ul>
<ol start="2">
<li>选择要在您的设备上安装的Linux发行版。</li>
<li>单击获取（或安装）按钮。</li>
<li>Microsoft Store安装Linux发行版</li>
<li>单击启动按钮。为Linux发行版创建一个用户名，然后按Enter键。</li>
<li>指定发行版的密码，然后按Enter。</li>
<li>重复密码，然后按Enter确认。</li>
</ol>
<p>完成以上步骤后，即完成安装了WLS（没有图形界面），在开始菜单 运行 <code>wls</code> 启动。</p>
<h3 id="离线安装wls">离线安装WLS</h3>
<p>　　官网指导手册内包含所支持的<a href="https://docs.microsoft.com/en-us/windows/wsl/install-manual#downloading-distros" target="_blank"
   rel="noopener nofollow noreferrer" >Linux离线安装包</a></p>
<blockquote>
<p>这里下载的为<code>Ubuntu 18.04</code>，下载后，文件格式为appx格式，本次使用的操作系统为，windows1709企业版，并且卸载了所有的 UWP应用。因此只能使用命令行进行安装。</p>
<p>非LTSC企业版或卸载windows store的可以直接双击安装</p>
</blockquote>
<p>　　管理员打开Powershell 运行以下命令，将路径替换为下载的离线安装包路径。本次安装的wls默认安装到C盘</p>
<pre><code class="language-powershell">Add-AppxPackage .\app_name.appx
</code></pre>
<p>查看已经安装的子系统</p>
<pre><code>wslconfig /l
</code></pre>
<h4 id="安装时选择其他盘安装">安装时选择其他盘安装</h4>
<ol>
<li>
<p>首先解压.appx文件</p>
</li>
<li>
<p>用 <a href="https://github.com/DDoSolitary/LxRunOffline/releases" target="_blank"
   rel="noopener nofollow noreferrer" >LxRunOffline</a> 安装：</p>
</li>
</ol>
<p>windows10 1803以上版本下载最新版即可，windows 1709及一下，可以安装<a href="https://github.com/DDoSolitary/LxRunOffline/releases?after=v2.2.2" target="_blank"
   rel="noopener nofollow noreferrer" >2.x</a>版本。</p>
<ol start="3">
<li>使用以下命令安装，<code>-f</code>后的文件为解压后文件内根目录的<code>install.tar.gz</code></li>
</ol>
<p>语法</p>
<pre><code>LxRunOffline.exe install  -n &lt;install systemname&gt; -d &lt;save path&gt; -f &lt;unzip_path/install.tar.gz&gt;
</code></pre>
<pre><code>LxRunOffline.exe install -n ubuntu -d d:\wls -f d:\Ubuntu_1804.2019.522.0_x64\install.tar.gz
</code></pre>
<p>等运行完成后（warning可忽略），开始 =&gt; 运行<code>wls</code>进入，进入后默认就是root用户。另外开始菜单不会有单独的启动的图标。</p>
<h4 id="如何在重装系统后恢复原来的wsl">如何在重装系统后恢复原来的WSL</h4>
<pre><code>.\LxRunOffline.exe rg -n ubuntu -d D:\wsl\ubuntu
</code></pre>
<h2 id="配置wsl与windows共用开发环境">配置wsl与windows共用开发环境</h2>
<p>　　本次配置的开发环境为golang与goland，在windows下与linux下的环境开发与运行为相同的环境。其他的开发环境类似。</p>
<p>　　因为wsl共享windows的路径，可以再windows与linux安装golang编译器。并分别设置<code>go env</code></p>
<h3 id="windows">windows</h3>
<pre><code>set GO111MODULE=on
set GOPATH=D:\go_work
set GOPROXY=https://goproxy.io,https://goproxy.cn,direct
set GOROOT=C:\Go
</code></pre>
<p>Linux，GOPATH要与windows设置为同一个路径，这样可以保证安装的包为同一个。即实现了同一个开发环境与Linux环境。</p>
<pre><code>export GO111MODULE=on
export GOPROXY=https://goproxy.io,https://goproxy.cn,direct
export GOROOT=/usr/local/go
export GOPATH=/mnt/d/go_work/
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
</code></pre>
<h3 id="goland设置">goland设置</h3>
<p>file =&gt; setting =&gt; Tools =&gt; Terminal</p>
<pre><code>C:\Windows\System32\wsl.exe
</code></pre>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20201109000212690-34842593.png" alt="" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<p>file =&gt; setting =&gt; Editor =&gt; Code Style</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20201109000303092-1063825125.png" alt="" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<h3 id="goland-wls-terminal-bashrc不生效">goland wls terminal .bashrc不生效</h3>
<p>　　在wsl中发现一些环境变量、shell颜色等都不生效。这里需要了解shell的类型</p>
<p>　　shell有两种类型，<code>Login Shell</code>和<code>Non Login Shell</code>。每一个shell都有自己自定义的脚本来预设值shell运行的环境。</p>
<h4 id="login-shell">Login Shell</h4>
<p>　　当成功登陆用户后，将创建登陆shell（通过ssh sudo 或者 terminal）</p>
<p>　　查看当前shell是什么类型的shell <code>echo $0</code></p>
<ul>
<li>Login Shell：-bash或-su。</li>
<li>Non Login Shell： bash或su</li>
</ul>
<p><strong>Login shell 登陆后执行以下脚本</strong>：</p>
<blockquote>
<p>登陆执行<code>/etc/profile</code>
/etc/profile执行<code>/etc/profile.d</code>中的所有脚本
然后执行用户 <code>~/.bash_profile</code>
<code>~/.bash_profile</code> 会有命令执行用户目录 <code>~/.bashrc</code>
<code>~/.bashrc</code>中会执行 <code>/etc/bashrc</code></p>
</blockquote>
<h4 id="non-login-shell">Non Login Shell</h4>
<p>　　<code>Non Login Shell</code>是由<code>Login Shell</code>启动的shell。例如，登陆成功后执行bash，此时是<code>Non Login Shell</code></p>
<p><strong>Non Login Shell登陆后执行以下脚本</strong>：</p>
<blockquote>
<p>首先执行 <code>~/.bashrc</code>
然后 <code>~/.bashrc</code> 执行 <code>/etc/bashrc</code>
<code>/etc/bashrc</code> 调用 <code>/etc/profile.d</code> 中的脚本</p>
</blockquote>
<p>　　了解了执行顺序后，按照步骤查看对应问题所在，此处问题没有<code>~/.bashrc</code>中设置的alias和颜色。根据<code>Login shell</code>流程应为<code>~/.bash_profile</code>中去执行<code>~/.bashrc</code>，查看<code>~/.bash_profile</code> 发现文件为空。</p>
<p>　　复制一份linux <code>~/.bash_profile</code> 中的文件内容到对应的<code>~/.bash_profile</code>后发现功能已经正常实现。</p>
<pre><code class="language-bash"># .bash_profile

# Get the aliases and functions
if [ -f ~/.bashrc ]; then
	. ~/.bashrc
fi

# User specific environment and startup programs

PATH=$PATH:$HOME/bin
</code></pre>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20201214220914329-1063628897.png" alt="" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
