<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C on Cylon&#39;s Collection</title>
    <link>https://www.oomkill.com/tags/c/</link>
    <description>Recent content in C on Cylon&#39;s Collection</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 28 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.oomkill.com/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ch0 ide</title>
      <link>https://www.oomkill.com/2022/09/ch0-ide/</link>
      <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/09/ch0-ide/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="visual-studio使用">Visual Studio使用</h2>
<h3 id="离线安装包">离线安装包</h3>
<p>在页面 <sup><a href="#4">[4]</a></sup> 下载安装引导命令，下载完成后使用命令（对于C++来说）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bat" data-lang="bat"><span class="line"><span class="cl">vs_Professional.exe --layout ‪1111 --add Microsoft.VisualStudio.Workload.NativeDesktop --includeRecommended --lang en-US zh-CN
</span></span></code></pre></td></tr></table>
</div>
</div><p>随后会触发下载，等待下载完成后，在 <code>--layout</code> 指定的目录上点击 <em><strong>vs_setup</strong></em> 开始离线安装。</p>
<blockquote>
<p>Note: 对于完全脱离C盘安装可以使用下面的脚本，更改变量为要安装的路径</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bat" data-lang="bat"><span class="line"><span class="cl"><span class="p">:</span><span class="c1">: 关闭终端回显</span>
</span></span><span class="line"><span class="cl"><span class="p">@</span><span class="k">echo</span> off
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">ROOT_PATH</span><span class="p">=</span>D:\Program Files\Microsoft Visual Studio
</span></span><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">X86_PATH</span><span class="p">=</span><span class="nv">%ROOT_PATH%</span>\Program Files (x86)
</span></span><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">X86_VS_PATH</span><span class="p">=</span><span class="nv">%X86_PATH%</span>\Microsoft Visual Studio
</span></span><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">X86_SDK_PATH</span><span class="p">=</span><span class="nv">%X86_PATH%</span>\Microsoft SDKs
</span></span><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">X86_KITS_PATH</span><span class="p">=</span><span class="nv">%X86_PATH%</span>\Windows Kits
</span></span><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">X86_AV_PATH</span><span class="p">=</span><span class="nv">%X86_PATH%</span>\Application Verifier
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">X64_PATH</span><span class="p">=</span><span class="nv">%ROOT_PATH%</span>\Program Files
</span></span><span class="line"><span class="cl"><span class="c1">rem SET X64_VS_PATH=%X64_PATH%\Microsoft Visual Studio</span>
</span></span><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">X64_AV_PATH</span><span class="p">=</span><span class="nv">%X64_PATH%</span>\Application Verifier
</span></span><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">X64_SQL_PATH</span><span class="p">=</span><span class="nv">%X64_PATH%</span>\Microsoft SQL Server
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">PD_PATH</span><span class="p">=</span><span class="nv">%ROOT_PATH%</span>\ProgramData
</span></span><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">PD_VS_PATH</span><span class="p">=</span><span class="nv">%PD_PATH%</span>\Microsoft\VisualStudio
</span></span><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">PD_PC_PATH</span><span class="p">=</span><span class="nv">%PD_PATH%</span>\Package Cache
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">@</span><span class="k">echo</span> =======link directory to <span class="nv">%ROOT_PATH%</span>=======:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">S_X86_SKD_PATH</span><span class="p">=</span>C:\Program Files (x86)\Microsoft SDKs
</span></span><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">S_X86_VS_PATH</span><span class="p">=</span>C:\Program Files (x86)\Microsoft Visual Studio
</span></span><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">S_X86_KITS_PATH</span><span class="p">=</span>C:\Program Files (x86)\Windows Kits
</span></span><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">S_X86_AV_PATH</span><span class="p">=</span>C:\Program Files (x86)\Application Verifier
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">S_X64_AV_PATH</span><span class="p">=</span>C:\Program Files\Application Verifier
</span></span><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">S_X64_SQL_PATH</span><span class="p">=</span>C:\Program Files\Microsoft SQL Server
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">S_PD_VS_PATH</span><span class="p">=</span>C:\ProgramData\Microsoft\VisualStudio
</span></span><span class="line"><span class="cl"><span class="k">SET</span> <span class="nv">S_PD_PC_PATH</span><span class="p">=</span>C:\ProgramData\Package Cache
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">pause</span>
</span></span><span class="line"><span class="cl"><span class="p">@</span><span class="k">echo</span> =======setting visual studio environment=======:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">@</span><span class="k">echo</span> =======check directory exist=======:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">not</span> <span class="k">exist</span> <span class="nv">%ROOT_PATH%</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="k">echo</span> <span class="s2">&#34;</span><span class="nv">%ROOT_PATH%</span><span class="s2">目录不存在，已创建该目录！&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">md</span> <span class="s2">&#34;</span><span class="nv">%ROOT_PATH%</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">not</span> <span class="k">exist</span> <span class="nv">%X86_PATH%</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="k">echo</span> <span class="s2">&#34;</span><span class="nv">%X86_PATH%</span><span class="s2">目录不存在，已创建该目录！&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">md</span> <span class="s2">&#34;</span><span class="nv">%X86_PATH%</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">not</span> <span class="k">exist</span> <span class="nv">%X86_VS_PATH%</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="k">echo</span> <span class="s2">&#34;</span><span class="nv">%X86_VS_PATH%</span><span class="s2">目录不存在，已创建该目录！&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">md</span> <span class="s2">&#34;</span><span class="nv">%X86_VS_PATH%</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">not</span> <span class="k">exist</span> <span class="nv">%X86_SDK_PATH%</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="k">echo</span> <span class="s2">&#34;</span><span class="nv">%X86_SDK_PATH%</span><span class="s2">目录不存在，已创建该目录！&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">md</span> <span class="s2">&#34;</span><span class="nv">%X86_SDK_PATH%</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">not</span> <span class="k">exist</span> <span class="nv">%X86_KITS_PATH%</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="k">echo</span> <span class="s2">&#34;</span><span class="nv">%X86_KITS_PATH%</span><span class="s2">目录不存在，已创建该目录！&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">md</span> <span class="s2">&#34;</span><span class="nv">%X86_KITS_PATH%</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">not</span> <span class="k">exist</span> <span class="nv">%X86_AV_PATH%</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="k">echo</span> <span class="s2">&#34;</span><span class="nv">%X86_AV_PATH%</span><span class="s2">目录不存在，已创建该目录！&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">md</span> <span class="s2">&#34;</span><span class="nv">%X86_AV_PATH%</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">not</span> <span class="k">exist</span> <span class="nv">%X64_PATH%</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="k">echo</span> <span class="s2">&#34;</span><span class="nv">%X64_PATH%</span><span class="s2">目录不存在，已创建该目录！&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">md</span> <span class="s2">&#34;</span><span class="nv">%X64_PATH%</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">not</span> <span class="k">exist</span> <span class="nv">%X64_AV_PATH%</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="k">echo</span> <span class="s2">&#34;</span><span class="nv">%X64_AV_PATH%</span><span class="s2">目录不存在，已创建该目录！&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">md</span> <span class="s2">&#34;</span><span class="nv">%X64_AV_PATH%</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">not</span> <span class="k">exist</span> <span class="nv">%X64_SQL_PATH%</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="k">echo</span> <span class="s2">&#34;</span><span class="nv">%X64_SQL_PATH%</span><span class="s2">目录不存在，已创建该目录！&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">md</span> <span class="s2">&#34;</span><span class="nv">%X64_SQL_PATH%</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">not</span> <span class="k">exist</span> <span class="nv">%PD_PATH%</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="k">echo</span> <span class="s2">&#34;</span><span class="nv">%PD_PATH%</span><span class="s2">目录不存在，已创建该目录！&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">md</span> <span class="s2">&#34;</span><span class="nv">%PD_PATH%</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">not</span> <span class="k">exist</span> <span class="nv">%PD_VS_PATH%</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="k">echo</span> <span class="s2">&#34;</span><span class="nv">%PD_VS_PATH%</span><span class="s2">目录不存在，已创建该目录！&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">md</span> <span class="s2">&#34;</span><span class="nv">%PD_VS_PATH%</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="k">not</span> <span class="k">exist</span> <span class="nv">%PD_PC_PATH%</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="k">echo</span> <span class="s2">&#34;</span><span class="nv">%PD_PC_PATH%</span><span class="s2">目录不存在，已创建该目录！&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">md</span> <span class="s2">&#34;</span><span class="nv">%PD_PC_PATH%</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">@</span><span class="k">echo</span> =======link directory to <span class="nv">%ROOT_PATH%</span>=======:
</span></span><span class="line"><span class="cl"><span class="p">:</span><span class="c1">: x86 link</span>
</span></span><span class="line"><span class="cl"><span class="k">mklink</span> /j <span class="s2">&#34;</span><span class="nv">%S_X86_SKD_PATH%</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">%X86_SDK_PATH%</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">mklink</span> /j <span class="s2">&#34;</span><span class="nv">%S_X86_VS_PATH%</span><span class="s2">&#34;</span>  <span class="s2">&#34;</span><span class="nv">%X86_VS_PATH%</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">mklink</span> /j <span class="s2">&#34;</span><span class="nv">%S_X86_KITS_PATH%</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">%X86_KITS_PATH%</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">mklink</span> /j <span class="s2">&#34;</span><span class="nv">%S_X86_AV_PATH%</span><span class="s2">&#34;</span>  <span class="s2">&#34;</span><span class="nv">%X86_AV_PATH%</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">:</span><span class="c1">: x64 link</span>
</span></span><span class="line"><span class="cl"><span class="k">mklink</span> /j <span class="s2">&#34;</span><span class="nv">%S_X64_AV_PATH%</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">%X64_AV_PATH%</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">mklink</span> /j <span class="s2">&#34;</span><span class="nv">%S_X64_SQL_PATH%</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">%X64_SQL_PATH%</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">:</span><span class="c1">: ProgramData link</span>
</span></span><span class="line"><span class="cl"><span class="k">mklink</span> /j <span class="s2">&#34;</span><span class="nv">%S_PD_VS_PATH%</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">%PD_VS_PATH%</span><span class="s2">&#34;</span> 
</span></span><span class="line"><span class="cl"><span class="k">mklink</span> /j <span class="s2">&#34;</span><span class="nv">%S_PD_PC_PATH%</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">%PD_PC_PATH%</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">pause</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="vs快捷键">VS快捷键</h3>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl + k,Ctrl + f</td>
<td>自动格式化代码</td>
</tr>
<tr>
<td>Ctrl + k,Ctrl + c</td>
<td>注释代码</td>
</tr>
<tr>
<td>Ctrl + k,Ctrl + u</td>
<td>取消注释代码</td>
</tr>
<tr>
<td>F9</td>
<td>设置断点</td>
</tr>
<tr>
<td>F5</td>
<td>调试运行</td>
</tr>
<tr>
<td>Ctrl + F5</td>
<td>不调试运行</td>
</tr>
<tr>
<td>Ctrl + Shift + b</td>
<td>编译，不运行</td>
</tr>
<tr>
<td>F10</td>
<td>next调试</td>
</tr>
<tr>
<td>F11</td>
<td>step调试</td>
</tr>
</tbody>
</table>
<h3 id="调试">调试</h3>
<p>添加行号：工具&ndash;》选项 &ndash;》文本编辑器&ndash;》C/C++ &ndash;》行号</p>
<p>调试步骤</p>
<ul>
<li>设置断点。F5启动调试</li>
<li>停止（断点处）的位置，是尚未执行的指令。</li>
<li>逐语句执行一下条 （F11）：进入函数内部，逐条执行跟踪。</li>
<li>逐过程执行一下条 （F10）：不进入函数内部，逐条执行程序。</li>
<li>监视：调试 &ndash;》窗口 &ndash;》监视：输入监视变量名。自动监视变量值的变化。</li>
</ul>
<h2 id="vs-code使用">VS Code使用</h2>
<p>安装扩展 <em><strong>C/C++ Extension Pack</strong></em>，<em><strong>Code Runner</strong></em></p>
<p>调试相关快捷键：</p>
<ul>
<li>F5 进入调试</li>
<li>F9 切换断点</li>
<li>F10 单步跳过（逐过程执行）</li>
<li>F11 单步执行（逐语句执行，可进入执行函数体）</li>
<li>Shift+F5 停止调试</li>
<li>Ctrl+Shift+F5重启调试</li>
<li>Ctrl+F5 开始执行，不进入断点</li>
<li>Ctrl+F9 启用/停止断点</li>
<li>Ctrl+Shift+F9 删除全部断点</li>
<li>Ctrl+b 隐藏/打开侧边框</li>
<li>Ctrl+` 隐藏/打开terminal</li>
<li>Ctrl+j 隐藏/打开下边框（plannel）</li>
<li>Ctrl+Shift+D 打开侧边框 Run and Debug</li>
<li>Ctrl+Shift+E 打开侧边框 Explorer</li>
<li>Ctrl+Alt+N run code</li>
</ul>
<p>配置 <em><strong>launch.json</strong></em> 根据提示，替换gcc路径即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl">    <span class="c1">// 使用 IntelliSense 了解相关属性。 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 悬停以查看现有属性的描述。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="s2">&#34;version&#34;</span><span class="err">:</span> <span class="s2">&#34;0.2.0&#34;</span><span class="err">,</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;configurations&#34;</span><span class="err">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;gcc.exe - 生成和调试活动文件&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;cppdbg&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;request&#34;</span><span class="p">:</span> <span class="s2">&#34;launch&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;program&#34;</span><span class="p">:</span> <span class="s2">&#34;${fileDirname}\\${fileBasenameNoExtension}.exe&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;args&#34;</span><span class="p">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;stopAtEntry&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;cwd&#34;</span><span class="p">:</span> <span class="s2">&#34;${workspaceFolder}&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;environment&#34;</span><span class="p">:</span> <span class="p">[],</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;externalConsole&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;MIMode&#34;</span><span class="p">:</span> <span class="s2">&#34;gdb&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;miDebuggerPath&#34;</span><span class="p">:</span> <span class="s2">&#34;D:\Program Files\mingw64\bin\gdb.exe&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;setupCommands&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;为 gdb 启用整齐打印&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;-enable-pretty-printing&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&#34;ignoreFailures&#34;</span><span class="p">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;preLaunchTask&#34;</span><span class="p">:</span> <span class="s2">&#34;C/C++: gcc.exe build active file&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="err">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>ch01 变量和数据类型</title>
      <link>https://www.oomkill.com/2022/09/ch01-parmeter-and-data-structrue/</link>
      <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/09/ch01-parmeter-and-data-structrue/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="c语言关键字-sup-idkeywordsa-href11asup">C语言关键字 <sup id="keywords"><a href="#1">[1]</a></sup></h2>
<p>==C语言有32个关键字==</p>
<ul>
<li><em><strong>auto</strong></em>：定义自动变量，主要是声明变量的生存周期</li>
<li><em><strong>break</strong></em>, <em><strong>continue</strong></em> : break 语句在遇到最内层循环时立即终止。还用于终止 switch 语句。</li>
<li><em><strong>case</strong></em>, <em><strong>switch</strong></em>, <em><strong>default</strong></em>：使用 switch 和 case 语句声明一个switch分支</li>
<li><em><strong>char</strong></em>：用于声明character 类型的变量</li>
<li><em><strong>const</strong></em>：声明常量</li>
<li><em><strong>do&hellip;while</strong></em>：</li>
<li><em><strong>double</strong></em>： double-precision 浮点数变量类型</li>
<li><em><strong>float</strong></em>：single-precision 浮点数的变量类型</li>
<li><em><strong>if</strong></em>, <em><strong>else</strong></em>：声明if/else 条件判断</li>
<li><em><strong>enum</strong></em>：用于声明枚举类型</li>
<li><em><strong>extern</strong></em>：关键字声明变量或函数在其声明的文件之外具有外部链接。</li>
<li><em><strong>for</strong></em>：C 语言的三种循环之一，for循环</li>
<li><em><strong>goto</strong></em>： 用于将程序的控制权转移到指定的标签</li>
<li><em><strong>int</strong></em>：声明 integer 类型的变量</li>
<li><em><strong>short</strong></em>, <em><strong>long</strong></em>, <em><strong>signed</strong></em>, <em><strong>unsigned</strong></em>：是类型修饰符，它们改变基本数据类型的含义以产生新类型。
<ul>
<li><em><strong>short int</strong></em>： -32768 to 32767</li>
<li><em><strong>long int</strong></em>：  -2147483648 to 214743648</li>
<li><em><strong>signed int</strong></em>： -32768 to 32767</li>
<li><em><strong>unsigned int</strong></em>： 0 to 65535</li>
</ul>
</li>
<li><em><strong>return</strong></em>： 终止函数并返回值</li>
<li><em><strong>sizeof</strong></em>：评估变量或常量的大小</li>
<li><em><strong>register</strong></em>：创建比普通变量快得多的寄存器变量。</li>
<li><em><strong>static</strong></em>：创建一个静态变量。静态变量的值持续到程序结束。</li>
<li><em><strong>struct</strong></em>：用于声明结构体。结构体可以包含不同类型的变量。</li>
<li><em><strong>typedef</strong></em>：用于将类型与标识符显式关联。</li>
<li><em><strong>union</strong></em>：用于将不同类型的变量分组在一个名称下。</li>
<li><em><strong>void</strong></em>：没有任何意义，函数修饰为没有返回值，参数修饰为没有参数</li>
<li><em><strong>volatile</strong></em>：提醒编译器它后面所定义的变量随时都有可能改变</li>
</ul>
<h2 id="c语言控制语句">C语言控制语句</h2>
<p>==C语言有9种控制语句== (<em><strong>control statements</strong></em>)</p>
<ul>
<li>If..else</li>
<li>for</li>
<li>while</li>
<li>do..while</li>
<li>continue</li>
<li>break</li>
<li>switch</li>
<li>goto</li>
<li>return</li>
</ul>
<h2 id="c语言运算符-supa-href22asup">C语言运算符 <sup><a href="#2">[2]</a></sup></h2>
<p>==C语言有45种运算符== (<em><strong>operator</strong></em>)</p>
<ul>
<li>算数运算符 (<em><strong>Arithmetic Operators</strong></em>) ：<code>+</code>, <code>-</code>，<code>*</code>，<code>/</code>，<code>%</code></li>
<li>赋值运算符 (<em><strong>Assignment Operators</strong></em>) ：<code>=</code>，<code>+=</code>，<code>-=</code>，<code>*=</code>，<code>/=</code>，<code>%=</code></li>
<li>关系运算符 (<em><strong>Relational Operators</strong></em>)：<code>==</code>，<code>&gt;</code> ，<code>&lt;</code>，<code>!=</code> ，<code>&gt;=</code>，<code>&lt;=</code></li>
<li>逻辑运算符 (<em><strong>Logical Operators</strong></em>)：<code>&amp;&amp;</code>，<code>||</code>，<code>!</code></li>
<li>位运算符 (<em><strong>Bitwise Operators</strong></em>)：<code>&amp;</code>，<code>|</code>，<code>^</code>，<code>~</code>，<code>&lt;&lt;</code>，<code>&gt;&gt;</code></li>
<li>逗号运算符 (<em><strong>Comma Operator</strong></em>)：链接相关表达式 ，<code>int a, c = 5, d;</code></li>
<li>sizeof运算符(<em><strong>sizeof operator</strong></em>)：一元运算符，它返回数据的大小（常量、变量、数组、结构）</li>
<li>杂项运算符（）：<code>&amp;</code> 取址，<code>*</code> 取指针，<code>?:</code> 二元条件表达式</li>
</ul>
<h2 id="gcc编译四部曲-supa-href33asup">GCC编译四部曲 <sup><a href="#3">[3]</a></sup></h2>
<ul>
<li>预处理 (<em><strong>Preprocessing</strong></em>)：在预处理步骤，将生成一个扩展名为 <code>.i</code> 的文件；使用命令 <code>gcc -E file.c</code> 操作
<ul>
<li>头文件展开，不检查语法错误，将展开所有头（include）文件（任意）</li>
<li>宏定义替换</li>
<li>删除注释</li>
<li>展开条件编译，根据条件来展开指令</li>
</ul>
</li>
<li>编译 (<em><strong>Compilation</strong></em>) ：会生成一个扩展名为 <code>.s</code> 的文件，命令是：<code>gcc -S file.c</code>
<ul>
<li>检查语法错误</li>
<li>将文件翻译成汇编语言</li>
</ul>
</li>
<li>汇编 (<em><strong>Assembler</strong></em>)：将汇编代码转换为纯二进制代码或机器代码（零和一）。此代码也称为目标代码；将生成一个带有 <code>.o</code> 扩展名的文件：<code>gcc -c file.c</code></li>
<li>链接 (<em><strong>Linker</strong></em>)：链接是编译的最后一步。链接器将来自多个模块的所有目标代码合并为一个，如果使用了库也会引用。这个步骤也是包含前三个步骤的。<code>gcc file.o -o hello.exe</code>
<ul>
<li>接收由汇编步骤生成的 .o 扩展名文件</li>
<li>数据地址回填</li>
<li>数据段合并</li>
<li>库引入</li>
</ul>
</li>
</ul>
<h2 id="变量">变量</h2>
<p>变量 (<em><strong>variables</strong></em>) 是用于存储数据的内存位置名称，可以改变的内容</p>
<h3 id="变量的命名规则">变量的命名规则</h3>
<ul>
<li>不能以数字开头</li>
<li>由数字、字母，甚至是下划线 (<code>_</code>) 等特殊符号组成</li>
<li>变量名不能是任何<a href="#keywords">关键字 </a></li>
<li>变量名中不能有空格或空白</li>
<li>变量名是==区分大小写的==</li>
</ul>
<h3 id="变量的数据类型">变量的数据类型</h3>
<p>C 语言中数据类型主要包含以下类型</p>
<table>
<thead>
<tr>
<th><strong>变量类型</strong></th>
<th>实际代表名称</th>
<th><strong>描述</strong></th>
<th><strong>用途</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>char</td>
<td>Character</td>
<td>代表1bytes(8bit)，是以单引号引起的字符</td>
<td>通常以单个字母的形式使用X、r等，或 ASCII 字符集。</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
<td>自然整数</td>
<td>用来存储整数，如 4, 300, 8000 &hellip;</td>
</tr>
<tr>
<td>float</td>
<td>Floating- Point</td>
<td>单精度浮点数</td>
<td>表示实数值或小数值（7位小数），例如 20.8, 18.56 &hellip;</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
<td>双精度浮点值</td>
<td>比float类型要大 4bytes,允许15位小数</td>
</tr>
<tr>
<td>void</td>
<td>Void</td>
<td>表示没有类型。</td>
<td>这种数据类型是为了用于修饰没有意义函数或变量，如函数用其修饰标识没有返回值，参数用其修饰表示没有参数。</td>
</tr>
</tbody>
</table>
<h3 id="变量声明与定义">变量声明与定义</h3>
<ul>
<li><strong>变量的定义</strong>  (<em>Declaration</em>)：告诉编译器应为变量创建多少存储空间或者在哪里创建存储空间（借助于数据类型）</li>
<li>**变量声明 **(<em>Definition</em>)：只声明不赋值的变量叫做变量定义， <code>int a</code></li>
</ul>
<p>定义与声明的区别：</p>
<ul>
<li>变量定义会开辟内存空间。变量声明不会开辟内存空间</li>
<li>变量要想使用必须有定义</li>
<li>声明指示编译器存在变量，而定义表示编译器为变量创建的存储位置和存储量</li>
</ul>
<h3 id="变量的分类">变量的分类</h3>
<ul>
<li>全局变量 (<em><strong>global</strong></em>) ：在块或函数之外声明的变量称为全局变量</li>
<li>局部变量 (<em><strong>Local</strong></em>)：在块或函数中声明的一种变量</li>
<li>静态变量 (<em><strong>static</strong></em>)：使用 <em>static</em> 关键字声明的变量。该变量在各种函数调用之间保留给定值</li>
<li>自动变量 (<em><strong>auto</strong></em>)：变量具有自动存储期，程序在进入该变量声明所在的块时变量存在，程序在退出该块时变量消失</li>
<li>外部变量 (<em><strong>extren</strong></em>)：能够在多个源文件中共享一个变量 <code> extern int a=10;</code></li>
</ul>
<h3 id="变量的数据大小-sup-iddatatypea-href66asup">变量的数据大小 <sup id="datatype"><a href="#6">[6]</a></sup></h3>
<p>C 编程语言有两种基本数据类型：基本与衍生</p>
<table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>范围</strong></th>
<th><strong>大小（以字节为单位）</strong></th>
<th>格式化符号</th>
</tr>
</thead>
<tbody>
<tr>
<td>unsigned char</td>
<td>0 ~ 255</td>
<td>1</td>
<td>%c</td>
</tr>
<tr>
<td>signed char/char</td>
<td>-128 ~ +127</td>
<td>1</td>
<td>%c</td>
</tr>
<tr>
<td>unsigned int</td>
<td>0 ~ 65535</td>
<td>2</td>
<td>%u</td>
</tr>
<tr>
<td>signed int or int</td>
<td>-32,768 ~ +32767</td>
<td>2</td>
<td>%d</td>
</tr>
<tr>
<td>unsigned short int</td>
<td>0~ 65535</td>
<td>2</td>
<td>%hu</td>
</tr>
<tr>
<td>signed short int/short int</td>
<td>-32,768 ~ +32767</td>
<td>2</td>
<td>%hd</td>
</tr>
<tr>
<td>unsigned long int</td>
<td>0 ~ +4,294,967,295</td>
<td>4</td>
<td>%lu</td>
</tr>
<tr>
<td>signed long int/long int</td>
<td>-2,147,483,648 ~ 2,147,483,647</td>
<td>4</td>
<td>%ld</td>
</tr>
<tr>
<td>long long int</td>
<td>-(2^63) to (2^63)-1</td>
<td>8</td>
<td>%lld</td>
</tr>
<tr>
<td>unsigned long long int</td>
<td>0 to 18,446,744,073,709,551,615</td>
<td>8</td>
<td>%llu</td>
</tr>
<tr>
<td>float  <sup><a href="#5">[5]</a></sup></td>
<td>7位精度</td>
<td>4</td>
<td>%f</td>
</tr>
<tr>
<td>double <sup><a href="#5">[5]</a></sup></td>
<td>15位精度</td>
<td>8</td>
<td>%lf</td>
</tr>
</tbody>
</table>
<h3 id="变量类型">变量类型</h3>
<p>C语言中根据变量的声明周期和范围可以被分为两种类型 局部变量和全局变量与静态变量</p>
<h4 id="局部变量">局部变量</h4>
<p>局部变量 (<em><strong>local variables</strong></em>) 被声明在函数内部，只要函数存在，它们就只存在于内存中，直到函数结束，局部变量就会消失！</p>
<p>例如创建一个局部变量 a，a在函数运行时被创建在stack段中，当函数foo() 结束，被释放，故下列代码编译错误。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span>	<span class="nf">foo</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span>	<span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;Foo function: Variable a = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// the variable &#39;a&#39; ceases to exist in RAM here.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span>	<span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">foo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;Main: Variable a = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ERROR : main does not know any variable named &#39;a&#39;!
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Notes：函数的参数也是局部变量，如果需要外部更改，则通过指针方式传递进去</p>
</blockquote>
<h4 id="全局变量">全局变量</h4>
<p>全局变量  (<em><strong>global variables</strong></em>)  是指在函数外部声明的变量；全局变量随函数生命周期结束时消失，因为全局变量被存储在内存结构的data分段中，是属于二进制文件本身的。另外==默认情况下，未被赋值的全局变量会被初始化为 0==。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span>	<span class="n">a</span><span class="p">;</span> <span class="c1">// Global variable initialized to 0 by default
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span>	<span class="nf">foo</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">a</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span> <span class="c1">// Global variable accessible without
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// having been declared in the function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;Foo: a = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span> <span class="c1">// a == 42
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span>	<span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;Main: a = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span> <span class="c1">// a == 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">foo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;Main: a = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span> <span class="c1">// a == 42
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">a</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;Main: a = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span> <span class="c1">// a == 200
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Notes：局部变量的作用域高于全局变量，如果同名会被覆盖</p>
</blockquote>
<p><strong>全局变量的作用域</strong></p>
<p>如果想在一个文件中使用另一个文件中定义的全局变量，需要使用关键字 ”<em><strong>extern</strong></em>“ 再次声明。这代表告诉编译器正在声明我们在程序文件的其他地方定义的变量。</p>
<p>例如下面代码中，<code>main.c</code> 中，使用 <code>extern</code> 关键字声明全局变量，表示我们在其他地方定义了这个变量。并做了 <code>foo()</code> 函数原型的声明。并在 <code>foo.c</code> 文件中，定义了全局变量 <code>a</code> 及 <code>foo()</code> 函数</p>
<p>main.c</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">extern</span> <span class="kt">int</span>	<span class="n">a</span><span class="p">;</span> <span class="c1">// 在其他文件内定义的全局变量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>	<span class="c1">// 定义在其他方面的函数，这种写法等同于extern void foo(void);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span>	<span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;Main: a = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span> <span class="c1">// a == 100
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">foo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;Main: a = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span> <span class="c1">// a == 42
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">a</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;Main: a = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span> <span class="c1">// a == 200
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>void.c</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span>	<span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span> <span class="c1">// 全局变量的定义
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">a</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;Foo: a = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span> <span class="c1">// a == 42
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出结果为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="nl">Main</span><span class="p">:</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="nl">Foo</span><span class="p">:</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">42</span>
</span></span><span class="line"><span class="cl"><span class="nl">Main</span><span class="p">:</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">42</span>
</span></span><span class="line"><span class="cl"><span class="nl">Main</span><span class="p">:</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">200</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>也可以使用头文件来定义，这种方式比上面的更好，示例只是说明全局变量</p>
<h4 id="静态变量">静态变量</h4>
<p>静态变量是指使用关键字 “<em><strong>static</strong></em>&quot; 修饰的变量，静态变量可以分为 <strong>静态全局变量</strong> 与 <strong>静态局部变量</strong> ，静态变量默认是全局的，因为他存储的地方是data区而不是堆，栈中。</p>
<p>静态变量有两点区分与全局变量：</p>
<ul>
<li>在函数内部定义的静态变量是这个函数的全局变量（第一个结束的括号）</li>
<li>在函数外声明的静态变量仅在这个声明他的文件内有效。</li>
</ul>
<p>下面代码会编译异常，因为b生命周期存在与for循环中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">void</span> <span class="nf">test</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">static</span> <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">a</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">b</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;value a is %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;value b is %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">test</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="局部静态变量">局部静态变量</h5>
<p>局部静态变量不能说是真正的局部变量，因为其存储内存位置与局部变量不同，局部变量存储在堆，栈中，而静态变量存储在data中只是说会被限制在对应的作用域中。</p>
<p>下面代码说明了普通局部变量和静态局部变量的区别，由于存储位置不同，静态局部变量只是被访问限制在作用域中，而不会随函数结束释放掉。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span>	<span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">static</span> <span class="kt">int</span>	<span class="n">b</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;a = %d, b = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">a</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">b</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span>	<span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">foo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="n">foo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="n">foo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="n">foo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="n">foo</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出结果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">101</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">102</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">103</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">104</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="全局静态变量">全局静态变量</h5>
<p>全局静态变量是声明在函数外面用static修饰的变量，与全局变量不同的是，静态全局变量访问域被限制在声明它们的文件中，无法从程序的另一个文件中访问它。</p>
<p>在全局变量部分，可以通过关键字 ”<em><strong>extern</strong></em>“ 来访问全局变量，如果此时声明一个静态变量 a ，那么通过跨文件的方式这时编译器会提示 ”undefined reference to ‘a&rsquo;“。通常情况下使用这种场景被用于加速编译。</p>
<h4 id="global-vs-local-vs-static">global VS local VS static</h4>
<ul>
<li>作用域方面不同：局部变量作用域仅在 同一个 <code>{}</code>，而静态变量和全局变量在为整个进程</li>
<li>访问作用域不同：全局变量为进程共享，局部变量为函数运行时，静态全局变量为定义它的文件，静态全局变量为 同一个 <code>{}</code></li>
<li>存储位置不同，局部变量被存储与堆，栈中，而静态变量和全局变量被存储在data中</li>
</ul>
<h2 id="类型转换">类型转换</h2>
<h3 id="隐式类型转换">隐式类型转换</h3>
<p>隐式类型 (<em><strong>Implicit</strong></em>) 转换也称自动类型转换，这种类型的转换包含如下特点：</p>
<ul>
<li>编译器自动完成，无需用户干预触发</li>
<li>当表达式中存在多种类型时触发，这是为了保证数据不被丢失</li>
<li>所有的数据类型都将升级为该类型最大值</li>
<li>转换的顺序为：bool -&gt; char -&gt; short int -&gt; int -&gt; unsigned int -&gt; long -&gt; unsigned -&gt; long long -&gt; float -&gt; double -&gt; long double</li>
<li>该转换类型会存在一些问题，如符号消失，数据丢失等。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>    <span class="c1">// integer x
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">char</span> <span class="n">y</span> <span class="o">=</span> <span class="sc">&#39;a&#39;</span><span class="p">;</span>  <span class="c1">// character c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  
</span></span><span class="line"><span class="cl">    <span class="c1">// y 被隐式转换为 char类型，a=97
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     
</span></span><span class="line"><span class="cl">    <span class="c1">// 计算中，存在浮点数值，结果将被转换为float
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">float</span> <span class="n">z</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mf">1.0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// 自动转换为long long
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="mi">2147483648</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// int 到 short int值溢出将为23352减去int大小65536
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">short</span> <span class="kt">int</span> <span class="n">g</span> <span class="o">=</span> <span class="mi">88888</span> <span class="o">+</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;x = %d, z = %f</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">z</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;g = %li, h = %lli</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">h</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="显式类型转换">显式类型转换</h3>
<p>用户定义类型转换的过程称为显式类型转换 (<em><strong>Explicit</strong></em>)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="p">(</span><span class="n">type</span><span class="p">)</span> <span class="n">expression</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>显示转换示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="mf">1.2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 显示转换一个float为int
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;sum = %d&#34;</span><span class="p">,</span> <span class="n">sum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="进制转换">进制转换</h2>
<h3 id="十进制">十进制</h3>
<p>十进制转二进制： 除2反向取余法</p>
<p>十进制转八进制：除8反向取余法</p>
<p>十进制转十六进制：除16反向取余法</p>
<p>例如：16进制转10进制</p>
<ul>
<li>将十进制数除以 16。将除法视为整数除法</li>
<li>写下余数（十六进制）</li>
<li>将结果再次除以 16。将除法视为整数除法</li>
<li>重复步骤 2 和 3，直到结果为 0</li>
<li>求出的十六进制值是从最后到第一个的余数的数字序列</li>
</ul>
<p>427的16进制</p>
<ul>
<li>
<p>将数字除以 16，余数（小数部分乘16为余数），最终为1AB</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/decimal-to-hexadecimal.png" alt="Decimal To Hexadecimal Conversion"  /></p>
</li>
</ul>
<h3 id="八进制">八进制</h3>
<p>8进制转10进制：从后向前，8的0次方，8的1次方，8的2次方&hellip;按照该顺序乘8的</p>
<ul>
<li>8进制75转10进制为：$56+5=61$</li>
<li>8进制77655转10进制为：$7(8^4)+7(8^3)+6(8^2)+5(8^1)+5(8^0)=28672+3584+384+40+5=32685$</li>
</ul>
<p>2进制转8进制：自右向左，每3位一组，按421码转换。高位不足三位补0</p>
<ul>
<li>
<p>1 010 111 010 110 二进制转八进制如下表，最后算出结果为12726</p>
</li>
<li>
<table>
<thead>
<tr>
<th>4</th>
<th>2</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h3 id="十六进制">十六进制</h3>
<p><strong>16进制转10进制</strong>：从后向前依次展开，16的0次方，16的1次方，16的2次方&hellip;，每位相加，例如：</p>
<ul>
<li>0x1A = $16 + 10 = 26$</li>
<li>15DE = $1(16^3)+5(16^2)+13(16^1)+14= 4096+1280+208+14=5598$</li>
</ul>
<p><strong>16进制转二进制</strong>：4位一组一次填充。例如 0X1A的二进制，即00011010如下</p>
<table>
<thead>
<tr>
<th>8</th>
<th>4</th>
<th>2</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
<p><strong>二进制转16进制</strong>：自右向左，每4位一组，按8421码转换。高位不足三位补0</p>
<p>例如 0001 0011 1111的16进制为，如下表 1 3 F(15)</p>
<table>
<thead>
<tr>
<th>8</th>
<th>4</th>
<th>2</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>
<h2 id="源码反码补码">源码反码补码</h2>
<p>源码 (*** true form****),  反码 (<em><strong>1‘s complement</strong></em>) <sup><a href="#7">[7]</a></sup>, 补码 (<em><strong>2‘s complement</strong></em>) <sup><a href="#8">[8] </a></sup>是操作系统中存储和计算数据的一种方式</p>
<p>任何数据都以二进制机器码存储与计算机中。对于的机器码，第一位是用来表示正负值的：0是正数，1是负数。故要表示 <em><strong>-2</strong></em>，对应的机器码是 <em><strong>10000010</strong></em>。</p>
<p>机器码不可以直接通过权重展开计算，例如 <em><strong>10000010</strong></em> 为 $1(2^7) + 1(2^1) = 130$ 。因为第一位是1，所以是负数，接下来计算后一位的权重展开为 $-2$</p>
<ul>
<li>
<p>原码：机器码表示的值成为源码：如 43  = 00101011，-43 = 10101011</p>
</li>
<li>
<p>反码：符号位不变，其余位取反：如 43  = 00101011，-43 = 11010100</p>
</li>
<li>
<p>补码：符号位不变，counter code then LSB (<em><strong>least significant bit</strong></em>) + 1：如 43  = 00101011，-43 = 11010101</p>
<ul>
<li>
<table>
<thead>
<tr>
<th>128</th>
<th>64</th>
<th>32</th>
<th>16</th>
<th>8</th>
<th>4</th>
<th>2</th>
<th>1</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>0+1(如果需要进位则进一位)</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
</tbody>
</table>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>Note：二进制 10000000 为 -128</p>
</blockquote>
<p>反码, 补码 是为了计算和存储正负数诞生的，正如 <a href="#datatype">C语言的数据结构</a> 中 有符号和没符号表示的数值位置不一样。</p>
<h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://www.programiz.com/c-programming/list-all-keywords-c-language">keywords c language</a></p>
<p><sup id="2">[2]</sup> <a href="https://www.tutorialspoint.com/cprogramming/c_operators.htm">Arithmetic Operators</a></p>
<p><sup id="3">[3]</sup> <a href="https://medium.com/@danielavasquez_77768/the-four-stages-of-compilation-c-programming-and-gcc-compiler-9faadf2e273a">four stages of compilation c</a></p>
<p><sup id="4">[4]</sup> <a href="https://docs.microsoft.com/en-us/visualstudio/install/create-an-offline-installation-of-visual-studio?view=vs-2022">offline installation visual studio</a></p>
<p><sup id="5">[5]</sup> <a href="https://www.geeksforgeeks.org/difference-float-double-c-cpp/">difference float double</a></p>
<p><sup id="6">[6]</sup> <a href="https://www.geeksforgeeks.org/data-types-in-c">data type in c</a></p>
<p><sup id="7">[7]</sup> <a href="https://www.tutorialspoint.com/one-s-complement">1‘s complement</a></p>
<p><sup id="8">[8]</sup> <a href="https://www.tutorialspoint.com/two-s-complement">2‘s complement</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>ch02 格式化与流程控制</title>
      <link>https://www.oomkill.com/2022/09/ch02-control-statements-and-format/</link>
      <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/09/ch02-control-statements-and-format/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="格式化">格式化</h2>
<h3 id="printf">printf</h3>
<p>printf() 用于打印消息以及变量的值。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">24</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Welcome! </span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="n">printf</span><span class="p">(</span><span class="s">&#34;The value of a : %d&#34;</span><span class="p">,</span><span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="n">getchar</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="sprintf">sprintf</h3>
<p>sprintf() 不打印字符串，是将字符值和格式化结构一并存储在一个数组中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">50</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span> <span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">sprintf</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="s">&#34;Sum of %d and %d is %d&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="c1">// The string &#34;sum of 10 and 20 is 30&#34; is stored
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// into buffer instead of printing on stdout
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="n">buffer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="scanf">scanf</h3>
<p>从标准输入读取用户输入的</p>
<table>
<thead>
<tr>
<th>type</th>
<th style="text-align:center">Argument &amp; Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>*****</td>
<td style="text-align:center">读取标准输入用户输入的值，但不存储在对应接受的变量中</td>
</tr>
<tr>
<td>width</td>
<td style="text-align:center">这个操作中读取的最大字符</td>
</tr>
<tr>
<td>type</td>
<td style="text-align:center">指定要读取的数据类型以及预期如何读取数据</td>
</tr>
</tbody>
</table>
<p>修饰符类型</p>
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">标识符</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>int</code></td>
<td style="text-align:left"><code>%d</code></td>
</tr>
<tr>
<td style="text-align:left"><code>char</code></td>
<td style="text-align:left"><code>%c</code></td>
</tr>
<tr>
<td style="text-align:left"><code>float</code></td>
<td style="text-align:left"><code>%f</code></td>
</tr>
<tr>
<td style="text-align:left"><code>double</code></td>
<td style="text-align:left"><code>%lf</code></td>
</tr>
<tr>
<td style="text-align:left"><code>short int</code></td>
<td style="text-align:left"><code>%hd</code></td>
</tr>
<tr>
<td style="text-align:left"><code>unsigned int</code></td>
<td style="text-align:left"><code>%u</code></td>
</tr>
<tr>
<td style="text-align:left"><code>long int</code></td>
<td style="text-align:left"><code>%li</code></td>
</tr>
<tr>
<td style="text-align:left"><code>long long int</code></td>
<td style="text-align:left"><code>%lli</code></td>
</tr>
<tr>
<td style="text-align:left"><code>unsigned long int</code></td>
<td style="text-align:left"><code>%lu</code></td>
</tr>
<tr>
<td style="text-align:left"><code>unsigned long long int</code></td>
<td style="text-align:left"><code>%llu</code></td>
</tr>
<tr>
<td style="text-align:left"><code>signed char</code></td>
<td style="text-align:left"><code>%c</code></td>
</tr>
<tr>
<td style="text-align:left"><code>unsigned char</code></td>
<td style="text-align:left"><code>%c</code></td>
</tr>
<tr>
<td style="text-align:left"><code>long double</code></td>
<td style="text-align:left"><code>%Lf</code></td>
</tr>
</tbody>
</table>
<p>格式化</p>
<table>
<thead>
<tr>
<th style="text-align:center">Description</th>
<th style="text-align:center">Code</th>
<th style="text-align:center">Result</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">接受字符类型保存在数组中</td>
<td style="text-align:center">scanf(&quot;%19c&quot;, &amp;a);</td>
<td style="text-align:center">&lsquo;1234567890abcfefg&rsquo;</td>
</tr>
<tr>
<td style="text-align:center">整型类型</td>
<td style="text-align:center">scanf(&quot;%d&quot;, &amp;testInteger);</td>
<td style="text-align:center">&lsquo;10&rsquo;</td>
</tr>
<tr>
<td style="text-align:center">多个接收值</td>
<td style="text-align:center">scanf(&quot;%d%f&quot;, &amp;a, &amp;b);</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>scanf的缺点</p>
<ul>
<li>如果存储空间不足，数据能存储到内存中，但不被保护。</li>
<li>scanf 函数接收字符串时， 碰到 空格 和 换行 会自动终止。不能使用 scanf 的 %s 接收带有空格的字符串。</li>
</ul>
<h3 id="格式化标记符-sup-a-href11asup">格式化标记符 <sup ><a href="#1">[1]</a></sup></h3>
<h4 id="标记符">标记符</h4>
<table>
<thead>
<tr>
<th>标记符</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>%i / %d</td>
<td>int</td>
</tr>
<tr>
<td>%c</td>
<td>char</td>
</tr>
<tr>
<td>%f</td>
<td>float</td>
</tr>
<tr>
<td>%s</td>
<td>string</td>
</tr>
<tr>
<td>%u</td>
<td>unsigned decimal</td>
</tr>
<tr>
<td>%o</td>
<td>octal</td>
</tr>
<tr>
<td>%x</td>
<td>hexadecimal</td>
</tr>
</tbody>
</table>
<h4 id="对字符串填充">对字符串填充</h4>
<p>在 % 符号后添加一个零 (0)，可以对 printf 整数输出进行零填充</p>
<table>
<thead>
<tr>
<th>Code</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td>printf(&quot;%03d&quot;, 0);</td>
<td>000</td>
</tr>
<tr>
<td>printf(&quot;%03d&quot;, 1);</td>
<td>001</td>
</tr>
<tr>
<td>printf(&quot;%03d&quot;, 123456789);</td>
<td>123456789</td>
</tr>
<tr>
<td>printf(&quot;%03d&quot;, -10);</td>
<td>-10</td>
</tr>
<tr>
<td>printf(&quot;%03d&quot;, -123456789);</td>
<td>-123456789</td>
</tr>
</tbody>
</table>
<p>对于此类格式化方式总结有如下几种模式</p>
<table>
<thead>
<tr>
<th style="text-align:center">Description</th>
<th style="text-align:center">Code</th>
<th style="text-align:center">Result</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">填充5位（默认以空白填充，左对齐填充）</td>
<td style="text-align:center">printf(&quot;&rsquo;%5d&rsquo;&quot;, 10);</td>
<td style="text-align:center">&rsquo;     10'</td>
</tr>
<tr>
<td style="text-align:center">填充5位（右对齐填充）</td>
<td style="text-align:center">printf(&quot;&rsquo;%-5d&rsquo;&quot;, 10);</td>
<td style="text-align:center">&lsquo;10     '</td>
</tr>
<tr>
<td style="text-align:center">填充5位“0”（默认左对齐填充）</td>
<td style="text-align:center">printf(&quot;&rsquo;%05d&rsquo;&quot;, 10);</td>
<td style="text-align:center">&lsquo;00010&rsquo;</td>
</tr>
<tr>
<td style="text-align:center">有符号的表示的数字（默认左对齐填充）</td>
<td style="text-align:center">printf(&quot;&rsquo;%+5d&rsquo;&quot;, 10);</td>
<td style="text-align:center">&rsquo;      +10&rsquo;</td>
</tr>
<tr>
<td style="text-align:center">有符号的表示的数字，右对齐填充空白</td>
<td style="text-align:center">printf(&quot;&rsquo;%-+5d&rsquo;&quot;, 10);</td>
<td style="text-align:center">&lsquo;+10    '</td>
</tr>
</tbody>
</table>
<h4 id="浮点数格式化">浮点数格式化</h4>
<table>
<thead>
<tr>
<th style="text-align:center">Description</th>
<th style="text-align:center">Code</th>
<th style="text-align:center">Result</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">保留1位小数</td>
<td style="text-align:center">printf(&quot;&rsquo;%.1f&rsquo;&quot;, 10.3456);</td>
<td style="text-align:center">&lsquo;10.3&rsquo;</td>
</tr>
<tr>
<td style="text-align:center">保留2位小数</td>
<td style="text-align:center">printf(&quot;&rsquo;%.2f&rsquo;&quot;, 10.3456);</td>
<td style="text-align:center">&lsquo;10.35&rsquo;</td>
</tr>
<tr>
<td style="text-align:center">整数位最少8位宽度，小数位2位</td>
<td style="text-align:center">printf(&quot;&rsquo;%8.2f&rsquo;&quot;, 10.3456);</td>
<td style="text-align:center">&rsquo;  10.35&rsquo;</td>
</tr>
<tr>
<td style="text-align:center">整数位最少8位宽度，小数位4位</td>
<td style="text-align:center">printf(&quot;&rsquo;%8.4f&rsquo;&quot;, 10.3456);</td>
<td style="text-align:center">&rsquo; 10.3456'</td>
</tr>
<tr>
<td style="text-align:center">整数位最少8位，小数位2位，不足8位将用0填充（默认左对齐填充）</td>
<td style="text-align:center">printf(&quot;&rsquo;%08.2f&rsquo;&quot;, 10.3456);</td>
<td style="text-align:center">&lsquo;00010.35&rsquo;</td>
</tr>
<tr>
<td style="text-align:center">整数位最少8位，小数位2位，不足8位将用空白右对齐填充</td>
<td style="text-align:center">printf(&quot;&rsquo;%-8.2f&rsquo;&quot;, 10.3456);</td>
<td style="text-align:center">&lsquo;10.35  '</td>
</tr>
<tr>
<td style="text-align:center">打印更大的浮点数，小数位2位</td>
<td style="text-align:center">printf(&quot;&rsquo;%-8.2f&rsquo;&quot;, 101234567.3456);</td>
<td style="text-align:center">&lsquo;101234567.35&rsquo;</td>
</tr>
</tbody>
</table>
<h4 id="字符串格式化">字符串格式化</h4>
<table>
<thead>
<tr>
<th style="text-align:center">Description</th>
<th style="text-align:center">Code</th>
<th style="text-align:center">Result</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">字符串输出</td>
<td style="text-align:center">printf(&quot;&rsquo;%s&rsquo;&quot;, &ldquo;Hello&rdquo;);</td>
<td style="text-align:center">&lsquo;Hello&rsquo;</td>
</tr>
<tr>
<td style="text-align:center">保证输出结果是10位，不足位用空白填充（默认左对齐填充）</td>
<td style="text-align:center">printf(&quot;&rsquo;%10s&rsquo;&quot;, &ldquo;Hello&rdquo;);</td>
<td style="text-align:center">&rsquo;   Hello&rsquo;</td>
</tr>
<tr>
<td style="text-align:center">保证输出结果是10位，不足位用空白右对齐填充</td>
<td style="text-align:center">printf(&quot;&rsquo;%-10s&rsquo;&quot;, &ldquo;Hello&rdquo;);</td>
<td style="text-align:center">&lsquo;Hello   '</td>
</tr>
</tbody>
</table>
<h3 id="特殊字符">特殊字符</h3>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>\a</td>
<td>audible alert</td>
</tr>
<tr>
<td>\b</td>
<td>backspace（退格）</td>
</tr>
<tr>
<td>\f</td>
<td>form feed （换页）</td>
</tr>
<tr>
<td>\n</td>
<td>newline（换行）</td>
</tr>
<tr>
<td>\r</td>
<td>carriage return（回车）</td>
</tr>
<tr>
<td>\t</td>
<td>tab</td>
</tr>
<tr>
<td>\v</td>
<td>vertical tab（垂直制表符）</td>
</tr>
<tr>
<td>\</td>
<td>backslash （反斜杠）</td>
</tr>
</tbody>
</table>
<h2 id="运算符">运算符</h2>
<p>C语言中运算符优先级为下表所示</p>
<table>
<thead>
<tr>
<th style="text-align:center">优先级</th>
<th style="text-align:left">运算符</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">关联性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:left"><code>++</code> <code>--</code></td>
<td style="text-align:left">前缀/后缀 自增/减</td>
<td style="text-align:left">从左向右</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><code>()</code></td>
<td style="text-align:left">函数调用</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><code>[]</code></td>
<td style="text-align:left">数组下标 (subscripting)</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><code>.</code></td>
<td style="text-align:left">结构体成员访问</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><code>-&gt;</code></td>
<td style="text-align:left">指针结构体成员访问</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:left"><code>++</code> <code>--</code></td>
<td style="text-align:left">前缀/后缀 自增/减</td>
<td style="text-align:left">从右向左</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><code>+</code> <code>-</code></td>
<td style="text-align:left">(Unary) 一元 +/-（正负号）</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><code>!</code> <code>~</code></td>
<td style="text-align:left">逻辑非与按位非</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><code>(type)</code></td>
<td style="text-align:left">转换</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><code>*</code></td>
<td style="text-align:left">取消引用</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><code>&amp;</code></td>
<td style="text-align:left">地址符</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><code>sizeof</code></td>
<td style="text-align:left">Size-of</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:left"><code>*</code> <code>/</code> <code>%</code></td>
<td style="text-align:left">Multiplication, division, remainder</td>
<td style="text-align:left">从左向右</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:left"><code>+</code> <code>-</code></td>
<td style="text-align:left">Addition and subtraction</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:left"><code>&lt;&lt;</code> <code>&gt;&gt;</code></td>
<td style="text-align:left">Bitwise left shift and right shift</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:left"><code>&lt;</code> <code>&lt;=</code> <code>&gt;</code> <code>&gt;=</code> <code>==</code> <code>!=</code></td>
<td style="text-align:left">关系运算符 &lt; , ≤ , &gt; , ≥ ,= ,  ≠</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:left"><code>&amp;</code></td>
<td style="text-align:left">按位与</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:left"><code>^</code></td>
<td style="text-align:left">按位异或</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:left">`</td>
<td style="text-align:left">`</td>
<td style="text-align:left">按位异或</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:left"><code>&amp;&amp;</code></td>
<td style="text-align:left">逻辑与</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:left">`</td>
<td style="text-align:left"></td>
<td style="text-align:left">`</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:left"><code>?:</code></td>
<td style="text-align:left">三元运算(Ternary conditional)</td>
<td style="text-align:left">从右向左</td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:left"><code>=</code></td>
<td style="text-align:left">赋值</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><code>+=</code> <code>-=</code></td>
<td style="text-align:left">按和差赋值</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><code>*=</code> <code>/=</code> <code>%=</code></td>
<td style="text-align:left">按乘积，商，余赋值</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><code>&lt;&lt;=</code> <code>&gt;&gt;=</code></td>
<td style="text-align:left">按左，右位移赋值</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:left"><code>&amp;=</code> <code>^=</code> `</td>
<td style="text-align:left">=`</td>
<td style="text-align:left">按位 与或非赋值</td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:left"><code>,</code></td>
<td style="text-align:left">逗号</td>
<td style="text-align:left">从左向右</td>
</tr>
</tbody>
</table>
<h2 id="流程控制-supa-href22asup">流程控制 <sup><a href="#2">[2]</a></sup></h2>
<p>C语言中提供了两种流程控制(<em><strong>flow control</strong></em>)</p>
<ul>
<li>Branching</li>
<li>Looping</li>
</ul>
<h3 id="branching">Branching</h3>
<p>分支 (<em><strong>Branching</strong></em>) 将决定采取什么动作，循环将决定采取某种行动的次数。</p>
<h4 id="if">if</h4>
<p>形态1：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">expression</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">statement</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">expression</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Block</span> <span class="n">of</span> <span class="n">statements</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>形态2:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">expression</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Block</span> <span class="n">of</span> <span class="n">statements</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Block</span> <span class="n">of</span> <span class="n">statements</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>形态3：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">expression</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Block</span> <span class="n">of</span> <span class="n">statements</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">expression</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Block</span> <span class="n">of</span> <span class="n">statements</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Block</span> <span class="n">of</span> <span class="n">statements</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="三元运算">三元运算</h3>
<p><code>&lt;value1&gt; ? &lt;value2&gt; : &lt;value3&gt;</code> 是三元运算符，因为它需要三个值，这是 C 中唯一的三元运算符。语法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span> <span class="n">condition</span> <span class="n">is</span> <span class="nb">true</span> <span class="o">?</span> <span class="n">then</span> <span class="n">X</span> <span class="k">return</span> <span class="nl">value</span> <span class="p">:</span> <span class="n">otherwise</span> <span class="n">Y</span> <span class="n">value</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="switch">switch</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">switch</span><span class="p">(</span> <span class="n">expression</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="n">constant</span><span class="o">-</span><span class="nl">expression1</span><span class="p">:</span>	<span class="n">statements1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="k">case</span> <span class="n">constant</span><span class="o">-</span><span class="nl">expression2</span><span class="p">:</span>	<span class="n">statements2</span><span class="p">;]</span>    
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="k">case</span> <span class="n">constant</span><span class="o">-</span><span class="nl">expression3</span><span class="p">:</span>	<span class="n">statements3</span><span class="p">;]</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span><span class="k">default</span> <span class="o">:</span> <span class="n">statements4</span><span class="p">;]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><em><strong>break</strong></em> 关键字用作退出 switch 语句。在 switch case 中满足条件，则执行继续到下一个 case 子句，如果没有明确指定执行应该退出 switch 语句。</p>
<p><em><strong>default</strong></em> 关键字用于在所有case中都不满足条件，则执行default</p>
<p>case穿透：case分支中如果,没有 <em><strong>break</strong></em>；那么它会向下继续执行下一个case分支.</p>
<h3 id="if-vs-switch">if VS switch</h3>
<ul>
<li><strong>检查表达式</strong>：if-else 可以基于值或条件检查表达式，而 switch 语句仅基于字符表达式或整数类型检查表达式。</li>
<li><strong>运行速度</strong>：在大量条件检查中进行选择，switch 语句的运行速度将比使用 if-else 的逻辑快得多。</li>
<li><strong>适合条件不同</strong>：if-else 适合导致布尔值的可变条件，而 switch 适合固定值。</li>
<li><strong>可读性</strong>：if-else较switch-case语句可读性较差</li>
</ul>
<h3 id="looping">Looping</h3>
<p>循环 (<em><strong>Looping</strong></em>) 提供了一种重复命令和控制重复次数的方法。</p>
<h3 id="while">while</h3>
<p>while 是 c 语言中最基础的循环，while将检查expression，直到expression为false将推出循环</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span> <span class="n">expression</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="n">Single</span> <span class="n">statement</span> 
</span></span><span class="line"><span class="cl">   <span class="n">or</span>
</span></span><span class="line"><span class="cl">   <span class="n">Block</span> <span class="n">of</span> <span class="n">statements</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="for">for</h3>
<p>for是类似与while的循环，只是语法上不同，for提供了三个表达式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">for</span><span class="p">(</span> <span class="n">expression1</span><span class="p">;</span> <span class="n">expression2</span><span class="p">;</span> <span class="n">expression3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="n">Single</span> <span class="n">statement</span>
</span></span><span class="line"><span class="cl">   <span class="n">or</span>
</span></span><span class="line"><span class="cl">   <span class="n">Block</span> <span class="n">of</span> <span class="n">statements</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>expression1 - 通常用于初始化变量（在此初始化的变量作用域仅为该循环中）</li>
<li>expression2 - 条件表达式，只要该表达式为true则循环将一直被执行</li>
<li>expression3 -  修饰符，通常用于变量的自增自减操作</li>
<li>三个表达式都可以为空，这种场景下循环将一直进行</li>
</ul>
<h3 id="dowhile">do&hellip;while</h3>
<p>类似与while ，只不过do..while循环，在循环结束开始检查测试条件。这意味着循环的内容将==至少执行一次==。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">do</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="n">Single</span> <span class="n">statement</span>
</span></span><span class="line"><span class="cl">   <span class="n">or</span>
</span></span><span class="line"><span class="cl">   <span class="n">Block</span> <span class="n">of</span> <span class="n">statements</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span><span class="p">(</span><span class="n">expression</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="break-vs-continue">break VS continue</h3>
<p>C语言提供了两个命令来控制循环：</p>
<ul>
<li>break，退出循环或switch</li>
<li>continue，跳过当前迭代 (<em><strong>iteration</strong></em>)，继续循环</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> 
</span></span><span class="line"><span class="cl"><span class="cpf">main()</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">j</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="k">if</span><span class="p">(</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">5</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">       <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">       <span class="p">}</span>
</span></span><span class="line"><span class="cl">       <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">i</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出结果将没有第五次迭代</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Hello <span class="m">0</span>
</span></span><span class="line"><span class="cl">Hello <span class="m">1</span>
</span></span><span class="line"><span class="cl">Hello <span class="m">2</span>
</span></span><span class="line"><span class="cl">Hello <span class="m">3</span>
</span></span><span class="line"><span class="cl">Hello <span class="m">4</span>
</span></span><span class="line"><span class="cl">Hello <span class="m">6</span>
</span></span><span class="line"><span class="cl">Hello <span class="m">7</span>
</span></span><span class="line"><span class="cl">Hello <span class="m">8</span>
</span></span><span class="line"><span class="cl">Hello <span class="m">9</span>
</span></span><span class="line"><span class="cl">Hello <span class="m">10</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="goto">goto</h2>
<p>goto 声明在C语言中提供了了一个无条件跳转到goto label出的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">goto</span> <span class="n">label</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">..</span>
</span></span><span class="line"><span class="cl"><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="nl">label</span><span class="p">:</span> <span class="n">statement</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>下面例子中，将从10开始执行，跳过15继续从16开始到20结束。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span> 
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span> <span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="cm">/* 局部变量定义 */</span>
</span></span><span class="line"><span class="cl">   <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="cm">/* do循环体 */</span>
</span></span><span class="line"><span class="cl">   <span class="nl">LOOP</span><span class="p">:</span><span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">      <span class="k">if</span><span class="p">(</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">15</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="cm">/* 跳出迭代 */</span>
</span></span><span class="line"><span class="cl">         <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">         <span class="k">goto</span> <span class="n">LOOP</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">      <span class="n">printf</span><span class="p">(</span><span class="s">&#34;value of a: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">a</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="p">}</span><span class="k">while</span><span class="p">(</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="mi">20</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://alvinalexander.com/programming/printf-format-cheat-sheet/">printf format</a></p>
<p><sup id="2">[2]</sup> <a href="https://www.tutorialspoint.com/ansi_c/c_control_statements.htm">control_statements</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>ch03 数组</title>
      <link>https://www.oomkill.com/2022/09/ch03-array/</link>
      <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/09/ch03-array/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="array-supa-href11asup">Array <sup><a href="#1">[1]</a></sup></h2>
<ul>
<li>数组是由单个元素组成的一组数据类型的变量</li>
<li>数组的元素存储在连续的内存位置</li>
<li>声明数组时应提及数组的大小</li>
<li>数组的计数从0开始</li>
<li>数组为一位数组与多维数组</li>
<li>数组首元素的地址与数组地址相同</li>
<li>数组包含  int, float, char, double 数据类型</li>
</ul>
<h3 id="declaration-and-initialization">Declaration and Initialization</h3>
<table>
<thead>
<tr>
<th>表达式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>int my_array1[20];</td>
<td>指定大小，来声明一个有20个元素的int数组</td>
</tr>
<tr>
<td>char my_array2[5];</td>
<td>指定大小，来声明一个有5个元素的char数组</td>
</tr>
<tr>
<td>int my_array[] = {100, 200, 300, 400, 500}</td>
<td>声明时初始化一个数组（编译器自动求数组元素个数）</td>
</tr>
<tr>
<td>int my_array1[5] = {100, 200, 300, 400, 500};</td>
<td>声明时初始化</td>
</tr>
<tr>
<td>int my_array2[5] = {100, 200, 300};</td>
<td>声明时初始化（剩余未初始化的元素，默认 0 值）</td>
</tr>
<tr>
<td>int my_array2[5] = {0};</td>
<td>声明时初始化（声明一个全0值的数组）</td>
</tr>
<tr>
<td>int arr[10]; <br/>arr[0] = 5;<br/>arr[1] = 6;<br/>arr[2] = 7;</td>
<td>声明数组并初始化值（这种方法为初始化部分的默认值为随机数）</td>
</tr>
<tr>
<td>char str[] = &ldquo;zhangsan&rdquo;</td>
<td>声明一个字符串（字符串是一个char类型数组）</td>
</tr>
</tbody>
</table>
<h3 id="advantages-and-disadvantages">Advantages and Disadvantages</h3>
<p>缺点**：大小限制**：声明（定义）后是固定的大小，不能通过运行时改变其大小</p>
<p>优点：</p>
<ul>
<li>代码优化，可以通过数组更好的对数据进行检索或排序</li>
<li>随机存储，可以将数据存储在不同的位置</li>
</ul>
<h3 id="muitl-dimensional-supa-href55asup">muitl-dimensional <sup><a href="#5">[5]</a></sup></h3>
<p>数组中的数组，又称为多维数组(*** multidimensional arrays***)。包含 2D 3D数组。2D是包含行(<em><strong>rows</strong></em>), 列(<em><strong>columns</strong></em>) 的数组；而3D数组是在2D的基础上，增加了一个维度。包含如下：</p>
<ul>
<li>第一个维度：大小</li>
<li>第二个维度：二维数组的行</li>
<li>第三个维度：二维数组的列</li>
</ul>
<p>而更高维度的数组，实际上就是在3D, 4D&hellip; 上再增加一个维度。</p>
<h4 id="declare">declare</h4>
<p>声明一个多维数组方式如下，声明一个二维数组</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">float</span> <span class="n">x</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">4</span><span class="p">];</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="initialization">Initialization</h4>
<table>
<thead>
<tr>
<th>初始化方式</th>
<th>说明</th>
<th>代码</th>
</tr>
</thead>
<tbody>
<tr>
<td>常规初始化</td>
<td></td>
<td>int arr[3][5] = {<br/>    {2, 3, 54, 56, 7 },<br/>    {2, 67, 4, 35, 9},<br/>    {1, 4, 16, 3, 78}<br/>};</td>
</tr>
<tr>
<td>不完全初始化</td>
<td>未被初始化的数值为 <strong>0</strong></td>
<td>int arr[3][5] = { <br/>    {2, 3}, <br/>    {2, 67, 4, }, <br/>    {1, 4, 16, 78}<br/>};</td>
</tr>
<tr>
<td></td>
<td>初始化一个 初值全为0的二维数组</td>
<td>int arr[3][5] = {0};</td>
</tr>
<tr>
<td></td>
<td>系统自动分配行列</td>
<td>int arr[3][5] = {2, 3, 2, 67, 4, 1, 4, 16, 78};</td>
</tr>
<tr>
<td>不完全指定行列初始化</td>
<td>二维数组定义必须指定列值</td>
<td>int arr[][] = {1, 3, 4, 6, 7};（==错误示例==）</td>
</tr>
<tr>
<td></td>
<td>二维数组定义可以不指定行值</td>
<td>int arr[][2] = { 1, 3, 4, 6, 7 };</td>
</tr>
</tbody>
</table>
<p>示例：遍历一个二维数组</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;math.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;time.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">row</span><span class="p">,</span><span class="n">colume</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">arr</span><span class="p">[][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">row</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span><span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="n">colume</span> <span class="o">=</span>  <span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">row</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">colume</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> 
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>声明和便利一个三维数组</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">3</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">16</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">19</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="mi">21</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">23</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="mi">24</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">26</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="mi">27</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">29</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="mi">31</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">33</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="mi">34</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">36</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="mi">37</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">39</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;:::3D Array Elements:::</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span><span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">k</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d</span><span class="se">\t</span><span class="s">&#34;</span><span class="p">,</span><span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="string-supa-href33asup">String <sup><a href="#3">[3]</a></sup></h2>
<p>字符串 (<em><strong>string</strong></em>) 是一组字符 (<em><strong>char</strong></em>)，以 ”\0“ 结尾，抽象来说，C语言中字符串就是数组类型的char</p>
<p>定义，定义一个值为”colour“的字符串。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">char</span> <span class="n">message</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sc">&#39;C&#39;</span><span class="p">,</span> <span class="sc">&#39;o&#39;</span><span class="p">,</span> <span class="sc">&#39;l&#39;</span><span class="p">,</span> <span class="sc">&#39;o&#39;</span><span class="p">,</span> <span class="sc">&#39;u&#39;</span><span class="p">,</span> <span class="sc">&#39;r&#39;</span><span class="p">,</span> <span class="sc">&#39;\0&#39;</span><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而 &ldquo;\0&rdquo; 可以省略，定义可以如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">char</span> <span class="n">message</span><span class="p">[]</span><span class="o">=</span> <span class="err">“</span><span class="n">Colour</span><span class="err">”</span><span class="p">;</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>C语言初始化字符串的4中方法</strong></p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>char str[] = &ldquo;hello world&rdquo;;</td>
<td>分配不带大小的字符串</td>
</tr>
<tr>
<td>char str[50] = &ldquo;hello world&rdquo;;</td>
<td>分配具有预定义大小的字符串</td>
</tr>
<tr>
<td>char str[14] = { &lsquo;h&rsquo;,&rsquo;e&rsquo;,&rsquo;l&rsquo;,&rsquo;l&rsquo;,&lsquo;o&rsquo;,&rsquo;\0&rsquo;};</td>
<td>按字符分配大小的字符串</td>
</tr>
<tr>
<td>char str[] = { &lsquo;h&rsquo;,&rsquo;e&rsquo;,&rsquo;l&rsquo;,&rsquo;l&rsquo;,&lsquo;o&rsquo;,&rsquo;\0&rsquo;};</td>
<td>不带大小的按字符分配大小的字符串</td>
</tr>
</tbody>
</table>
<p>在C语言中，数组和字符串都是二等公民，一旦声明后，不支持赋值运算符</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">message</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sc">&#39;C&#39;</span><span class="p">,</span> <span class="sc">&#39;o&#39;</span><span class="p">,</span> <span class="sc">&#39;l&#39;</span><span class="p">,</span> <span class="sc">&#39;o&#39;</span><span class="p">,</span> <span class="sc">&#39;u&#39;</span><span class="p">,</span> <span class="sc">&#39;r&#39;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">message</span> <span class="o">=</span> <span class="s">&#34;aaaaaa&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;sum = %c</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面代码对字符串二次赋值，这种编译器直接报错</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">1.c: In <span class="k">function</span> <span class="s1">&#39;main&#39;</span>:
</span></span><span class="line"><span class="cl">1.c:6:13: error: assignment to expression with array <span class="nb">type</span>
</span></span><span class="line"><span class="cl">     <span class="nv">message</span> <span class="o">=</span> <span class="s2">&#34;aaaaaa&#34;</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Notes：复制字符串可以使用函数 strcpy()</p>
</blockquote>
<h4 id="字符串获取">字符串获取</h4>
<ul>
<li>
<p><strong>scanf</strong>：</p>
<ul>
<li>
<p>存储字符串的空间必须足够大，防止溢出。</p>
</li>
<li>
<p>获取字符串，<code>%s</code>， 遇到 空格 和 <em><strong>\n</strong></em> 终止。</p>
</li>
<li>
<p>使用“正则表达式”可以获取带有空格的字符串，如：<code>scanf(&quot;%[^\n]&quot;, str);</code></p>
</li>
</ul>
</li>
<li>
<p><strong>gets</strong>：类似与 <em><strong>scanf</strong></em> ；从stdin中读取字符串保存在变量中，遇到换行符终止（可以获取带有“空格”的字符串）。</p>
<ul>
<li>参数：用来存储字符串的空间地址</li>
<li>返回值：返回实际获取到的字符串首地址。</li>
</ul>
</li>
<li>
<p><strong>fgets</strong>：从指定流读取一行字符串，遇到换行符或到达结尾终止</p>
<ul>
<li>*str：存储读取字符串的变量指针。</li>
<li>n：读取的最大字符</li>
<li>*stream：输入流的对象指针，如stdin</li>
</ul>
</li>
</ul>
<h4 id="字符串写入">字符串写入</h4>
<ul>
<li>
<p><strong>puts</strong>：将一行字符串写入输出流 (<em><strong>stdout</strong></em>)， 输出字符串后会自动添加 \n 换行符。</p>
</li>
<li>
<p><code>char* str</code>：被打印的字符串</p>
</li>
<li>
<p><em><strong>return value</strong></em>：成功返回非0的integer，失败返回  <code>EOF</code></p>
</li>
<li>
<p><strong>fputs</strong>：将字符串写入指定流，不包含换行符 <code>\n</code></p>
<ul>
<li><code>const char *str</code>：写入的以NULL字符结尾的字符串</li>
<li><code>FILE *stream</code>： FILE 对象的指针，代表要将字符串写入的流</li>
<li><em><strong>return value</strong></em>：成功返回非0的integer，失败返回  <code>EOF</code></li>
</ul>
</li>
</ul>
<h3 id="array-vs-string-supa-href22asup">Array VS String <sup><a href="#2">[2]</a></sup></h3>
<ul>
<li><strong>数据类型不同</strong>：数组可以保存 int, float, doubles类型，字符串只能保存char类型</li>
<li><strong>长度不同</strong>：数组长度是固定的，字符串长度可变（通过指针）</li>
<li><strong>数据结构不同</strong>：数组可以是一维或多维，字符串是一维数组，结束是一个空字符 ”\0&quot;</li>
</ul>
<h3 id="char--vs-char-">char * VS char []</h3>
<table>
<thead>
<tr>
<th>char a[10]</th>
<th>char *a</th>
</tr>
</thead>
<tbody>
<tr>
<td>a是一个数组</td>
<td>a是一个指针</td>
</tr>
<tr>
<td>sizeof为数组的大小</td>
<td>sizeof为指针类型的大小</td>
</tr>
<tr>
<td>存储在内存中的栈段</td>
<td>a的地址被存储在栈中，但是内容被存储在.rodata中</td>
</tr>
<tr>
<td>a不可以被修改</td>
<td>a可以被修改</td>
</tr>
<tr>
<td>a[0]可以被修改</td>
<td>a[0]不可以被修改，因为内容在.rodata</td>
</tr>
<tr>
<td></td>
<td>char *a=&ldquo;text&rdquo;; <br>*a 存储的 text 内容，只读区内容不能修改 <br/>a 代表存储的 .rodata的地址 <br/>a=&ldquo;text1&rdquo; text1位于内存中其他地方的，将这个地址赋值给a</td>
</tr>
</tbody>
</table>
<h3 id="字符串的拷贝">字符串的拷贝</h3>
<ul>
<li>
<p>使用指针运算方式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">copy_string02</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">dest</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">src</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span> <span class="p">(</span><span class="o">*</span><span class="n">source</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span> <span class="cm">/* *src != 0 */</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="o">*</span><span class="n">dest</span> <span class="o">=</span> <span class="o">*</span><span class="n">src</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">src</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">dest</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>使用数组方式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">copy_string01</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">dest</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">src</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">src</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="n">dest</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">src</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>使用while循环</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">copy_string03</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">dest</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">source</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 判断时赋值结尾 0=0也会退出循环
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">while</span> <span class="p">(</span><span class="o">*</span><span class="n">dest</span><span class="o">++</span> <span class="o">=</span> <span class="o">*</span><span class="n">source</span><span class="o">++</span><span class="p">){}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="字符串的格式化">字符串的格式化</h3>
<ul>
<li>用于将字符串打印在标准输出的：<code>int printf(const char* str, ...);</code></li>
<li>用于将字符串格式化打印在缓冲区中的（stdin, stdout, stderr是隐式缓冲资源）：<code>int fprintf(FILE *fptr, const char *str, ...);</code></li>
<li>用于格式化而不打印的：<code>int sprintf(char *str, const char *string,...); </code></li>
</ul>
<h2 id="array-sorting">array sorting</h2>
<h3 id="杯子交换">杯子交换</h3>
<p>三杯水交换算法 ( <em><strong>The Cup Swapping algorithm</strong></em>)</p>
<p>有两杯装满水的杯子来代表变量的值，如果需要交换两杯水到对方，就如同交换两个变量的值，此时需要第三个杯子来交换液体，就像第三个变量用作临时存储变量的值一样。</p>
<p>例如，数组的倒序可以使用该方法，也是其他算法中的基础。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span><span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">22</span><span class="p">,</span><span class="mi">321</span><span class="p">,</span><span class="mi">56</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">66</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">};</span> 
</span></span><span class="line"><span class="cl">    <span class="c1">// 数组的长度
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 临时变量 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="n">tmp</span><span class="p">;</span>		 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 交换 数组元素，做逆序
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="n">len</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="n">tmp</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="c1">// 第三杯水
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">len</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">		<span class="n">arr</span><span class="p">[</span><span class="n">len</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="冒泡-supa-href44asup">冒泡 <sup><a href="#4">[4]</a></sup></h3>
<p>冒泡排序 (<em><strong>bubble sort</strong></em>) 是最简单的排序算法，其核心是==如果两个相邻元素的位置排序不对，就交换相邻的元素==，例如： <em><strong>arr[] = {5, 1, 4, 2, 8}</strong></em> ，从前两个元素开始比较检查哪个更大</p>
<ul>
<li>
<p>第一轮（迭代）：</p>
<ul>
<li>
<p>( <strong>5</strong> <strong>1</strong> 4 2 8 ) -&gt; ( <strong>1</strong> <strong>5</strong> 4 2 8 )，比较前两个元素 5 &gt; 1 交换两个位置。</p>
</li>
<li>
<p>( 1 <strong>5</strong> <strong>4</strong> 2 8 ) –&gt; ( 1 <strong>4</strong> <strong>5</strong> 2 8 )，5 &gt; 4 交换两个位置</p>
</li>
<li>
<p>( 1 4 <strong>5</strong> <strong>2</strong> 8 ) –&gt; ( 1 4 <strong>2</strong> <strong>5</strong> 8 )，5 &gt; 2 交换两个位置</p>
</li>
<li>
<p>( 1 4 2 <strong>5</strong> <strong>8</strong> ) -&gt; ( 1 4 2 <strong>5</strong> <strong>8</strong> )，(8 &gt; 5)，不会交换，至此最后一位排序正确</p>
</li>
</ul>
</li>
<li>
<p>第二轮</p>
<ul>
<li>( <strong>1</strong> <strong>4</strong> 2 5 8 ) -&gt;  ( <strong>1</strong> <strong>4</strong> 2 5 8 )</li>
<li>( 1 <strong>4</strong> <strong>2</strong> 5 8 ) –&gt;  ( 1 <strong>2</strong> <strong>4</strong> 5 8 )，4 &gt; 2 交换两个位置</li>
<li>( 1 2 <strong>4</strong> <strong>5</strong> 8 ) -&gt;  ( 1 2 <strong>4</strong> <strong>5</strong> 8 )</li>
<li>( 1 2 4 <strong>5</strong> <strong>8</strong> ) -&gt;  ( 1 2 4 <strong>5</strong> <strong>8</strong> )</li>
</ul>
</li>
<li>
<p>第三轮（没法发生交换）</p>
<ul>
<li>( <strong>1</strong> <strong>2</strong> 4 5 8 ) -&gt; ( <strong>1</strong> <strong>2</strong> 4 5 8 )</li>
<li>( 1 <strong>2</strong> <strong>4</strong> 5 8 ) -&gt; ( 1 <strong>2</strong> <strong>4</strong> 5 8 )</li>
<li>( 1 2 <strong>4</strong> <strong>5</strong> 8 ) -&gt; ( 1 2 <strong>4</strong> <strong>5</strong> 8 )</li>
<li>( 1 2 4 <strong>5</strong> <strong>8</strong> ) -&gt; ( 1 2 4 <strong>5</strong> <strong>8</strong> )</li>
</ul>
</li>
</ul>
<p><strong>算法实现</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 三杯水交换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="o">*</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">x</span> <span class="o">=</span> <span class="o">*</span><span class="n">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">y</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1">// 冒泡实现
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">bubbleSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">        <span class="c1">// Last i elements are already in place
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">arr</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1">// 打印数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">printArray</span><span class="p">(</span><span class="kt">int</span> <span class="n">arr</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">90</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="n">bubbleSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Sorted array: </span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printArray</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出结果为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">Sorted</span> <span class="nl">array</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl"><span class="mi">11</span> <span class="mi">12</span> <span class="mi">22</span> <span class="mi">25</span> <span class="mi">34</span> <span class="mi">64</span> <span class="mi">90</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://www.cs.uic.edu/~jbell/CourseNotes/C_Programming/Arrays.html">Arrays in c</a></p>
<p><sup id="2">[2]</sup> <a href="https://pediaa.com/what-is-the-difference-between-array-and-string/">difference between array and string</a></p>
<p><sup id="3">[3]</sup> <a href="https://www.tutorialspoint.com/cprogramming/c_strings.htm">string in c</a></p>
<p><sup id="4">[4]</sup> <a href="https://www.geeksforgeeks.org/bubble-sort/">bubble sort with c</a></p>
<p><sup id="5">[5]</sup> <a href="https://iq.opengenus.org/3d-array-in-c/">3d array in c</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>ch04 函数</title>
      <link>https://www.oomkill.com/2022/09/ch04-function/</link>
      <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/09/ch04-function/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="concept-supa-href11asup">concept <sup><a href="#1">[1]</a></sup></h2>
<p>函数 (<em><strong>function</strong></em>) 是执行任务的语句块。</p>
<p><strong>函数的作用</strong>：</p>
<ul>
<li>提高代码的可重用性并减少冗余</li>
<li>代码模块化</li>
<li>代码易读性</li>
<li>使代码模块化</li>
</ul>
<h2 id="函数的分类">函数的分类</h2>
<p>C语言中有两种类型的函数：</p>
<ul>
<li>标准库函数：C中的内置函数，在头文件中定义
<ul>
<li><code>#include &lt;stdio.h&gt;</code></li>
</ul>
</li>
<li>用户自定义函数：用户自定义的函数
<ul>
<li><code>#include &quot;stdio.h&quot;</code></li>
</ul>
</li>
</ul>
<h2 id="函数三部曲">函数三部曲</h2>
<p>C语言中函数分为三个方面，声明(<em><strong>declaration</strong></em>)，定义(<em><strong>defining</strong></em>)，调用(<em><strong>calling</strong></em>)</p>
<h3 id="声明">声明</h3>
<p>声明是让编译器知道函数的名称、参数信息、参数的返回值的类型。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="p">(</span><span class="n">type</span><span class="p">)</span> <span class="n">function_name</span><span class="p">({</span><span class="n">type</span> <span class="n">args</span><span class="p">...});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>隐式声明</strong>(<em><strong>implicit</strong></em>) ：当在main之后定义的函数而未声明，默认编译器会做隐式声明。</p>
<blockquote>
<p>ISO/IEC 9899:1990 中 关于函数声明的部分：</p>
<p>函数在调用前必须有一个可用的声明，如果没有被声明，则该函数默认被隐式声明，该隐式声明没有参数，返回值为int <sup><a href="#2">[2]</a></sup></p>
</blockquote>
<h3 id="定义">定义</h3>
<p>C中函数定义的语法如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">return_type</span> <span class="nf">function_name</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="p">...</span> <span class="n">argn</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">function</span> <span class="n">body</span> <span class="c1">// 函数中要处理任务的逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><em><strong>return_type</strong></em>：函数返回值的数据类型</li>
<li><em><strong>function_name</strong></em>：函数名</li>
<li><em><strong>arg1, arg2, &hellip;argn</strong></em>：参数列表（可选），定义传递给函数的数据类型、顺序和参数的数量。</li>
<li><em><strong>function body</strong></em>：调用函数时任务处理和执行的语句</li>
</ul>
<h3 id="调用">调用</h3>
<p>调用是指要由编译器执行的函数，可以在任何部分调用</p>
<h2 id="虚函数void">虚函数void</h2>
<p>如果函数没有返回值，则使用关键字 <em><strong>void</strong></em>，主要用于两个方面：</p>
<ul>
<li>打印具体信息供用户阅读的函数</li>
<li>引用参数，函数通常不是用于返回一个内容，而是修改引用参数的，无需返回值</li>
</ul>
<p><em><strong>void</strong></em> 关键字使用注意：</p>
<ul>
<li>
<p>void仅用于限定函数返回值，函数参数，不可以修饰变量，因为无法对无类型的变量分配指针</p>
</li>
<li>
<p>void修饰指针时表示泛指针，可以无需强制转换为其他类型的指针</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="o">=</span><span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">char</span> <span class="o">*</span> <span class="n">a</span><span class="o">=</span><span class="s">&#34;1234&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">printf</span><span class="p">(</span><span class="s">&#34;a %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">ptr</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">ptr</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="宏函数">宏函数</h2>
<p>宏函数是指带有参数的宏(<em><strong>Macro-Arguments</strong></em>)，具有类似函数的功能，例如下列时一个获取最小值的宏函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define min(X, Y)  ((X) &lt; (Y) ? (X) : (Y))
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="kt">char</span> <span class="n">a</span><span class="o">=</span><span class="sc">&#39;a&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">b</span><span class="o">=</span><span class="sc">&#39;b&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">x</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>         <span class="c1">// →  x = ((a) &lt; (b) ? (a) : (b));
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">char</span> <span class="n">y</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>         <span class="c1">// →  y = ((1) &lt; (2) ? (1) : (2));
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;x is %c, y is %c</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="宏函数危险部分">宏函数危险部分</h3>
<p>在上面例子中存在一些不安全部分</p>
<ul>
<li>
<p>错误嵌套：</p>
</li>
<li>
<p><strong>括号优先级</strong>：<code>#define ceil_div(x, y) x + y</code> 因为宏函数带有的括号是围绕这个宏函数的，会存在运算符优先级问题，如果用上述宏函数进行输出得到的结果为：<code>ceil_div(2, 3) * 10 = 32</code> ，因为括号不是表达式的括号</p>
<ul>
<li>解决方法：每一个宏函数的参数需要用括号括起来 <code>#define ceil_div(x, y) (x + y)</code></li>
</ul>
</li>
<li>
<p><strong>吞分号</strong>：<code>#define NEW_MACRO()  ({ int x = 1; int y = 2; x+y; })</code> 上述宏函数在GCC预处理步骤替换时，通常调用宏函数的部分会加分号 <code>NEW_MACRO();</code> ，例如下列代码中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    <span class="n">SKIP_SPACES</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span> 
</span></span><span class="line"><span class="cl">    <span class="p">...</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>被替换后为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl"><span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">};</span> <span class="c1">// 《这里的分号会跳过else
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">else</span> 
</span></span><span class="line"><span class="cl">    <span class="p">...</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通常情况下使用do&hellip;while替换</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define NEW_MACRO() do { int x = 1; int y = 2; x+y; } while (0)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">	<span class="k">do</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span> 
</span></span><span class="line"><span class="cl">    <span class="p">...</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>重复替换的副作用</strong>：<code>#define min(X, Y)  ((X) &lt; (Y) ? (X) : (Y))</code> 这个宏函数在gcc预处理中如果调用时是 <code>next = min (x + y, foo (z));</code> 将被重复替换，如下列代码所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">next</span> <span class="o">=</span> <span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">foo</span> <span class="p">(</span><span class="n">z</span><span class="p">))</span> <span class="o">?</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">:</span> <span class="p">(</span><span class="n">foo</span> <span class="p">(</span><span class="n">z</span><span class="p">)));</span>  <span class="c1">// 参数Y被替换为两个foo
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">�代表foo被执行两次，这种显然不安全，推荐使用typeof
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">`c
</span></span><span class="line"><span class="cl">efine min(X, Y)                \
</span></span><span class="line"><span class="cl"> typeof (X) x_ = (X);          \
</span></span><span class="line"><span class="cl">peof (Y) y_ = (Y);          \
</span></span><span class="line"><span class="cl">_ &lt; y_) ? x_ : y_; })
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>直接自引用</strong>：是指定义的宏引用自己，例如 <code>#define foo (4 + foo)</code>，为了方式无限扩展为 <code>(4+(4+foo))</code>, <code>(4+(4+(4+foo)))</code> &hellip; 直到内存耗尽，这种情况编译器将不允许 <code>each undeclared identifier is reported only once for each function it appears in</code></p>
</li>
<li>
<p><strong>间接自引用</strong>：指a引用b，b引用a，例如下列代码，是不被允许的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define x (4 + y) 
</span></span></span><span class="line"><span class="cl"><span class="cp">#define y (2 * x)
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>参数的换行符不被允许</p>
</li>
</ul>
<h2 id="函数的退出">函数的退出</h2>
<ul>
<li>exit() 是一个终止当前进程的系统调用（无论在代码哪里调用）；非C语言内置功能</li>
<li>return：向调用函数提供退出状态并将控制权返回给调用函数，C语言内置功能</li>
</ul>
<h2 id="多文件编程-supa-href33asup">多文件编程 <sup><a href="#3">[3]</a></sup></h2>
<p>多文件程序(<em><strong>multi-file</strong></em>) 是指多个含有不同功能的代码文件（ .c 文件模块），编译到一起，生成一个二进制文件。</p>
<p>通常包含三部分：</p>
<ul>
<li>
<p>编译：通过编译器编译多个文件程序</p>
</li>
<li>
<p>函数原型（声明）：告知编译器如何使用，表现为：</p>
<ul>
<li>函数在一个文件中定义，在另一个文件中调用</li>
<li>想对文件中的函数重新排序</li>
<li>函数相互调用，递归</li>
</ul>
</li>
<li>
<p>头文件：使多个文件中的函数可以访问定义和声明，通常情况下包含：</p>
<ul>
<li>全局变量和全局常量</li>
<li>类，结构体，联合体，枚举等</li>
<li>创建类型名称的 typedef 语句</li>
<li>函数声明</li>
<li>包含其他文件的语句，如math.h</li>
</ul>
</li>
</ul>
<p><strong>防止头文件重复包含</strong></p>
<p>windows</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>linux</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#ifndef __HEAD_H__
</span></span></span><span class="line"><span class="cl"><span class="cp">#define __HEAD_H__
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="p">....</span> <span class="n">head</span> <span class="n">file</span> <span class="n">body</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://www.programiz.com/c-programming/c-functions">c function</a></p>
<p><sup id="2">[2]</sup> <a href="https://stackoverflow.com/questions/434763/are-prototypes-required-for-all-functions-in-c89-c90-or-c99">Are prototypes required for all functions in C89, C90 or C99?</a></p>
<p><sup id="3">[3]</sup> <a href="https://www.cs.hmc.edu/~geoff/classes/hmc.cs070.200401/notes/multi-file.html">multi-file</a></p>
<p><sup id="4">[4]</sup> <a href="https://gcc.gnu.org/onlinedocs/cpp/Macros.html#Macros">Macros</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>ch05 指针</title>
      <link>https://www.oomkill.com/2022/09/ch05-pointer/</link>
      <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/09/ch05-pointer/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="指针">指针</h2>
<h3 id="指针声明-supa-href11asup">指针声明 <sup><a href="#1">[1]</a></sup></h3>
<p>指针/指针变量 (<em><strong>pointer</strong></em>) 是用于存储地址的变量</p>
<p>使用 <code>&amp;</code> 运算符 来访问变量的地址。例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%x&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出结果为 16进制的内存地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="mf">61f</span><span class="n">e1c</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用地址运算符 <code>*</code> 可以从变量地址中获取变量的值，这个行为被称为间接引用/解引用(<em><strong>indirection/dereferencing</strong></em>)。例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">));</span> 
</span></span><span class="line"><span class="cl">   <span class="c1">// 也可以写为，因为*与&amp;优先级相同，从右到左的顺序，所以有没有()意思是相同的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">*&amp;</span><span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出结果为 100</p>
<h3 id="指针变量">指针变量</h3>
<p>指针变量是指存储一个变量的地址的变量，可以使用符号 <code>*</code> 来修饰变量，定义语法为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">dataType</span> <span class="o">*</span><span class="n">pointerVariableName</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">variableName</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>例如，下面的两个输出结果是相同的地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="kt">int</span> <span class="o">*</span><span class="n">pointer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="n">pointer</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="n">printf</span><span class="p">(</span><span class="s">&#34;address of a is: %x</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="n">printf</span><span class="p">(</span><span class="s">&#34;address of pointer is: %x</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">pointer</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">address</span> <span class="n">of</span> <span class="n">a</span> <span class="nl">is</span><span class="p">:</span> <span class="mf">61f</span><span class="n">e14</span>
</span></span><span class="line"><span class="cl"><span class="n">address</span> <span class="n">of</span> <span class="n">pointer</span> <span class="nl">is</span><span class="p">:</span> <span class="mf">61f</span><span class="n">e14</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Notes：指针可以通过变量修改也可以直接通过地址进行修改，指针变量就是通过地址进行修改</p>
</blockquote>
<h4 id="修饰符说明">修饰符说明</h4>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>*</td>
<td>两个用途：<br>指针变量的声明<br>返回被引用变量的值</td>
</tr>
<tr>
<td>&amp;</td>
<td>返回变量地址</td>
</tr>
</tbody>
</table>
<h4 id="使用const修饰指针-supa-href33asup">使用const修饰指针 <sup><a href="#3">[3]</a></sup></h4>
<p>使用关键字 <code>const</code> 修饰的指针变量是不能改变指针变量所指向的地址的变量，通俗来讲即不能被改变值的指针变量</p>
<p>声明语句</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">type</span> <span class="n">of</span> <span class="n">pointer</span><span class="o">&gt;</span> <span class="o">*</span><span class="k">const</span> <span class="o">&lt;</span><span class="n">name</span> <span class="n">of</span> <span class="n">pointer</span><span class="o">&gt;</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="o">*</span><span class="k">const</span> <span class="n">ptr</span><span class="p">;</span>  
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>const位置</strong>：const修饰的部分（const所在位置）不可改变</p>
<ul>
<li>
<p>例如 <code>const int *p;</code> 与 <code>int const *p;</code> 这里修饰的都是 <code>*p</code> 故</p>
<ul>
<li>
<p><code>*p</code> （变量地址）不能被改变</p>
</li>
<li>
<p><code>p</code> （变量值）可以被改变</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl">  <span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="cp">#include</span><span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  <span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="k">const</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">;</span> <span class="c1">// result assignment of read-only location &#39;*p&#39;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">p</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span> <span class="c1">// result 30
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span><span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p><code>int * const p; </code> const在*后p前，这里修饰的都是 <code>p</code> 故</p>
<ul>
<li>p不可以被修改</li>
<li>*p 可以被修改</li>
</ul>
</li>
<li>
<p><code>const int *const p;</code> 这里 const 修饰 * 和 p，所以两个都不可修改</p>
</li>
</ul>
<blockquote>
<p>Notes：通常情况下常用只有第一种情况</p>
</blockquote>
<p><strong>使用场景</strong>：最为参数形参修饰该参数为只读参数，例如 printf</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">printf</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">__format</span><span class="p">,</span> <span class="p">...)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="指针的类型-supa-href22asup">指针的类型 <sup><a href="#2">[2]</a></sup></h3>
<p>C语言中包含多种指针类型：</p>
<ul>
<li>空指针(<em><strong>Null Pointer</strong></em>)</li>
<li>野指针(<em><strong>Wild Pointer</strong></em>)</li>
<li>悬空指针(<em><strong>Dangling pointer</strong></em>)</li>
<li>泛型指针(<em><strong>void Pointer</strong></em>)</li>
<li>一些早期Dos中的概念
<ul>
<li>近指针(<em><strong>Near</strong></em>)：不能存储大小大于 16 位的地址</li>
<li>远指针(<em><strong>Far</strong></em>)：32 位大小的指针</li>
<li>大指针(<em><strong>Huge</strong></em>)：类似于远指针。</li>
</ul>
</li>
</ul>
<h4 id="空指针">空指针</h4>
<p>在声明期间将 NULL 分配给指针的指针称为 空 (<em><strong>NULL</strong></em>) 指针，例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kt">int</span> <span class="o">*</span><span class="n">var</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="n">printf</span><span class="p">(</span><span class="s">&#34;address of var is: %p</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">var</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>空指针不能解引用：NULL指针因引用是一个非法的操作，在解引用之前，必须确保它不是一个NULL指针</li>
<li>空指针不能拷贝内容：<code>strcpy(*p,&quot;1111);</code></li>
</ul>
<h4 id="泛型指针">泛型指针</h4>
<p>使用 <code>void</code> 关键字声明指针变量，可以接受任意一种类型的变量地址，如果需要使用泛型指针，需要强转为对应类型才可以使用。如下示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">6666</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="kt">void</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="n">printf</span><span class="p">(</span><span class="s">&#34;address of p is: %p</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="n">printf</span><span class="p">(</span><span class="s">&#34;value of p is: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span> <span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">address</span> <span class="n">of</span> <span class="n">p</span> <span class="nl">is</span><span class="p">:</span> <span class="mf">000000000061F</span><span class="n">E14</span>
</span></span><span class="line"><span class="cl"><span class="n">value</span> <span class="n">of</span> <span class="n">p</span> <span class="nl">is</span><span class="p">:</span> <span class="mi">6666</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="野指针">野指针</h4>
<p>野指针是指，没有有效地址的空间的指针，例如声明了指针变量没有对其赋值，这种情况下会出现 <code>Segmentation fault</code> 异常。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="n">printf</span><span class="p">(</span><span class="s">&#34;address of p is: %p</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>再例如一个无效的地址空间也会发生  <code>Segmentation fault</code> 异常；例如下列赋值中，指针p赋值被视为一个内存地址，而不是变量的值，这个地址无效。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="n">printf</span><span class="p">(</span><span class="s">&#34;address of p is: %p</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>野指针出现场景：</p>
<ul>
<li>指针变量声明但未初始化</li>
<li>指针释放后未置空</li>
<li>指针操作超出变量作用域</li>
</ul>
<p>避免野指针的出现：</p>
<ul>
<li>初始化置 NULL</li>
<li>释放后置 NULL</li>
</ul>
<h4 id="悬空指针">悬空指针</h4>
<p>悬空指针是指”已经被释放的内存“的指针变量，此时这个地址空间是无效的。如下所示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span><span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="o">*</span><span class="n">P</span><span class="o">=</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">a</span><span class="o">=</span><span class="mi">5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">P</span><span class="o">=&amp;</span><span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">free</span><span class="p">(</span><span class="n">P</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;After deallocating its memory *p=%d&#34;</span><span class="p">,</span> <span class="o">*</span><span class="n">P</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="指针的偏移量">指针的偏移量</h3>
<p>指针步长是指指针在运算是偏移多少字节</p>
<ul>
<li>
<p>指针+1之后跳跃的字节数取决于指针的类型，int 4, char 1, struct struct长度</p>
</li>
<li>
<p>指针解引用时需要转换成对应的数据类型，从而判断被解引用后的大小，<code>* (int *) p</code> 指针类型变量转换为指针int类型变量</p>
</li>
<li>
<p>对于结构体指针来说，offsetof函数定位属性对应的偏移量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span><span class="cpf">&lt;stddef.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">offsetof</span><span class="p">(</span><span class="o">&lt;</span><span class="k">struct</span> <span class="n">struct_name</span><span class="o">&gt;</span><span class="p">,</span> <span class="o">&lt;</span><span class="n">obj_name</span><span class="o">&gt;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="指针数组">指针数组</h2>
<p>在C语言中 数组是由两部分组成，数组名与数组本身。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">	<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;arr %p = &amp;arr %p&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面例子中，变量a是一个数组，而变量a代表的是一个指向该数组第一个元素的地址，<code>a=&amp;a[0]</code> ，这是一个const修饰的指针是不可以被改变的。</p>
<p>可以看到变量a和 <code>&amp;a[0]</code> 值是相同的，而一个const修饰的指针变量是不可改变的，故a不能被赋值，下列代码是不合法的。总结为：<strong>不允许将任何地址分配给数组变量</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">a</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">a</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">		<span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;arr %p = &amp;arr %p&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用指针访问数组">使用指针访问数组</h3>
<p>上面知道了，数组变量指向的是数组的起始元素（第一个元素）的地址指针，那么通过指针可以对数组进行访问。</p>
<p>因为 <code>a = &amp;a[0]</code> 那么 <code>a[0] = *a</code>，由此可推导出下列公式：</p>
<ul>
<li><code>&amp;a[1] = a+1</code> （取数组元素的地址）   那么 <code>a[1] = *(a+1)</code> （取数组元素的值）</li>
<li><code>&amp;a[2] = a+2</code>   那么 <code>a[2] = *(a+2)</code></li>
</ul>
<p>这种情况下数组的访问就有四种方法</p>
<h3 id="array-vs-pointer-supa-href44asup">Array VS Pointer <sup><a href="#4">[4]</a></sup></h3>
<ul>
<li>数组名是常量，指针是变量</li>
<li>sizeof(array) 得到的是数组实际占用内存空间的字节数，sizeof(pointer) 是4/8 取决于操作系统</li>
</ul>
<h3 id="指针运算">指针运算</h3>
<h4 id="左值和右值-supa-href55asup">左值和右值 <sup><a href="#5">[5]</a></sup></h4>
<p>了解对于指针运算前，需要对左值(<em><strong>lvalue</strong></em>)和右值(<em><strong>rvalue</strong></em>)进行了解</p>
<ul>
<li>左值：通常来说是在占有内存地址（即具有地址）的对象
<ul>
<li>具有存储数据的内力，例如变量</li>
<li>不能是函数，表达式，或常量</li>
<li>综合来说，左值可以是以下几种：
<ul>
<li>任何类型的变量：int, float, pointer, struct等</li>
<li>数组的下标表达式，如a[1]</li>
<li>括号内的表达式（指针）</li>
<li>指针的间接引用</li>
<li>常量（不可改变的左值）</li>
<li>通过指针访问对象属性或成员 (-&gt; or .)</li>
</ul>
</li>
</ul>
</li>
<li>右值：在内存中没有占有内存地址的对象
<ul>
<li>返回不可改变的表达式或值，例如a+b是一个常量，函数运行结果是一个右值</li>
</ul>
</li>
</ul>
<p><strong>左值的示例</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>	
</span></span><span class="line"><span class="cl">	<span class="c1">// 声明变量a为int类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// a是一个左值，引用对象为int
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 左值a出现在右边的场景
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c1">// 非法，a是左值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="mi">9</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 左值，*p是指针，p就是值，*p+4是后面一个int类型的地址，是左值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 这里实际上是指针运算，p+0为自己，p存储指针 *p为值，那么a=10000,p=10000
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="o">*</span><span class="p">(</span><span class="n">p</span><span class="o">+</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span>   
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;%p</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;%p</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>右值的示例</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// 声明变量a b
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 非法，a+1为常量，不是左值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">a</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1">// 声明指针变量 p q
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="o">*</span><span class="n">q</span><span class="p">;</span> <span class="c1">// *p, *q 为左值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> 
</span></span><span class="line"><span class="cl"><span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 合法，左值可以赋值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> 
</span></span><span class="line"><span class="cl"><span class="c1">// 非法 - &#34;p + 2&#34; 是右值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">p</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">=</span> <span class="mi">18</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="n">q</span> <span class="o">=</span> <span class="n">p</span> <span class="o">+</span> <span class="mi">5</span><span class="p">;</span> <span class="c1">// &#34;p + 5&#34; 是右值，合法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> 
</span></span><span class="line"><span class="cl"><span class="c1">// 解引用表达式是左值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">*</span><span class="p">(</span><span class="n">p</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">=</span> <span class="mi">18</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span> <span class="c1">// 数组元素访问arr[12] = *(arr+12) 所以是左值有效
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> 
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">S</span> <span class="p">{</span> <span class="kt">int</span> <span class="n">m</span><span class="p">;</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">S</span> <span class="n">obj</span><span class="p">;</span> <span class="c1">// obj and obj.m are lvalues
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> 
</span></span><span class="line"><span class="cl"><span class="c1">// ptr-&gt; 等于  (*ptr).m 是左值有效
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>一元表达式需要有左值，当a是左值&amp;a才生效，12本身是一个右值，不能&amp;12</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span> <span class="c1">// a 和 *p都是左值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span> <span class="c1">// 合法，&amp;a是常量为右值，p是左值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">&amp;</span><span class="n">a</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span> <span class="c1">// 缺少左值，非法
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>三元表达式是一个右值（C++是左值）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="p">(</span>  <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="o">?</span> <span class="nl">y</span> <span class="p">:</span> <span class="n">x</span><span class="p">)</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// c无效，c++有效
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>左值 VS 右值</strong></p>
<ul>
<li>左值为内存中可识别的对象，右值为一个常量（广义上，不是const）</li>
<li>左值可以在左边和右边，右值必须在右边</li>
<li>右值必须有左值才生效</li>
<li>指针运算可左可右，变量运算是右值</li>
</ul>
<h4 id="arithmetic-supa-href66asup">arithmetic <sup><a href="#6">[6]</a></sup></h4>
<p>C语言中，指针支持四种算术运算符，吧地址当作数值进行算数运算</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>可以将值赋值给指针</td>
</tr>
<tr>
<td>+</td>
<td>从指针加整数值以指向不同的内存位置。</td>
</tr>
<tr>
<td>-</td>
<td>从指针中减去整数值以指向不同的内存位置</td>
</tr>
<tr>
<td>比较运算（==, !=, &lt;, &gt;, &lt;= , &gt;=）</td>
<td>仅比较两个指针地址，例如<br>pointer == NULL</td>
</tr>
<tr>
<td>++</td>
<td>指针使用递增运算符将向前位移一位</td>
</tr>
<tr>
<td>&ndash;</td>
<td>指针使用递减运算符将向后位移一位</td>
</tr>
</tbody>
</table>
<ul>
<li>当对指针变量进行递增和递减操作时，会改变指针变量本身所在地址空间</li>
<li>当对指针变量进行+-运算时，不会改变指针变量本身</li>
</ul>
<h3 id="指针数组-1">指针数组</h3>
<p>指针数组是指数组存储的内容是指针，即数组内所有的元素都是指针</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>	
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="o">*</span><span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>指针数组本质也是一个多级指针，例如一个2D数组每行(<em><strong>rows</strong></em>) 存储的值是一列(<em><strong>colums</strong></em>)的地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>	
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">a</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">10</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">b</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">20</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">c</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mi">30</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="o">*</span><span class="n">arr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="pointer-vs-array">Pointer VS Array</h3>
<ul>
<li>sizeof
<ul>
<li><code>sizeof(array)</code> 返回数组中所有元素占用内存的大小</li>
<li><code>sizeof(pointer)</code> 只返回指针变量本身用内存的大小</li>
</ul>
</li>
<li>&amp;运算符
<ul>
<li>数组名是 <code>&amp;array[0]</code> 的别名，返回数组中第一个元素的地址</li>
<li><code>&amp;pointer</code> 返回指针的地址</li>
</ul>
</li>
<li>指针变量可以赋值，而数组变量不可以</li>
<li>数组是收集了相同类型元素的集合，而指针是一个存储地址的变量</li>
</ul>
<h2 id="多级指针-supa-href77asup">多级指针 <sup><a href="#7">[7]</a></sup></h2>
<p>一个指针用于存储变量的地址，而另一个指针用于存储第一个指针的地址，这种指针被称为多级指针 (<em><strong>Multi-Pointer or Pointer to Pointer</strong></em>)</p>
<p>声明多级指针必须在指针变量名称前多家一个 ”*“</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="o">**</span><span class="n">p</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过示例更好的了解多级指针</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  
</span></span><span class="line"><span class="cl"><span class="c1">// C program to demonstrate pointer to pointer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">var</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="c1">// pointer for var
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="o">*</span><span class="n">ptr1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="c1">// double pointer for ptr2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="o">**</span><span class="n">ptr2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// third pointer for ptr2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="o">***</span><span class="n">ptr3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="c1">// storing address of var in ptr1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ptr1</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">var</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Storing address of ptr2 in ptr1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ptr2</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ptr1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Storing address of ptr3 in ptr2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">ptr3</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ptr2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">    <span class="c1">// Displaying value of var using
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// both single and double pointers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Value of var = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">var</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Value of var using single pointer = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">*</span><span class="n">ptr1</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Value of var using double pointer = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">**</span><span class="n">ptr2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;Value of var using third pointer = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span>  <span class="o">***</span><span class="n">ptr3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">  	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出结构</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">Value</span> <span class="n">of</span> <span class="n">var</span> <span class="o">=</span> <span class="mi">123</span>
</span></span><span class="line"><span class="cl"><span class="n">Value</span> <span class="n">of</span> <span class="n">var</span> <span class="n">using</span> <span class="n">single</span> <span class="n">pointer</span> <span class="o">=</span> <span class="mi">123</span>
</span></span><span class="line"><span class="cl"><span class="n">Value</span> <span class="n">of</span> <span class="n">var</span> <span class="n">using</span> <span class="kt">double</span> <span class="n">pointer</span> <span class="o">=</span> <span class="mi">123</span>
</span></span><span class="line"><span class="cl"><span class="n">Value</span> <span class="n">of</span> <span class="n">var</span> <span class="n">using</span> <span class="n">third</span> <span class="n">pointer</span> <span class="o">=</span> <span class="mi">123</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Note：</p>
<ul>
<li>多级指针，不能跨越定义，即二级指针必须拥有一级指针才可以</li>
<li>此时的 <code>*ptr</code>  可以是左值或右值
<ul>
<li>作为左值时，存储数据到该变量存储的地址空间内</li>
<li>作为右值时，取出该空间内的内容</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>  
</span></span><span class="line"><span class="cl"><span class="c1">// C program to demonstrate pointer to pointer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">var</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="c1">// pointer for var
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="o">*</span><span class="n">ptr1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="c1">// double pointer for ptr2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="o">**</span><span class="n">ptr2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// third pointer for ptr2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="o">***</span><span class="n">ptr3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="c1">// storing address of var in ptr1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ptr1</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">var</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Storing address of ptr2 in ptr1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ptr2</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ptr1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Storing address of ptr3 in ptr2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">ptr3</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ptr2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      
</span></span><span class="line"><span class="cl">    <span class="c1">// Displaying value of var using
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// both single and double pointers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="o">***</span><span class="n">ptr3</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;l-value test, the result of value = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">var</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;l-value test, the result of ptr1 = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span>  <span class="o">*</span><span class="n">ptr1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;l-value test, the result of ptr2 = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span>  <span class="o">**</span><span class="n">ptr2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;l-value test, the result of ptr3 = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span>  <span class="o">***</span><span class="n">ptr3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">var</span> <span class="o">=</span> <span class="p">(</span><span class="o">***</span><span class="n">ptr3</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;r-value test, the result of value = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">var</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出结果为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">l-value test, the result of <span class="nv">value</span> <span class="o">=</span> <span class="m">100</span>
</span></span><span class="line"><span class="cl">l-value test, the result of <span class="nv">ptr1</span> <span class="o">=</span> <span class="m">100</span>
</span></span><span class="line"><span class="cl">l-value test, the result of <span class="nv">ptr2</span> <span class="o">=</span> <span class="m">100</span>
</span></span><span class="line"><span class="cl">l-value test, the result of <span class="nv">ptr3</span> <span class="o">=</span> <span class="m">100</span>
</span></span><span class="line"><span class="cl">r-value test, the result of <span class="nv">value</span> <span class="o">=</span> <span class="m">101</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="指针和函数">指针和函数</h3>
<h3 id="指向普通数据类型的指针">指向普通数据类型的指针</h3>
<p>指针可以被当作函数参数传递，会改变原有的变量值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">n1</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">n2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">num1</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="n">num2</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// address of num1 and num2 is passed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">swap</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">num1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">num2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;num1 = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">num1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;num2 = %d&#34;</span><span class="p">,</span> <span class="n">num2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">n1</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">n2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span> <span class="o">=</span> <span class="o">*</span><span class="n">n1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">n1</span> <span class="o">=</span> <span class="o">*</span><span class="n">n2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">n2</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="指向函数的指针--supa-href88asup">指向函数的指针  <sup><a href="#8">[8]</a></sup></h3>
<p>C语言中，指针也可以被指向一个函数，下面代码是一个指向函数的指针</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1">// 定义一个无返回值的常规函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">fun</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Value of a is %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// fun_ptr是一个指针类型，他指向函数fun的地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">fun_ptr</span><span class="p">)(</span><span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">fun</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="cm">/* 也可以写为如下代码
</span></span></span><span class="line"><span class="cl"><span class="cm">       void (*fun_ptr)(int);
</span></span></span><span class="line"><span class="cl"><span class="cm">       fun_ptr = &amp;fun; 
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="c1">// 调用指向函数的指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">(</span><span class="o">*</span><span class="n">fun_ptr</span><span class="p">)(</span><span class="mi">10</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>声明指针函数函数的说明，通常情况下声明函数语法为 <code>int foo(int);</code>  则代表声明了一个foo函数，具有int类型参数和int类型的返回值，而在中间加一个 ”*&quot; 则可以表示一个指针函数的定义 <code>int * foo(int);</code> 这种类型是错误的。</p>
<p>因为在c语言中，<code>*</code> 的优先级要高于 <code>()</code>， 上面说到的情况则表示了声明一个foo函数，int类型的参数和 *int 类型的返回值。所以必须使用 () 改变其优先级</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">foo</span><span class="p">)(</span><span class="kt">int</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="函数指针数组">函数指针数组</h3>
<p>函数指针数组是指元素为函数指针的数组，有些特殊的地方是，定义时不能定义为数组指针，需要定义为函数指针，函数指针数组也可以替代switch</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">void</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Addition is %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">subtract</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Subtraction is %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="o">-</span><span class="n">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">multiply</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Multiplication is %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// fun_ptr_arr is an array of function pointers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">fun_ptr_arr</span><span class="p">[])(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="p">{</span><span class="n">add</span><span class="p">,</span> <span class="n">subtract</span><span class="p">,</span> <span class="n">multiply</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">ch</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">15</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter Choice: 0 for add, 1 for subtract and 2 &#34;</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;for multiply</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ch</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">ch</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="o">*</span><span class="n">fun_ptr_arr</span><span class="p">[</span><span class="n">ch</span><span class="p">])(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>关于函数指针的说明：</p>
<ul>
<li>普通指针指向的数据，函数指针指向的是代码</li>
<li>函数名代表函数的地址</li>
<li>函数去指不用加取址符 “&amp;”，函数指针变量调用不用加“ * ”</li>
<li>函数指针可以作为参数，也可以作为返回值</li>
</ul>
<h3 id="数组与函数">数组与函数</h3>
<ul>
<li><strong>数组作为参数时</strong>：数组作为函数参数传入时，传递不再是整个数组，而是数组的第一元素的地址，也就是指针，此时不能用size()获取数组的元素，获取到的时指针类型的大小。</li>
<li><strong>数组作为返回值时</strong>：不允许返回数组，返回的是数组第一个元素指针，sizeof() 查看的大小也是指针类型的大小</li>
</ul>
<h2 id="main函数的参数">main函数的参数</h2>
<p>在C语言中main()函数之前提供了一个函数 <code>_start()</code>，但通常情况下 main() 是作为程序执行的第一个函数。main() 函数提供了两个参数，<em><strong>argc</strong></em> 和 <em><strong>argv</strong></em> 。</p>
<ul>
<li><em><strong>argc</strong></em> 命令行传入的参数数量，int类型</li>
<li><em><strong>argv</strong></em> 命令行传入的实际参数，参数索引从1开始，0为程序本身名称
<ul>
<li>正常情况下声明main函数：<code> main(int argc, char *argv[])</code></li>
<li><code>**argv</code> 是 <code>*argv[]</code> 的另一种表现方式 <code>main(int argc, char **argv)</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>Notes：这里有一个比较难理解的地方就是二级指针作为形参来替换指针数组。</p>
<p>由于二级指针变量存放为一个一级指针的地址，而数组名本身是数组首元素的地址，其后的每一个元素都是指针就是将首元素指针传入。由于上面讲到数组作为参数传入时传入的是指针而不是数组本身。所以 *argv[] 与 **argv 是等价的。</p>
</blockquote>
<h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://www.geeksforgeeks.org/pointers-in-c-and-c-set-1-introduction-arithmetic-and-array/">c pointer</a></p>
<p><sup id="2">[2]</sup> <a href="https://www.guru99.com/c-pointers.html">pointer type</a></p>
<p><sup id="3">[3]</sup> <a href="https://www.javatpoint.com/const-pointer-in-c">const pointer</a></p>
<p><sup id="4">[4]</sup> <a href="https://www.freecodecamp.org/news/pointers-in-c-are-not-as-difficult-as-you-think/#1-what-exactly-are-pointers">pointer VS array</a></p>
<p><sup id="5">[5]</sup> <a href="https://www.geeksforgeeks.org/lvalue-and-rvalue-in-c-language/">lvalue VS rvlaue</a></p>
<p><sup id="6">[6]</sup> <a href="https://aticleworld.com/pointer-arithmetic/">pointer arithmetic</a></p>
<p><sup id="7">[7]</sup> <a href="https://www.geeksforgeeks.org/double-pointer-pointer-pointer-c/">pointer to pointer</a></p>
<p><sup id="8">[8]</sup> <a href="https://www.geeksforgeeks.org/function-pointer-in-c/">function pointer in c</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>ch06 内存布局</title>
      <link>https://www.oomkill.com/2022/09/ch06-memory-layout/</link>
      <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/09/ch06-memory-layout/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>在编写程序时包含任意指令如，已初始化和未初始化数据，局部变量，函数等都是用于动态分配内存的指令。当程序编译后（默认生成 <code>x.out</code> 文件）这是一个可执行的链接文件( <em><strong>Executable and linking format</strong></em>)。在执行时这些不组织成几部分，包含不同的内存分段 (<em><strong>segments</strong></em>)</p>
<blockquote>
<p>ELF：这是系统中标准二进制格式，其一些功能包含，动态链接，动态加载，对程序运行时控制。</p>
</blockquote>
<p>可以使用 <code>size {ELF_file}</code> 查看被分配的每个段的大小（Linux操作系统）；</p>
<ul>
<li><code>dec</code> 列给出的是这个程序 text + data + bss 段的总大小，用十进制表示</li>
<li><code>text</code> 段是存储可执行命令的段</li>
<li><code>data</code> 段包含所有初始化数据，全局与静态变量</li>
<li><code>BSS</code> 段包含未初始化数据</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ size <span class="m">1</span> 
</span></span><span class="line"><span class="cl">   text    data     bss     dec     hex filename
</span></span><span class="line"><span class="cl">   <span class="m">1843</span>     <span class="m">584</span>       <span class="m">8</span>    <span class="m">2435</span>     <span class="m">983</span> <span class="m">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="memory-layout-in-c-supa-href11asup">Memory Layout in C <sup><a href="#1">[1]</a></sup></h2>
<p>在C语言中内存布局模型包含六个部分</p>
<ul>
<li>命令行参数 (<em><strong>Command Line Arguments</strong></em>)</li>
<li>栈 (<em><strong>Stack</strong></em>)</li>
<li>堆 (<em><strong>Heap</strong></em>)</li>
<li>未初始化数据段 (<em><strong>Uninitialized Data Segment BSS</strong></em>)</li>
<li>已初始化数据段 (<em><strong>Initialized Data Segment</strong></em>)</li>
<li>文本/代码段 (<em><strong>Text/Code Segment</strong></em>)</li>
</ul>
<p>这6部分结构可以再划分为两种类型：</p>
<ul>
<li>静态内存结构 (<em><strong>Static Memory Layout</strong></em>)：包含代码段, 数据段</li>
<li>动态内存结构 (<em><strong>Dynamic Memory Layout</strong></em>)：包含栈, 堆</li>
</ul>
<p>通过Overview中可以看到可以执行文件包含一些段，而缺少一些段，这部分是由运行时构建出来的。</p>
<p>整个C程序的内存布局为下图所示</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/Memory-layout.png" alt="C程序的内存布局"  /></p>
<center>图：memory layout C</center>
<center><em>Source：</em>https://hackthedeveloper.com/memory-layout-c-program/</center><br>
<h2 id="静态内存布局">静态内存布局</h2>
<p>静态内存布局中，包含代码段(<em><strong>Code Segment</strong></em>)，数据段(<em><strong>Data Segment</strong></em>)；数据段中又分为已初始化段，通常称为数据分段(<em><strong>DS</strong></em>)，未初始化分段(<em><strong>BSS</strong></em>)。</p>
<h3 id="代码段">代码段</h3>
<p>代码段包含可执行的机器指令，这部分包含了程序的逻辑，为了防止堆, 栈的溢出，代码段在内存结构中处于布局中最下方。而且为了防止指令被修改，这部分是只读的。</p>
<ul>
<li>已编译二进制文件</li>
<li>只读段，防止程序被修改</li>
<li>可共享</li>
</ul>
<p>可以通过 <code>objdump -S &lt;file&gt;</code> 来导出代码段中存的汇编代码</p>
<h3 id="已初始化数据段">已初始化数据段</h3>
<p>所有已初始化的静态变量和全局变量都被存储在DS中，该段具有写权限，程序可以在运行时修改该段中变量的值。</p>
<p>定义一个C程序，通过size观看其data段的大小</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">char</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="sc">&#39;1&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>size输出为528</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="err">$</span> <span class="n">size</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">   <span class="n">text</span>    <span class="n">data</span>     <span class="n">bss</span>     <span class="n">dec</span>     <span class="n">hex</span> <span class="n">filename</span>
</span></span><span class="line"><span class="cl">   <span class="mi">1358</span>     <span class="mi">528</span>       <span class="mi">8</span>    <span class="mi">1894</span>     <span class="mi">766</span> <span class="mi">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过增加两个变量，一个全局变量一个静态变量，观看编译后可执行文件data段的大小与之前大小相比较</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// int 类型占4byte
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">char</span> <span class="n">b</span> <span class="o">=</span> <span class="sc">&#39;a&#39;</span><span class="p">;</span> 	  <span class="c1">// char 类型占1byte
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">char</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="sc">&#39;1&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>size查看data输出值为533 与之前 528 增加 5 bytes，与定义的类型相符合</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">size</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">   <span class="n">text</span>    <span class="n">data</span>     <span class="n">bss</span>     <span class="n">dec</span>     <span class="n">hex</span> <span class="n">filename</span>
</span></span><span class="line"><span class="cl">   <span class="mi">1358</span>     <span class="mi">533</span>       <span class="mi">3</span>    <span class="mi">1894</span>     <span class="mi">766</span> <span class="mi">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="未初始化数据段">未初始化数据段</h3>
<p>未初始化数据段包含如下内容</p>
<ul>
<li>未初始化的全局和静态变量</li>
<li>初始化为0或空指针的变量</li>
</ul>
<p>接着上述例子，添加两个变量，一个不初始化值，一个初始化为0</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">int</span> <span class="n">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">char</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="sc">&#39;1&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过 size 命令可以看出，这些都被分配到 BSS 部分</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="err">$</span> <span class="n">size</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">   <span class="n">text</span>    <span class="n">data</span>     <span class="n">bss</span>     <span class="n">dec</span>     <span class="n">hex</span> <span class="n">filename</span>
</span></span><span class="line"><span class="cl">   <span class="mi">1358</span>     <span class="mi">528</span>      <span class="mi">16</span>    <span class="mi">1902</span>     <span class="mi">76</span><span class="n">e</span> <span class="mi">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于初始化段与未初始化段和只读数据段 (<em><strong>.rodata</strong></em>) 都会被分配到数据段中</p>
<h2 id="动态内存布局">动态内存布局</h2>
<p>动态内存是指程序运行时创建的的内存</p>
<h3 id="heap">heap</h3>
<p>堆段是由BSS往上更高部分动态内存分配的段，heap段具有以下特点</p>
<ul>
<li>
<p>程序运行可以没有heap段</p>
</li>
<li>
<p>heap位于在BSS之上stack之下，与stack成反方向增长和减少</p>
</li>
<li>
<p>运行时分配内存</p>
</li>
<li>
<p>由函数 <code>malloc()</code> , <code>calloc()</code> , <code>free()</code> 等函数管理</p>
</li>
<li>
<p>heap段内存由进程中共享库和动态模块等共享内存</p>
</li>
</ul>
<p>heap对于stack来说，最大的特点就是没有自动的内存管理功能，所有内存的申请和销毁都是通过开发者自行定义的，C中的Glibc API 提供了申请和销毁heap内存的功能。</p>
<ul>
<li>函数 <code>malloc()</code> / <code>calloc()</code> 用户空间实现的库函数，用于申请heap内存，可用于windows/linux</li>
<li>函数 <code>free()</code> 释放由 <code>malloc()</code> / <code>calloc()</code> 申请的内存</li>
<li><code>brk()</code> / <code>sbrk()</code> 是linux下的系统调用，在内核空间实现的库函数</li>
</ul>
<p>下列代码为heap内存分配示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt; </span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">func</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="o">*</span><span class="n">aptr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Heap Memory Value = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">*</span><span class="n">ptr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Pointing in Stack = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">*</span><span class="n">aptr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">free</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">func</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>下图为上述代码的图形化布局，通过申明一个指针变量 *ptr 指向了通过函数 <code>malloc()</code> 申请的 heap内存</p>
<blockquote>
<p>Notes: heap变量的存储实际存储时在物理内存上，而heap,stack.. 都是虚拟内存中某个进程的地址空间，通过MMU将其转为物理地址进行读写。<sup><a href="#2">[2]</a></sup></p>
</blockquote>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/heap-layout.png" alt="堆内存布局"  /></p>
<center>图：heap layout of C</center>
<center><em>Source：</em>https://hackthedeveloper.com/memory-layout-c-program/</center><br>
<h3 id="stack">stack</h3>
<p>stack是与heap相邻的地区，并与heap以反方向增长，当遇到heap时表示可用内存耗尽。stack段具有如下特点：</p>
<ul>
<li>程序运行必须拥有的内存段</li>
<li>以先进先出 (<em><strong>LIFO</strong></em>) 的顺序添加和移除数据</li>
<li>包含以下内容
<ul>
<li>所有局部变量</li>
<li>函数参数（逆序）</li>
<li>函数调用的返回地址</li>
<li>基于指针的函数调用</li>
</ul>
</li>
<li>stack段自动分配和销毁内存，开发者无法控制stack段内存
<ul>
<li>当函数执行完函数局部变量会从stack中弹出释放，也就是局部变量的作用域范围</li>
</ul>
</li>
</ul>
<p>例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> 
</span></span><span class="line"><span class="cl"><span class="cpf">int sum(int a, int b)</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">float</span> <span class="n">avg</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="kt">float</span><span class="p">)</span><span class="n">s</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Average of %d, %d = %f</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">avg</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>下图是上述代码对于stack内存段执行时的说明，如图所示，整个如下：</p>
<ul>
<li>当main函数被执行时会被压入stack中</li>
<li>main函数会调用avg函数求平均值，此时avg被压入stack</li>
<li>avg执行sum函数，sum被压入stack</li>
<li>此时正在执行的帧时位于最顶层的，被称为基指针 (<em><strong>base pointer</strong></em>)</li>
<li>栈帧指向stack段顶部，存储stack最顶部地址</li>
<li>s是一个指针保存着sum的位置，即sum函数的结尾，依次类推</li>
</ul>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/Stack-Layout.png" alt="堆栈布局"  /></p>
<center>图：stack layout of C</center>
<center><em>Source：</em>https://hackthedeveloper.com/memory-layout-c-program/</center><br>
<h4 id="栈异常">栈异常</h4>
<p>栈异常常见异常情况有</p>
<ul>
<li>栈溢出 (<em><strong>Stack Overflow</strong></em>)：栈溢出是指超出stack的大小，例如很长的函数调用，造成该错误原因如下：
<ul>
<li>递归函数调用</li>
<li>大数据声明</li>
</ul>
</li>
<li>栈毁坏 (<em><strong>Stack Corruption</strong></em>)：是指stack段中的某些内存位置由于错误的编码而被无意访问，导致内存位置发生变化。由于数据毁坏位置发生在Stack段因此被称为 “<em><strong>Stack Corruption</strong></em>” <sup><a href="#4">[4]</a></sup></li>
</ul>
<p>例如下面代码模拟了一个 SC 异常</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">int</span> <span class="nf">copy</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>   
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">strcpy</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">copy</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Exit</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出结果为：可以看到当char大小大于10，会覆盖其他stack位置，使程序无法继续执行从而输出“Exit”。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ gcc .<span class="se">\1</span>.c -o 1.exe
</span></span><span class="line"><span class="cl">$ .<span class="se">\1</span>.exe testargs
</span></span><span class="line"><span class="cl">Exit
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ .<span class="se">\1</span>.exe testargs000000000000000000
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="stack-vs-heap-supa-href33asup">Stack VS Heap <sup><a href="#3">[3]</a></sup></h3>
<ul>
<li>Stack与Heap都存储与RAM中</li>
<li>Stack自动管理内存，而Heap则需要手动申请和取消</li>
<li>Stack分配速度快（一段程序启动时预先分配好的连续内存），而Heap分配速度较慢（动态分配的非连续内存）</li>
<li>Stack在使用是会出现溢出问题，而Heap可以分配大数据</li>
<li>Stack常见错误为内存溢出，Heap常见错误为内存泄漏</li>
</ul>
<p><em><strong>Stack</strong></em> 和 <em><strong>Heap</strong></em> 的一些常见问题</p>
<ul>
<li>默认Stack大小为多少：Linux中通过 <code>ulimit -s</code> 可以查看</li>
<li>默认的Heap大小为多少：没有默认的Heap大小，在32位操作系统中，每个进程可以看到连续的4GB空间，这个空间没有被映射到物理地址中，而是根据使用情况进行映射，在64位操作系统中，这个空间会更大</li>
<li><strong>stack和heap存放在哪里</strong>？：在虚拟内存中，通过MMU进行映射到物理地址上</li>
<li><strong>如何手动配置heap</strong>？：可以使用 <code>ulimit -v</code> 设置虚拟内存的大小</li>
</ul>
<h2 id="函数调用栈">函数调用栈</h2>
<p>函数调用与栈有不可密切的关系，在一个函数调用过程所需要的信息一般包括以下几个方面：</p>
<ul>
<li>函数返回地址</li>
<li>函数参数</li>
<li>变量</li>
<li>保存的上下文 ：包括在函数调用前后需要保持不变的寄存器。</li>
</ul>
<p>当在调用一个函数时，控制流从调用函数转移到被调用函数。如下列代码在运行时产生了如下几项疑问：</p>
<ul>
<li>函数参数和用于调用函数的变量的区别</li>
<li>为什么具有多个相同名称但位于不同函数中的变量可以共存？</li>
<li>为什么函数doing有一定的限制？</li>
<li>为什么未初始化的局部变量可能包含任何值？</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt; </span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">mogrify</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">a</span><span class="o">*</span><span class="mi">4</span> <span class="o">-</span> <span class="n">b</span> <span class="o">/</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">tmp</span><span class="p">;</span>                <span class="c1">// (mogrify函数返回值)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">double</span> <span class="nf">truly_half</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">double</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">x</span> <span class="o">/</span> <span class="mf">2.0</span><span class="p">;</span>                   
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">tmp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">7</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">17</span><span class="p">;</span>    
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">mog</span> <span class="o">=</span> <span class="n">mogrify</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">y</span><span class="p">);</span>              <span class="c1">// 调用mogrify
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Done with mogrify</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">double</span> <span class="n">x</span> <span class="o">=</span> <span class="n">truly_half</span><span class="p">(</span><span class="n">y</span><span class="p">);</span>            <span class="c1">// 调用truly_half
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Done with truly_half</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">a</span> <span class="o">=</span> <span class="n">mogrify</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">mog</span><span class="p">);</span>                  <span class="c1">// 第二次调用mogrify
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Results: %d %lf</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">mog</span><span class="p">,</span><span class="n">x</span><span class="p">);</span>   <span class="c1">// (last_print)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>                            <span class="c1">// (main函数返回)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">lila <span class="o">[</span>stack-demo-code<span class="o">]</span>% gcc simple_calls.c
</span></span><span class="line"><span class="cl">lila <span class="o">[</span>stack-demo-code<span class="o">]</span>% ./a.out
</span></span><span class="line"><span class="cl">Done with mogrify
</span></span><span class="line"><span class="cl">Done with truly_half
</span></span><span class="line"><span class="cl">Results: <span class="m">23</span> 8.500000
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="栈行为-supa-href44asup">栈行为 <sup><a href="#4">[4]</a></sup></h3>
<ul>
<li>
<p><strong>main函数的调用</strong></p>
<p>上述代码调用stack发生的变化，程序从第一行的 main() 函数开始。 main() 有 3 个局部变量：a,y 是int，x 是double。栈的初始状态如下表（其中地址栏为虚构地址）</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>Line</th>
<th>Var</th>
<th>Value</th>
<th>Addr</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>main()</td>
<td>12行开始</td>
<td>a</td>
<td>?</td>
<td>1024</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>y</td>
<td>?</td>
<td>1028</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>mod</td>
<td>?</td>
<td>1032</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>x</td>
<td>?</td>
<td>1036</td>
<td></td>
</tr>
</tbody>
</table>
  <center>表1</center><br>
</li>
<li>
<p><strong>main函数的第一行被执行</strong></p>
<p>在运行 main（从第 12 行开始）时，会为所有局部变量分配了栈空间，但没有定义值（随机被初始化）在向下移动时，为局部变量a,y 定义了值。</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>Line</th>
<th>Var</th>
<th>Value</th>
<th>Addr</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>main()</td>
<td>13行</td>
<td>a</td>
<td>7</td>
<td>1024</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>y</td>
<td>17</td>
<td>1028</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>mod</td>
<td>?</td>
<td>1032</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>x</td>
<td>?</td>
<td>1036</td>
<td></td>
</tr>
</tbody>
</table>
  <center>表2</center><br>
</li>
<li>
<p><strong>mogrify()被调用</strong>
在第13行时产生一个函数调用，main函数被暂停，至函数 mogrify 完成。函数调用使一个栈push到调用栈，如下表所示。</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>Line</th>
<th>Var</th>
<th>Value</th>
<th>Addr</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>main()</td>
<td>13行</td>
<td>a</td>
<td>7</td>
<td>1024</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>y</td>
<td>17</td>
<td>1028</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>mod</td>
<td>?</td>
<td>1032</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>x</td>
<td>?</td>
<td>1036</td>
<td></td>
</tr>
<tr>
<td>mogrify()</td>
<td>4行</td>
<td>a</td>
<td>7</td>
<td>1044</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>b</td>
<td>17</td>
<td>1048</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>tmp</td>
<td>?</td>
<td>1052</td>
<td></td>
</tr>
</tbody>
</table>
  <center>表3</center><br>
</li>
<li>
<p><strong>mogrify()第一行被执行</strong>
此时从 mogrify 的第一行开始，完成后返回至 main 函数，将在第 13 行继续执行。表3中由于没有执行到tmp，所以还没被分配值。</p>
<p>表4是 完成mogrify 函数执行，局部变量 tmp 被赋值。</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>Line</th>
<th>Var</th>
<th>Value</th>
<th>Addr</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>main()</td>
<td>13行</td>
<td>a</td>
<td>7</td>
<td>1024</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>y</td>
<td>17</td>
<td>1028</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>mod</td>
<td>?</td>
<td>1032</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>x</td>
<td>?</td>
<td>1036</td>
<td></td>
</tr>
<tr>
<td>mogrify()</td>
<td>5行</td>
<td>a</td>
<td>7</td>
<td>1044</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>b</td>
<td>17</td>
<td>1048</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>tmp</td>
<td>23</td>
<td>1052</td>
<td></td>
</tr>
</tbody>
</table>
  <center>表4</center><br>
</li>
<li>
<p><strong>mogrify()函数返回</strong></p>
<p>mogrify函数返回在这里有两个作用：</p>
<ul>
<li>返回值被存储在调用函数位置：main函数 （第 13 行）变量 mog 中。</li>
<li>弹出栈帧，从调用堆栈中移除。</li>
</ul>
<p>此时状态为表5</p>
<table>
<thead>
<tr>
<th>Method</th>
<th>Line</th>
<th>Var</th>
<th>Value</th>
<th>Addr</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>main()</td>
<td>14</td>
<td>a</td>
<td>7</td>
<td>1024</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>y</td>
<td>17</td>
<td>1028</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>mod</td>
<td>23</td>
<td>1032</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>x</td>
<td>?</td>
<td>1036</td>
<td></td>
</tr>
</tbody>
</table>
  <center>表5</center><br>
</li>
<li>
<p><strong>执行Printf()</strong></p>
<table>
<thead>
<tr>
<th>Method</th>
<th>Line</th>
<th>Var</th>
<th>Value</th>
<th>Addr</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>main()</td>
<td>13行</td>
<td>a</td>
<td>7</td>
<td>1024</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>y</td>
<td>17</td>
<td>1028</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>mod</td>
<td>?</td>
<td>1032</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td>x</td>
<td>?</td>
<td>1036</td>
<td></td>
</tr>
<tr>
<td>printf()</td>
<td>lib call</td>
<td>format</td>
<td>?</td>
<td>1044</td>
<td>pointer</td>
</tr>
</tbody>
</table>
  <center>表6</center><br>
<p>printf()也是作为函数，将另一个栈帧推入栈中，并为其参数和局部变量预留空间。 printf()是一个可变参数的函数。</p>
</li>
<li>
<p><strong>第二次函数调用</strong></p>
<p>从第 16 行起，调用了函数 <code>truly_half</code> 此时会将一个栈帧推入调用栈。此时状态如表5相同</p>
</li>
<li>
<p><strong>调用函数truly_half()</strong></p>
<p>当函数 <code>truly_half()</code> 被调用，对应的栈帧被push到main的栈帧下，表7中所示的地址（局部变量）与之前 <code>mogrify()</code> 函数是相同的地址，这是因为栈中的空间是可重用的。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Method</th>
<th style="text-align:center">Line</th>
<th style="text-align:center">Var</th>
<th style="text-align:center">Value</th>
<th style="text-align:center">Addr</th>
<th style="text-align:center">Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">main()</td>
<td style="text-align:center">16</td>
<td style="text-align:center">a</td>
<td style="text-align:center">7</td>
<td style="text-align:center">1024</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">y</td>
<td style="text-align:center">17</td>
<td style="text-align:center">1028</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">mog</td>
<td style="text-align:center">23</td>
<td style="text-align:center">1032</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">x</td>
<td style="text-align:center">?</td>
<td style="text-align:center">1036</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><code>truly_half()</code></td>
<td style="text-align:center">8</td>
<td style="text-align:center">x</td>
<td style="text-align:center">17</td>
<td style="text-align:center">1044</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">tmp</td>
<td style="text-align:center">?</td>
<td style="text-align:center">1048</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
  <center>表7</center><br>
</li>
<li>
<p><strong>truly_half()被执行</strong></p>
<p>执行 <code>truly_half</code> 函数的第二行返回计算后的值来赋值给 main 中的局部变量 x，并从调用栈中弹出 <code>truly_half</code> 的栈帧，如表8所示</p>
<table>
<thead>
<tr>
<th style="text-align:center">Method</th>
<th style="text-align:center">Line</th>
<th style="text-align:center">Var</th>
<th style="text-align:center">Value</th>
<th style="text-align:center">Addr</th>
<th style="text-align:center">Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">main()</td>
<td style="text-align:center">16</td>
<td style="text-align:center">a</td>
<td style="text-align:center">7</td>
<td style="text-align:center">1024</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">y</td>
<td style="text-align:center">17</td>
<td style="text-align:center">1028</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">mog</td>
<td style="text-align:center">23</td>
<td style="text-align:center">1032</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">x</td>
<td style="text-align:center">?</td>
<td style="text-align:center">1036</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"><code>truly_half()</code></td>
<td style="text-align:center">9</td>
<td style="text-align:center">x</td>
<td style="text-align:center">17</td>
<td style="text-align:center">1044</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">tmp</td>
<td style="text-align:center">8.5</td>
<td style="text-align:center">1048</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
  <center>表8</center><br>
</li>
<li>
<p><strong>返回main函数控制流</strong></p>
<p>main函数中会打印这个值，此时内存结构为表8所示</p>
<table>
<thead>
<tr>
<th style="text-align:center">Method</th>
<th style="text-align:center">Line</th>
<th style="text-align:center">Var</th>
<th style="text-align:center">Value</th>
<th style="text-align:center">Addr</th>
<th style="text-align:center">Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">main()</td>
<td style="text-align:center">17</td>
<td style="text-align:center">a</td>
<td style="text-align:center">7</td>
<td style="text-align:center">1024</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">y</td>
<td style="text-align:center">17</td>
<td style="text-align:center">1028</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">mog</td>
<td style="text-align:center">23</td>
<td style="text-align:center">1032</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">x</td>
<td style="text-align:center">8.5</td>
<td style="text-align:center">1036</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<center>表9</center><br>
</li>
<li>
<p><strong>再次调用函数mogrify()</strong></p>
<p>此时，main函数在第19行暂停，在 <code>mogrify()</code> 第一行开始。</p>
<p>需要注意的一点是 <code>mogrify()</code> 参数类型是int，这里会强制转换 8 字节double 为一个 4 字节的int，小数点被省去。如表10所示</p>
<table>
<thead>
<tr>
<th style="text-align:center">Method</th>
<th style="text-align:center">Line</th>
<th style="text-align:center">Var</th>
<th style="text-align:center">Value</th>
<th style="text-align:center">Addr</th>
<th style="text-align:center">Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">main()</td>
<td style="text-align:center">19</td>
<td style="text-align:center">a</td>
<td style="text-align:center">7</td>
<td style="text-align:center">1024</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">y</td>
<td style="text-align:center">17</td>
<td style="text-align:center">1028</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">mog</td>
<td style="text-align:center">23</td>
<td style="text-align:center">1032</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">x</td>
<td style="text-align:center">8.5</td>
<td style="text-align:center">1036</td>
<td style="text-align:center">double</td>
</tr>
<tr>
<td style="text-align:center">mogrify()</td>
<td style="text-align:center">4</td>
<td style="text-align:center">a</td>
<td style="text-align:center">8</td>
<td style="text-align:center">1044</td>
<td style="text-align:center">convert to int</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">b</td>
<td style="text-align:center">23</td>
<td style="text-align:center">1048</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">tmp</td>
<td style="text-align:center">?</td>
<td style="text-align:center">1052</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
  <center>表10</center><br>
</li>
<li>
<p><strong>mogrify()被执行后</strong>：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Method</th>
<th style="text-align:center">Line</th>
<th style="text-align:center">Var</th>
<th style="text-align:center">Value</th>
<th style="text-align:center">Addr</th>
<th style="text-align:center">Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">main()</td>
<td style="text-align:center">19</td>
<td style="text-align:center">a</td>
<td style="text-align:center">7</td>
<td style="text-align:center">1024</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">y</td>
<td style="text-align:center">17</td>
<td style="text-align:center">1028</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">mog</td>
<td style="text-align:center">23</td>
<td style="text-align:center">1032</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">x</td>
<td style="text-align:center">8.5</td>
<td style="text-align:center">1036</td>
<td style="text-align:center">double</td>
</tr>
<tr>
<td style="text-align:center">mogrify()</td>
<td style="text-align:center">5</td>
<td style="text-align:center">a</td>
<td style="text-align:center">8</td>
<td style="text-align:center">1044</td>
<td style="text-align:center">convert to int</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">b</td>
<td style="text-align:center">23</td>
<td style="text-align:center">1048</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">tmp</td>
<td style="text-align:center">25</td>
<td style="text-align:center">1052</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
  <center>表11</center><br>
</li>
<li>
<p><strong>mogrify()被执行后</strong>：
<code>mogrify()</code> 执行完成后将结果分配给 main 函数中的局部变量 a 并弹出栈帧。此时数据如表12所示</p>
<table>
<thead>
<tr>
<th style="text-align:center">Method</th>
<th style="text-align:center">Line</th>
<th style="text-align:center">Var</th>
<th style="text-align:center">Value</th>
<th style="text-align:center">Addr</th>
<th style="text-align:center">Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">main()</td>
<td style="text-align:center">19</td>
<td style="text-align:center">a</td>
<td style="text-align:center">25</td>
<td style="text-align:center">1024</td>
<td style="text-align:center">a的值被覆盖</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">y</td>
<td style="text-align:center">17</td>
<td style="text-align:center">1028</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">mog</td>
<td style="text-align:center">23</td>
<td style="text-align:center">1032</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center">x</td>
<td style="text-align:center">8.5</td>
<td style="text-align:center">1036</td>
<td style="text-align:center">double</td>
</tr>
</tbody>
</table>
  <center>表12</center><br>
</li>
</ul>
<p>至此返回最开始的部分，一个函数的过程包含四个部分 (<em><strong>function call stack</strong></em>)</p>
<ul>
<li>函数调用栈</li>
<li>动态分配内存区域 (heap)</li>
<li>存储全局变量的区域</li>
<li>程序允许的实际代码(data text)</li>
</ul>
<p>栈帧(<em><strong>stack frame</strong></em>) 指的是：栈内存中单个函数调用（正在允许的函数）的一部分内存块，（参数和局部变量）。编译器在编译期间确定函数的栈帧大小。栈上的栈帧通常与尚未返回的函数一样多。</p>
<p>栈行为：</p>
<ul>
<li><strong>pushing</strong> ：当函数被调用时，新的帧被推到调用堆栈的 “顶部”。</li>
<li><strong>popping</strong>：当函数执行完成，会将控制权返回给调用它的函数。并将函数关联的帧从栈顶部弹出。</li>
</ul>
<p>溢出：如果在返回之前调用了太多函数（例如递归），程序可能会耗尽栈空间。</p>
<h3 id="关于栈的总结">关于栈的总结</h3>
<h4 id="c语言的执行模型">C语言的执行模型</h4>
<ul>
<li>C 语言是过程式编程，不支持在函数之外编写代码</li>
<li>C 语言的执行模型是指函数调用工作原理（函数调用栈行为分析的）及函数工作原理。</li>
<li>C 语言使用 ”栈“ 数据结构来实现函数与函数调用。</li>
</ul>
<h4 id="关于函数调用栈">关于函数调用栈</h4>
<ul>
<li>
<p>函数调用栈是动态数据结构，用于参数传递、局部变量分配、保存调用的返回地址、保存寄存器以供恢复。</p>
</li>
<li>
<p>栈向下增长，从较高的地址开始，向较低的地址。</p>
</li>
<li>
<p>Push 将栈帧添加到栈，Pop从栈中弹出</p>
</li>
<li>
<p>栈帧的增长在x86架构下是4字节：</p>
<ul>
<li>假设栈指位于1000，此时push一个函数，则该栈指指向996(1000 - 4)</li>
<li>假设此时弹出函数，那么会从996处从栈中弹出，并递增并指向地址1000</li>
</ul>
</li>
</ul>
<h3 id="调用惯例-supa-href66asup">调用惯例 <sup><a href="#6">[6]</a></sup></h3>
<p>调用惯例 (<em><strong>Calling Conventions</strong></em>) 是指函数调用的标准化方法，当在函数调用时例如，如何将参数传递给子程序？子程序可以覆盖寄存器中的值，还是调用者希望保留寄存器内容？子程序中的局部变量应该存储在哪里？函数应该如何返回结果？</p>
<p>C语言中调用惯例在很大程度上使用了基于硬件支持栈。对C中调用惯例的理解就需要对函数执行模型的理解（应确保完全理解 push、pop、call 和 ret 指令的行为）。在此调用约定中，子程序参数在stack上传递。寄存器保存在stack上，子程序使用的局部变量放在stack上的内存中。</p>
<ul>
<li>
<p>cdecl (<em><strong>c declaration</strong></em>)：C/C++默认调用约定，调用时按照从右向左的参数入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">push</span> <span class="n">arg3</span>  <span class="p">;</span> <span class="n">rightmost</span> <span class="n">argument</span>
</span></span><span class="line"><span class="cl"><span class="n">push</span> <span class="n">arg2</span>
</span></span><span class="line"><span class="cl"><span class="n">push</span> <span class="n">arg1</span>  <span class="p">;</span> <span class="n">leftmost</span> <span class="n">argument</span>
</span></span><span class="line"><span class="cl"><span class="n">call</span> <span class="n">f</span>
</span></span><span class="line"><span class="cl"><span class="n">add</span> <span class="n">esp</span><span class="p">,</span> <span class="mi">12</span>  <span class="p">;</span> <span class="mi">12</span> <span class="o">=</span> <span class="mi">3</span> <span class="n">arguments</span> <span class="n">each</span> <span class="n">being</span> <span class="mi">4</span> <span class="n">bytes</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>fastcall：通过寄存器传递值（从右到左）</p>
</li>
<li>
<p>thiscall：指针类型被存储在寄存器 <code>ecx</code> ，其他类型放置堆栈</p>
</li>
</ul>
<h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="http://webcache.googleusercontent.com/search?q=cache:Nk6EgMoO494J:https://hackthedeveloper.com/memory-layout-c-program/&amp;hl=zh-CN&amp;strip=0&amp;vwsrc=0">memory layout c program</a></p>
<p><sup id="2">[2]</sup> <a href="https://stackoverflow.com/questions/32418750/stack-and-heap-locations-in-ram">stack and heap locations in ram</a></p>
<p><sup id="3">[3]</sup> <a href="https://stackoverflow.com/questions/79923/what-and-where-are-the-stack-and-heap?page=1&amp;tab=scoredesc#tab-top">what and where are the stack and heap</a></p>
<p><sup id="4">[4]</sup> <a href="https://www.go4expert.com/articles/understanding-stack-corruption-c-t27207/">understanding stack corruption c</a></p>
<p><sup id="5">[5]</sup> <a href="https://cs.gmu.edu/~kauffman/cs222/stack-demo.html">static</a></p>
<p><sup id="6">[6]</sup> <a href="https://renenyffenegger.ch/notes/development/languages/C-C-plus-plus/calling-convention">calling convention</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>ch07 复合类型</title>
      <link>https://www.oomkill.com/2022/09/ch07-composite-type/</link>
      <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/09/ch07-composite-type/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>C语言中复合类型 (<em><strong>composite type</strong></em>) 是指用户自定义类型，通常由多种元素组成的类型，其元素被紧密存储在内存中。C语言常见的复合类型有：</p>
<ul>
<li>数组</li>
<li>字符串</li>
<li>结构体</li>
<li>联合类型</li>
</ul>
<h2 id="结构体-supa-href11asup">结构体 <sup><a href="#1">[1]</a></sup></h2>
<p>结构体 (<em><strong>structure</strong></em>) 是指用户定义的数据类型，允许将不同类型的多个元素组合在一起，来创建出更复杂的数据类型，类似于数组，但又区别于数组，数组只能保存同类型的元素，而结构体可以保存不同类型的元素。</p>
<h3 id="定义">定义</h3>
<p>声明结构体的语法如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"> <span class="k">struct</span> <span class="n">structureName</span>
</span></span><span class="line"><span class="cl"> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="n">dataType</span> <span class="n">memberVariable1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="n">datatype</span> <span class="n">memberVariable2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="p">...</span>
</span></span><span class="line"><span class="cl"> <span class="p">}</span> <span class="n">variable01</span><span class="p">,</span> <span class="n">variable02</span><span class="p">...;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里需要注意的一些地方：</p>
<ul>
<li>struct是关键字，structureName定义的新数据类型，variable{}是作为使用 <em><strong>structureName</strong></em> 声明的新变量名</li>
<li>每个成员方法结尾都是 “;&quot; 而不是逗号 ”,&quot;</li>
<li>结构体不能递归</li>
<li>变量可以有多个</li>
</ul>
<p>例如声明一个学生的结构体，而student是作为一个新的数据类型存在</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">student</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">roll</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">gender</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Notes：在定义（创建）结构体变量前，结构体成员不会占用内存</p>
</blockquote>
<h3 id="声明">声明</h3>
<p>使用结构体声明变量</p>
<p>也可以一次性定义结构体和声明变量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">student</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">roll</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">gender</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">stu1</span><span class="p">,</span><span class="n">stu2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 结构体名称可以省略
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">struct</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">roll</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">gender</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">stu1</span><span class="p">,</span><span class="n">stu2</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="赋值">赋值</h3>
<p>在声明结构体后，student结构体只是自定义数据结构，要使用还需要进行初始化，或者赋值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">stu1</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#34;zhangsan&#34;</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>或者</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">stu1.name=&#34;zhangsan&#34;;
</span></span></code></pre></td></tr></table>
</div>
</div><p>或者</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">Student</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">25</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">age</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">branch</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">gender</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="n">stu1</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#34;zhangsan&#34;</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">0</span><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>或者使用不同顺序进行初始化</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">stu1</span> <span class="o">=</span> <span class="p">{.</span><span class="n">age</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="p">.</span><span class="n">gender</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="p">.</span><span class="n">name</span><span class="o">=</span><span class="s">&#34;zhangsan&#34;</span><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>也可以仅初始化部分成员，未初始化的成员应该按顺序在后位</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">stu1</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#34;zhangsan&#34;</span><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="访问">访问</h3>
<p>访问结构体可以使用符号 ”.“ 来访问，成员名称==.==成员属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">#include&lt;string.h&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">struct Student
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">    char name[25];
</span></span><span class="line"><span class="cl">    int age;
</span></span><span class="line"><span class="cl">    char branch[10];
</span></span><span class="line"><span class="cl">    char gender;
</span></span><span class="line"><span class="cl">};
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">int main()
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">    struct Student s1;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    s1.age = 18;
</span></span><span class="line"><span class="cl">    strcpy(s1.name, &#34;Viraaj&#34;);
</span></span><span class="line"><span class="cl">    printf(&#34;Name of Student 1: %s\n&#34;, s1.name);
</span></span><span class="line"><span class="cl">    printf(&#34;Age of Student 1: %d\n&#34;, s1.age);
</span></span><span class="line"><span class="cl">    return 0;
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>也可以使用scanf() 赋值</p>
<h3 id="结构体运算">结构体运算</h3>
<p>结构体不能够执行算术运算符 <em><strong>+, -, x, ÷</strong></em> ，关系运算符 <em><strong>&lt; &gt; &lt;= &gt;=</strong></em>, 等式运算符，但是可以在两个相同结构体变量的场景下进行赋值运算。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"> <span class="cm">/* 无效的操作 */</span>
</span></span><span class="line"><span class="cl"><span class="n">st1</span> <span class="o">+</span> <span class="n">st2</span>
</span></span><span class="line"><span class="cl"><span class="n">st1</span> <span class="o">-</span> <span class="n">st2</span>
</span></span><span class="line"><span class="cl"><span class="n">st1</span> <span class="o">==</span> <span class="n">st2</span>
</span></span><span class="line"><span class="cl"><span class="n">st1</span> <span class="o">!=</span> <span class="n">st2</span> <span class="n">etc</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="cm">/* 在相同类型下的结构体，操作是有效的 */</span>
</span></span><span class="line"><span class="cl"><span class="n">st1</span> <span class="o">=</span> <span class="n">st2</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>因为C语言没有提供比较运算，所以没法进行结构体比较，需要自行比较结构体成员来比较结构体是否一样</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"> <span class="k">struct</span> <span class="n">student</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="kt">double</span> <span class="n">roll</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">char</span> <span class="n">gender</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">marks</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="n">st1</span><span class="p">,</span><span class="n">st2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">student</span> <span class="n">st1</span><span class="o">=</span> <span class="p">{</span> <span class="s">&#34;Alex&#34;</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="sc">&#39;M&#39;</span><span class="p">,</span> <span class="p">{</span><span class="mi">76</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">92</span><span class="p">}};</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">student</span> <span class="n">st2</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&#34;Max&#34;</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="sc">&#39;M&#39;</span><span class="p">,</span> <span class="p">{</span><span class="mi">87</span><span class="p">,</span> <span class="mi">84</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">78</span><span class="p">}};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">strcmp</span><span class="p">(</span><span class="n">st1</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="n">st2</span><span class="p">.</span><span class="n">name</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">st1</span><span class="p">.</span><span class="n">roll</span> <span class="o">==</span> <span class="n">st2</span><span class="p">.</span><span class="n">roll</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Both are the records of the same student.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Different records, different students.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     <span class="cm">/* Copiying the structure variable */</span>
</span></span><span class="line"><span class="cl">    <span class="n">st2</span> <span class="o">=</span> <span class="n">st1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="n">strcmp</span><span class="p">(</span><span class="n">st1</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="n">st2</span><span class="p">.</span><span class="n">name</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">st1</span><span class="p">.</span><span class="n">roll</span> <span class="o">==</span> <span class="n">st2</span><span class="p">.</span><span class="n">roll</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">Both are the records of the same student.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">Different records, different students.</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出结果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">Different</span> <span class="n">records</span><span class="p">,</span> <span class="n">different</span> <span class="n">students</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Both</span> <span class="n">are</span> <span class="n">the</span> <span class="n">records</span> <span class="n">of</span> <span class="n">the</span> <span class="n">same</span> <span class="n">student</span><span class="p">.</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="结构体数组">结构体数组</h3>
<p>结构体数组是指数组元素是结构体，例如下面声明一个类型为student的数组</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">student</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">double</span> <span class="n">roll</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">gender</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">marks</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">student</span> <span class="n">stu</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>初始化和访问可以通过循环进行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter name:</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter roll:</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">roll</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter gender:</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">scanf</span><span class="p">(</span><span class="s">&#34; %c&#34;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">gender</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter marks of %dth subject:</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">j</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">marks</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">-------------------</span><span class="se">\n\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* Finding the average marks and printing it */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">float</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">sum</span> <span class="o">+=</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">marks</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Name: %s</span><span class="se">\n</span><span class="s">Average Marks = %.2f</span><span class="se">\n\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">name</span><span class="p">,</span> <span class="n">sum</span> <span class="o">/</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">marks</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">marks</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>将代码整合为一起</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">struct</span> <span class="n">student</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">double</span> <span class="n">roll</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">gender</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">marks</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">student</span> <span class="n">stu</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter name:</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter roll:</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">roll</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter gender:</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">scanf</span><span class="p">(</span><span class="s">&#34; %c&#34;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">gender</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter marks of %dth subject:</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">j</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">marks</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">-------------------</span><span class="se">\n\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* Finding the average marks and printing it */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">float</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">sum</span> <span class="o">+=</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">marks</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Name: %s</span><span class="se">\n</span><span class="s">Average Marks = %.2f</span><span class="se">\n\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">name</span><span class="p">,</span> <span class="n">sum</span> <span class="o">/</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">marks</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">stu</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">marks</span><span class="p">[</span><span class="mi">0</span><span class="p">])));</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="结构体嵌套结构体">结构体嵌套结构体</h3>
<p>嵌套结构体表示，结构体的成员是另外一个结构体</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">date</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">date</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">month</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">year</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">student</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">roll</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">gender</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">marks</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">date</span> <span class="n">birthday</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>其定义语法为：<code>struct &lt;other struct&gt; &lt;member_name&gt;;</code> 这里 <code>birthday</code> 是名为data类型结构体</p>
<blockquote>
<p>Notes：结构体内部不能嵌套自己</p>
</blockquote>
<p>访问嵌套结构体和正常结构体访问一样使用符号，成员名称==.==成员属性==.==成员属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">stu1</span><span class="p">.</span><span class="n">birthday</span><span class="p">.</span><span class="n">date</span>
</span></span><span class="line"><span class="cl"><span class="n">stu1</span><span class="p">.</span><span class="n">birthday</span><span class="p">.</span><span class="n">month</span>
</span></span><span class="line"><span class="cl"><span class="n">stu1</span><span class="p">.</span><span class="n">birthday</span><span class="p">.</span><span class="n">year</span>
</span></span><span class="line"><span class="cl"><span class="n">stu1</span><span class="p">.</span><span class="n">name</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="结构体内存分配">结构体内存分配</h3>
<p>结构体声明后是不占用内存，只有被初始化后才占用内存，结构体内每个成员会被分配到连续的内存内，sizeof()的大小是每个元素所占用的大小。</p>
<p>示例代码为一个student的结构体，有四个成员，name为20 bytes的字符串，roll是4字节的int类型，gender是1字节的char，marks为5个元素的数组，那么这个结构体的总大小应该为 $20+4+1+5\times4$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">student</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">roll</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">gender</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">marks</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">stu1</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>将上述代码整合为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Sum of the size of members = %I64d bytes</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">stu1</span><span class="p">.</span><span class="n">name</span><span class="p">)</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">stu1</span><span class="p">.</span><span class="n">roll</span><span class="p">)</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">stu1</span><span class="p">.</span><span class="n">gender</span><span class="p">)</span> <span class="o">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">stu1</span><span class="p">.</span><span class="n">marks</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Using sizeof() operator = %I64d bytes</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">stu1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 输出结果为
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Sum</span> <span class="n">of</span> <span class="n">the</span> <span class="n">size</span> <span class="n">of</span> <span class="n">members</span> <span class="o">=</span> <span class="mi">45</span> <span class="n">bytes</span>
</span></span><span class="line"><span class="cl"><span class="n">Using</span> <span class="k">sizeof</span><span class="p">()</span> <span class="n">operator</span> <span class="o">=</span> <span class="mi">48</span> <span class="n">bytes</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到两个结果并不相等，可以看出实际被多分配了3个字节，需要知道为什么被多分配需要先打印他们的地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">struct</span> <span class="n">student</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">roll</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">gender</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">marks</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">stu1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Address of member name = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">stu1</span><span class="p">.</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Address of member roll = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">stu1</span><span class="p">.</span><span class="n">roll</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Address of member gender = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">stu1</span><span class="p">.</span><span class="n">gender</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Address of member marks = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">stu1</span><span class="p">.</span><span class="n">marks</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出结果为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Address of member <span class="nv">name</span> <span class="o">=</span> <span class="m">4225408</span>
</span></span><span class="line"><span class="cl">Address of member <span class="nv">roll</span> <span class="o">=</span> <span class="m">4225428</span>
</span></span><span class="line"><span class="cl">Address of member <span class="nv">gender</span> <span class="o">=</span> <span class="m">4225432</span>
</span></span><span class="line"><span class="cl">Address of member <span class="nv">marks</span> <span class="o">=</span> <span class="m">4225436</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到char类型占用一个字节，而接下来的成员 marks 却是从4225436开始的，而不是4225433。这就需要引入下面的概念数据对齐 (<em><strong>Data alignment</strong></em>)</p>
<h4 id="数据对齐">数据对齐</h4>
<p>数据对齐是指处理器在数据对齐时访问效率最高，这将代表了数据存储在内存中的大小的倍数。而现代计算机字长通常为4 字节（32 位操作胸痛）或 8 字节（64 位操作系统）的字长。</p>
<p>对于一个int类型的变量，占用的资产时4字节，此时符合处理器读取机制，因为符合计算机字长长度。而作为char类型，占用一个字节。如果不做数据对齐操作，就会出现如下图出现的问题，数据在存储时读取的字长永远是多一个步骤的。</p>
<p>下图是一个错位的数据，粉红代表char类型，蓝色代表short类型，绿色代表int类型，如果不进行对齐，再继续存储int时，在读取数据时一个字长位移都将不足以读取一个int类型，这就需要进行两次数据访问才能读取一个int类型，也就是花费了两倍的时间</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220930234237287.png" alt="image-20220930234237287"  /></p>
<center>图：Misaligned memory</center>
<center><em>Source：</em>https://hps.vi4io.org/_media/teaching/wintersemester_2013_2014/epc-14-haase-svenhendrik-alignmentinc-paper.pdf</center><br>
<p>出于上述原因才有了数据对齐的概念，下图所示的对齐模式被称为自然对齐 (<em><strong>naturally aligned</strong></em>)</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220930234625752.png" alt="image-20220930234625752"  /></p>
<center>图：Properly aligned memory using padding</center>
<center><em>Source：</em>https://hps.vi4io.org/_media/teaching/wintersemester_2013_2014/epc-14-haase-svenhendrik-alignmentinc-paper.pdf</center><br>
<h4 id="内容填充">内容填充</h4>
<p>在对齐时所插入的额外字节数的部分被称为填充 (<em><strong>padding</strong></em>)，在上图中，黑色部分为填充的部分，而在上述代码示例中所填充的部分为3字节，而4225433位的内存地址存储int类型（marks[0]的地址）不是4的倍数。</p>
<p>下表说明了需要对其的数据类型规则</p>
<table>
<thead>
<tr>
<th style="text-align:left">数据类型</th>
<th style="text-align:left">占字节数大小</th>
<th style="text-align:left">地址倍数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">char</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1的倍数</td>
</tr>
<tr>
<td style="text-align:left">short</td>
<td style="text-align:left">2</td>
<td style="text-align:left">2的倍数</td>
</tr>
<tr>
<td style="text-align:left">int, float</td>
<td style="text-align:left">4</td>
<td style="text-align:left">4的倍数</td>
</tr>
<tr>
<td style="text-align:left">double, long, *(pointer)</td>
<td style="text-align:left">8</td>
<td style="text-align:left">8的倍数</td>
</tr>
<tr>
<td style="text-align:left">long double</td>
<td style="text-align:left">16</td>
<td style="text-align:left">16的倍数</td>
</tr>
</tbody>
</table>
<p>另外一个示例，应该是多少？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">struct</span> <span class="n">student</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">double</span> <span class="n">d1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">c1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">stu1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>   
</span></span><span class="line"><span class="cl">    <span class="c1">// long long int a, b, c;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// a = 1, b = 30000000000009, c = 5; 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// %I64d是微软风格的%lld，为了避免大于4字节的类型被省略，而输出异常，兼容%d
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// printf(&#34;%I64d %I64d %I64d\n&#34;, a, b, c);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// rintf(&#34;%d %d %d\n&#34;, a, b, c);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;size = %I64d bytes</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">stu1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>由于 <code>i1</code> 为int类型4字节，<code>d1</code> 为 double类型8字节，<code>c1</code> 为char类型1字节 ，那么 $4+8+1=13$ 被填充后应该是16字节，那么看下输出结果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">size = 24 bytes
</span></span></code></pre></td></tr></table>
</div>
</div><p>实际上在C语言中结构体的数据类型对齐不是这么计算的，实际上结构体数据对齐条件是根据结构体内最大的元素进行调整 <sup><a href="#2">[2]</a></sup>，例如这里最大元素为8，那么对齐标准就是补足8字节  <code>i1</code> 需要补4，<code>c1</code> 需要补7</p>
<p>通过调整结构体顺序可以减少填充的大小，例如下列代码，其实际大小为1 byte + 8 bytes + 1 bytes = 10 bytes，而实际大小为24bytes，因为double将影响填充的大小</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">struct Foo {
</span></span><span class="line"><span class="cl">    char x; // 1 byte
</span></span><span class="line"><span class="cl">    double y // 8 bytes
</span></span><span class="line"><span class="cl">    char z; // 1 bytes
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p>而通过按照类型的由小到大的顺序进行定义成员，可以减少填充的次数与大小，这样1+1+(6)+8=16</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">struct Foo {
</span></span><span class="line"><span class="cl">    char x; // 1 byte
</span></span><span class="line"><span class="cl">    char z; // 1 bytes
</span></span><span class="line"><span class="cl">    double y // 8 bytes
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p>为此得出的结论为，对结构体成员重新排序可以提高内存效率</p>
<h4 id="数据打包">数据打包</h4>
<p>数据打包 (<em><strong>Packing</strong></em>) 是指强制编译器不进行数据填充，与数据填充是相反的作用</p>
<p>在windows上使用宏定义 <code>#pragma pack(1)</code> 来指定对齐方式，也可以使用 <code>__attribute__((packed)) </code> 指定一个结构体补进行填充。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1">// #pragma pack(1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">struct</span> <span class="n">student</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">double</span> <span class="n">d1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">c1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">stu1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">Foo</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">x</span><span class="p">;</span> <span class="c1">// 1 byte
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">char</span> <span class="n">z</span><span class="p">;</span> <span class="c1">// 1 bytes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">double</span> <span class="n">y</span> <span class="c1">// 8 bytes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="n">__attribute__</span><span class="p">((</span><span class="n">packed</span><span class="p">))</span> <span class="n">f1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>   
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;size = %I64d bytes</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">stu1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;size = %I64d bytes</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">f1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出结果为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">size</span> <span class="o">=</span> <span class="m">24</span> bytes
</span></span><span class="line"><span class="cl"><span class="nv">size</span> <span class="o">=</span> <span class="m">10</span> bytes
</span></span></code></pre></td></tr></table>
</div>
</div><p>还可以指定特定的大小进行填充，例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1">// #pragma pack(1)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">struct</span> <span class="n">student</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">double</span> <span class="n">d1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">c1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">stu1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">Foo</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">x</span><span class="p">;</span> <span class="c1">// 1 byte
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">char</span> <span class="n">z</span><span class="p">;</span> <span class="c1">// 1 bytes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">double</span> <span class="n">y</span> <span class="c1">// 8 bytes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="n">__attribute__</span><span class="p">((</span><span class="n">packed</span><span class="p">,</span> <span class="n">aligned</span><span class="p">(</span><span class="mi">4</span><span class="p">)))</span> <span class="n">f1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>   
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;size = %I64d bytes</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">stu1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;size = %I64d bytes</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">f1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出结果为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">size</span> <span class="o">=</span> <span class="mi">24</span> <span class="n">bytes</span>
</span></span><span class="line"><span class="cl"><span class="n">size</span> <span class="o">=</span> <span class="mi">12</span> <span class="n">bytes</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="指针结构体">指针结构体</h3>
<p>这里包含指针作为结构体成员和指针指向结构体</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">struct</span> <span class="n">student</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="o">*</span><span class="n">roll</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">gender</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">marks</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">alexRoll</span> <span class="o">=</span> <span class="mi">44</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">student</span> <span class="n">stu1</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&#34;Alex&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">alexRoll</span><span class="p">,</span> <span class="sc">&#39;M&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">92</span> <span class="p">}};</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="n">stu2</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">stu1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;stu1 Name is %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">stu1</span><span class="p">.</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// 无效的访问
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// printf(&#34;stu1 roll is %s\n&#34;, stu1.(*roll)); 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">    <span class="c1">// 错误的访问，输出的地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;stu1 roll is %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">stu1</span><span class="p">.</span><span class="n">roll</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// 正确的访问方式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;stu1 roll is %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="n">stu1</span><span class="p">.</span><span class="n">roll</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// 访问指针结构体成员的方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;stu2 Name is %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">stu2</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;stu2 Name is %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="p">(</span><span class="o">*</span><span class="n">stu2</span><span class="p">).</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>总结：</p>
<ul>
<li>
<p><code>.</code> 运算符优先于 <code>*</code> 运算符，需要加括号改变优先级</p>
</li>
<li>
<p>如果成员属性是指针类型，访问其内容应先解引用成员 <code>*(stu1.roll)</code></p>
</li>
<li>
<p>如果指针是结构体需要解引用结构体 <code>(*stu2).name</code></p>
</li>
<li>
<p>指针类型访问成员的特殊方法为 <code>-&gt;</code></p>
</li>
</ul>
<h3 id="结构体数组-1">结构体数组</h3>
<p>结构体也可以作为数组的形式，每个数组元素为一个结构体。作为数组结构体时，指针类型需要解引用或者使用 <code>-&gt;</code> 来访问。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">struct</span> <span class="n">student</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="o">*</span><span class="n">roll</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">gender</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">marks</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">alexRoll</span> <span class="o">=</span> <span class="mi">44</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">student</span> <span class="n">stu1</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&#34;Alex&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">alexRoll</span><span class="p">,</span> <span class="sc">&#39;M&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">92</span> <span class="p">}};</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">student</span> <span class="n">stu</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="n">stuPtr</span> <span class="o">=</span> <span class="n">stu</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">student</span> <span class="p">(</span><span class="o">*</span><span class="n">stuPtr</span><span class="p">)[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">stu</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;name %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">stuPtr</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;name %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="p">(</span><span class="o">*</span><span class="n">stuPtr</span><span class="p">)[</span><span class="mi">10</span><span class="p">].</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>   
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="结构体函数">结构体函数</h3>
<p>在C语言中，函数不能作为结构体成员，但是函数指针可以，使用 <code>.</code> 可以调用指针函数成员</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">struct</span> <span class="n">example</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">ptrMessage</span><span class="p">)(</span><span class="kt">int</span> <span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">message</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">message</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello, I&#39;m a member of a structure. This structure also has an integer with value %d&#34;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">example</span> <span class="n">eg1</span> <span class="o">=</span> <span class="p">{</span><span class="mi">6</span><span class="p">,</span> <span class="n">message</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">eg1</span><span class="p">.</span><span class="n">ptrMessage</span><span class="p">(</span><span class="n">eg1</span><span class="p">.</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="结构体作为函数参数">结构体作为函数参数</h3>
<p>当函数参数过多时，传递大量参数效率很低，可以将结构体作为参数传递给函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">struct</span> <span class="n">student</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">roll</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">gender</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">marks</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">display</span><span class="p">(</span><span class="k">struct</span> <span class="n">student</span> <span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Name: %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Roll: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">roll</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Gender: %c</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">gender</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Marks in %dth subject: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">a</span><span class="p">.</span><span class="n">marks</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">student</span> <span class="n">stu1</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#34;Alex&#34;</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="sc">&#39;M&#39;</span><span class="p">,</span> <span class="p">{</span><span class="mi">76</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">}};</span>
</span></span><span class="line"><span class="cl">    <span class="n">display</span><span class="p">(</span><span class="n">stu1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果结构体比较复杂，传递副本参数效率不高，也可以传递指针结构体作为函数参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">struct</span> <span class="n">student</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">roll</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">gender</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">marks</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">display</span><span class="p">(</span><span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Name: %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Roll: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="o">-&gt;</span><span class="n">roll</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Gender: %c</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">a</span><span class="o">-&gt;</span><span class="n">gender</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Marks in %dth subject: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">marks</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">student</span> <span class="n">stu1</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#34;Alex&#34;</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="sc">&#39;M&#39;</span><span class="p">,</span> <span class="p">{</span><span class="mi">76</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">}};</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="n">stuPtr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">stu1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">display</span><span class="p">(</span><span class="n">stuPtr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="结构体作为函数返回值">结构体作为函数返回值</h3>
<p>结构体可以作为函数的返回值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">struct</span> <span class="n">student</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">roll</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">gender</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">marks</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">student</span> <span class="nf">increaseBy5</span><span class="p">(</span><span class="k">struct</span> <span class="n">student</span> <span class="n">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">marks</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="mi">5</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">p</span><span class="p">.</span><span class="n">marks</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+=</span><span class="mi">5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">student</span> <span class="n">stu1</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#34;Alex&#34;</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="sc">&#39;M&#39;</span><span class="p">,</span> <span class="p">{</span><span class="mi">76</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">}};</span>
</span></span><span class="line"><span class="cl">    <span class="n">stu1</span> <span class="o">=</span> <span class="n">increaseBy5</span><span class="p">(</span><span class="n">stu1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Name: %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">stu1</span><span class="p">.</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Roll: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">stu1</span><span class="p">.</span><span class="n">roll</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Gender: %c</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">stu1</span><span class="p">.</span><span class="n">gender</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Marks in %dth subject: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">stu1</span><span class="p">.</span><span class="n">marks</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>当然如果结构体交复杂，也可以用结构体指针作为返回值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">struct</span> <span class="n">student</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">roll</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">gender</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">marks</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">student</span><span class="o">*</span> <span class="nf">increaseBy5</span><span class="p">(</span><span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>   
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">marks</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="mi">5</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">p</span><span class="o">-&gt;</span><span class="n">marks</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+=</span><span class="mi">5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>	
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">student</span> <span class="n">stu1</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#34;Alex&#34;</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="sc">&#39;M&#39;</span><span class="p">,</span> <span class="p">{</span><span class="mi">76</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">93</span><span class="p">}};</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="n">stuptr</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">student</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">student</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">stuptr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">stu1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">stuptr</span> <span class="o">=</span> <span class="n">increaseBy5</span><span class="p">(</span><span class="n">stuptr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Name: %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">stuptr</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Roll: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">stuptr</span><span class="o">-&gt;</span><span class="n">roll</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Gender: %c</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">stuptr</span><span class="o">-&gt;</span><span class="n">gender</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Marks in %dth subject: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">stuptr</span><span class="o">-&gt;</span><span class="n">marks</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="typedef">typedef</h3>
<p><em><strong>typedef</strong></em> 是C语言中的关键字，功能是为现有数据类型分配别名，例如为long类型声明一个别名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">long</span> <span class="n">int64</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>也可以在结构体中使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">struct</span> <span class="n">employee</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">salary</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">emp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">employee1</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">salary</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="n">emp1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>	
</span></span><span class="line"><span class="cl">    <span class="c1">// 不使用typedef定义的结构体,在使用时需要加关键字struct
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">struct</span> <span class="n">employee</span> <span class="n">e1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">e1</span><span class="p">.</span><span class="n">salary</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">e1</span><span class="p">.</span><span class="n">name</span><span class="o">=</span><span class="s">&#34;zhangsan&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 使用typedef定义结构体,在使用时，可以直接使用结构体名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">emp1</span> <span class="n">e2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">e2</span><span class="p">.</span><span class="n">salary</span><span class="o">=</span><span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">e2</span><span class="p">.</span><span class="n">name</span><span class="o">=</span><span class="s">&#34;lisi&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;name1: %s</span><span class="se">\n</span><span class="s">&#34;</span> <span class="p">,</span><span class="n">e1</span><span class="p">.</span><span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;salary1: %d</span><span class="se">\n</span><span class="s">&#34;</span> <span class="p">,</span><span class="n">e1</span><span class="p">.</span><span class="n">salary</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;name2: %d</span><span class="se">\n</span><span class="s">&#34;</span> <span class="p">,</span><span class="o">*</span><span class="p">(</span><span class="n">e2</span><span class="p">.</span><span class="n">name</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;salary2: %d</span><span class="se">\n</span><span class="s">&#34;</span> <span class="p">,</span><span class="n">e2</span><span class="p">.</span><span class="n">salary</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>typedef主要功能：</p>
<ul>
<li>
<p>别名，简化结构体类型struct关键字</p>
</li>
<li>
<p>区分数据类型</p>
<ul>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl">  <span class="kt">char</span> <span class="o">*</span> <span class="n">p1</span><span class="p">,</span><span class="n">p2</span><span class="p">;</span> <span class="c1">// 声明两个变量 p1为char指针类型，p2为char类型
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl">  <span class="k">typedef</span> <span class="kt">char</span><span class="o">*</span> <span class="n">charPtr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">charPtr</span> <span class="n">p1</span><span class="p">,</span><span class="n">p2</span><span class="p">;</span> <span class="c1">// 声明两个变量为char*类型
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>提高代码的可移植性</p>
<ul>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl">  <span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">int64</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">  <span class="k">typedef</span> <span class="kt">long</span> <span class="kt">long</span> <span class="n">int32</span><span class="p">;</span> <span class="c1">// 在大量别名情况下无需每个替换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">int64</span> <span class="n">a</span><span class="o">=</span><span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">int64</span> <span class="n">b</span><span class="o">=</span><span class="mi">20</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
<h2 id="union">union</h2>
<p>union是类似于结构体的一种用户自定义类型，与结构体最大的区别是，结构体是存储一系列元素的联合体，而union是多个成员，仅有一个元素能被存储。</p>
<h3 id="定义-1">定义</h3>
<p>定义union语法：</p>
<ul>
<li><strong>union</strong> &lt;<em>attr-spec-seq</em>(optional)&gt; &lt;<em>name</em>(optional)&gt; <strong>{</strong> <em>struct-declaration-list</em> <strong>}</strong> &lt;union var,&hellip;&gt;</li>
<li><strong>union</strong> &lt;<em>attr-spec-seq</em>(optional)&gt; <em>name</em></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">union</span> <span class="n">car</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">50</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">price</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>定义union不会被分配内存，如果要分配内存则需要创建变量使用它</p>
<h3 id="访问-1">访问</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">union</span> <span class="n">Job</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kt">float</span> <span class="n">salary</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="kt">int</span> <span class="n">workerNo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="n">j</span><span class="p">.</span><span class="n">salary</span> <span class="o">=</span> <span class="mf">12.3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="c1">// 当对j.workerNo成员分配了值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// j.salary持有的12.3将不再拥有
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="n">j</span><span class="p">.</span><span class="n">workerNo</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Salary = %.1f</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">j</span><span class="p">.</span><span class="n">salary</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Number of workers = %d&#34;</span><span class="p">,</span> <span class="n">j</span><span class="p">.</span><span class="n">workerNo</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>总结</p>
<ul>
<li>union是用户自定义的数据类型</li>
<li>union中成员都是相同的内存地址</li>
<li>union保存的内容仅为最近一次赋值的元素的值（哪个元素被赋值，哪个元素被激活）</li>
<li>union大小为其占用空间最大的那个成员</li>
</ul>
<h2 id="enum">enum</h2>
<p>枚举(<em><strong>enumeration</strong></em>)是C语言中特殊的数据类型，通常是包含具有共同性数据的集合，例如性别，男，女</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">enum</span> <span class="n">gender</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">MALE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">FEMALE</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="声明-1">声明</h3>
<p>常用的有两种方式来使用枚举类型</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">enum</span> <span class="n">textEditor</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">BOLD</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">ITALIC</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">UNDERLINE</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">feature</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>与</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">enum</span> <span class="n">textEditor</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">BOLD</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">ITALIC</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">UNDERLINE</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">enum</span> <span class="n">textEditor</span> <span class="n">feature</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="赋值-1">赋值</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">enum</span> <span class="n">textEditor</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">BOLD</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">ITALIC</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">UNDERLINE</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">feature</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Initializing enum variable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">enum</span> <span class="n">textEditor</span> <span class="n">feature</span> <span class="o">=</span> <span class="n">BOLD</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Selected feature is %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">feature</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Initializing enum with integer equivalent
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">feature</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Selected feature is %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">feature</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>总结：</p>
<ul>
<li>枚举是整数常量类型</li>
<li>枚举包含的元素即为对应变量可以拥有的值</li>
<li>因为是整数常量，可以转换为char，bool等</li>
<li>枚举的元素结尾是逗号，最后一个元素没有符号；结构体的元素结尾为分号</li>
</ul>
<h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://www.freecodecamp.org/news/structured-data-types-in-c-explained">structured data types in c explained</a></p>
<p><sup id="2">[2]</sup> <a href="https://hps.vi4io.org/_media/teaching/wintersemester_2013_2014/epc-14-haase-svenhendrik-alignmentinc-paper.pdf">Alignment in C</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>ch08 文件处理</title>
      <link>https://www.oomkill.com/2022/09/ch08-file-handling/</link>
      <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/09/ch08-file-handling/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="文件类型">文件类型</h2>
<p>文件是指以字节的形式存储的数据源，使用C语言将文件数据以输出输出的形式处理叫做文件处理。</p>
<p>文件在C语言中以两种形式存在：</p>
<ul>
<li>文本文件：文本文件是简单的文件类型，这些文件内容以 ASCII 字符格式存储信息。</li>
<li>二进制文件：二进制文件以 0 和 1 的二进制格式存储数据，不是人类可读的文件</li>
</ul>
<h2 id="文件指针">文件指针</h2>
<p>文件指针 (<code>FILE</code>) 是一种数据类型，是被定义在 <code>stdio.h</code> 中的一种结构体，包含了文件的一些信息</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// fill/empty level of buffer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span>    <span class="n">level</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// File status flags
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">unsigned</span> <span class="n">flags</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// File descripter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">char</span> <span class="n">fd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ungetc char if no buffer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">hold</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// buffer size
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">bsize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// data transfer buffer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buffer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Current active pointer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">curp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Temporary file indicator
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">unsigned</span> <span class="n">istemp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Used for validity checking
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">short</span> <span class="n">token</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">FILE</span><span class="p">;</span> <span class="c1">// This is FILE object    
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>文件指针通常被用于处理正在访问的文件，<code>fopen()</code> 是用于打开文件并返回文件的 FILE 指针，而后通过文件只恨进行I/O操作。<code>fopen()</code> 会发生下列事件：</p>
<ul>
<li>文件的内容被加载到缓冲区（操作系统层面）</li>
<li>在内存中创建 FILE 的数据结构体，并返回这个结构体指针</li>
</ul>
<h2 id="文件处理函数">文件处理函数</h2>
<table>
<thead>
<tr>
<th>函数</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>fopen()</td>
<td>打开现有文件或新文件</td>
</tr>
<tr>
<td>fprintf()</td>
<td>将数据写入打开的文件</td>
</tr>
<tr>
<td>fscanf()</td>
<td>读取文件中数据</td>
</tr>
<tr>
<td>fputc()</td>
<td>向文件写入一个字符</td>
</tr>
<tr>
<td>fgetc()</td>
<td>从文件中读取一个字符</td>
</tr>
<tr>
<td>fclose()</td>
<td>关闭打开的文件</td>
</tr>
<tr>
<td>fseek()</td>
<td>设置文件指针的位置</td>
</tr>
<tr>
<td>fputw()</td>
<td>将一个整数写入到文件</td>
</tr>
<tr>
<td>fgetw()</td>
<td>从文件中读取一个整数</td>
</tr>
<tr>
<td>ftell()</td>
<td>文件指针的当前位置</td>
</tr>
<tr>
<td>rewind()</td>
<td>设置文件指针位置为初始位置</td>
</tr>
<tr>
<td>fread()</td>
<td>读取文件内容（二进制与文本）</td>
</tr>
<tr>
<td>fwrite()</td>
<td>向文件写入内容（二进制与文本）</td>
</tr>
<tr>
<td>feof()</td>
<td>是否到达文件结尾<br>非0 True 到达文件结尾<br>0 False 没有到达文件结尾</td>
</tr>
</tbody>
</table>
<h3 id="fscanf-vs-fgets">fscanf VS fgets</h3>
<ul>
<li>fscanf读取的是字符，fgets读取的是字符串</li>
<li>fgets读取换行符结束，fscanf读取到空白就结束，不用换行符</li>
<li>fgets以行为单位，fscanf以字符为单位（参数2匹配的模式）</li>
<li>fscanf每次会判断是否匹配，如不匹配则提前退出读取</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>	
</span></span><span class="line"><span class="cl">    <span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">fp</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&#34;./k8s restart.txt&#34;</span><span class="p">,</span> <span class="s">&#34;r&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">fp</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Error! opening file&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span> <span class="n">feof</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;i=%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1">// fscanf(fp, &#34;%s&#34;, &amp;buf);
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">fgets</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="mi">1024</span><span class="p">,</span> <span class="n">fp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">buf</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="文件的打开模式">文件的打开模式</h3>
<table>
<thead>
<tr>
<th>模式</th>
<th>含义</th>
<th>当文件不存在时处理方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>只读方式打开文件</td>
<td>当文件路径不存在时fopen()返回NULL</td>
</tr>
<tr>
<td>rb</td>
<td>以只读方式打开二进制文件</td>
<td>当文件路径不存在时fopen()返回NULL</td>
</tr>
<tr>
<td>w</td>
<td>写入方式</td>
<td>如果文件存在则覆盖，如果不存在则创建新文件</td>
</tr>
<tr>
<td>wb</td>
<td>写入方式（二进制模式）</td>
<td>如果文件存在则覆盖，如果不存在则创建新文件</td>
</tr>
<tr>
<td>a</td>
<td>打开文件并向结尾追加内容</td>
<td>如果文件路径不存在则创建新文件</td>
</tr>
<tr>
<td>ab</td>
<td>打开文件并向结尾追加内容（二进制模式）</td>
<td>如果文件路径不存在则创建新文件</td>
</tr>
<tr>
<td>r+</td>
<td>读写方式打开文件</td>
<td>当文件路径不存在时fopen()返回NULL</td>
</tr>
<tr>
<td>rb+</td>
<td>读写方式打开文件（二进制模式）</td>
<td>当文件路径不存在时fopen()返回NULL</td>
</tr>
<tr>
<td>w+</td>
<td>读写方式打开文件</td>
<td>如果文件存在则覆盖，如果不存在则创建新文件</td>
</tr>
<tr>
<td>wb+</td>
<td>读写方式打开文件（二进制模式）</td>
<td>如果文件存在则覆盖，如果不存在则创建新文件</td>
</tr>
<tr>
<td>a+</td>
<td>追加和读取</td>
<td>如果文件路径不存在则创建新文件</td>
</tr>
<tr>
<td>ab+</td>
<td>追加和读取（二进制模式）</td>
<td>如果文件路径不存在则创建新文件</td>
</tr>
</tbody>
</table>
<h2 id="文件操作的步骤">文件操作的步骤</h2>
<ol>
<li>
<p>打开文件 <code>fopen()</code> （ FILE *Pointer）</p>
</li>
<li>
<p>读写文件 <code>fputc</code> , <code>fgetc</code>, <code>fputs</code>, <code>fgets</code>, <code>fread</code>, <code>fwrite</code> &hellip;.</p>
</li>
<li>
<p>关闭文件 fclose()</p>
</li>
</ol>
<h3 id="打开文件">打开文件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">FILE</span> <span class="o">*</span> <span class="n">ptr</span>
</span></span><span class="line"><span class="cl"><span class="n">ptr</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&#34;file dir&#34;</span><span class="p">,</span><span class="s">&#34;mode&#34;</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">fopen</span><span class="p">(</span><span class="s">&#34;/etc/hosts&#34;</span><span class="p">,</span><span class="s">&#34;rb&#34;</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="关闭文件">关闭文件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">fclose</span><span class="p">(</span><span class="n">fptr</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="读写文件">读/写文件</h3>
<p>向文本文件中写入数据</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="n">FILE</span> <span class="o">*</span><span class="n">fptr</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">   <span class="n">fptr</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&#34;~/1.txt&#34;</span><span class="p">,</span><span class="s">&#34;w&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span><span class="p">(</span><span class="n">fptr</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Error!&#34;</span><span class="p">);</span>   
</span></span><span class="line"><span class="cl">      <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>             
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Enter num: &#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d&#34;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   
</span></span><span class="line"><span class="cl">   <span class="n">fputc</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">fptr</span><span class="p">);</span> <span class="c1">// fputc向文件写入数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="n">fputs</span><span class="p">(</span><span class="s">&#34;fputs向文件写入数据</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">fptr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="n">fprintf</span><span class="p">(</span><span class="n">fptr</span><span class="p">,</span> <span class="s">&#34;fprintf向文件写入数据</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="n">fclose</span><span class="p">(</span><span class="n">fptr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>从文本文件中读取内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="n">FILE</span> <span class="o">*</span><span class="n">fptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="p">((</span><span class="n">fptr</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&#34;~/1.txt&#34;</span><span class="p">,</span><span class="s">&#34;r&#34;</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">       <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Error! opening file&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">       <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="n">fscanf</span><span class="p">(</span><span class="n">fptr</span><span class="p">,</span><span class="s">&#34;%d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Value of n=%d&#34;</span><span class="p">,</span> <span class="n">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="n">fclose</span><span class="p">(</span><span class="n">fptr</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="写入二进制文件">写入二进制文件</h3>
<p>二进制文件的读取使用，<code>fwrite()</code>/<code>fread()</code>函数，通常情况下二进制文件读取没有意义，只是做类似文件拷贝的操作。</p>
<p><code>fwrite(addressData, sizeData, numbersData, pointerToFile);</code></p>
<ul>
<li>addressData：写入磁盘的数据的地址</li>
<li>sizeData：要写入磁盘的数据大小</li>
<li>numbersData：写出的数据个数</li>
<li>pointerToFile：FILE指针</li>
<li>return：
<ul>
<li>成功：参数3的大小</li>
<li>失败：0</li>
</ul>
</li>
</ul>
<blockquote>
<p>Notes：通常参数2为1，参数3为写入的总大小。 参2 * 参3 = 写入的总大小</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">threeNum</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kt">int</span> <span class="n">n1</span><span class="p">,</span> <span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="k">struct</span> <span class="n">threeNum</span> <span class="n">num</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="n">FILE</span> <span class="o">*</span><span class="n">fptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="p">((</span><span class="n">fptr</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&#34;C:</span><span class="se">\\</span><span class="s">program.bin&#34;</span><span class="p">,</span><span class="s">&#34;wb&#34;</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">       <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Error! opening file&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       <span class="c1">// Program exits if the file pointer returns NULL.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">for</span><span class="p">(</span><span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="o">++</span><span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">num</span><span class="p">.</span><span class="n">n1</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">num</span><span class="p">.</span><span class="n">n2</span> <span class="o">=</span> <span class="mi">5</span><span class="o">*</span><span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">num</span><span class="p">.</span><span class="n">n3</span> <span class="o">=</span> <span class="mi">5</span><span class="o">*</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">fwrite</span><span class="p">(</span><span class="o">&amp;</span><span class="n">num</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">threeNum</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">fptr</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="n">fclose</span><span class="p">(</span><span class="n">fptr</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="从二进制文件读取数据">从二进制文件读取数据</h3>
<p><code>fread(addressData, sizeData, numbersData, pointerToFile);</code>：</p>
<ul>
<li>addressData：读取到的数据存储的位置</li>
<li>sizeData：一次读取的字节数</li>
<li>numbersData：读取次数</li>
<li>pointerToFile：文件指针</li>
<li>return：
<ul>
<li>成功：参数3的大小</li>
<li>失败：0</li>
<li>到达文件结尾：feof(fp)为真</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">threeNum</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kt">int</span> <span class="n">n1</span><span class="p">,</span> <span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="k">struct</span> <span class="n">threeNum</span> <span class="n">num</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="n">FILE</span> <span class="o">*</span><span class="n">fptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="p">((</span><span class="n">fptr</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&#34;C:</span><span class="se">\\</span><span class="s">program.bin&#34;</span><span class="p">,</span><span class="s">&#34;rb&#34;</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">       <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Error! opening file&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       <span class="c1">// Program exits if the file pointer returns NULL.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">for</span><span class="p">(</span><span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="o">++</span><span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">fread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">num</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">threeNum</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">fptr</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">      <span class="n">printf</span><span class="p">(</span><span class="s">&#34;n1: %d</span><span class="se">\t</span><span class="s">n2: %d</span><span class="se">\t</span><span class="s">n3: %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">num</span><span class="p">.</span><span class="n">n1</span><span class="p">,</span> <span class="n">num</span><span class="p">.</span><span class="n">n2</span><span class="p">,</span> <span class="n">num</span><span class="p">.</span><span class="n">n3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="n">fclose</span><span class="p">(</span><span class="n">fptr</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="缓冲区">缓冲区</h2>
<p>缓冲区是操作系统的内存空间中的一部分。操作系统在内存空间中预留了一定的存储空间，在输入或输出达到一定量后进行I/O操作，这部分空间就叫做缓冲区。</p>
<p>程序在启动时，预定义了三种缓冲区，不需要显式开启：</p>
<ul>
<li>标准输入 (<em><strong>stdin</strong></em>)：</li>
<li>标准输出 (<em><strong>stdout</strong></em>)：</li>
<li>标准错误 (<em><strong>stderr</strong></em>)：标准错误是一个无缓冲</li>
</ul>
<p>stdio.h 库中提供了三种缓冲模式 <sup><a href="#1">[1]</a></sup>：</p>
<ul>
<li>无缓冲 (<em><strong>unbuffered</strong></em>)：写入到无缓冲的数据会立即被写入到文件</li>
<li>行缓冲 (<em><strong>line buffered</strong></em>)：当遇到换行符，此类缓冲区内容会被写入到文件</li>
<li>全缓冲 (<em><strong>fully buffered</strong></em>)：缓冲区满或以任意大小的块被写入到文件</li>
</ul>
<p>可以通过库函数<code>setvbuf()</code>, <code>setbuffer()</code>, <code>setbuf()</code> 三者之一设置 <code>stdio</code> 的缓冲模式，例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define BUF_SIZE 4096
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">static</span> <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="n">BUF_SIZE</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">fp</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&#34;test.txt&#34;</span><span class="p">,</span> <span class="sc">&#39;w&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">setvbuf</span><span class="p">(</span><span class="n">fp</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">_IOFBF</span><span class="p">,</span> <span class="n">BUF_SIZE</span><span class="p">)</span> <span class="o">!=</span><span class="mi">0</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以使用库函数 <code>fflush()</code> 手动刷新缓冲区  <sup><a href="#2">[2]</a></sup>，例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">fp</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&#34;test.txt&#34;</span><span class="p">,</span> <span class="sc">&#39;w&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">fputs</span><span class="p">(</span><span class="s">&#34;fputs向文件写入数据</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">fptr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">fflush</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">fputs</span><span class="p">(</span><span class="s">&#34;fputs向文件写入数据</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">fptr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">fflush</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果，全缓冲模式下，缓冲区没满也没刷新，那么只有在文件关闭时， 缓冲区会被自动刷新（写入到文件）</p>
<blockquote>
<p>Tips：内存的隐式回收：关闭文件、刷新缓冲区、释放malloc</p>
</blockquote>
<h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://www.litreily.top/2018/10/25/io-cache/">IO cache</a></p>
<p><sup id="2">[2]</sup> <a href="https://www.gnu.org/software/libc/manual/html_node/Controlling-Buffering.html">Controlling Buffering</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>C程序编译错误记录</title>
      <link>https://www.oomkill.com/2021/11/c-complie-record/</link>
      <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/11/c-complie-record/</guid>
      <description></description>
      <content:encoded><![CDATA[<blockquote>
<p><strong>Question1: Similar to pause command in linux</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">read -n 1
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>Question2 read : Illegal option -n</strong></p>
</blockquote>
<p>原因为ubuntu 默认的是dash 不是 bash
<a href="https://blog.csdn.net/G_SANGSK/article/details/104388062">Reference</a></p>
<blockquote>
<p><strong>Question3: How to Compile  C programing Language</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">gcc hello.c -o hello
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>Question4: Segmentation fault (core dumped)</strong></p>
</blockquote>
<p>编译正常执行错误，在linux中使用 <code>strace</code> 查看具体报错。</p>
<p><a href="https://www.cnblogs.com/sddai/p/10375979.html">Reference</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
