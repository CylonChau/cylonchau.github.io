<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>windows on Cylon&#39;s Collection</title>
    <link>https://www.oomkill.com/tags/windows/</link>
    <description>Recent content in windows on Cylon&#39;s Collection</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 24 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.oomkill.com/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ceph对象存储 - windows上安装s3cmd</title>
      <link>https://www.oomkill.com/2023/09/05-4-s3cmd-in-windows/</link>
      <pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/09/05-4-s3cmd-in-windows/</guid>
      <description></description>
      <content:encoded><![CDATA[<p><strong>s3cmd</strong> 是为了管理 Linux 服务器上的 S3 存储桶而创建的。   但我们也在 Windows 服务器上使用这个工具。   本文将帮助您在 Windows 系统中设置 s3cmd</p>
<h2 id="requirment">Requirment</h2>
<p><strong>s3cmd 系统要求：</strong>  s3cmd 需要 Python 2.7 或更高版本才能运行，还需要安装GPG。</p>
<h2 id="步骤1安装-python">步骤1：安装 Python</h2>
<p>从 <a href="https://www.python.org/downloads/">python</a> 官方网站下载并安装 python 2.7 或更高版本并安装。安装python后，将将其加到 <strong>PATH</strong> 环境变量。</p>
<h2 id="步骤-2-在-windows-上安装-gpg">步骤 2： 在 Windows 上安装 GPG</h2>
<p><a href="http://www.gpg4win.org/download.html">Gpg4win</a> (<em>GNU Privacy Guard for Windows</em>) 是一款用于数字加密 (file, email) 的免费软件，可以使用以下链接下载并安装它。</p>
<h2 id="步骤3配置-s3cmd">步骤3：配置 s3cmd</h2>
<p>下载最新的 s3cmd 源代码 <a href="http://s3tools.org/download">从s3cmd 官方页面 </a>并解压；</p>
<p>提取源代码后，使用以下命令设置 s3 环境。  它会询问您的 对象存储的 <em>AccessKey</em> 和 <em>SecretKey</em>，即 GPG 命令的路径</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bat" data-lang="bat"><span class="line"><span class="cl">C<span class="p">:</span><span class="nl">s3cmd</span><span class="c1">&gt; python s3cmd --configure</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Enter new values or accept defaults in brackets with Enter.
</span></span><span class="line"><span class="cl">Refer to user manual for detailed description of all options.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Access key and Secret key are your identifiers for Amazon S3
</span></span><span class="line"><span class="cl">Access Key: XXXXXXXXXXXXXXXXXXXX
</span></span><span class="line"><span class="cl">Secret Key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Encryption password is used to protect your files from reading
</span></span><span class="line"><span class="cl">by unauthorized persons while in transfer to S3
</span></span><span class="line"><span class="cl">Encryption password: XXXXXXXXX
</span></span><span class="line"><span class="cl"><span class="k">Path</span> to GPG program: C:\Program Files (x86)\GNU\GnuPG\gpg2.exe
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">When using secure HTTPS protocol all communication with Amazon S3
</span></span><span class="line"><span class="cl">servers is protected from 3rd party eavesdropping. This method is
</span></span><span class="line"><span class="cl">slower than plain HTTP and can&#39;t be used if you&#39;re behind a proxy
</span></span><span class="line"><span class="cl">Use HTTPS protocol [No]: Yes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">New settings:
</span></span><span class="line"><span class="cl">  Access Key: XXXXXXXXXXXXXXXXXXXX
</span></span><span class="line"><span class="cl">  Secret Key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
</span></span><span class="line"><span class="cl">  Encryption password: XXXXXXXXX
</span></span><span class="line"><span class="cl">  <span class="k">Path</span> to GPG program: C:Program Files (x86)GNUGnuPGgpg2.exe
</span></span><span class="line"><span class="cl">  Use HTTPS protocol: True
</span></span><span class="line"><span class="cl">  HTTP Proxy server name:
</span></span><span class="line"><span class="cl">  HTTP Proxy server port: 0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Test access with supplied credentials? [Y/n] Y
</span></span><span class="line"><span class="cl">Please wait, attempting to list all buckets...
</span></span><span class="line"><span class="cl">Success. Your access key and secret key worked fine :-)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Now verifying that encryption works...
</span></span><span class="line"><span class="cl">Success. Encryption and decryption worked fine :-)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Save settings? [y/N] Y
</span></span><span class="line"><span class="cl">Configuration saved to &#39;C:\Users\Administrator\Application Data\s3cmd.ini&#39;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="步骤4验证">步骤4：验证</h2>
<p>使用以下命令来验证 s3cmd 配置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">&gt; python c:<span class="se">\s</span>3cmd<span class="se">\s</span>3cmd ls
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>git在windows上常用配置</title>
      <link>https://www.oomkill.com/2023/01/awesome-git-configration-in-windows/</link>
      <pubDate>Tue, 24 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/01/awesome-git-configration-in-windows/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="windows-git-warning-lf-will-be-replaced-by-crlf-supa-href11asup">Windows git &ldquo;warning: LF will be replaced by CRLF&rdquo; <sup><a href="#1">[1]</a></sup></h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git config --global core.autocrlf <span class="nb">false</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="disable-credential-manager">Disable Credential Manager</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git config --global credential.modalprompt <span class="nb">false</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git credential-manager remove -force
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git credential-manager uninstall --force  
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="multi-account-management--supa-href22asup">Multi account management  <sup><a href="#2">[2]</a></sup></h2>
<p>step1: clean globle setting</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git config --global --unset user.name
</span></span><span class="line"><span class="cl">git config --global --unset user.email
</span></span></code></pre></td></tr></table>
</div>
</div><p>step2： change config file only ssh</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"></code></pre></td></tr></table>
</div>
</div><h2 id="do-not-pop-ups-authtication-supa-href33asup">Do not Pop-ups authtication <sup><a href="#3">[3]</a></sup></h2>
<p>This question is the git shell prompt input user and password in an openssh popup on windows plateform</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git config --global core.askPass <span class="s2">&#34;&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://stackoverflow.com/questions/17628305/windows-git-warning-lf-will-be-replaced-by-crlf-is-that-warning-tail-backwar"><em>Windows git &ldquo;warning: LF will be replaced by CRLF&rdquo;, is that warning tail backward?</em></a></p>
<p><sup id="2">[2]</sup> <a href="https://juejin.cn/post/6912337687366565895"><em>window下git多账户管理</em></a></p>
<p><sup id="3">[3]</sup> <a href="https://stackoverflow.com/questions/36073859/git-shell-prompts-for-password-in-an-openssh-popup-window"><em>Git shell prompts for password in an OpenSSH popup window</em></a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Windows Terminal无法加载WSL  [process exited with code 4294967295 (0xffffffff)]</title>
      <link>https://www.oomkill.com/2022/03/wsl-problem-with-windows-terminal/</link>
      <pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/03/wsl-problem-with-windows-terminal/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>在Windows Terminal中WSL无法打开错误代码是 <code>process exited with code 4294967295 (0xffffffff)</code>，但在命令行中 通过 <code>&quot;C:\Windows\System32\wsl.exe&quot; -d ubuntu18</code> 是正常的</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20220330221629562-2038164960.png" alt=""  /></p>
<p><strong>解决方法是</strong>：通过修改启动的命令为 <code>wsl.exe ~ -d Ubuntu</code> 中间加一个 <code>~</code> 可以很好的解决掉</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20220330222938218-1759026485.png" alt=""  /></p>
<p>这种方法存在一个问题，打开的wsl终端将为根目录而不是当前windows目录</p>
<h2 id="reference">Reference</h2>
<blockquote>
<p><a href="https://github.com/microsoft/terminal/issues/12474">Unable to launch WSL Ubuntu</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>WSL与Windows环境共享</title>
      <link>https://www.oomkill.com/2021/07/wsl-share-to-win/</link>
      <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/07/wsl-share-to-win/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>在使用 wsl 时，总是需要执行 windows 的 cmd，但是windows命令行对于大多数人使用起来还是不习惯，微软提供了在 windows 中Linux与Windows的命令互通，即可以使用cmd shell执行Linux命令，也可以使用bash shell来执行windows命令。</p>
<p>WSL可对 Windows 与 Linux 之间的集成操作：</p>
<ul>
<li>从 Linux shell（如 Ubuntu）运行 Windows 工具（任意 <code>.exe</code>）。</li>
<li>从 Windows shell（即 PowerShell or cmd ）运行 Linux 命令（如 cd ls grep）。</li>
<li>在 WSL与windows之间共享环境变量。 （版本 17063+）</li>
</ul>
<p>满足上述要求，可以很好地使用windows的软件在WSL中畅快的操作，即空WSL环境拥有了python解析器 docker等操作。</p>
<h2 id="如何在-wsl和-windows-之间共享环境变量">如何在 WSL和 Windows 之间共享环境变量</h2>
<p>从<code>Build 17063</code> 开始，可以利用 <code>WSLENV</code> 来增强 Win/WSL 之间的环境变量互操作。</p>
<h3 id="什么是wslenv">什么是WSLENV</h3>
<ul>
<li>WSLENV 是一个以冒号分隔的环境变量列表，当从 WSL 启动 WSL进程或 Win进程时包含的变量</li>
<li>每个变量都可以以斜杠作为后缀，后跟标识位以指定它的转换方式</li>
<li>WSLENV 可以在 WSL 和 Win32 之间转换的路径</li>
<li>WSLENV。在WSL中，是以冒号分隔的列表。在Win中，是以分号分隔的列表</li>
<li>可以在<code>.bashrc</code>或者windows自定义环境变量中设置<code>WSLENV</code></li>
</ul>
<p>例如：一个<code>WSLENV</code>应该设置为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">WSLENV=GOPATH/l:USERPROFILE/w:SOMEVAR/wp
</span></span></code></pre></td></tr></table>
</div>
</div><p>在17063之前，WSL访问Windows环境变量唯一方法是使用全路径（可以使用全路径从WSL下启动Win32可执行文件）。但是没有办法在WSL中设置环境变量，调用Win进程，并期望将该变量传送到进程。</p>
<p>在17063之后，引入一个名为<code>WSLENV</code>的特殊环境变量，以帮助WSL和Win之间的共享。 <code>WSLENV</code>存在于两个环境中。用户可以将WSLENV的值设置为耦合值与环境变量串联，每个都以 <code>\</code> 为标志，以指定应该如何解析该变量。例如：</p>
<h3 id="p">/p</h3>
<p><code>/p</code> 表示应在WSL和Win32之间转换path。例如。在WSL中设置变量，将其添加到WSLENV设置<code>/p</code> 标志，然后在win环境cmd.exe中读取变量，该值会随着rootfs的转变而转换为对应的值。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ /mnt/d# <span class="nb">export</span> <span class="nv">TRANSLATABLE</span><span class="o">=</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">$ /mnt/d# <span class="nb">echo</span> <span class="nv">$TRANSLATABLE</span>
</span></span><span class="line"><span class="cl">/mnt/d
</span></span><span class="line"><span class="cl">$ /mnt/d# <span class="nb">export</span> <span class="nv">WSLENV</span><span class="o">=</span>TRANSLATABLE<span class="se">\p</span>
</span></span><span class="line"><span class="cl">$ /mnt/d# <span class="nb">export</span> <span class="nv">WSLENV</span><span class="o">=</span>TRANSLATABLE/p
</span></span><span class="line"><span class="cl">$ /mnt/d# <span class="nb">echo</span> <span class="nv">$WSLENV</span>
</span></span><span class="line"><span class="cl">TRANSLATABLE/p
</span></span><span class="line"><span class="cl">$ /mnt/d# cmd.exe
</span></span><span class="line"><span class="cl">Microsoft Windows <span class="o">[</span>版本 10.0.19043.1052<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>c<span class="o">)</span> Microsoft Corporation。保留所有权利。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">D:<span class="se">\&gt;</span><span class="nb">set</span> TRANSLATABLE <span class="c1"># 在windows中查看环境变量</span>
</span></span><span class="line"><span class="cl"><span class="nv">TRANSLATABLE</span><span class="o">=</span>D:<span class="se">\
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="l">/l</h3>
<p><code>/l</code> 表示该值是路径列表（如Linux的PATH）。在Linux中，是以冒号分隔的路径列表。在Win中，是以分号分隔的路径列表。<code>/l</code> 可以将路径列表适当对不通系统进行转换。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ /mnt/d# <span class="nb">export</span> <span class="nv">TEMPORARY</span><span class="o">=</span>/usr/local/go/bin:/usr/local/python/bin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ /mnt/d# <span class="nv">WSLENV</span><span class="o">=</span><span class="nv">$WSLENV</span>:TEMPORARY/l
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ /mnt/d# <span class="nb">echo</span> <span class="nv">$WSLENV</span>
</span></span><span class="line"><span class="cl">TRANSLATABLE/p:TEMPORARY/l
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ /mnt/d# cmd.exe
</span></span><span class="line"><span class="cl">Microsoft Windows <span class="o">[</span>版本 10.0.19043.1052<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>c<span class="o">)</span> Microsoft Corporation。保留所有权利。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">D:<span class="se">\&gt;</span><span class="nb">set</span> TEMPORARY
</span></span><span class="line"><span class="cl"><span class="nv">TEMPORARY</span><span class="o">=</span><span class="se">\\</span>wsl$<span class="se">\u</span>buntu1<span class="se">\u</span>sr<span class="se">\l</span>ocal<span class="se">\g</span>o<span class="se">\b</span>in<span class="p">;</span><span class="se">\\</span>wsl$<span class="se">\u</span>buntu1<span class="se">\u</span>sr<span class="se">\l</span>ocal<span class="se">\p</span>ython<span class="se">\b</span>in
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="u">/u</h3>
<p><code>/u</code> 表示仅在Linux（WSL）中调用变量的值为 Win 类型的变量值，及windows向Linux传递环境变量，但格式不变</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">D:<span class="se">\c</span>ompose&gt;set <span class="nv">zhangsan</span><span class="o">=</span>D:<span class="se">\c</span>ompose
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">D:<span class="se">\c</span>ompose&gt;set zhangsan
</span></span><span class="line"><span class="cl"><span class="nv">zhangsan</span><span class="o">=</span>D:<span class="se">\c</span>ompose
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">D:<span class="se">\c</span>ompose&gt;set <span class="nv">WSLENV</span><span class="o">=</span>zhangsan/u
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">D:<span class="se">\c</span>ompose&gt;wsl -d ubuntu1
</span></span><span class="line"><span class="cl">$ /mnt/d/compose# <span class="nb">echo</span> <span class="nv">$zhangsan</span>
</span></span><span class="line"><span class="cl">D:<span class="se">\c</span>ompose
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>如需要自动适应转换，则需要 使用<code>/up</code></p>
</blockquote>
<h3 id="w">/w</h3>
<p><code>/w</code> 表示仅在从Win调用WSL环境变量是的值，该参数并不会自动转换，如需转换一样需要使用 <code>/wp</code> 。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ /mnt/d/compose# <span class="nb">export</span> <span class="nv">FROMWSL</span><span class="o">=</span>/mnt/d/compose
</span></span><span class="line"><span class="cl">$ /mnt/d/compose# <span class="nb">export</span> <span class="nv">WSLENV</span><span class="o">=</span>FROMWSL/w
</span></span><span class="line"><span class="cl">$ /mnt/d/compose# cmd.exe
</span></span><span class="line"><span class="cl">Microsoft Windows <span class="o">[</span>版本 10.0.19043.1052<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>c<span class="o">)</span> Microsoft Corporation。保留所有权利。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">D:<span class="se">\c</span>ompose&gt;set FROMWSL
</span></span><span class="line"><span class="cl"><span class="nv">FROMWSL</span><span class="o">=</span>/mnt/d/compose
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">D:<span class="se">\c</span>ompose&gt;exit
</span></span><span class="line"><span class="cl">$ /mnt/d/compose# <span class="nb">export</span> <span class="nv">WSLENV</span><span class="o">=</span>FROMWSL/wp
</span></span><span class="line"><span class="cl">$ /mnt/d/compose# cmd.exe
</span></span><span class="line"><span class="cl">Microsoft Windows <span class="o">[</span>版本 10.0.19043.1052<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>c<span class="o">)</span> Microsoft Corporation。保留所有权利。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">D:<span class="se">\c</span>ompose&gt;set FROMWSL
</span></span><span class="line"><span class="cl"><span class="nv">FROMWSL</span><span class="o">=</span>D:<span class="se">\c</span>ompose
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="使用脚本传递变量">使用脚本传递变量</h2>
<p>如果需要BASH脚本传递对应的变量到windows程序执行，例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/bash
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">MYPATH</span><span class="o">=</span>/mnt/c/Users/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">WSLENV</span><span class="o">=</span><span class="nv">$WSLENV</span>:MYPATH/p cmd.exe /c <span class="nb">set</span> MYPATH
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过WSL shell环境执行，可以得到windows程序处理的结果，并且可以拿到环境变量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ /mnt/d/compose# bash 1.sh
</span></span><span class="line"><span class="cl"><span class="nv">MYPATH</span><span class="o">=</span>C:<span class="se">\U</span>sers<span class="se">\
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="实例设置一个开发环境使其共享环境变量">实例：设置一个开发环境，使其共享环境变量</h2>
<p>例如，希望在WSL中设置DEV环境。使用WSLENV VAR，将其配置为在WSL和Win之间共享GoPath。</p>
<h3 id="安装golang">安装golang</h3>
<p>首先，我们需要安装两个平台。要在Windows与WSL安装，步骤不说了。（如果是python等解析语言，可以使用alias直接使用windows的解析器则不需要安装了）</p>
<h3 id="设置项目">设置项目</h3>
<p>接下来，需要配置的GO项目。该项目需要在Windows文件系统下。在PowerShell中发出以下命令：(这里在桌面配置的)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir <span class="nv">$env</span>:USERPROFILE<span class="se">\d</span>esktop<span class="se">\g</span>oProject
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> <span class="nv">$env</span>:USERPROFILE<span class="se">\d</span>esktop<span class="se">\g</span>oProject
</span></span><span class="line"><span class="cl">New-Item hello.go
</span></span></code></pre></td></tr></table>
</div>
</div><p>配置环境变量，然后将gopath添加到WSLENV，此时，两个文件系统间，会使用同一个GOPATH</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">setx GOPATH <span class="s2">&#34;</span><span class="nv">$env</span><span class="s2">:USERPROFILE\desktop\goProject&#34;</span>
</span></span><span class="line"><span class="cl">setx WSLENV <span class="s2">&#34;</span><span class="nv">$env</span><span class="s2">:WSLENV:GOPATH&#34;</span>/p
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>需要事项</p>
<ul>
<li>WSL（通过.profile或其他）中的定义将在通过WSL访问时覆盖默认WSLENV中定义的值。</li>
<li>在关闭WSL后，WSLENV不会持久化，需要修改相应的配置文件（.profile，.bash_rc等）。</li>
<li>WSL可以设置任何值。如果仅设置当前文件系统变量，则不会自动转换。通过WSLENV可以自动翻译成两种不通的文件系统下的环境变量。</li>
</ul>
</blockquote>
<h2 id="题外话cmdexe-跨文件系统常用参数">题外话cmd.exe 跨文件系统常用参数</h2>
<table>
<thead>
<tr>
<th>options</th>
<th>describe</th>
</tr>
</thead>
<tbody>
<tr>
<td>/C</td>
<td>使用cmd.exe运行一个命令并终止，类似于 bash -c</td>
</tr>
</tbody>
</table>
<h2 id="reference">Reference</h2>
<p>更多cmd.exe帮助参考</p>
<blockquote>
<p><a href="https://ss64.com/nt/cmd.html">cmd_helps</a></p>
<p><a href="https://www.cnblogs.com/woki/p/14967604.html">WSL备份及windows Docker安装</a></p>
<p><a href="https://www.cnblogs.com/woki/p/13946476.html">WSL安装维护</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>windows递归复制指定时间后修改过的文件</title>
      <link>https://www.oomkill.com/2021/07/recursive-replication-with-dos/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/07/recursive-replication-with-dos/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>因为在拷贝web站点时，也会存在更新，需要定期覆盖新的内容，就是上次覆盖的时间和到这次时间内修改过的文件都复制。</p>
<p>实现命令xcopy</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">xcopy src dest
</span></span><span class="line"><span class="cl">$ xcopy D:\WWW\back1\* D:\WWW\back4  /D:05-22-2018 /F /E /y
</span></span><span class="line"><span class="cl">D:\WWW\back1\db_qbe.php -&gt; D:\WWW\back4\db_qbe.php
</span></span><span class="line"><span class="cl">D:\WWW\back1\docs.css -&gt; D:\WWW\back4\docs.css
</span></span><span class="line"><span class="cl">D:\WWW\back1\test\changelog.php -&gt; D:\WWW\back4\test\changelog.php
</span></span><span class="line"><span class="cl">复制了 3 个文件
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>/D:mm-dd-yyyy</code></p>
<p><code>/F</code> 打印复制过程</p>
<p><code>/E</code> 递归复制目录和子目录包括空目录</p>
<p><code>/Y</code> 禁止提示</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>适用于windows10 Linux子系统的安装管理配置</title>
      <link>https://www.oomkill.com/2020/11/linux-subsystem-in-win10/</link>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2020/11/linux-subsystem-in-win10/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="什么是wsl">什么是WSL</h2>
<p><code>Windows Subsystem for Linux</code> 简称WLS，适用于Linux的Windows子系统，可以直接在Windows上运行Linux环境（包括大部分命令行工具）</p>
<h3 id="linux-containers与windows-subsystem-for-linuxwsl区别">Linux containers与Windows Subsystem for Linux（WSL）区别</h3>
<p>　　此处以docker与wsl进行一些比较，主要为个人的理解之处。</p>
<p>　　docker与wsl同样运行在本机环境中运行，不依赖其他管理程序与虚拟化。
　　docker与wsl同样为应用容器。</p>
<h2 id="安装wsl">安装WSL</h2>
<p>在Windows10上，用于Linux的Windows子系，可运行受支持的Linux版本（例如Ubuntu，OpenSuse，Debian等），而无需设置操作系统的复杂性。虚拟机或其他计算机。</p>
<h3 id="使用设置为linux启用windows子系统">使用设置为Linux启用Windows子系统</h3>
<ol>
<li><strong>打开设置</strong></li>
<li><strong>点击“应用”</strong>。</li>
<li><strong>在“相关设置”部分下，单击“程序和功能”选项</strong></li>
</ol>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/1380340-20201108233007245-1313186627.png" alt=""  /></p>
<ol start="4">
<li><strong>单击左窗格中的“打开或关闭Windows功能”选项。</strong></li>
</ol>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/1380340-20201108233019164-2093713154.png" alt=""  /></p>
<ol start="5">
<li><strong>检查Windows Subsystem for Linux选项。</strong></li>
</ol>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/1380340-20201108233050628-1621985294.png" alt=""  /></p>
<p>完成这些步骤后，将配置该环境以下载并运行Windows 10上的Linux版本。</p>
<h3 id="使用microsoft-store安装linux发行版">使用Microsoft Store安装Linux发行版</h3>
<p>要在Windows 10上安装Linux发行版，请使用以下步骤：</p>
<p>打开Microsoft Store。搜索要安装的Linux发行版。一些可用的发行版包括：</p>
<ul>
<li><a href="https://www.windowscentral.com/e?link=https%3A%2F%2Fclick.linksynergy.com%2Fdeeplink%3Fid%3DkXQk6%252AivFEQ%26mid%3D24542%26u1%3DUUwpUdUnU72700YYw%26murl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fen-us%252Fp%252Fubuntu%252F9nblggh4msv6%26ourl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fstore%252FproductId%252F9NBLGGH4MSV6&amp;token=ti9ZlPH4">Ubuntu</a></li>
<li><a href="https://www.windowscentral.com/e?link=https%3A%2F%2Fclick.linksynergy.com%2Fdeeplink%3Fid%3DkXQk6%252AivFEQ%26mid%3D24542%26u1%3DUUwpUdUnU72700YYw%26murl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fen-us%252Fp%252Fopensuse-leap-15-1%252F9njfzk00fgkv%26ourl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fstore%252FproductId%252F9NJFZK00FGKV&amp;token=0vM0S7vS">OpenSuse</a></li>
<li><a href="https://www.windowscentral.com/e?link=https%3A%2F%2Fclick.linksynergy.com%2Fdeeplink%3Fid%3DkXQk6%252AivFEQ%26mid%3D24542%26u1%3DUUwpUdUnU72700YYw%26murl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fen-us%252Fp%252Fkali-linux%252F9pkr34tncv07%26ourl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fstore%252FproductId%252F9PKR34TNCV07&amp;token=cG6n6K_6">Kali Linux</a></li>
<li><a href="https://www.windowscentral.com/e?link=https%3A%2F%2Fclick.linksynergy.com%2Fdeeplink%3Fid%3DkXQk6%252AivFEQ%26mid%3D24542%26u1%3DUUwpUdUnU72700YYw%26murl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fen-us%252Fp%252Fdebian%252F9msvkqc78pk6%26ourl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fstore%252FproductId%252F9MSVKQC78PK6&amp;token=BjqzImNu">Debian</a></li>
<li><a href="https://www.windowscentral.com/e?link=https%3A%2F%2Fclick.linksynergy.com%2Fdeeplink%3Fid%3DkXQk6%252AivFEQ%26mid%3D24542%26u1%3DUUwpUdUnU72700YYw%26murl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fen-us%252Fp%252Falpine-wsl%252F9p804crf0395%26ourl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fstore%252FproductId%252F9P804CRF0395&amp;token=D9eFavB7">Alpine WSL</a></li>
<li><a href="https://www.windowscentral.com/e?link=https%3A%2F%2Fclick.linksynergy.com%2Fdeeplink%3Fid%3DkXQk6%252AivFEQ%26mid%3D24542%26u1%3DUUwpUdUnU72700YYw%26murl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fen-us%252Fp%252Fsuse-linux-enterprise-server-12%252F9p32mwbh6cns%26ourl%3Dhttps%253A%252F%252Fwww.microsoft.com%252Fstore%252FproductId%252F9P32MWBH6CNS&amp;token=J65kn0Rn">Suse Linux Enterprise</a></li>
</ul>
<ol start="2">
<li>选择要在您的设备上安装的Linux发行版。</li>
<li>单击获取（或安装）按钮。</li>
<li>Microsoft Store安装Linux发行版</li>
<li>单击启动按钮。为Linux发行版创建一个用户名，然后按Enter键。</li>
<li>指定发行版的密码，然后按Enter。</li>
<li>重复密码，然后按Enter确认。</li>
</ol>
<p>完成以上步骤后，即完成安装了WLS（没有图形界面），在开始菜单 运行 <code>wls</code> 启动。</p>
<h3 id="离线安装wls">离线安装WLS</h3>
<p>　　官网指导手册内包含所支持的<a href="https://docs.microsoft.com/en-us/windows/wsl/install-manual#downloading-distros">Linux离线安装包</a></p>
<blockquote>
<p>这里下载的为<code>Ubuntu 18.04</code>，下载后，文件格式为appx格式，本次使用的操作系统为，windows1709企业版，并且卸载了所有的 UWP应用。因此只能使用命令行进行安装。</p>
<p>非LTSC企业版或卸载windows store的可以直接双击安装</p>
</blockquote>
<p>　　管理员打开Powershell 运行以下命令，将路径替换为下载的离线安装包路径。本次安装的wls默认安装到C盘</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="nb">Add-AppxPackage</span> <span class="p">.\</span><span class="n">app_name</span><span class="p">.</span><span class="n">appx</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看已经安装的子系统</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">wslconfig /l
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="安装时选择其他盘安装">安装时选择其他盘安装</h4>
<ol>
<li>
<p>首先解压.appx文件</p>
</li>
<li>
<p>用 <a href="https://github.com/DDoSolitary/LxRunOffline/releases">LxRunOffline</a> 安装：</p>
</li>
</ol>
<p>windows10 1803以上版本下载最新版即可，windows 1709及一下，可以安装<a href="https://github.com/DDoSolitary/LxRunOffline/releases?after=v2.2.2">2.x</a>版本。</p>
<ol start="3">
<li>使用以下命令安装，<code>-f</code>后的文件为解压后文件内根目录的<code>install.tar.gz</code></li>
</ol>
<p>语法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">LxRunOffline.exe install  -n &lt;install systemname&gt; -d &lt;save path&gt; -f &lt;unzip_path/install.tar.gz&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">LxRunOffline.exe install -n ubuntu -d d:\wls -f d:\Ubuntu_1804.2019.522.0_x64\install.tar.gz
</span></span></code></pre></td></tr></table>
</div>
</div><p>等运行完成后（warning可忽略），开始 =&gt; 运行<code>wls</code>进入，进入后默认就是root用户。另外开始菜单不会有单独的启动的图标。</p>
<h4 id="如何在重装系统后恢复原来的wsl">如何在重装系统后恢复原来的WSL</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">.\LxRunOffline.exe rg -n ubuntu -d D:\wsl\ubuntu
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="配置wsl与windows共用开发环境">配置wsl与windows共用开发环境</h2>
<p>　　本次配置的开发环境为golang与goland，在windows下与linux下的环境开发与运行为相同的环境。其他的开发环境类似。</p>
<p>　　因为wsl共享windows的路径，可以再windows与linux安装golang编译器。并分别设置<code>go env</code></p>
<h3 id="windows">windows</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">set GO111MODULE=on
</span></span><span class="line"><span class="cl">set GOPATH=D:\go_work
</span></span><span class="line"><span class="cl">set GOPROXY=https://goproxy.io,https://goproxy.cn,direct
</span></span><span class="line"><span class="cl">set GOROOT=C:\Go
</span></span></code></pre></td></tr></table>
</div>
</div><p>Linux，GOPATH要与windows设置为同一个路径，这样可以保证安装的包为同一个。即实现了同一个开发环境与Linux环境。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">export GO111MODULE=on
</span></span><span class="line"><span class="cl">export GOPROXY=https://goproxy.io,https://goproxy.cn,direct
</span></span><span class="line"><span class="cl">export GOROOT=/usr/local/go
</span></span><span class="line"><span class="cl">export GOPATH=/mnt/d/go_work/
</span></span><span class="line"><span class="cl">export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="goland设置">goland设置</h3>
<p>file =&gt; setting =&gt; Tools =&gt; Terminal</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">C:\Windows\System32\wsl.exe
</span></span></code></pre></td></tr></table>
</div>
</div><p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20201109000212690-34842593.png" alt=""  /></p>
<p>file =&gt; setting =&gt; Editor =&gt; Code Style</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20201109000303092-1063825125.png" alt=""  /></p>
<h3 id="goland-wls-terminal-bashrc不生效">goland wls terminal .bashrc不生效</h3>
<p>　　在wsl中发现一些环境变量、shell颜色等都不生效。这里需要了解shell的类型</p>
<p>　　shell有两种类型，<code>Login Shell</code>和<code>Non Login Shell</code>。每一个shell都有自己自定义的脚本来预设值shell运行的环境。</p>
<h4 id="login-shell">Login Shell</h4>
<p>　　当成功登陆用户后，将创建登陆shell（通过ssh sudo 或者 terminal）</p>
<p>　　查看当前shell是什么类型的shell <code>echo $0</code></p>
<ul>
<li>Login Shell：-bash或-su。</li>
<li>Non Login Shell： bash或su</li>
</ul>
<p><strong>Login shell 登陆后执行以下脚本</strong>：</p>
<blockquote>
<p>登陆执行<code>/etc/profile</code>
/etc/profile执行<code>/etc/profile.d</code>中的所有脚本
然后执行用户 <code>~/.bash_profile</code>
<code>~/.bash_profile</code> 会有命令执行用户目录 <code>~/.bashrc</code>
<code>~/.bashrc</code>中会执行 <code>/etc/bashrc</code></p>
</blockquote>
<h4 id="non-login-shell">Non Login Shell</h4>
<p>　　<code>Non Login Shell</code>是由<code>Login Shell</code>启动的shell。例如，登陆成功后执行bash，此时是<code>Non Login Shell</code></p>
<p><strong>Non Login Shell登陆后执行以下脚本</strong>：</p>
<blockquote>
<p>首先执行 <code>~/.bashrc</code>
然后 <code>~/.bashrc</code> 执行 <code>/etc/bashrc</code>
<code>/etc/bashrc</code> 调用 <code>/etc/profile.d</code> 中的脚本</p>
</blockquote>
<p>　　了解了执行顺序后，按照步骤查看对应问题所在，此处问题没有<code>~/.bashrc</code>中设置的alias和颜色。根据<code>Login shell</code>流程应为<code>~/.bash_profile</code>中去执行<code>~/.bashrc</code>，查看<code>~/.bash_profile</code> 发现文件为空。</p>
<p>　　复制一份linux <code>~/.bash_profile</code> 中的文件内容到对应的<code>~/.bash_profile</code>后发现功能已经正常实现。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># .bash_profile</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Get the aliases and functions</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -f ~/.bashrc <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">	. ~/.bashrc
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># User specific environment and startup programs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$HOME</span>/bin
</span></span></code></pre></td></tr></table>
</div>
</div><p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20201214220914329-1063628897.png" alt=""  /></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>windows下Docker Desktop安装管理</title>
      <link>https://www.oomkill.com/2020/10/windows10-install-docker/</link>
      <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2020/10/windows10-install-docker/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="检查要求">检查要求</h2>
<ul>
<li>Windows 10 企业版、专业版或教育版  （必须windows10 1903版本以上）版本号 <code>18362.1049+</code> 或 <code>18363.1049+</code> ，次版本＃大于.<code>1049</code>。最好是最新版（新版windows可以hype-v wsl2 vmvare共存，但安卓模拟器目前还没稳定的共存版本）。建议使用wsl2，安装包容量会比起hype-v小很多 。</li>
<li>Windows开启wsl2，建议 Windows 10 2004（版本号不低于 19041.264），可wsl2与vmvare共存。</li>
<li>CPU 支持并开启虚拟化（<code>Intel  VT-c</code> 或  <code>AMD SVM</code>）。</li>
<li>最少 4 GB 内存。</li>
</ul>
<p>对于专业版、企业版、教育版可以使用docker desktop wsl2模式，此处无需开启<code>Hype-v</code></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210703212825867.png" alt="image-20210703212825867"  /></p>
<p>对于Win10 家庭版，Win10 19041.264之前版本，及 Win7 8用户，可以使用docker desktop <code>Hype-v</code> 后端。</p>
<h2 id="修改安装盘">修改安装盘</h2>
<p>Docker Desktop 默认安装到 <code>C:\Program Files\Docker</code> 并不可更改，这样很不友好，可以通过软连接的方式改变Docker Desktop 默认安装盘。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mklink /J &#34;C:\Program Files\Docker&#34; &#34;D:\Program Files\Docker&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="限制wsl2运行最大内存">限制wsl2运行最大内存</h2>
<p>WSL 是 Microsoft 提供的一项功能，可以使开发人员能够直接在 Windows 上运行 <code>GNU/Linux</code> 环境，无需修改，无需传统虚拟机或双引导设置，减少了开发人员的使用复杂度</p>
<p>在 Docker Desktop 使用了 WSL 2 中的动态内存分配特性，极大地提高了资源消耗。这意味着，Docker Desktop 仅使用其所需的 CPU 和内存资源量，同时使 CPU 和内存密集型任务（例如构建容器）运行得更快。</p>
<p>但WSL2目前一个弊端，可能WSL2 vm会分配所有可用内存，并最终导致操作系统和其他应用程序的内存不足。</p>
<p>
  <img loading="lazy" src="https://miro.medium.com/max/700/1*GWlTOqcj4XeW4NO8_-OufA.png" alt="img"  /></p>
<p>所以需要对WLS2内存和CPU资源进行限制，在 <code>cmd</code> 或 <code>powshell</code> 终端中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">wsl --shutdown
</span></span><span class="line"><span class="cl">notepad &#34;$env:USERPROFILE/.wslconfig&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><p>在用户目录创建一个文件<code>.wslconfig</code>  ，编辑 <code>.wslconfig</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[wsl2]
</span></span><span class="line"><span class="cl">memory=3GB   # 限制wsl2的虚拟机最大内存
</span></span><span class="line"><span class="cl">processors=4  # 限制wsl2使用的处理器数量
</span></span><span class="line"><span class="cl">swap=0      # 不使用交换文件
</span></span></code></pre></td></tr></table>
</div>
</div><p>
  <img loading="lazy" src="https://miro.medium.com/max/700/1*Vv1RjqzQ5V7M2FzPQxdAkQ.png" alt="img"  /></p>
<h3 id="安装docker-desktop">安装Docker Desktop</h3>
<p>完成上面的操作，可以安装Docker Desktop了。从<a href="https://www.docker.com/products/docker-desktop">Docker Desktop</a>网站下载安装Docker Desktop for Windows，大于500M。</p>
<p>安装步骤基本上点击操作即可，没有什么难度</p>
<h2 id="镜像路径迁移">镜像路径迁移</h2>
<p>当使用了WSL2作为Docker Desktop后端引擎时，<code>WSL 2 Docker-Desktop-Data</code> 的VM磁盘镜像通常在 <code>%USERPROFILE%\AppData\Local\Docker\wsl\data\ext4.vhdx</code> 路径下，docker-desktop通常在<code>%LOCALAPPDATA%/Docker/wsl</code> 路径下，因为镜像的大小及一些交换文件，通常会占用大量C盘空间，可以改变其存储位置。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">wsl --list -v
</span></span></code></pre></td></tr></table>
</div>
</div><p>输入上述命令可以看到如下内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">  NAME                STATE          VERSION
</span></span><span class="line"><span class="cl">* docker-desktop         Stopped         2
</span></span><span class="line"><span class="cl">  docker-desktop-data      Stopped         2
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>docker-desktop</code> 替换了之前使用的 Hyper-V VM 实现 Docker Desktop。这处理容器的引导和管理。</p>
<p><code>docker-desktop-data</code> 是存储docker镜像和配置的地方；实际上是对 Hyper-V 以前使用的虚拟硬盘的直接替换。</p>
<p>从这里可以看出Docker Desktop使用了WSL2作为后端引擎时，实际上整个应用作为WLS2的两个子系统进行的。可以通过迁移WSL2系统镜像的存储位置来改变Docker霸占C盘不可转移的弊端。</p>
<p>导出wsl系统镜像</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">wsl --export docker-desktop docker-desktop.tar
</span></span><span class="line"><span class="cl">wsl --export docker-desktop-data docker-desktop-data.tar
</span></span></code></pre></td></tr></table>
</div>
</div><p>删除Docker Desktop wsl子系统，此操作会自动删除 <code>ext4.vhdx</code> 文件，故需要先导出一份备份</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">wsl --unregister docker-desktop
</span></span><span class="line"><span class="cl">wsl --unregister docker-desktop-data
</span></span></code></pre></td></tr></table>
</div>
</div><p>导入重新创建wsl Docker Desktop子系统</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">wsl --import docker-desktop d:\{new_path} docker-desktop.tar
</span></span><span class="line"><span class="cl">wsl --import docker-desktop-data d:\{new_path} docker-desktop-data.tar
</span></span></code></pre></td></tr></table>
</div>
</div><p>完成后，启动Docker服务，如果服务正常，可以删除掉 <code>docker-desktop.tar</code> 与 <code>docker-desktop-data.tar</code></p>
<h2 id="无法启动">无法启动</h2>
<p>我在使用windows时，会安装冰点还原，因为windows10 以上需要 冰点还原 8.38以上，我这里使用 8.38.020.4676 版本时，在开启还原状态时，Docker无法正常启动，在关闭还原时，可以正常启动。更换 8.62.020.5630。后正常。 8.38.020.4676 是2017年的版本，当时Docker对windows兼容并不好，而8.38.020.4676 是2020年发行的版本，目前在使用中并未发现异常。 8.38.020.4676 与 8.62.020.5630为网上常见的纯净的破解版了，所以按需选择使用。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>windows上sqlplus客户端连接oralce数据库中文显示问题</title>
      <link>https://www.oomkill.com/2018/04/sqlplus-windows/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2018/04/sqlplus-windows/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="运行环境">运行环境</h2>
<p>服务器：centos6.8</p>
<p>服务器oracle版本：oracle 11g R2 64位，字符集是ZHS32utf8。</p>
<p>客户端：navicat 12x64  windows8.1x64</p>
<h2 id="问题分析">问题分析</h2>
<p>当在windows客户端使用sqlplus或navicat时如果数据库中文显示“????”</p>
<p>这种情况是在客户端与服务器端字符集不一致时，从客户端输入了汉字信息。输入的这些信息即便是把客户端字符集更改正确，也无法显示汉字。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20180419215302334-117370933.png" alt="img"  /></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20180419215313731-33925628.png" alt="img"  /></p>
<p>解决方法：退出sqlplus,设置相应的环境变量NLS_LANG</p>
<p>linux：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">export NLS_LANG=&#34;SIMPLIFIED CHINESE_CHINA.ZHS16GBK&#34; 
</span></span></code></pre></td></tr></table>
</div>
</div><p>windows：</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20180419215414786-1063538995.png" alt="img"  /></p>
<h2 id="出现问题">出现问题</h2>
<p>此时。系统cmd命令行使用sqlplus已经正常显示中文，但是navicat中依旧是？？？？</p>
<p>图为cmd命令行访问sqlplus客户端查询</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20180419215432087-917488218.png" alt="img"  /></p>
<p>图为navicat f6弹出的sqlplus客户端</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20180419215446566-878106693.png" alt="img"  /></p>
<p>原因是因为Navicat Premium默认自带的instant client，但是其是base lite版本的（Basic Lite： Basic  的精简版本，其中仅带有英文错误消息和 Unicode、ASCII  以及西欧字符集支持），不支持中文字符集，而本文中的服务器端oracle恰好是中文字符集。自带版本不支持。此处需要去oracle官网下载相对应的版本。</p>
<p><a href="http://www.oracle.com/technetwork/database/database-technologies/instant-client/downloads/index.html">http://www.oracle.com/technetwork/database/database-technologies/instant-client/downloads/index.html</a></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20180419215502943-2034092654.png" alt="img"  /></p>
<p>将下载的文件解压覆盖navicat中的instantclient目录里的文件。</p>
<p>此时连接oracle实例提示如下信息</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20180419215518269-1348254446.png" alt="img"  /></p>
<p>尽管我们下载了64位的版本。却提示如图信息。这是因为Navicat仅支持32位的，因此还需下载一个32位的客户端。替换到instantclient目录中</p>
<p>替换完成后连接实例。f6使用sqlplus查询发现中文已经正常显示</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20180419215532150-1754188108.png" alt="img"  /></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
