<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>kubernetes develop on Cylon&#39;s Collection</title>
    <link>https://www.oomkill.com/tags/kubernetes-develop/</link>
    <description>Recent content in kubernetes develop on Cylon&#39;s Collection</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 30 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.oomkill.com/tags/kubernetes-develop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>深入理解Kubernetes - 基于OOMKill的QoS的设计</title>
      <link>https://www.oomkill.com/2024/01/ch30-oomkill/</link>
      <pubDate>Tue, 30 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2024/01/ch30-oomkill/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>阅读完本文，您当了解</p>
<ul>
<li>Linux oom kill</li>
<li>Kubernetes oom 算法</li>
<li>Kubernetes QoS</li>
</ul>
<blockquote>
<p>本文只是个人理解，如果有大佬觉得不是这样的可以留言一起讨论，参考源码版本为 1.18.20，与高版本相差不大</p>
</blockquote>
<h2 id="什么是oom-kill">什么是OOM Kill</h2>
<p>当你的Linux机器内存不足时，内核会调用Out of Memory (OOM) killer来释放一些内存。这经常在运行许多内存密集型进程的服务器上遇到。</p>
<h3 id="oom-killer是如何选择要杀死的进程的">OOM Killer是如何选择要杀死的进程的？</h3>
<p>Linux内核为每个运行的进程分配一个分数，称为 <code>oom_score</code>，==显示在内存紧张时终止该进程的可能性有多大==。该 Score 与进程使用的内存量成比例。 Score 是进程使用内存的百分比乘以10。因此，最大分数是 $100% \times 10 = 1000$。此外，如果一个进程以特权用户身份运行，那么与普通用户进程相比，它的 <code>oom_score</code> 会稍低。</p>
<p>在主发行版内核会将 <code>/proc/sys/vm/overcommit_memory</code> 的默认值设置为零，这意味着进程可以请求比系统中当前可用的内存更多的内存。这是基于以下启发式完成的：分配的内存不会立即使用，并且进程在其生命周期内也不会使用它们分配的所有内存。如果没有过度使用，系统将无法充分利用其内存，从而浪费一些内存。过量使用内存允许系统以更有效的方式使用内存，但存在 OOM 情况的风险。占用内存的程序会耗尽系统内存，使整个系统陷入瘫痪。当内存太低时，这可能会导致这样的情况：即使是单个页面也无法分配给用户进程，从而允许管理员终止适当的任务，或者内核执行重要操作，例如释放内存。在这种情况下，OOM Killer 就会介入，并将该进程识别为牺牲品，以保证系统其余部分的利益。</p>
<p>用户和系统管理员经常询问控制 OOM Killer 行为的方法。为了方便控制，引入了 <code>/proc/&lt;pid&gt;/oom_adj</code> 来防止系统中的重要进程被杀死，并定义进程被杀死的顺序。 oom_adj 的可能值范围为 -17 到 +15。Score 越高，相关进程就越有可能被 OOM-killer Kill。如果 <code>oom_adj</code> 设置为 -17，则 OOM Killer 不会  Kill 该进程。</p>
<p>oom_score 分数为 1 ~ 1000，值越低，程序被杀死的机会就越小。</p>
<ul>
<li>oom_score 0 表示该进程未使用任何可用内存。</li>
<li>oom_score  1000 表示该进程正在使用 100% 的可用内存，大于1000，也取1000。</li>
</ul>
<h3 id="谁是糟糕的进程">谁是糟糕的进程？</h3>
<p>在内存不足的情况下选择要被终止的进程是基于其  <em>oom_score</em> 。糟糕进程 Score 被记录在 <code>/proc/&lt;pid&gt;/oom_score</code> 文件中。该值是基于系统损失的最小工作量、回收的大量内存、不终止任何消耗大量内存的无辜进程以及终止的进程数量最小化（如果可能限制在一个）等因素来确定的。糟糕程度得分是使用进程的原始内存大小、其 CPU 时间（utime + stime）、运行时间（uptime - 启动时间）以及其 <code>oom_adj</code> 值计算的。进程使用的内存越多，得分越高。进程在系统中存在的时间越长，得分越小。</p>
<h3 id="列出所有正在运行的进程的oom-score">列出所有正在运行的进程的OOM Score</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">printf</span> <span class="s1">&#39;PID\tOOM Score\tOOM Adj\tCommand\n&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="nb">read</span> -r pid comm<span class="p">;</span> <span class="k">do</span> <span class="o">[</span> -f /proc/<span class="nv">$pid</span>/oom_score <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="k">$(</span>cat /proc/<span class="nv">$pid</span>/oom_score<span class="k">)</span> !<span class="o">=</span> <span class="m">0</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">printf</span> <span class="s1">&#39;%d\t%d\t\t%d\t%s\n&#39;</span> <span class="s2">&#34;</span><span class="nv">$pid</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="k">$(</span>cat /proc/<span class="nv">$pid</span>/oom_score<span class="k">)</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="k">$(</span>cat /proc/<span class="nv">$pid</span>/oom_score_adj<span class="k">)</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$comm</span><span class="s2">&#34;</span><span class="p">;</span> <span class="k">done</span> &lt; &lt;<span class="o">(</span>ps -e -o <span class="nv">pid</span><span class="o">=</span> -o <span class="nv">comm</span><span class="o">=)</span> <span class="p">|</span> sort -k 2nr
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="如何检查进程是否已被-oom-终止">如何检查进程是否已被 OOM 终止</h3>
<p>最简单的方法是查看<code>grep</code>系统日志。在 Ubuntu 中：<code>grep -i kill /var/log/syslog</code>。如果进程已被终止，您可能会得到类似的结果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">my_process invoked oom-killer: <span class="nv">gfp_mask</span><span class="o">=</span>0x201da, <span class="nv">order</span><span class="o">=</span>0, <span class="nv">oom_score_adj</span><span class="o">=</span><span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="kubernetes的qos是如何设计的">Kubernetes的QoS是如何设计的</h2>
<p>Kubernetes 中 Pod 存在一个 “服务质量等级” (<em>QoS</em>)，它保证了Kubernetes 在 Node 资源不足时使用 QoS 类来就驱逐 Pod 作出决定。这个 QoS 就是基于 OOM Kill Score 和 Adj 来设计的。</p>
<p>对于用户来讲，Kubernetes Pod 的 QoS 有三类，这些设置是被自动设置的，除此之外还有两种单独的等级：“Worker 组件”，总共 Pod QoS 的级别有5种</p>
<ul>
<li>Kubelet</li>
<li>KubeProxy</li>
<li>Guaranteed</li>
<li>Besteffort</li>
<li>Burstable</li>
</ul>
<p>这些在 <a href="pkg/kubelet/qos/policy.go">pkg/kubelet/qos/policy.go</a> 中可以看到，其中 Burstable 属于一个动态的级别。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// KubeletOOMScoreAdj is the OOM score adjustment for Kubelet
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">KubeletOOMScoreAdj</span> <span class="kt">int</span> <span class="p">=</span> <span class="o">-</span><span class="mi">999</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// KubeProxyOOMScoreAdj is the OOM score adjustment for kube-proxy
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">KubeProxyOOMScoreAdj</span>  <span class="kt">int</span> <span class="p">=</span> <span class="o">-</span><span class="mi">999</span>
</span></span><span class="line"><span class="cl">	<span class="nx">guaranteedOOMScoreAdj</span> <span class="kt">int</span> <span class="p">=</span> <span class="o">-</span><span class="mi">998</span>
</span></span><span class="line"><span class="cl">	<span class="nx">besteffortOOMScoreAdj</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">1000</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中最重要的分数就是 Burstable，这保证了驱逐的优先级，他的算法为：$1000 - \frac{1000 \times Request}{memoryCapacity}$ ，Request 为 Deployment 这类清单中配置的 <em>Memory Request</em> 的部分，<em>memoryCapacity</em> 则为 Node 的内存数量。</p>
<p>例如 Node 为 64G，Pod Request 值配置了 2G，那么最终 <code>oom_score_adj</code> 的值为 $1000 - \frac{1000 \times Request}{memoryCapacity} = 1000 - \frac{1000\times2}{64} = 968$</p>
<p>这部分可以在下面代码中看到，其中算出的值将被写入 /proc/{pid}/oom_score_adj 文件内</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">GetContainerOOMScoreAdjust</span><span class="p">(</span><span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">container</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Container</span><span class="p">,</span> <span class="nx">memoryCapacity</span> <span class="kt">int64</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">types</span><span class="p">.</span><span class="nf">IsNodeCriticalPod</span><span class="p">(</span><span class="nx">pod</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Only node critical pod should be the last to get killed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="nx">guaranteedOOMScoreAdj</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">switch</span> <span class="nx">v1qos</span><span class="p">.</span><span class="nf">GetPodQOS</span><span class="p">(</span><span class="nx">pod</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">PodQOSGuaranteed</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Guaranteed containers should be the last to get killed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="nx">guaranteedOOMScoreAdj</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">PodQOSBestEffort</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">besteffortOOMScoreAdj</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Burstable containers are a middle tier, between Guaranteed and Best-Effort. Ideally,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// we want to protect Burstable containers that consume less memory than requested.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// The formula below is a heuristic. A container requesting for 10% of a system&#39;s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// memory will have an OOM score adjust of 900. If a process in container Y
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// uses over 10% of memory, its OOM score will be 1000. The idea is that containers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// which use more than their request will have an OOM score of 1000 and will be prime
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// targets for OOM kills.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Note that this is a heuristic, it won&#39;t work if a container has many small processes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">memoryRequest</span> <span class="o">:=</span> <span class="nx">container</span><span class="p">.</span><span class="nx">Resources</span><span class="p">.</span><span class="nx">Requests</span><span class="p">.</span><span class="nf">Memory</span><span class="p">().</span><span class="nf">Value</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">utilfeature</span><span class="p">.</span><span class="nx">DefaultFeatureGate</span><span class="p">.</span><span class="nf">Enabled</span><span class="p">(</span><span class="nx">features</span><span class="p">.</span><span class="nx">InPlacePodVerticalScaling</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">cs</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">podutil</span><span class="p">.</span><span class="nf">GetContainerStatus</span><span class="p">(</span><span class="nx">pod</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">ContainerStatuses</span><span class="p">,</span> <span class="nx">container</span><span class="p">.</span><span class="nx">Name</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">memoryRequest</span> <span class="p">=</span> <span class="nx">cs</span><span class="p">.</span><span class="nx">AllocatedResources</span><span class="p">.</span><span class="nf">Memory</span><span class="p">().</span><span class="nf">Value</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">oomScoreAdjust</span> <span class="o">:=</span> <span class="mi">1000</span> <span class="o">-</span> <span class="p">(</span><span class="mi">1000</span><span class="o">*</span><span class="nx">memoryRequest</span><span class="p">)</span><span class="o">/</span><span class="nx">memoryCapacity</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// A guaranteed pod using 100% of memory can have an OOM score of 10. Ensure
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// that burstable pods have a higher OOM score adjustment.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="nx">oomScoreAdjust</span><span class="p">)</span> <span class="p">&lt;</span> <span class="p">(</span><span class="mi">1000</span> <span class="o">+</span> <span class="nx">guaranteedOOMScoreAdj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="p">(</span><span class="mi">1000</span> <span class="o">+</span> <span class="nx">guaranteedOOMScoreAdj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Give burstable pods a higher chance of survival over besteffort pods.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="nx">oomScoreAdjust</span><span class="p">)</span> <span class="o">==</span> <span class="nx">besteffortOOMScoreAdj</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nx">oomScoreAdjust</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nx">oomScoreAdjust</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>到此可以了解到 Pod QoS 级别为</p>
<ul>
<li>
<p>Kubelet = KubeProxy = -999</p>
</li>
<li>
<p>Guaranteed = -998</p>
</li>
<li>
<p>1000(<em>Besteffort</em>) &gt; Burstable &gt; -998 (<em>Guaranteed</em>)</p>
</li>
<li>
<p>Besteffort = 1000</p>
</li>
</ul>
<p>那么在当 Node 节点内存不足时，发生驱逐的条件就会根据  <code>oom_score_adj</code> 完成，但当 Pod 中程序使用内存达到了 Limits 限制，此时的OOM Killed和上面阐述的无关。</p>
<h2 id="reference">Reference</h2>
<p><sup id="1">[1]</sup> <a href="https://lwn.net/Articles/317814/"><em>Taming the OOM killer</em></a></p>
<p><sup id="2">[2]</sup> <a href="https://unix.stackexchange.com/questions/153585/how-does-the-oom-killer-decide-which-process-to-kill-first"><em>How does the OOM killer decide which process to kill first?</em></a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>client-go - Pod使用in-cluster方式访问集群</title>
      <link>https://www.oomkill.com/2023/11/ch07-in-cluster-pod/</link>
      <pubDate>Wed, 15 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/11/ch07-in-cluster-pod/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>在我们基于 Kubernetes 编写云原生 GoLang 代码时，通常在本地调试时，使用 kubeconfig 文件，以构建基于 clientSet 的客户端。而在将代码作为容器部署到集群时，则会使用集群 (in-cluster) 内的配置。</p>
<p>clientcmd 模块用于通过传递本地 kubeconfig 文件构建 clientSet。因此，在容器内使用相同模块构建 clientSet 将需要维护容器进程可访问的 kubeconfig 文件，并设置具有访问 Kubernetes 资源权限的 serviceaccount token。</p>
<p>下面是一个基于 kubeconfig 访问集群的代码模式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nx">k8sconfig</span>  <span class="o">*</span><span class="kt">string</span> <span class="c1">//使用kubeconfig配置文件进行集群权限认证
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">restConfig</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span>
</span></span><span class="line"><span class="cl">    <span class="nx">err</span>        <span class="kt">error</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">home</span> <span class="o">:=</span> <span class="nx">homedir</span><span class="p">.</span><span class="nf">HomeDir</span><span class="p">();</span> <span class="nx">home</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">k8sconfig</span> <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;kubeconfig&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;./admin.conf&#34;</span><span class="p">),</span> <span class="s">&#34;kubernetes auth config&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">flag</span><span class="p">.</span><span class="nf">Parse</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Stat</span><span class="p">(</span><span class="o">*</span><span class="nx">k8sconfig</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">clientset</span><span class="p">,</span><span class="nx">err</span> <span class="o">:=</span> <span class="nx">kubernetes</span><span class="p">.</span><span class="nf">NewConfig</span><span class="p">(</span><span class="nx">k8sconfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样做可能导致 serviceaccount token 本身被潜在地暴露出去。如果任何用户能够执行到使用 kubeconfig 与集群通信的容器，那么就可以获取该 token，并可以伪装成服务账号从集群外部与 kube-apiserver 进行通信。</p>
<p>为了避免这种情况，我们在 client-go 模块中使用了 rest 包。这将帮助我们从集群内部与集群通信，前提是使用适当的服务账号运行。但这需要对代码进行重写，以适应从集群外部构建 client-set 的方式。</p>
<p>下面代码时使用 in-cluster 方式进行通讯的模式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">	<span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nx">k8sconfig</span>  <span class="o">*</span><span class="kt">string</span> <span class="c1">//使用kubeconfig配置文件进行集群权限认证
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">restConfig</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span>
</span></span><span class="line"><span class="cl">		<span class="nx">err</span>        <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">home</span> <span class="o">:=</span> <span class="nx">homedir</span><span class="p">.</span><span class="nf">HomeDir</span><span class="p">();</span> <span class="nx">home</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">k8sconfig</span> <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;kubeconfig&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;./admin.conf&#34;</span><span class="p">),</span> <span class="s">&#34;kubernetes auth config&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">k8sconfig</span> <span class="p">=</span> <span class="nx">k8sconfig</span>
</span></span><span class="line"><span class="cl">	<span class="nx">flag</span><span class="p">.</span><span class="nf">Parse</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Stat</span><span class="p">(</span><span class="o">*</span><span class="nx">k8sconfig</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">restConfig</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">rest</span><span class="p">.</span><span class="nf">InClusterConfig</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 这里是从masterUrl 或者 kubeconfig传入集群的信息，两者选一
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 先从 in-cluster 方式获取，如果不能获取，再执行这里
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">restConfig</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">clientcmd</span><span class="p">.</span><span class="nf">BuildConfigFromFlags</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="o">*</span><span class="nx">k8sconfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">restset</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">kubernetes</span><span class="p">.</span><span class="nf">NewForConfig</span><span class="p">(</span><span class="nx">restConfig</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>除了这些之外，还需要创建对应的 serviceaccount 来让 Pod 在 in-cluster 有权限获取到自己要的资源，下面是一个完整的 deployment 创建这些资源的清单</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Namespace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">infra</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRole</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">pod-proxier-secret-reader</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resources</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;pods&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">verbs</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;get&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;watch&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;list&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRoleBinding</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">pod-proxier-rolebinding</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">subjects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">pod-proxier-secret-sa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">infra</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">roleRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRole</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">pod-proxier-secret-reader</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apiGroup</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">infra</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">pod-proxier-secret-sa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">pod-proxier</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">pod-proxier</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">pod-proxier</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">serviceAccount</span><span class="p">:</span><span class="w"> </span><span class="l">pod-proxier-secret-sa</span><span class="w"> </span><span class="c"># 使用上面定义的 sa 进行in-cluster 访问</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">container-1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">haproxytech/haproxy-debian:2.6</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">hostPort</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">  </span><span class="c"># 添加 hostPort 字段</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">container-2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">container-2-image:tag</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">hostPort</span><span class="p">:</span><span class="w"> </span><span class="m">8081</span><span class="w">  </span><span class="c"># 添加 hostPort 字段</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>Kubernetes集群中的IP伪装 - ip-masq-agent</title>
      <link>https://www.oomkill.com/2023/10/ch24-ip-masq/</link>
      <pubDate>Sat, 28 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/10/ch24-ip-masq/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>“IP 伪装” 通常应用于云环境中，例如 GKE, AWS, CCE 等云厂商都有使用 “IP伪装” 技术，本文将围绕 “IP伪装” 技术本身，以及这项技术在 Kubernetes 集群中的实现应用 <em>ip-masq-agent</em> 的源码分析，以及 ”IP伪装“ 能为 Kubernetes 带来什么作用，这三个方向阐述。</p>
<h2 id="什么是ip伪装">什么是IP伪装？</h2>
<p>IP 伪装 (<em>IP Masquerade</em>)  是 Linux 中的一个网络功能，一对多 (1 to Many) 的网络地址转换 (NAT) 的功能 。</p>
<p>IP 伪装允许一组计算机通过 “伪装” 网关无形地访问互联网。对于互联网上的其他计算机，出站流量将看起来来自于 IP MASQ 服务器本身。互联网上任何希望发回数据包（作为答复）的主机必须将该数据包发送到网关 （IP MASQ 服务器本身）。记住，网关（IP MASQ 服务器本身）是互联网上唯一可见的主机。网关重写目标地址，用被伪装的机器的 IP 地址替换自己的地址，并将该数据包转发到本地网络进行传递。</p>
<p>除了增加的功能之外，IP Masquerade 为创建一个高度安全的网络环境提供了基础。通过良好构建的防火墙，突破经过良好配置的伪装系统和内部局域网的安全性应该会相当困难。</p>
<p>IP Masquerade 从 Linux 1.3.x 开始支持，目前基本所有 Linux 发行版都带有 IP 伪装的功能</p>
<h3 id="什么情况下不需要ip伪装">什么情况下不需要IP伪装</h3>
<ul>
<li>已经连接到互联网的独立主机</li>
<li>为其他主机分配了多个公共地址</li>
</ul>
<h2 id="ip伪装在kubernetes集群中的应用">IP伪装在Kubernetes集群中的应用</h2>
<p>IP 伪装通常应用在大规模 Kubernetes 集群中，主要用于解决 “地址冲突” 的问题，例如在 GCP 中，通常是一种 IP 可路由的网络模型，例如分配给 Pod service 的 ClusterIP 只能在 Kubernetes 集群内部可用，而分配 IP CIDR 又是一种不可控的情况，假设，我们为 k8s 分配的 IP CIDR 段如下表所示：</p>
<table>
<thead>
<tr>
<th>角色</th>
<th>IP CIDR</th>
</tr>
</thead>
<tbody>
<tr>
<td>Kubernetes Nodes</td>
<td>10.0.0.0/16</td>
</tr>
<tr>
<td>Kubernetes Services</td>
<td>10.1.0.0/16</td>
</tr>
<tr>
<td>Kubernetes Pods</td>
<td>192.168.0.0/24</td>
</tr>
<tr>
<td>其他不可控业务网段</td>
<td>192.168.0.0/24</td>
</tr>
</tbody>
</table>
<p>通过上表可以看出，通常管理员在管理  Kubernetes 集群会配置三个网段，此时的配置，如果 Pod 需要与其他节点网络进行通讯（如我需要连接数据库），那么可能会出现 ”IP 重叠“ 的现象，尤其是在公有云环境中，<font color="#f8070d" size=3>用户在配置 Kubernetes 集群网络时不知道数据中心所保留的 CIDR 是什么</font>，在这种情况下就很容易产生 ”IP 重叠“ 的现象，为了解决这个问题，Kubernetes 提出了一种使用 “IP伪装” 技术来解决这个问题。</p>
<blockquote>
<p>在不使用 IP Masquerade 的情况下， Kubernetes 集群管理员如果在规划集群 CIDR 时，必须要了解了解整个组织中已预留/未使用的 CIDR 规划。</p>
</blockquote>
<h2 id="ip-masquerade-agent">IP Masquerade Agent</h2>
<p>IP伪装在 kubernetes 中的应用是名为 <em>ip-masq-agent</em> 的项目， <em>ip-masq-agent</em> 是用于配置 iptables 规则，以便在将流量发送到集群节点的 IP 和集群 IP 范围之外的目标时处理伪装节点或 Pod 的 IP 地址。这本质上隐藏了集群节点 IP 地址后面的 Pod IP 地址。在某些环境中，去往&quot;外部&quot;地址的流量必须从已知的机器地址发出。 例如，在 GCP 中，任何到互联网的流量都必须来自 VM 的 IP。 使用容器时，如 GKE，从 Pod IP 发出的流量将被拒绝出站。 为了避免这种情况，我们必须将 Pod IP 隐藏在 VM 自己的 IP 地址后面 - 通常称为&quot;伪装&quot;。 默认情况下，代理配置为将 RFC 1918指定的三个私有 IP 范围视为非伪装 CIDR。 这些范围是 <code>10.0.0.0/8</code>、<code>172.16.0.0/12</code> 和 <code>192.168.0.0/16</code>。 默认情况下，代理还将链路本地地址（169.254.0.0/16）视为非伪装 CIDR。 代理程序配置为每隔 60 秒从 <strong>/etc/config/ip-masq-agent</strong> 重新加载其配置， 这也是可修改的。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/cylonchau/imgbed/img/ip-masq.png" alt="masq/non-masq example"  /></p>
<center>图：ip-masq-agent工作原理</center>
<center><em>Source：</em>https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/ip-masq-agent/</center><br>
<p>默认情况下，CIDR <em>10.0.0.0/8</em>，<em>172.16.0.0/12</em>, <em>192.168.0.0/16</em> 范围内的流量不会被伪装。 任何其他 CIDR 流量将被伪装。 Pod 访问本地目的地的例子，可以是其节点 (Node) 的 IP 地址，另一节点 (Node) 的地址或集群的 IP 地址 (ClusterIP) 范围内的一个 IP 地址。 默认情况下，任何其他流量都将伪装。以下条目展示了 ip-masq-agent 的默认使用的规则：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ iptables -t nat -L IP-MASQ-AGENT
</span></span><span class="line"><span class="cl">target     prot opt <span class="nb">source</span>               destination
</span></span><span class="line"><span class="cl">RETURN     all  --  anywhere             169.254.0.0/16       /* ip-masq-agent: cluster-local traffic should not be subject to MASQUERADE */ ADDRTYPE match dst-type !LOCAL
</span></span><span class="line"><span class="cl">RETURN     all  --  anywhere             10.0.0.0/8           /* ip-masq-agent: cluster-local traffic should not be subject to MASQUERADE */ ADDRTYPE match dst-type !LOCAL
</span></span><span class="line"><span class="cl">RETURN     all  --  anywhere             172.16.0.0/12        /* ip-masq-agent: cluster-local traffic should not be subject to MASQUERADE */ ADDRTYPE match dst-type !LOCAL
</span></span><span class="line"><span class="cl">RETURN     all  --  anywhere             192.168.0.0/16       /* ip-masq-agent: cluster-local traffic should not be subject to MASQUERADE */ ADDRTYPE match dst-type !LOCAL
</span></span><span class="line"><span class="cl">MASQUERADE  all  --  anywhere             anywhere             /* ip-masq-agent: outbound traffic should be subject to MASQUERADE <span class="o">(</span>this match must come after cluster-local CIDR matches<span class="o">)</span> */ ADDRTYPE match dst-type !LOCAL
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="部署-ip-masq-agent">部署 ip-masq-agent</h2>
<p>ip-masq-agent 的部署可以直接使用官方提供的资源清单 <sup><a href="#1">[1]</a></sup></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/ip-masq-agent/master/ip-masq-agent.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>清除 ip-masq-agent</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="l">kubectl delete -f https://raw.githubusercontent.com/kubernetes-sigs/ip-masq-agent/master/ip-masq-agent.yaml</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>部署后需要同时将对应的节点标签应用于集群中希望代理运行的任何节点</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">kubectl label nodes my-node node.kubernetes.io/masq-agent-ds-ready<span class="o">=</span><span class="nb">true</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>配置好之后，需要创建配置，以对不伪装的地址增加白名单</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nonMasqueradeCIDRs:
</span></span><span class="line"><span class="cl">  - 10.0.0.0/8
</span></span><span class="line"><span class="cl">resyncInterval: 60s
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="ip-masq-agent-深入解析">ip-masq-agent 深入解析</h2>
<p>ip-masq-agent 的代码很少，只有400多行，但是作用却很大，直接可以解决管理员集群网络规划与大拓扑网络的网络冲突问题，下面就分析他的原理，以及如何完成集群 IP 伪装功能</p>
<h3 id="ip-masq-agent源码的分析">ip-masq-agent源码的分析</h3>
<p>ip-masq-agent 只有这一个文件 cmd/ip-masq-agent/ip-masq-agent.go，包含了整个的业务逻辑</p>
<p>首先在 <a href="https://github.com/kubernetes-sigs/ip-masq-agent/blob/master/cmd/ip-masq-agent/ip-masq-agent.go#L139">main()</a> 启动时，定义了这个链的名称，之后调用 Run()</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">masqChain</span> <span class="p">=</span> <span class="nx">utiliptables</span><span class="p">.</span><span class="nf">Chain</span><span class="p">(</span><span class="o">*</span><span class="nx">masqChainFlag</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">..</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">m</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在 <a href="https://github.com/kubernetes-sigs/ip-masq-agent/blob/1a093b8aad7c372c535c1fb104377728c1e54a7a/cmd/ip-masq-agent/ip-masq-agent.go#L153-L175">Run()</a> 中，只是做了周期性同步</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">MasqDaemon</span><span class="p">)</span> <span class="nf">Run</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Periodically resync to reconfigure or heal from any rule decay
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">defer</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">ResyncInterval</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// resync config
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nf">osSyncConfig</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">glog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;error syncing configuration: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// resync rules
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nf">syncMasqRules</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">glog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;error syncing masquerade rules: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// resync ipv6 rules
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nf">syncMasqRulesIPv6</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">glog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;error syncing masquerade rules for ipv6: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>重点就在 m.osSyncConfig() , 这里做的是同步实际的规则</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">MasqDaemon</span><span class="p">)</span> <span class="nf">syncMasqRules</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 指定的链是否存在，如果不存在则创建，masqChain全局变量 是 main() 中初始化的名称，默认为IP-MASQ-AGENT
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">m</span><span class="p">.</span><span class="nx">iptables</span><span class="p">.</span><span class="nf">EnsureChain</span><span class="p">(</span><span class="nx">utiliptables</span><span class="p">.</span><span class="nx">TableNAT</span><span class="p">,</span> <span class="nx">masqChain</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// ensure that any non-local in POSTROUTING jumps to masqChain
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nf">ensurePostroutingJump</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// build up lines to pass to iptables-restore
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">lines</span> <span class="o">:=</span> <span class="nx">bytes</span><span class="p">.</span><span class="nf">NewBuffer</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">writeLine</span><span class="p">(</span><span class="nx">lines</span><span class="p">,</span> <span class="s">&#34;*nat&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">writeLine</span><span class="p">(</span><span class="nx">lines</span><span class="p">,</span> <span class="nx">utiliptables</span><span class="p">.</span><span class="nf">MakeChainLine</span><span class="p">(</span><span class="nx">masqChain</span><span class="p">))</span> <span class="c1">// effectively flushes masqChain atomically with rule restore
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// local-link cidr 不伪装（&#34;169.254.0.0/16&#34;） 固定值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">!</span><span class="nx">m</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">MasqLinkLocal</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">writeNonMasqRule</span><span class="p">(</span><span class="nx">lines</span><span class="p">,</span> <span class="nx">linkLocalCIDR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 用户定义的不伪装的 CIDR 部分
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">cidr</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">m</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">NonMasqueradeCIDRs</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nf">isIPv6CIDR</span><span class="p">(</span><span class="nx">cidr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">writeNonMasqRule</span><span class="p">(</span><span class="nx">lines</span><span class="p">,</span> <span class="nx">cidr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// masquerade all other traffic that is not bound for a --dst-type LOCAL destination
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">writeMasqRule</span><span class="p">(</span><span class="nx">lines</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">writeLine</span><span class="p">(</span><span class="nx">lines</span><span class="p">,</span> <span class="s">&#34;COMMIT&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nx">iptables</span><span class="p">.</span><span class="nf">RestoreAll</span><span class="p">(</span><span class="nx">lines</span><span class="p">.</span><span class="nf">Bytes</span><span class="p">(),</span> <span class="nx">utiliptables</span><span class="p">.</span><span class="nx">NoFlushTables</span><span class="p">,</span> <span class="nx">utiliptables</span><span class="p">.</span><span class="nx">NoRestoreCounters</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>看完同步规则后，了解到上面就是两个操作，”伪装“ 和 “不伪装” 的操作如下所示</p>
<p>不伪装部分实际上就是关键词 RETURN</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">writeNonMasqRule</span><span class="p">(</span><span class="nx">lines</span> <span class="o">*</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span><span class="p">,</span> <span class="nx">cidr</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">writeRule</span><span class="p">(</span><span class="nx">lines</span><span class="p">,</span> <span class="nx">utiliptables</span><span class="p">.</span><span class="nx">Append</span><span class="p">,</span> <span class="nx">masqChain</span><span class="p">,</span> <span class="nx">nonMasqRuleComment</span><span class="p">,</span> <span class="s">&#34;-d&#34;</span><span class="p">,</span> <span class="nx">cidr</span><span class="p">,</span> <span class="s">&#34;-j&#34;</span><span class="p">,</span> <span class="s">&#34;RETURN&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>伪装部分实际上就是关键词 MASQUERADE</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">writeMasqRule</span><span class="p">(</span><span class="nx">lines</span> <span class="o">*</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">writeRule</span><span class="p">(</span><span class="nx">lines</span><span class="p">,</span> <span class="nx">utiliptables</span><span class="p">.</span><span class="nx">Append</span><span class="p">,</span> <span class="nx">masqChain</span><span class="p">,</span> <span class="nx">masqRuleComment</span><span class="p">,</span> <span class="s">&#34;-j&#34;</span><span class="p">,</span> <span class="s">&#34;MASQUERADE&#34;</span><span class="p">,</span> <span class="s">&#34;--random-fully&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="伪装网络包的分析">伪装网络包的分析</h3>
<p>创建一个 ip-masq-agent 的配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tee &gt; config <span class="s">&lt;&lt;EOF
</span></span></span><span class="line"><span class="cl"><span class="s">nonMasqueradeCIDRs:
</span></span></span><span class="line"><span class="cl"><span class="s">  - 10.244.0.0/16
</span></span></span><span class="line"><span class="cl"><span class="s">  - 192.0.0.0/8
</span></span></span><span class="line"><span class="cl"><span class="s">resyncInterval: 60s
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>创建 configmap</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="l">kubectl create configmap ip-masq-agent --from-file=config --namespace=kube-system</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>验证规则是否生效</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ iptables -t nat -L IP-MASQ-AGENT
</span></span><span class="line"><span class="cl">Chain IP-MASQ-AGENT <span class="o">(</span><span class="m">1</span> references<span class="o">)</span>
</span></span><span class="line"><span class="cl">target     prot opt <span class="nb">source</span>               destination         
</span></span><span class="line"><span class="cl">RETURN     all  --  anywhere             link-local/16        /* ip-masq-agent: <span class="nb">local</span> traffic is not subject to MASQUERADE */
</span></span><span class="line"><span class="cl">RETURN     all  --  anywhere             10.244.0.0/16        /* ip-masq-agent: <span class="nb">local</span> traffic is not subject to MASQUERADE */
</span></span><span class="line"><span class="cl">RETURN     all  --  anywhere             192.0.0.0/8          /* ip-masq-agent: <span class="nb">local</span> traffic is not subject to MASQUERADE */
</span></span><span class="line"><span class="cl">MASQUERADE  all  --  anywhere             anywhere             /* ip-masq-agent: outbound traffic is subject to MASQUERADE <span class="o">(</span>must be last in chain<span class="o">)</span> */
</span></span></code></pre></td></tr></table>
</div>
</div><p>抓包查看包是否被伪装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nv">cpid</span><span class="o">=</span><span class="sb">`</span>docker inspect --format <span class="s1">&#39;{{.State.Pid}}&#39;</span> 6b0a92ca4327<span class="sb">`</span>
</span></span><span class="line"><span class="cl">$ nsenter -t <span class="nv">$cpid</span> -n ifconfig eth0<span class="p">|</span>grep inet
</span></span><span class="line"><span class="cl">        inet 10.244.196.132  netmask 255.255.255.255  broadcast 10.244.196.132
</span></span><span class="line"><span class="cl">$ nsenter -t <span class="nv">$cpid</span> -n ping 10.0.0.2
</span></span><span class="line"><span class="cl">$ tcpdump -i any icmp and host 10.0.0.2 -w icap.cap
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过导出的 wireshark 包，可以很清楚的看到，去往 10.0.0.2 的已经被伪装了</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/cylonchau/imgbed/img/image-20231105222224315.png" alt="image-20231105222224315"  /></p>
<center>图：Kubernetes集群节点IP伪装抓包</center>
<h2 id="reference"><strong>Reference</strong></h2>
<p><sup id="1">[1]</sup> <a href="https://github.com/kubernetes-sigs/ip-masq-agent/blob/master/ip-masq-agent.yaml">ip-masq-agent.yaml</a></p>
<p><sup id="2">[2]</sup> <a href="https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/ip-masq-agent/">IP Masquerade Agent 用户指南</a></p>
<p><sup id="3">[3]</sup> <a href="https://medium.com/google-cloud/ip-address-management-strategy-a-crucial-aspect-of-running-gke-f063fe90cfbd">IP address management strategy — a crucial aspect of running GKE</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>kube-proxy参数ClusterCIDR做什么</title>
      <link>https://www.oomkill.com/2023/09/ch26-kube-proxy-clustercidr/</link>
      <pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/09/ch26-kube-proxy-clustercidr/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>我们可以看到，<em>kube-proxy</em> 有一个 <em>&ndash;cluster-cidr</em> 的参数，我们就来解开这个参数究竟有没有用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kube-proxy -h<span class="p">|</span>grep cidr
</span></span><span class="line"><span class="cl">      --cluster-cidr string                          The CIDR range of pods in the cluster. When configured, traffic sent to a Service cluster IP from outside this range will be masqueraded and traffic sent from pods to an external LoadBalancer IP will be directed to the respective cluster IP instead
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到，参数说明是说，如果配置，那么从外部发往 Service Cluster IP 的流量将被伪装，从 Pod 发往外部 LB 将被直接发往对应的 cluster IP。但实际上做了什么并不知道，那么就从源码解决这个问题。</p>
<p>首先我们知道，参数是作为 kube-proxy server 的参数，位于 cmd/kube-proxy 下，而对应的逻辑则位于 pkg/kube-proxy 下，参数很明显，就是 clusterCIDR，那么我们就寻找这个参数的调用即可。</p>
<p>在 API <em>KubeProxyConfiguration</em> 中我们找到的对应的 <em>ClusterCIDR</em> ，在这里的注释又变为 ”用于桥接集群外部流量“。这里涉及到关于 <em>kube-proxy</em> 的两个模式 “LocalMode” 和 “ProxyMode“。</p>
<ul>
<li><em><strong>LocalMode</strong></em>：表示是来自节点本地流量的模式，包含 ClusterCIDR, NodeCIDR</li>
<li><em><strong>ProxyMode</strong></em>：就是 kube-proxy 最常用的模式，包含 iptables, IPVS, user namespace, kernelspace</li>
</ul>
<p>而参数 <em>&ndash;cluster-cidr</em> 是作为选择使用的 “本地网络检测器” (Local Network Detector)，这里起到的作用就是 “将集群外部的流量伪装成 service VIP” ，从代码中我们可以看到 Detector 将决定了你使用的是什么网络，无论是 <em>LocalMode</em> 还是 <em>ProxyMode</em>。</p>
<p>在代码 <a href="cmd/kube-proxy/app/server_others.go">cmd/kube-proxy/app/server_others.go</a> 中可以看到是如何选择的 <em>LocalMode</em> 方式，可以看出在存在三种模式：</p>
<ul>
<li>没有配置 <em>&ndash;cluster-cidr</em> 则会返回一个 <em>NoOpLocalDetector</em>；</li>
<li>在配置了 <em>&ndash;cluster-cidr</em> ，则将会使用 CIDR 的本地模式；</li>
<li>如果  <em>&ndash;cluster-cidr</em> 没有配置，但配置了 LocalModeNodeCIDR，则会设置为 CNI 为该 Node 配置的 POD CIDR 的地址 (使用参数 <em>&ndash;proxy-mode</em> 指定的模式，如果为空，那么会检测对应操作系统默认 Linux 为 iptables，如果内核开启 IPVS 那么则使用 IPVS，windows 默认为 kernelspace)</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">getLocalDetector</span><span class="p">(</span><span class="nx">mode</span> <span class="nx">proxyconfigapi</span><span class="p">.</span><span class="nx">LocalMode</span><span class="p">,</span> <span class="nx">config</span> <span class="o">*</span><span class="nx">proxyconfigapi</span><span class="p">.</span><span class="nx">KubeProxyConfiguration</span><span class="p">,</span> <span class="nx">ipt</span> <span class="nx">utiliptables</span><span class="p">.</span><span class="nx">Interface</span><span class="p">,</span> <span class="nx">nodeInfo</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Node</span><span class="p">)</span> <span class="p">(</span><span class="nx">proxyutiliptables</span><span class="p">.</span><span class="nx">LocalTrafficDetector</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">switch</span> <span class="nx">mode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">proxyconfigapi</span><span class="p">.</span><span class="nx">LocalModeClusterCIDR</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">strings</span><span class="p">.</span><span class="nf">TrimSpace</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">ClusterCIDR</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Warning</span><span class="p">(</span><span class="s">&#34;detect-local-mode set to ClusterCIDR, but no cluster CIDR defined&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">proxyutiliptables</span><span class="p">.</span><span class="nf">NewDetectLocalByCIDR</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">ClusterCIDR</span><span class="p">,</span> <span class="nx">ipt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">proxyconfigapi</span><span class="p">.</span><span class="nx">LocalModeNodeCIDR</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">strings</span><span class="p">.</span><span class="nf">TrimSpace</span><span class="p">(</span><span class="nx">nodeInfo</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">PodCIDR</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Warning</span><span class="p">(</span><span class="s">&#34;detect-local-mode set to NodeCIDR, but no PodCIDR defined at node&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">proxyutiliptables</span><span class="p">.</span><span class="nf">NewDetectLocalByCIDR</span><span class="p">(</span><span class="nx">nodeInfo</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">PodCIDR</span><span class="p">,</span> <span class="nx">ipt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;detect-local-mode: &#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">mode</span><span class="p">),</span> <span class="s">&#34; , defaulting to no-op detect-local&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">proxyutiliptables</span><span class="p">.</span><span class="nf">NewNoOpLocalDetector</span><span class="p">(),</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里我们以 IPVS 为例，如果开启了 localDetector 在 这个 <em>ipvs proxier</em> 中做了什么? 在代码 <a href="pkg/proxy/ipvs/proxier.go">pkg/proxy/ipvs/proxier.go</a> 可以看到</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeClusterIPSet</span><span class="p">].</span><span class="nf">isEmpty</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">args</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">args</span><span class="p">[:</span><span class="mi">0</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">			<span class="s">&#34;-A&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">kubeServicesChain</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">			<span class="s">&#34;-m&#34;</span><span class="p">,</span> <span class="s">&#34;comment&#34;</span><span class="p">,</span> <span class="s">&#34;--comment&#34;</span><span class="p">,</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeClusterIPSet</span><span class="p">].</span><span class="nf">getComment</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">			<span class="s">&#34;-m&#34;</span><span class="p">,</span> <span class="s">&#34;set&#34;</span><span class="p">,</span> <span class="s">&#34;--match-set&#34;</span><span class="p">,</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeClusterIPSet</span><span class="p">].</span><span class="nx">Name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">masqueradeAll</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nf">writeLine</span><span class="p">(</span><span class="nx">proxier</span><span class="p">.</span><span class="nx">natRules</span><span class="p">,</span> <span class="nb">append</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="s">&#34;dst,dst&#34;</span><span class="p">,</span> <span class="s">&#34;-j&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">KubeMarkMasqChain</span><span class="p">))</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">localDetector</span><span class="p">.</span><span class="nf">IsImplemented</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// This masquerades off-cluster traffic to a service VIP.  The idea
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// is that you can establish a static route for your Service range,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// routing to any node, and that node will bridge into the Service
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// for you.  Since that might bounce off-node, we masquerade here.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// If/when we support &#34;Local&#34; policy for VIPs, we should update this.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nf">writeLine</span><span class="p">(</span><span class="nx">proxier</span><span class="p">.</span><span class="nx">natRules</span><span class="p">,</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">localDetector</span><span class="p">.</span><span class="nf">JumpIfNotLocal</span><span class="p">(</span><span class="nb">append</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="s">&#34;dst,dst&#34;</span><span class="p">),</span> <span class="nb">string</span><span class="p">(</span><span class="nx">KubeMarkMasqChain</span><span class="p">))</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Masquerade all OUTPUT traffic coming from a service ip.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// The kube dummy interface has all service VIPs assigned which
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// results in the service VIP being picked as the source IP to reach
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// a VIP. This leads to a connection from VIP:&lt;random port&gt; to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// VIP:&lt;service port&gt;.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// Always masquerading OUTPUT (node-originating) traffic with a VIP
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// source ip and service port destination fixes the outgoing connections.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nf">writeLine</span><span class="p">(</span><span class="nx">proxier</span><span class="p">.</span><span class="nx">natRules</span><span class="p">,</span> <span class="nb">append</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="s">&#34;src,dst&#34;</span><span class="p">,</span> <span class="s">&#34;-j&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">KubeMarkMasqChain</span><span class="p">))</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到“不管使用了什么模式，都会更新一条 iptables 规则” 这就代表了使用了什么模式，而这个则被称之为 <em>LocalTrafficDetector</em>，也就是本地流量的检测，那我们看一下这个做了什么。</p>
<p>在使用 IPVS 的日志中，可以看到这样一条规则，这个是来自集群外部的 IP 去访问集群 CLUSTER IP (<em>KUBE-CLUSTER-IP</em>，即集群内所有 service IP) 时, 将非集群 IP 地址，转换为集群内的 IP 地址 (做源地址转换)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>DetectLocalByCIDR <span class="o">(</span>10.244.0.0/16<span class="o">)]</span> Jump Not Local: <span class="o">[</span>-A KUBE-SERVICES -m comment --comment <span class="s2">&#34;Kubernetes service cluster ip + port for masquerade purpose&#34;</span> -m <span class="nb">set</span> --match-set KUBE-CLUSTER-IP dst,dst ! -s 10.244.0.0/16 -j KUBE-MARK-MASQ<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而这个步骤分布在所有模式下 (iptables&amp;ipvs)，这里还是没说到两个概念 <em><strong>LocalMode</strong></em> 和 <em><strong>ProxyMode</strong></em>，实际上这两个模式的区别为：</p>
<ul>
<li><strong>LocalMode</strong>：集群 IP 伪装采用 <em>ClusterCIDR</em> 还是 <em>NodeCIDR</em>，<em>ClusterCIDR</em> 是使用集群 Pod IP 的地址段 (IP Range)，而 <em>LocalCIDR</em> 只仅仅使用被分配给该 kubernetes node 上的 Pod 做地址伪装</li>
<li><strong>ProxyMode</strong>：和 <em><strong>LocalMode</strong></em> 没有任何关系，是 <em>kube-proxy</em> 在运行时使用什么为集群 service 做代理，例如 iptables, ipvs ，而在这些模式下将采用什么 <em>LocalMode</em> 为集群外部地址作伪装，大概分为三种类型：
<ul>
<li>为来自集群外部地址 (<em>cluster-off</em>)：所有非 Pod 地址的请求执行跳转 (<em>KUBE-POSTROUTING</em>)</li>
<li>没有操作 ：在非 iptables/ipvs 模式下，不做伪装</li>
<li>masqueradeAll：为所有访问 cluster ip 的地址做伪装</li>
</ul>
</li>
</ul>
<h2 id="clustercidr-原理">ClusterCIDR 原理</h2>
<p><em>kube-proxy</em> 为 kube node 上生成一些 NAT 规则，如下所示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">-A KUBE-FIREWALL -j KUBE-MARK-DROP
</span></span><span class="line"><span class="cl">-A KUBE-LOAD-BALANCER -j KUBE-MARK-MASQ
</span></span><span class="line"><span class="cl">-A KUBE-MARK-MASQ -j MARK --set-xmark 0x4000/0x4000
</span></span><span class="line"><span class="cl">-A KUBE-NODE-PORT -p tcp -m comment --comment <span class="s2">&#34;Kubernetes nodeport TCP port for masquerade purpose&#34;</span> -m <span class="nb">set</span> --match-set KUBE-NODE-PORT-TCP dst -j KUBE-MARK-MASQ
</span></span><span class="line"><span class="cl">-A KUBE-POSTROUTING -m comment --comment <span class="s2">&#34;Kubernetes endpoints dst ip:port, source ip for solving hairpin purpose&#34;</span> -m <span class="nb">set</span> --match-set KUBE-LOOP-BACK dst,dst,src -j MASQUERADE
</span></span><span class="line"><span class="cl">-A KUBE-POSTROUTING -m mark ! --mark 0x4000/0x4000 -j RETURN
</span></span><span class="line"><span class="cl">-A KUBE-POSTROUTING -j MARK --set-xmark 0x4000/0x0
</span></span><span class="line"><span class="cl">-A KUBE-POSTROUTING -m comment --comment <span class="s2">&#34;kubernetes service traffic requiring SNAT&#34;</span> -j MASQUERADE
</span></span><span class="line"><span class="cl">-A KUBE-SERVICES ! -s 10.244.0.0/16 -m comment --comment <span class="s2">&#34;Kubernetes service cluster ip + port for masquerade purpose&#34;</span> -m <span class="nb">set</span> --match-set KUBE-CLUSTER-IP dst,dst -j KUBE-MARK-MASQ
</span></span><span class="line"><span class="cl">-A KUBE-SERVICES -m addrtype --dst-type LOCAL -j KUBE-NODE-PORT
</span></span><span class="line"><span class="cl">-A KUBE-SERVICES -m <span class="nb">set</span> --match-set KUBE-CLUSTER-IP dst,dst -j ACCEPT
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到这里做了几个链，在 <em>KUBE-SERVICES</em> 链中指明了非来自 ClusterCIDR 的 IP 都做一个，并且访问的目的地址是 <em>KUBE-CLUSTER-IP</em> (ipset 里配置的地址) 那么将跳转到 <em>KUBE-MARK-MASQ</em> 链做一个 <code> --set-xmark 0x4000/0x4000</code> ，而在 <em>KUBE-POSTROUTING</em> 中对没有被标记 <code>0x4000/0x4000</code> 的操作不做处理</p>
<p>具体来说，<code>-A KUBE-NODE-PORT -p tcp -m comment --comment &quot;Kubernetes nodeport TCP port for masquerade purpose&quot; -m set --match-set KUBE-NODE-PORT-TCP dst -j KUBE-MARK-MASQ</code> 做了如下操作：</p>
<ul>
<li><code>-A KUBE-SERVICES</code>：将这条规则附加到名为<code>KUBE-SERVICES</code>的iptables链。</li>
<li><code>! -s 10.244.0.0/16</code>：排除源IP地址为<code>10.244.0.0/16</code>的流量（即来自Kubernetes服务集群IP的流量）。</li>
<li><code>-m comment --comment &quot;Kubernetes service cluster ip + port for masquerade purpose&quot;</code>：添加一条注释，说明这个规则的用途。</li>
<li><code>-m set --match-set KUBE-CLUSTER-IP dst,dst</code>：使用IP集合<code>KUBE-CLUSTER-IP</code>来匹配目标IP地址和目标端口。</li>
<li><code>-j KUBE-MARK-MASQ</code>：如果流量匹配了前面的条件，将流量传递到名为<code>KUBE-MARK-MASQ</code>的目标。</li>
</ul>
<blockquote>
<p><code>iptables -j RETURN</code> 是用于iptables规则中的一个目标动作，它不是用于拒绝或接受数据包的动作，而是用于从当前规则链中返回（返回到调用链）的动作。</p>
<p>具体来说，当规则链中的数据包被标记为 <code>RETURN</code> 时，它们将不再受到当前链中后续规则的影响，而会立即返回到调用链，以便继续进行后续规则的处理。这通常用于某些高级设置，例如在自定义规则链中执行特定的操作后返回到主要的防火墙链。</p>
</blockquote>
<p>从代码中可以看到，对应执行 jump 的操作的链就是 <em>KUBE-MARK-MASQ</em></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">localDetector</span><span class="p">.</span><span class="nf">IsImplemented</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// This masquerades off-cluster traffic to a service VIP.  The idea
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// is that you can establish a static route for your Service range,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// routing to any node, and that node will bridge into the Service
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// for you.  Since that might bounce off-node, we masquerade here.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// If/when we support &#34;Local&#34; policy for VIPs, we should update this.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nf">writeLine</span><span class="p">(</span><span class="nx">proxier</span><span class="p">.</span><span class="nx">natRules</span><span class="p">,</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">localDetector</span><span class="p">.</span><span class="nf">JumpIfNotLocal</span><span class="p">(</span><span class="nb">append</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="s">&#34;dst,dst&#34;</span><span class="p">),</span> <span class="nb">string</span><span class="p">(</span><span class="nx">KubeMarkMasqChain</span><span class="p">))</span><span class="o">...</span><span class="p">)</span>	
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// KubeMarkMasqChain is the mark-for-masquerade chain
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">KubeMarkMasqChain</span> <span class="nx">utiliptables</span><span class="p">.</span><span class="nx">Chain</span> <span class="p">=</span> <span class="s">&#34;KUBE-MARK-MASQ&#34;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="c1">// 具体拼接的就是 -j 链名的操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">detectLocalByCIDR</span><span class="p">)</span> <span class="nf">JumpIfNotLocal</span><span class="p">(</span><span class="nx">args</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="nx">toChain</span> <span class="kt">string</span><span class="p">)</span> <span class="p">[]</span><span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">line</span> <span class="o">:=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="s">&#34;!&#34;</span><span class="p">,</span> <span class="s">&#34;-s&#34;</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">cidr</span><span class="p">,</span> <span class="s">&#34;-j&#34;</span><span class="p">,</span> <span class="nx">toChain</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;[DetectLocalByCIDR (&#34;</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">cidr</span><span class="p">,</span> <span class="s">&#34;)]&#34;</span><span class="p">,</span> <span class="s">&#34; Jump Not Local: &#34;</span><span class="p">,</span> <span class="nx">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">line</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>继续往下 <em>KUBE-POSTROUTING</em> 可以看到对应伪装是一个动态的源地址改造，而 <em>RETURN</em> 则不是被标记的请求</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">Chain</span> <span class="nx">KUBE</span><span class="o">-</span><span class="nf">POSTROUTING</span> <span class="p">(</span><span class="mi">1</span> <span class="nx">references</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">target</span>     <span class="nx">prot</span> <span class="nx">opt</span> <span class="nx">source</span>               <span class="nx">destination</span>         
</span></span><span class="line"><span class="cl"><span class="nx">MASQUERADE</span>  <span class="nx">all</span>  <span class="o">--</span>  <span class="mf">0.0.0.0</span><span class="o">/</span><span class="mi">0</span>            <span class="mf">0.0.0.0</span><span class="o">/</span><span class="mi">0</span>            <span class="cm">/* Kubernetes endpoints dst ip:port, source ip for solving hairpin purpose */</span> <span class="nx">match</span><span class="o">-</span><span class="nx">set</span> <span class="nx">KUBE</span><span class="o">-</span><span class="nx">LOOP</span><span class="o">-</span><span class="nx">BACK</span> <span class="nx">dst</span><span class="p">,</span><span class="nx">dst</span><span class="p">,</span><span class="nx">src</span>
</span></span><span class="line"><span class="cl"><span class="nx">RETURN</span>     <span class="nx">all</span>  <span class="o">--</span>  <span class="mf">0.0.0.0</span><span class="o">/</span><span class="mi">0</span>            <span class="mf">0.0.0.0</span><span class="o">/</span><span class="mi">0</span>            <span class="nx">mark</span> <span class="nx">match</span> <span class="p">!</span> <span class="mh">0x4000</span><span class="o">/</span><span class="mh">0x4000</span>
</span></span><span class="line"><span class="cl"><span class="nx">MARK</span>       <span class="nx">all</span>  <span class="o">--</span>  <span class="mf">0.0.0.0</span><span class="o">/</span><span class="mi">0</span>            <span class="mf">0.0.0.0</span><span class="o">/</span><span class="mi">0</span>            <span class="nx">MARK</span> <span class="nx">xor</span> <span class="mh">0x4000</span>
</span></span><span class="line"><span class="cl"><span class="nx">MASQUERADE</span>  <span class="nx">all</span>  <span class="o">--</span>  <span class="mf">0.0.0.0</span><span class="o">/</span><span class="mi">0</span>            <span class="mf">0.0.0.0</span><span class="o">/</span><span class="mi">0</span>            <span class="cm">/* kubernetes service traffic requiring SNAT */</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这整体就是 ClusterCIDR 在 <em>kube-proxy</em> 中的应用，换句话说还需要关注一个 LocalCIDR</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>深入理解kubelet - VolumeManager源码解析</title>
      <link>https://www.oomkill.com/2023/08/ch29-volumemanager/</link>
      <pubDate>Sun, 20 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/08/ch29-volumemanager/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>阅读完本文，您当了解</p>
<ul>
<li>Kubernetes 卷</li>
<li>CephFS 在 kubernetes 中的挂载</li>
<li>Kubelet VolumeManager</li>
</ul>
<blockquote>
<p>本文只是个人理解，如果有大佬觉得不是这样的可以留言一起讨论，参考源码版本为 1.18.20，与高版本相差不大</p>
</blockquote>
<h2 id="volumemanager">VolumeManager</h2>
<p>VolumeManager VM 是在 kubelet 启动时被初始化的一个异步进程，主要是维护 “Pod&quot; 卷的两个状态，”desiredStateOfWorld“ 和 ”actualStateOfWorld“； 这两个状态用于将节点上的卷 “协调” 到所需的状态。</p>
<p>VM 实际上包含三个 “异步进程” (goroutine)，其中有一个 reconciler 就是用于协调与挂载的，下面就来阐述 VM 的挂载过程。</p>
<h3 id="vm中的重要组件">VM中的重要组件</h3>
<ul>
<li>actualStateOfWorld</li>
<li>mountedPod</li>
<li>desiredStateOfWorld</li>
<li>VolumeToMount</li>
<li>podToMount</li>
</ul>
<h3 id="vm的组成">VM的组成</h3>
<p>VM 的代码位于，由图可以看出，主要包含三个重要部分：</p>
<ul>
<li>reconciler：协调器</li>
<li>populator：填充器</li>
<li>cache：包含 ”desiredStateOfWorld“ 和 ”actualStateOfWorld“</li>
</ul>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/cylonchau/imgbed/img/image-20230820221712742.png" alt="image-20230820221712742"  /></p>
<center>图：VM的目录组成</center>
<p>在代码结构上，<a href="https://github.com/kubernetes/kubernetes/blob/1f3e19b7beb1cc0110255668c4238ed63dadb7ad/pkg/kubelet/volumemanager/volume_manager.go#L216-L257">volumeManager</a> 如下所示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// volumeManager implements the VolumeManager interface
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">volumeManager</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// DesiredStateOfWorldPopulator 用来与 API 服务器通信以获取 PV 和 PVC 对象的 API 客户端
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">kubeClient</span> <span class="nx">clientset</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// VolumePluginMgr 是用于访问 VolumePlugin 插件的 VolumePlugin 管理器。它必须预初始化。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">volumePluginMgr</span> <span class="o">*</span><span class="nx">volume</span><span class="p">.</span><span class="nx">VolumePluginMgr</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// desiredStateOfWorld 是一个数据结构，包含根据 VM 所需的状态：即应附加哪些卷以及 &#34;哪些pod” 正在引用这些卷。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 使用 kubelet pod manager 根据 world populator 的所需状态填充数据结构。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">desiredStateOfWorld</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">DesiredStateOfWorld</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 与 desiredStateOfWorld 相似，是实际状态：即哪些卷被 attacted 到该 Node 以及 volume 被 mounted 到哪些 pod。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 成功完成 reconciler attach,detach, mount, 和 unmount 操作后，将填充数据结构。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">actualStateOfWorld</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">ActualStateOfWorld</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// operationExecutor 用于启动异步 attach,detach, mount, 和 unmount 操作。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">operationExecutor</span> <span class="nx">operationexecutor</span><span class="p">.</span><span class="nx">OperationExecutor</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// reconciler reconciler 运行异步周期性循环，通过使用操作执行器触发 attach,detach, mount, 和 unmount操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 来协调 desiredStateOfWorld 与 actualStateOfWorld。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">reconciler</span> <span class="nx">reconciler</span><span class="p">.</span><span class="nx">Reconciler</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// desiredStateOfWorldPopulator 运行异步周期性循环以使用 kubelet Pod Manager 填充desiredStateOfWorld。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">desiredStateOfWorldPopulator</span> <span class="nx">populator</span><span class="p">.</span><span class="nx">DesiredStateOfWorldPopulator</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// csiMigratedPluginManager keeps track of CSI migration status of plugins
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">csiMigratedPluginManager</span> <span class="nx">csimigration</span><span class="p">.</span><span class="nx">PluginManager</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// intreeToCSITranslator translates in-tree volume specs to CSI
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">intreeToCSITranslator</span> <span class="nx">csimigration</span><span class="p">.</span><span class="nx">InTreeToCSITranslator</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="vm的初始化">VM的初始化</h3>
<ul>
<li>入口：“volumeManager”(vm) 的 <a href="https://github.com/kubernetes/kubernetes/blob/1f3e19b7beb1cc0110255668c4238ed63dadb7ad/pkg/kubelet/kubelet.go#L1436">初始化</a> 操作发生在 kubelet Run 时被作为一个异步进程启动。</li>
<li>VM 初始化：
<ul>
<li>如代码1所示，VM在初始化阶段创建了两个 cache 对象 “desiredStateOfWorld”（dsw）和“actualStateOfWorld”（asw）以及一个 “operationExecutor”，用于启动异步的线程操作 attach,detach, mount, 和 unmount</li>
<li>如代码2所示：VM在初始化阶段还创建了 “desiredStateOfWorldPopulator” (dswp) 与 “reconciler”
<ul>
<li>“reconciler” 通过使用上面的 “operationExecutor”  触发 attach,detach, mount 和 unmount来协调 dsw 与 asw</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>代码1</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">vm</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">volumeManager</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">kubeClient</span><span class="p">:</span>          <span class="nx">kubeClient</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">volumePluginMgr</span><span class="p">:</span>     <span class="nx">volumePluginMgr</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">desiredStateOfWorld</span><span class="p">:</span> <span class="nx">cache</span><span class="p">.</span><span class="nf">NewDesiredStateOfWorld</span><span class="p">(</span><span class="nx">volumePluginMgr</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">actualStateOfWorld</span><span class="p">:</span>  <span class="nx">cache</span><span class="p">.</span><span class="nf">NewActualStateOfWorld</span><span class="p">(</span><span class="nx">nodeName</span><span class="p">,</span> <span class="nx">volumePluginMgr</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">operationExecutor</span><span class="p">:</span> <span class="nx">operationexecutor</span><span class="p">.</span><span class="nf">NewOperationExecutor</span><span class="p">(</span><span class="nx">operationexecutor</span><span class="p">.</span><span class="nf">NewOperationGenerator</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="nx">kubeClient</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">volumePluginMgr</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">recorder</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">checkNodeCapabilitiesBeforeMount</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">blockVolumePathHandler</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>代码2：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">intreeToCSITranslator</span> <span class="p">=</span> <span class="nx">intreeToCSITranslator</span>
</span></span><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">csiMigratedPluginManager</span> <span class="p">=</span> <span class="nx">csiMigratedPluginManager</span>
</span></span><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">desiredStateOfWorldPopulator</span> <span class="p">=</span> <span class="nx">populator</span><span class="p">.</span><span class="nf">NewDesiredStateOfWorldPopulator</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nx">kubeClient</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">desiredStateOfWorldPopulatorLoopSleepPeriod</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">desiredStateOfWorldPopulatorGetPodStatusRetryDuration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">podManager</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">podStatusProvider</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">vm</span><span class="p">.</span><span class="nx">desiredStateOfWorld</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">vm</span><span class="p">.</span><span class="nx">actualStateOfWorld</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">kubeContainerRuntime</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">keepTerminatedPodVolumes</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">csiMigratedPluginManager</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">intreeToCSITranslator</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">vm</span><span class="p">.</span><span class="nx">reconciler</span> <span class="p">=</span> <span class="nx">reconciler</span><span class="p">.</span><span class="nf">NewReconciler</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nx">kubeClient</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">controllerAttachDetachEnabled</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">reconcilerLoopSleepPeriod</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">waitForAttachTimeout</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">nodeName</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">vm</span><span class="p">.</span><span class="nx">desiredStateOfWorld</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">vm</span><span class="p">.</span><span class="nx">actualStateOfWorld</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">vm</span><span class="p">.</span><span class="nx">desiredStateOfWorldPopulator</span><span class="p">.</span><span class="nx">HasAddedPods</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">vm</span><span class="p">.</span><span class="nx">operationExecutor</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">mounter</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">hostutil</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">volumePluginMgr</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">kubeletPodsDir</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="vm-的-run">VM 的 Run</h3>
<p>VM 是在 Kubelet 启动时作为异步线程启动，如代码1所示</p>
<p>如下面代码2所示，VM 在运行时会启动 <strong>三个</strong> 异步线程</p>
<ul>
<li>第一个调用是 第二个是调用 “dswp” 填充其的“ <a href="https://github.com/kubernetes/kubernetes/blob/v1.21.2/pkg/kubelet/volumemanager/volume_manager.go#L268">Run</a> ”，这里主要做的操作是从 API 拿到 Pod 列表，根据对应条件来决定 attach,detach, mount, 和 unmount</li>
<li>第二个调用的是，reconciler 来协调应该安装的卷是否已安装以及应该卸载的卷是否已卸载。</li>
<li>第三个调用的是，volumePluginMgr，启用 CSI  informer</li>
</ul>
<p><a href="https://github.com/kubernetes/kubernetes/blob/1f3e19b7beb1cc0110255668c4238ed63dadb7ad/pkg/kubelet/kubelet.go#L1435-L1436">代码1</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">// Start volume manager
</span></span><span class="line"><span class="cl">go kl.volumeManager.Run(kl.sourcesReady, wait.NeverStop)
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/kubernetes/kubernetes/blob/1f3e19b7beb1cc0110255668c4238ed63dadb7ad/pkg/kubelet/volumemanager/volume_manager.go#L259-L277">代码2</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">vm</span> <span class="o">*</span><span class="nx">volumeManager</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">sourcesReady</span> <span class="nx">config</span><span class="p">.</span><span class="nx">SourcesReady</span><span class="p">,</span> <span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">runtime</span><span class="p">.</span><span class="nf">HandleCrash</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nx">vm</span><span class="p">.</span><span class="nx">desiredStateOfWorldPopulator</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">sourcesReady</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;The desired_state_of_world populator starts&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Starting Kubelet Volume Manager&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nx">vm</span><span class="p">.</span><span class="nx">reconciler</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">metrics</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span><span class="nx">vm</span><span class="p">.</span><span class="nx">actualStateOfWorld</span><span class="p">,</span> <span class="nx">vm</span><span class="p">.</span><span class="nx">desiredStateOfWorld</span><span class="p">,</span> <span class="nx">vm</span><span class="p">.</span><span class="nx">volumePluginMgr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">vm</span><span class="p">.</span><span class="nx">kubeClient</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// start informer for CSIDriver
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">vm</span><span class="p">.</span><span class="nx">volumePluginMgr</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="o">&lt;-</span><span class="nx">stopCh</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Shutting down Kubelet Volume Manager&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="vm-的调用流程">VM 的调用流程</h3>
<h4 id="desiredstateofworldpopulator">desiredStateOfWorldPopulator</h4>
<p><code>DesiredStateOfWorldPopulator</code> 是一个周期 Loop，会定期循环遍历 Active Pod 列表，并确保每个 Pod 都处于所需状态（如果有卷，World state）。它还会验证 World cache 中处于所需状态的 pod 是否仍然存在，如果不存在，则会将其删除。</p>
<p>desiredStateOfWorldPopulator 结构包含两个方法，ReprocessPod 和 HasAddedPods；<strong><code>ReprocessPod</code></strong> 负责将 processedPods 中指定 pod 的值设置为false，强制重新处理它。这是在 Pod 更新时启用重新挂载卷所必需的。而 <strong><code>HasAddedPods</code></strong> 返回 填充器 是否已循环遍历 Active Pod 列表并将它们添加到 world cache 的所需状态。</p>
<p>在期待填充器 desiredStateOfWorldPopulator 启动时，会运行一个 populatorLoop，这里主要负责运行两个函数，</p>
<ul>
<li><code>findAndAddNewPods</code> 负责迭代所有 pod，如果它们不存在添加到  desired state of world (desiredStateOfWorld)</li>
<li><code>findAndRemoveDeletedPods</code> 负责迭代 <em><code>desiredStateOfWorld</code></em> 下的所有 Pod，如果它们不再存在则将其删除</li>
</ul>
<h4 id="reconciler">reconciler</h4>
<p>reconciler Run 的过程是通过一个 Loop 函数 <code>reconciliationLoopFunc</code> 完成的，正如下列 <a href="https://github.com/kubernetes/kubernetes/blob/1f3e19b7beb1cc0110255668c4238ed63dadb7ad/pkg/kubelet/volumemanager/reconciler/reconciler.go#L128-L179">代码</a> 所示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">rc</span> <span class="o">*</span><span class="nx">reconciler</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wait</span><span class="p">.</span><span class="nf">Until</span><span class="p">(</span><span class="nx">rc</span><span class="p">.</span><span class="nf">reconciliationLoopFunc</span><span class="p">(),</span> <span class="nx">rc</span><span class="p">.</span><span class="nx">loopSleepDuration</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">rc</span> <span class="o">*</span><span class="nx">reconciler</span><span class="p">)</span> <span class="nf">reconciliationLoopFunc</span><span class="p">()</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rc</span><span class="p">.</span><span class="nf">reconcile</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Sync the state with the reality once after all existing pods are added to the desired state from all sources.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// Otherwise, the reconstruct process may clean up pods&#39; volumes that are still in use because
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// desired state of world does not contain a complete list of pods.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">rc</span><span class="p">.</span><span class="nf">populatorHasAddedPods</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="p">!</span><span class="nx">rc</span><span class="p">.</span><span class="nf">StatesHasBeenSynced</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Reconciler: start to sync state&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">rc</span><span class="p">.</span><span class="nf">sync</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">rc</span> <span class="o">*</span><span class="nx">reconciler</span><span class="p">)</span> <span class="nf">reconcile</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="c1">// Unmounts are triggered before mounts so that a volume that was
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// referenced by a pod that was deleted and is now referenced by another
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// pod is unmounted from the first pod before being mounted to the new
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// pod.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// 卸载会在挂载之前触发，以便已删除的 Pod 引用的卷现在被另一个 Pod 引用，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// 然后再挂载到新 Pod 之前从第一个 Pod 中卸载。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="nx">rc</span><span class="p">.</span><span class="nf">unmountVolumes</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="c1">// Next we mount required volumes. This function could also trigger
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// attach if kubelet is responsible for attaching volumes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// If underlying PVC was resized while in-use then this function also handles volume
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// resizing.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// 接下来我们安装所需的卷。如果 kubelet 负责附加卷，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// 则此函数还可以触发附加。如果底层 PVC 在使用时调整了大小，则此函数还可以处理卷大小调整。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="nx">rc</span><span class="p">.</span><span class="nf">mountAttachVolumes</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="c1">// Ensure devices that should be detached/unmounted are detached/unmounted.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// 确保应 detached/unmounted 的设备已完成 detached/unmounted。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="nx">rc</span><span class="p">.</span><span class="nf">unmountDetachDevices</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Reconciler <strong>是挂载部分最重要的角色</strong>，用于协调应该安装的卷是否已安装以及应该卸载的卷是否已卸载；对应的，实际上执行的为三个函数：“unmountVolumes”、“mountAttachVolumes” 和 “unmountDetachDevices”。</p>
<h5 id="mountattachvolumes">mountAttachVolumes</h5>
<ol>
<li>
<p>首先，“<a href="https://github.com/kubernetes/kubernetes/blob/1f3e19b7beb1cc0110255668c4238ed63dadb7ad/pkg/kubelet/volumemanager/reconciler/reconciler.go#L202-L292">mountAttachVolumes</a>” 会调用 “dsw” (desiredStateOfWorld) 的函数 “GetVolumesToMount” 来检索所有 “volumesToMount” 并迭代它们，这里主要是为了确保 “volumes” 应完成了 “attached/mounted”</p>
</li>
<li>
<p>接下来这个循环做的工作是，对于每个 Volume 和 Pod，都会检查该 Volume 或 Pod 是否存在于 “asw” 的 “attachedVolumes” 中。如果 Volume 不存在，则“asw”返回 “<a href="https://github.com/kubernetes/kubernetes/blob/1f3e19b7beb1cc0110255668c4238ed63dadb7ad/pkg/kubelet/volumemanager/cache/actual_state_of_world.go#L662">newVolumeNotAttachedError</a> ”，否则它检查指定的 pod 是否存在并根据状态返回结果。这里存在 <a href="https://github.com/kubernetes/kubernetes/blob/1f3e19b7beb1cc0110255668c4238ed63dadb7ad/pkg/volume/util/operationexecutor/operation_executor.go#L400-L409">三个状态</a>，返回也是根据这个状态返回。<strong>这里主要为了得到挂载路径和是否挂载</strong></p>
<ul>
<li>
<p>VolumeMounted：表示 Volume 已挂载到 pod 的本地路径中</p>
</li>
<li>
<p>VolumeMountUncertain：表示 Volume 可能会也可能不会安装在 Pod 的本地路径中</p>
</li>
<li>
<p>VolumeNotMounted：表示 Volume  还未挂载到 pod 的本地路径中</p>
</li>
</ul>
</li>
<li>
<p>当“ asw” 返回 “ <a href="https://github.com/kubernetes/kubernetes/blob/v1.21.2/pkg/kubelet/volumemanager/reconciler/reconciler.go#L207">newVolumeNotAttachedError</a> ” 时，“reconciler” 会检查 “controllerAttachDetachEnabled” 是否启用，或 “<a href="https://github.com/kubernetes/kubernetes/blob/1f3e19b7beb1cc0110255668c4238ed63dadb7ad/pkg/volume/util/operationexecutor/operation_executor.go#L336">volumeToMount</a>” 没有实现了对应插件，这里面如果其中任何一个为 true，“reconciler” 将调用 “operationExecutor” 来执行操作“ ，走到这里代表了 Volume 没有被 attach，或者没有实现 attacher，例如 cephfs 没有实现 attacher；或者是 kubelet 禁用了 attach  <sup><a href="#1">[1]</a></sup> （默认是开启状态），将进入 “ <a href="https://github.com/kubernetes/kubernetes/blob/1f3e19b7beb1cc0110255668c4238ed63dadb7ad/pkg/volume/util/operationexecutor/operation_executor.go#L909-L921">VerifyControllerAttachedVolume</a> ”</p>
<ul>
<li>
<p>在此期间，“operationExecutor” 生成一个名为 “<a href="https://github.com/kubernetes/kubernetes/blob/1f3e19b7beb1cc0110255668c4238ed63dadb7ad/pkg/volume/util/operationexecutor/operation_generator.go#L1278-L1352">verifyControllerAttachedVolumeFunc</a>” 的函数来实际实现。在此函数中，如果 “volumeToMount” 的 “PluginIsAttachable” 为 <em>false</em>（没有实现），则假设其已经实现并标记 <a href="https://github.com/kubernetes/kubernetes/blob/1f3e19b7beb1cc0110255668c4238ed63dadb7ad/pkg/volume/util/operationexecutor/operation_generator.go#L1288C17-L1301">attached</a>，标记出错时进行重试（这是一个函数用于后面的调用，这里只是定义）</p>
</li>
<li>
<p>如果还没有将 Node attached 到 Volume 节点列表状态中，则返回错误进行重试（这是一个函数用于后面的调用，这里只是定义）</p>
</li>
<li>
<p>上面两个步骤是为了组装这个操作，返回的是操作的内容，包含执行的函数，完成的hook等，最后运行这个函数并返回</p>
</li>
</ul>
</li>
<li>
<p>这是步骤3的另外一个分支，即 kubelet 启用了 ADController，并且实现了对应的 attcher，那么将执行附加操作</p>
<ul>
<li>拼接对象</li>
<li>执行函数 ”AttachVolume“</li>
<li>AttachVolume 如上面步骤一样，拼接出最后的执行的动作，进行执行操作（将 node 附加到 volume 之上）</li>
</ul>
</li>
<li>
<p><a href="https://github.com/kubernetes/kubernetes/blob/1f3e19b7beb1cc0110255668c4238ed63dadb7ad/pkg/volume/util/operationexecutor/operation_executor.go#L798-L958">步骤5</a> 表示 3, 4 条件均不满足，也就是 Attached，目前状态为 ”未挂载“  或者 ”已挂载“，将执行这个步骤，未挂载的进行挂载，已挂载的进行 remount</p>
</li>
<li>
<p>在该分支中（也就是 <a href="https://github.com/kubernetes/kubernetes/blob/1f3e19b7beb1cc0110255668c4238ed63dadb7ad/pkg/volume/util/operationexecutor/operation_generator.go#L489-L694">步骤5</a> 执行的）执行的是名为 “<a href="https://github.com/kubernetes/kubernetes/blob/v1.21.2/pkg/volume/util/operationexecutor/operation_generator.go#L500">GenerateMountVolumeFunc</a>“ 的函数，在此函数中，会获取 Plugin ，并通过 Plugin 创建出一个 volumeMounter，在通过 Plugin 获取一个 deviceMouter（能够挂载块设备的）；当然我们这里挂载的是 ”cephfs“ 所以没有 ”deviceMouter“ 这里不被执行。</p>
<ul>
<li>如果 ”deviceMounter“ 定义了，那么则执行这个 plugin 的 &ldquo;MountDevice&rdquo; 函数</li>
<li>如果没有定义，那么执行 volumeMounter 的 SetUp 进行挂载（因为不是块设备）</li>
</ul>
</li>
<li>
<p>执行 SetUp 函数，通常 <a href="https://github.com/kubernetes/kubernetes/blob/1f3e19b7beb1cc0110255668c4238ed63dadb7ad/pkg/volume/nfs/nfs.go#L240-L242">NFS</a>, <a href="https://github.com/kubernetes/kubernetes/blob/1f3e19b7beb1cc0110255668c4238ed63dadb7ad/pkg/volume/cephfs/cephfs.go#L223-L225">CephFS</a>, <a href="https://github.com/kubernetes/kubernetes/blob/1f3e19b7beb1cc0110255668c4238ed63dadb7ad/pkg/volume/local/local.go#L472-L474">HostPath</a>，都实现了这个函数，那么就会通过这个函数挂载到 Node 对应的目录</p>
</li>
<li>
<p>最后通过 Overlay2 文件系统附加到容器里</p>
</li>
</ol>
<h2 id="reference">Reference</h2>
<p><sup id="1">[1]</sup> <a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/"><em>command-line-tools-reference kubelet</em></a></p>
<p><sup id="2">[2]</sup> <a href="https://shuanglu1993.medium.com/what-happens-when-volumemanager-in-the-kubelet-starts-1fea623ac6ce"><em>What happens when volumeManager in the kubelet starts?</em></a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>源码分析 - Kubernetes中的事件通知机制</title>
      <link>https://www.oomkill.com/2023/06/kubernetes-event/</link>
      <pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/06/kubernetes-event/</guid>
      <description>文章分析了Kuberentes事件记录及事件是如何调度的</description>
      <content:encoded><![CDATA[<p>在 Kubernetes 中 事件 ( <em>Event</em> ） 通常被大家认知为是展示集群中发生的情况，通常用作 Pod 的查看，例如为什么 CrashBackOff, 为什么 Pendding，而很少有人知道事件在 Kubernetes 整个系统中的设计是非常巧妙的，可以通过各组件间的传递，使得用户可以知道集群中的情况，文章中将一地揭开Kubernetes to神秘面纱。</p>
<h2 id="为什么需要事件">为什么需要事件</h2>
<p>Kubernetes 在设计时就是 “声明式”，而声明式的最大特点就是 “多组件的协同工作”，而在多组件协同工作时，势必需要传递一些事件，以告知用户任务的状态如何；而事件本身上是一种资源，在很早版本就以及被移入 api/v1 中。下面是 “事件” 资源的定义。</p>
<p>位于 <a href="vendor/k8s.io/api/core/v1/types.go">vendor/k8s.io/api/core/v1/types.go</a> ，因为 <code>vendor/k8s.io</code> 实际上是做了一个软连接，那么真实的实际上位于 <code>{kubernetes_repo}/staging/src/k8s.io/api/core/v1</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Event</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span><span class="p">.</span><span class="nx">TypeMeta</span> <span class="s">`json:&#34;,inline&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 标准的元数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMeta</span> <span class="s">`json:&#34;metadata&#34; protobuf:&#34;bytes,1,opt,name=metadata&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 事件涉及的对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">InvolvedObject</span> <span class="nx">ObjectReference</span> <span class="s">`json:&#34;involvedObject&#34; protobuf:&#34;bytes,2,opt,name=involvedObject&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 这里表示的是事件原因，通常为简短的的一种状态名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// TODO: provide exact specification for format.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Reason</span> <span class="kt">string</span> <span class="s">`json:&#34;reason,omitempty&#34; protobuf:&#34;bytes,3,opt,name=reason&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 以人类可读取的方式描述，类似于 tcmpdump -A
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// TODO: decide on maximum length.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Message</span> <span class="kt">string</span> <span class="s">`json:&#34;message,omitempty&#34; protobuf:&#34;bytes,4,opt,name=message&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 报告事件的组件，通常包含这个结构体包含 “组件+主机名” 的结构
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Source</span> <span class="nx">EventSource</span> <span class="s">`json:&#34;source,omitempty&#34; protobuf:&#34;bytes,5,opt,name=source&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 首次上报事件的事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">FirstTimestamp</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&#34;firstTimestamp,omitempty&#34; protobuf:&#34;bytes,6,opt,name=firstTimestamp&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 最近一次记录事件的事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">LastTimestamp</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&#34;lastTimestamp,omitempty&#34; protobuf:&#34;bytes,7,opt,name=lastTimestamp&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 事件发生的次数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Count</span> <span class="kt">int32</span> <span class="s">`json:&#34;count,omitempty&#34; protobuf:&#34;varint,8,opt,name=count&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 事件的类型(Normal, Warning)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Type</span> <span class="kt">string</span> <span class="s">`json:&#34;type,omitempty&#34; protobuf:&#34;bytes,9,opt,name=type&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 首次观察到事件的.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">EventTime</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">MicroTime</span> <span class="s">`json:&#34;eventTime,omitempty&#34; protobuf:&#34;bytes,10,opt,name=eventTime&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 事件相关的序列，如果事件为单例事件，那么则为nil
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Series</span> <span class="o">*</span><span class="nx">EventSeries</span> <span class="s">`json:&#34;series,omitempty&#34; protobuf:&#34;bytes,11,opt,name=series&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 对事件对象采取的行动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Action</span> <span class="kt">string</span> <span class="s">`json:&#34;action,omitempty&#34; protobuf:&#34;bytes,12,opt,name=action&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Optional secondary object for more complex actions.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Related</span> <span class="o">*</span><span class="nx">ObjectReference</span> <span class="s">`json:&#34;related,omitempty&#34; protobuf:&#34;bytes,13,opt,name=related&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 发出事件的对应的控制器，也可以理解为组件，因为通常controller-manager 包含多个控制器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// e.g. `kubernetes.io/kubelet`.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ReportingController</span> <span class="kt">string</span> <span class="s">`json:&#34;reportingComponent&#34; protobuf:&#34;bytes,14,opt,name=reportingComponent&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 控制器实例的ID, e.g. `kubelet-xyzf`.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ReportingInstance</span> <span class="kt">string</span> <span class="s">`json:&#34;reportingInstance&#34; protobuf:&#34;bytes,15,opt,name=reportingInstance&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="事件管理器">事件管理器</h2>
<p>通过上面知道了事件这个资源的设计，里面存在一个 ”发出事件的对应的控制器“ 那么必然是作为每一个组件的内置功能，也就是说这可以作为 client-go 中的一个组件。</p>
<p>代码 <a href="vendor/k8s.io/client-go/tools/events/interfaces.go">vendor/k8s.io/client-go/tools/events/interfaces.go</a> 中定义了一个事件管理器，这将定义了如何接收或发送事件到任何地方，例如事件接收器 (<em>EventSink</em>) 或 log</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">EventBroadcaster</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 发送从指定的eventBroadcaster接收到的事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">StartRecordingToSink</span><span class="p">(</span><span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 返回一个 EventRecorder 并可以使用发送事件到 EventBroadcaster，并将事件源设置为给定的事件源。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">NewRecorder</span><span class="p">(</span><span class="nx">scheme</span> <span class="o">*</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">reportingController</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">EventRecorder</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// StartEventWatcher 可以使在不使用 StartRecordingToSink 的情况下发送事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 这使得可以通过自定义方式记录事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// NOTE: 在使用 eventHandler 接收到的事件时应先进行复制一份。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// TODO: figure out if this can be removed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">StartEventWatcher</span><span class="p">(</span><span class="nx">eventHandler</span> <span class="kd">func</span><span class="p">(</span><span class="nx">event</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span><span class="p">))</span> <span class="kd">func</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// StartStructuredLogging 可以接收 EventBroadcaster 发送的结构化日志功能
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果需要可以忽略返回值或使用于停止记录
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">StartStructuredLogging</span><span class="p">(</span><span class="nx">verbosity</span> <span class="nx">klog</span><span class="p">.</span><span class="nx">Level</span><span class="p">)</span> <span class="kd">func</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 关闭广播
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Shutdown</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>EventBroadcaster 的实现只有一个 eventBroadcasterImpl</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">type eventBroadcasterImpl struct {
</span></span><span class="line"><span class="cl">   *watch.Broadcaster
</span></span><span class="line"><span class="cl">   mu            sync.Mutex
</span></span><span class="line"><span class="cl">   eventCache    map[eventKey]*eventsv1.Event
</span></span><span class="line"><span class="cl">   sleepDuration time.Duration
</span></span><span class="line"><span class="cl">   sink          EventSink
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里面最重要的就是 sink，sink就是决定如何去存储事件的一个组件，他返回的是一组 client-go 的 REST 客户端。</p>
<h3 id="事件管理器的设计">事件管理器的设计</h3>
<h3 id="事件生产者">事件生产者</h3>
<p>事件生产者在事件管理器中是作为</p>
<h2 id="控制器">控制器</h2>
<p>service的资源创建很奇妙，继不属于 <code>controller-manager</code> 组件，也不属于 <code>kube-proxy</code> 组件，而是存在于 <code>apiserver</code> 中的一个被成为控制器的组件；而这个控制器又区别于准入控制器。更准确来说，准入控制器是位于kubeapiserver中的组件，而 <strong>控制器</strong> 则是存在于单独的一个包，这里包含了很多kubernetes集群的公共组件的功能，其中就有service。这也就是在操作kubernetes时 当 <code>controller-manager</code> 于  <code>kube-proxy</code> 未工作时，也可以准确的为service分配IP。</p>
<p>首先在构建出apiserver时，也就是代码 <a href="cmd/kube-apiserver/app/server.go">cmd/kube-apiserver/app/server.go</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">serviceIPRange</span><span class="p">,</span> <span class="nx">apiServerServiceIP</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">master</span><span class="p">.</span><span class="nf">ServiceIPRange</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">PrimaryServiceClusterIPRange</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/kubernetes/kubernetes/blob/58178e7f7aab455bc8de88d3bdd314b64141e7ee/pkg/master/services.go#L34-L54">master.ServiceIPRange</a> 承接了为service分配IP的功能，这部分逻辑就很简单了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">ServiceIPRange</span><span class="p">(</span><span class="nx">passedServiceClusterIPRange</span> <span class="nx">net</span><span class="p">.</span><span class="nx">IPNet</span><span class="p">)</span> <span class="p">(</span><span class="nx">net</span><span class="p">.</span><span class="nx">IPNet</span><span class="p">,</span> <span class="nx">net</span><span class="p">.</span><span class="nx">IP</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">serviceClusterIPRange</span> <span class="o">:=</span> <span class="nx">passedServiceClusterIPRange</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">passedServiceClusterIPRange</span><span class="p">.</span><span class="nx">IP</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Warningf</span><span class="p">(</span><span class="s">&#34;No CIDR for service cluster IPs specified. Default value which was %s is deprecated and will be removed in future releases. Please specify it using --service-cluster-ip-range on kube-apiserver.&#34;</span><span class="p">,</span> <span class="nx">kubeoptions</span><span class="p">.</span><span class="nx">DefaultServiceIPCIDR</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="nx">serviceClusterIPRange</span> <span class="p">=</span> <span class="nx">kubeoptions</span><span class="p">.</span><span class="nx">DefaultServiceIPCIDR</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">size</span> <span class="o">:=</span> <span class="nx">integer</span><span class="p">.</span><span class="nf">Int64Min</span><span class="p">(</span><span class="nx">utilnet</span><span class="p">.</span><span class="nf">RangeSize</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">serviceClusterIPRange</span><span class="p">),</span> <span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">size</span> <span class="p">&lt;</span> <span class="mi">8</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">net</span><span class="p">.</span><span class="nx">IPNet</span><span class="p">{},</span> <span class="nx">net</span><span class="p">.</span><span class="nx">IP</span><span class="p">{},</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;the service cluster IP range must be at least %d IP addresses&#34;</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Select the first valid IP from ServiceClusterIPRange to use as the GenericAPIServer service IP.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">apiServerServiceIP</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">utilnet</span><span class="p">.</span><span class="nf">GetIndexedIP</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">serviceClusterIPRange</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">net</span><span class="p">.</span><span class="nx">IPNet</span><span class="p">{},</span> <span class="nx">net</span><span class="p">.</span><span class="nx">IP</span><span class="p">{},</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Setting service IP to %q (read-write).&#34;</span><span class="p">,</span> <span class="nx">apiServerServiceIP</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">serviceClusterIPRange</span><span class="p">,</span> <span class="nx">apiServerServiceIP</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而后kube-apiserver为service分为两类</p>
<ul>
<li>apiserver 地址在集群内的service，在代码中表示为 <a href="https://github.com/kubernetes/kubernetes/blob/58178e7f7aab455bc8de88d3bdd314b64141e7ee/cmd/kube-apiserver/app/server.go#L351">APIServerServiceIP</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/blob/58178e7f7aab455bc8de88d3bdd314b64141e7ee/cmd/kube-apiserver/app/server.go#L352">Service</a>，<code>--service-cluster-ip-range</code> 配置指定的ip，通过『逗号』分割可以为两个</li>
</ul>
<p>有了对 service 更好的理解后，接下来开始本系列第二节<a href="https://cylonchau.github.io/kubernetes-without-service.html">深入理解Kubernetes service - kube-proxy软件架构分析</a></p>
<blockquote>
<p><strong>Reference</strong></p>
<p><sup id="1">[1]</sup> <a href="https://kubernetes.io/docs/concepts/services-networking/dual-stack/"><em>dual-stack service</em></a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>kube-proxy如何保证规则的一致性</title>
      <link>https://www.oomkill.com/2023/03/ch24-kube-proxy-performance/</link>
      <pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/03/ch24-kube-proxy-performance/</guid>
      <description></description>
      <content:encoded><![CDATA[<blockquote>
</blockquote>
<h2 id="前景">前景</h2>
<p>这里谈 <code>kube-proxy</code> 如何保证规则的一致性以及提升 <code>kube-proxy</code> 性能点的地方，这也是 kubernetes 使用稳定性的一部分。</p>
<h2 id="kube-proxy-如何做到的crud">kube-proxy 如何做到的CRUD</h2>
<p><code>kube-proxy</code>  实际上与其他内置 controller 架构是相同的，实际上也属于一个 controller ，但它属于一个 service, endpoints 的可读可写的控制器，node的读控制器。对于CRUD方面，kube-proxy，在设计上分为 增/改 两方面。正如下面代码所示 <a href="pkg/proxy/ipvs/proxier.go">pkg/proxy/ipvs/proxier.go</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">proxier</span> <span class="o">*</span><span class="nx">Proxier</span><span class="p">)</span> <span class="nf">OnServiceAdd</span><span class="p">(</span><span class="nx">service</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Service</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">proxier</span><span class="p">.</span><span class="nf">OnServiceUpdate</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="nx">service</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// OnServiceUpdate is called whenever modification of an existing service object is observed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">proxier</span> <span class="o">*</span><span class="nx">Proxier</span><span class="p">)</span> <span class="nf">OnServiceUpdate</span><span class="p">(</span><span class="nx">oldService</span><span class="p">,</span> <span class="nx">service</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Service</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">serviceChanges</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="nx">oldService</span><span class="p">,</span> <span class="nx">service</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">proxier</span><span class="p">.</span><span class="nf">isInitialized</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">proxier</span><span class="p">.</span><span class="nf">Sync</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// OnServiceDelete is called whenever deletion of an existing service object is observed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">proxier</span> <span class="o">*</span><span class="nx">Proxier</span><span class="p">)</span> <span class="nf">OnServiceDelete</span><span class="p">(</span><span class="nx">service</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Service</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">proxier</span><span class="p">.</span><span class="nf">OnServiceUpdate</span><span class="p">(</span><span class="nx">service</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到代码最终调用的都是 <code>OnServiceUpdate</code>，最终 调用的是 <code>proxier.Sync()</code>。对于 Sync()，这里会调用在 Proxier 初始化时注入的那个函数，而 Sync() 本质上是 一个异步有限的函数管理器，这里将实现两个方面，一是，定时去触发执行这个函数；二是满足规则去触发这个函数；而 Sync() 属于条件2</p>
<p>对于注入的函数，则是 <a href="https://github.com/kubernetes/kubernetes/blob/98d5dc5d36d34a7ee13368a7893dcb400ec4e566/pkg/proxy/ipvs/proxier.go#L490">proxier.syncProxyRules</a> ，由下列代码可以看到</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">proxier</span><span class="p">.</span><span class="nx">syncRunner</span> <span class="p">=</span> <span class="nx">async</span><span class="p">.</span><span class="nf">NewBoundedFrequencyRunner</span><span class="p">(</span><span class="s">&#34;sync-runner&#34;</span><span class="p">,</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">syncProxyRules</span><span class="p">,</span> <span class="nx">minSyncPeriod</span><span class="p">,</span> <span class="nx">syncPeriod</span><span class="p">,</span> <span class="nx">burstSyncs</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样就是说，kube-proxy 通过 syncProxyRules 实现了整个 service 与 endpoint 的增删改查</p>
<h2 id="性能提升点1">性能提升点1</h2>
<p>由上面有限的函数管理器 runner，可以作为性能提升点，而该runner初始化时提供了minSyncPeriod, syncPeriod 两个函数，这两个函数代表的意思为，minSyncPeriod是runner允许你在最小多少时间内可以调用，如果你的集群规模大，那么则可以适当配置该参数小写，因为service的频繁更改会被这个参数限制。</p>
<h2 id="如何通过一个函数做crud">如何通过一个函数做CRUD</h2>
<p>对于增改，存在三个资源，ClusterIP, NodePort, Ingress,当这些资源被触发时，会同步这个service与endpoint，如代码所示 <a href="https://github.com/kubernetes/kubernetes/blob/98d5dc5d36d34a7ee13368a7893dcb400ec4e566/pkg/proxy/ipvs/proxier.go#L1398-L1406">syncProxyRules</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nf">syncService</span><span class="p">(</span><span class="nx">svcNameString</span><span class="p">,</span> <span class="nx">serv</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">bindedAddresses</span><span class="p">);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">activeIPVSServices</span><span class="p">[</span><span class="nx">serv</span><span class="p">.</span><span class="nf">String</span><span class="p">()]</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">    <span class="nx">activeBindAddrs</span><span class="p">[</span><span class="nx">serv</span><span class="p">.</span><span class="nx">Address</span><span class="p">.</span><span class="nf">String</span><span class="p">()]</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nf">syncEndpoint</span><span class="p">(</span><span class="nx">svcName</span><span class="p">,</span> <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">OnlyNodeLocalEndpoints</span><span class="p">(),</span> <span class="nx">serv</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to sync endpoint for service: %v, err: %v&#34;</span><span class="p">,</span> <span class="nx">serv</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to sync service: %v, err: %v&#34;</span><span class="p">,</span> <span class="nx">serv</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>由上面代码可知，所有的 service 与 endpoint 的更新，都会触发 <code>Sync()</code>，而 <code>Sync()</code> 执行的是 <code>syncProxyRules()</code> ，当service有变动时，就会通过 syncService/syncEndpoint 进行同步</p>
<p>而对于删除动作来说，kube-proxy 提供了 <a href="https://github.com/kubernetes/kubernetes/blob/98d5dc5d36d34a7ee13368a7893dcb400ec4e566/pkg/proxy/ipvs/proxier.go#L1626">cleanLegacyService</a> 函数在变动做完时，进行清理遗留的service规则，如下列代码所示。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">proxier</span><span class="p">.</span><span class="nf">cleanLegacyService</span><span class="p">(</span><span class="nx">activeIPVSServices</span><span class="p">,</span> <span class="nx">currentIPVSServices</span><span class="p">,</span> <span class="nx">legacyBindAddrs</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>并且通过两个数组来维护两个 <a href="https://github.com/kubernetes/kubernetes/blob/98d5dc5d36d34a7ee13368a7893dcb400ec4e566/pkg/proxy/ipvs/proxier.go#L1091-L1094">activeIPVSServices</a> , 与 <a href="https://github.com/kubernetes/kubernetes/blob/98d5dc5d36d34a7ee13368a7893dcb400ec4e566/pkg/proxy/ipvs/proxier.go#L1091-L1094">currentIPVSServices</a> 为主，来维护删除的数据</p>
<h2 id="crud实际实现">CRUD实际实现</h2>
<p>上面了解到了删除与添加的逻辑，下面分析这些是如何进行的</p>
<p>当添加被触发时，会触发 <a href="https://github.com/kubernetes/kubernetes/blob/98d5dc5d36d34a7ee13368a7893dcb400ec4e566/pkg/proxy/ipvs/proxier.go#L1936-L1974">proxier.syncService()</a> ，首先会进行本机上ipvs规则是否存在这个规则，存在则更改，而后返回一个 error, 这个 error 取决于是否更新 endpoints，如下列代码所示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">proxier</span> <span class="o">*</span><span class="nx">Proxier</span><span class="p">)</span> <span class="nf">syncService</span><span class="p">(</span><span class="nx">svcName</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">vs</span> <span class="o">*</span><span class="nx">utilipvs</span><span class="p">.</span><span class="nx">VirtualServer</span><span class="p">,</span> <span class="nx">bindAddr</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">bindedAddresses</span> <span class="nx">sets</span><span class="p">.</span><span class="nx">String</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">appliedVirtualServer</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipvs</span><span class="p">.</span><span class="nf">GetVirtualServer</span><span class="p">(</span><span class="nx">vs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">appliedVirtualServer</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">||</span> <span class="p">!</span><span class="nx">appliedVirtualServer</span><span class="p">.</span><span class="nf">Equal</span><span class="p">(</span><span class="nx">vs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">appliedVirtualServer</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// IPVS service is not found, create a new service
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Adding new service %q %s:%d/%s&#34;</span><span class="p">,</span> <span class="nx">svcName</span><span class="p">,</span> <span class="nx">vs</span><span class="p">.</span><span class="nx">Address</span><span class="p">,</span> <span class="nx">vs</span><span class="p">.</span><span class="nx">Port</span><span class="p">,</span> <span class="nx">vs</span><span class="p">.</span><span class="nx">Protocol</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipvs</span><span class="p">.</span><span class="nf">AddVirtualServer</span><span class="p">(</span><span class="nx">vs</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to add IPVS service %q: %v&#34;</span><span class="p">,</span> <span class="nx">svcName</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// IPVS service was changed, update the existing one
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// During updates, service VIP will not go down
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;IPVS service %s was changed&#34;</span><span class="p">,</span> <span class="nx">svcName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipvs</span><span class="p">.</span><span class="nf">UpdateVirtualServer</span><span class="p">(</span><span class="nx">vs</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to update IPVS service, err:%v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// bind service address to dummy interface
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">bindAddr</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// always attempt to bind if bindedAddresses is nil,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// otherwise check if it&#39;s already binded and return early
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">bindedAddresses</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">bindedAddresses</span><span class="p">.</span><span class="nf">Has</span><span class="p">(</span><span class="nx">vs</span><span class="p">.</span><span class="nx">Address</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Bind addr %s&#34;</span><span class="p">,</span> <span class="nx">vs</span><span class="p">.</span><span class="nx">Address</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">netlinkHandle</span><span class="p">.</span><span class="nf">EnsureAddressBind</span><span class="p">(</span><span class="nx">vs</span><span class="p">.</span><span class="nx">Address</span><span class="p">.</span><span class="nf">String</span><span class="p">(),</span> <span class="nx">DefaultDummyDevice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to bind service address to dummy device %q: %v&#34;</span><span class="p">,</span> <span class="nx">svcName</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来通过后会 触发 <a href="https://github.com/kubernetes/kubernetes/blob/98d5dc5d36d34a7ee13368a7893dcb400ec4e566/pkg/proxy/ipvs/proxier.go#L1976-L2084">proxier.syncEndpoint()</a> 这里传入了当前的 service, 这里是为了与 IPVS 概念相吻合，如IPVS 中存在 RealServers/VirtualServers，首先会拿到本机这个VirtualServer下的所有RealServer，而后进行添加，而后对比 传入的 Endpoints 列表 与 本机这个VirtualServer下的所有RealServer，不相等的则被删除；删除的动作是一个异步操作。由 gracefuldeleteManager 维护</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">proxier</span> <span class="o">*</span><span class="nx">Proxier</span><span class="p">)</span> <span class="nf">syncEndpoint</span><span class="p">(</span><span class="nx">svcPortName</span> <span class="nx">proxy</span><span class="p">.</span><span class="nx">ServicePortName</span><span class="p">,</span> <span class="nx">onlyNodeLocalEndpoints</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">vs</span> <span class="o">*</span><span class="nx">utilipvs</span><span class="p">.</span><span class="nx">VirtualServer</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">appliedVirtualServer</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipvs</span><span class="p">.</span><span class="nf">GetVirtualServer</span><span class="p">(</span><span class="nx">vs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">appliedVirtualServer</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to get IPVS service, error: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// curEndpoints represents IPVS destinations listed from current system.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">curEndpoints</span> <span class="o">:=</span> <span class="nx">sets</span><span class="p">.</span><span class="nf">NewString</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// newEndpoints represents Endpoints watched from API Server.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">newEndpoints</span> <span class="o">:=</span> <span class="nx">sets</span><span class="p">.</span><span class="nf">NewString</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">curDests</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipvs</span><span class="p">.</span><span class="nf">GetRealServers</span><span class="p">(</span><span class="nx">appliedVirtualServer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to list IPVS destinations, error: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">des</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">curDests</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">curEndpoints</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">des</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">endpoints</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">endpointsMap</span><span class="p">[</span><span class="nx">svcPortName</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Service Topology will not be enabled in the following cases:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 1. externalTrafficPolicy=Local (mutually exclusive with service topology).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 2. ServiceTopology is not enabled.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 3. EndpointSlice is not enabled (service topology depends on endpoint slice
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// to get topology information).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">!</span><span class="nx">onlyNodeLocalEndpoints</span> <span class="o">&amp;&amp;</span> <span class="nx">utilfeature</span><span class="p">.</span><span class="nx">DefaultFeatureGate</span><span class="p">.</span><span class="nf">Enabled</span><span class="p">(</span><span class="nx">features</span><span class="p">.</span><span class="nx">ServiceTopology</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">utilfeature</span><span class="p">.</span><span class="nx">DefaultFeatureGate</span><span class="p">.</span><span class="nf">Enabled</span><span class="p">(</span><span class="nx">features</span><span class="p">.</span><span class="nx">EndpointSliceProxying</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">endpoints</span> <span class="p">=</span> <span class="nx">proxy</span><span class="p">.</span><span class="nf">FilterTopologyEndpoint</span><span class="p">(</span><span class="nx">proxier</span><span class="p">.</span><span class="nx">nodeLabels</span><span class="p">,</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">serviceMap</span><span class="p">[</span><span class="nx">svcPortName</span><span class="p">].</span><span class="nf">TopologyKeys</span><span class="p">(),</span> <span class="nx">endpoints</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">epInfo</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">endpoints</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">onlyNodeLocalEndpoints</span> <span class="o">&amp;&amp;</span> <span class="p">!</span><span class="nx">epInfo</span><span class="p">.</span><span class="nf">GetIsLocal</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">newEndpoints</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">epInfo</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Create new endpoints
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ep</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">newEndpoints</span><span class="p">.</span><span class="nf">List</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ip</span><span class="p">,</span> <span class="nx">port</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">SplitHostPort</span><span class="p">(</span><span class="nx">ep</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to parse endpoint: %v, error: %v&#34;</span><span class="p">,</span> <span class="nx">ep</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">portNum</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">port</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to parse endpoint port %s, error: %v&#34;</span><span class="p">,</span> <span class="nx">port</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">newDest</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">utilipvs</span><span class="p">.</span><span class="nx">RealServer</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Address</span><span class="p">:</span> <span class="nx">net</span><span class="p">.</span><span class="nf">ParseIP</span><span class="p">(</span><span class="nx">ip</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Port</span><span class="p">:</span>    <span class="nb">uint16</span><span class="p">(</span><span class="nx">portNum</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Weight</span><span class="p">:</span>  <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">curEndpoints</span><span class="p">.</span><span class="nf">Has</span><span class="p">(</span><span class="nx">ep</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// check if newEndpoint is in gracefulDelete list, if true, delete this ep immediately
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">uniqueRS</span> <span class="o">:=</span> <span class="nf">GetUniqueRSName</span><span class="p">(</span><span class="nx">vs</span><span class="p">,</span> <span class="nx">newDest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">proxier</span><span class="p">.</span><span class="nx">gracefuldeleteManager</span><span class="p">.</span><span class="nf">InTerminationList</span><span class="p">(</span><span class="nx">uniqueRS</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;new ep %q is in graceful delete list&#34;</span><span class="p">,</span> <span class="nx">uniqueRS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">gracefuldeleteManager</span><span class="p">.</span><span class="nf">MoveRSOutofGracefulDeleteList</span><span class="p">(</span><span class="nx">uniqueRS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to delete endpoint: %v in gracefulDeleteQueue, error: %v&#34;</span><span class="p">,</span> <span class="nx">ep</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">err</span> <span class="p">=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipvs</span><span class="p">.</span><span class="nf">AddRealServer</span><span class="p">(</span><span class="nx">appliedVirtualServer</span><span class="p">,</span> <span class="nx">newDest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to add destination: %v, error: %v&#34;</span><span class="p">,</span> <span class="nx">newDest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Delete old endpoints
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ep</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">curEndpoints</span><span class="p">.</span><span class="nf">Difference</span><span class="p">(</span><span class="nx">newEndpoints</span><span class="p">).</span><span class="nf">UnsortedList</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// if curEndpoint is in gracefulDelete, skip
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">uniqueRS</span> <span class="o">:=</span> <span class="nx">vs</span><span class="p">.</span><span class="nf">String</span><span class="p">()</span> <span class="o">+</span> <span class="s">&#34;/&#34;</span> <span class="o">+</span> <span class="nx">ep</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">gracefuldeleteManager</span><span class="p">.</span><span class="nf">InTerminationList</span><span class="p">(</span><span class="nx">uniqueRS</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ip</span><span class="p">,</span> <span class="nx">port</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">SplitHostPort</span><span class="p">(</span><span class="nx">ep</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to parse endpoint: %v, error: %v&#34;</span><span class="p">,</span> <span class="nx">ep</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">portNum</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">port</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to parse endpoint port %s, error: %v&#34;</span><span class="p">,</span> <span class="nx">port</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">delDest</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">utilipvs</span><span class="p">.</span><span class="nx">RealServer</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Address</span><span class="p">:</span> <span class="nx">net</span><span class="p">.</span><span class="nf">ParseIP</span><span class="p">(</span><span class="nx">ip</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Port</span><span class="p">:</span>    <span class="nb">uint16</span><span class="p">(</span><span class="nx">portNum</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Using graceful delete to delete: %v&#34;</span><span class="p">,</span> <span class="nx">uniqueRS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">err</span> <span class="p">=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">gracefuldeleteManager</span><span class="p">.</span><span class="nf">GracefulDeleteRS</span><span class="p">(</span><span class="nx">appliedVirtualServer</span><span class="p">,</span> <span class="nx">delDest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to delete destination: %v, error: %v&#34;</span><span class="p">,</span> <span class="nx">uniqueRS</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>删除 service 将删除所有的 RealServer，这点上面提到过，kube-proxy 通过 <a href="https://github.com/kubernetes/kubernetes/blob/98d5dc5d36d34a7ee13368a7893dcb400ec4e566/pkg/proxy/ipvs/proxier.go#L2086-L2114">cleanLegacyService</a> 进行删除，如下列代码所示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">proxier</span> <span class="o">*</span><span class="nx">Proxier</span><span class="p">)</span> <span class="nf">cleanLegacyService</span><span class="p">(</span><span class="nx">activeServices</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">bool</span><span class="p">,</span> <span class="nx">currentServices</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">utilipvs</span><span class="p">.</span><span class="nx">VirtualServer</span><span class="p">,</span> <span class="nx">legacyBindAddrs</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">isIPv6</span> <span class="o">:=</span> <span class="nx">utilnet</span><span class="p">.</span><span class="nf">IsIPv6</span><span class="p">(</span><span class="nx">proxier</span><span class="p">.</span><span class="nx">nodeIP</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">cs</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">currentServices</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">svc</span> <span class="o">:=</span> <span class="nx">currentServices</span><span class="p">[</span><span class="nx">cs</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">proxier</span><span class="p">.</span><span class="nf">isIPInExcludeCIDRs</span><span class="p">(</span><span class="nx">svc</span><span class="p">.</span><span class="nx">Address</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">utilnet</span><span class="p">.</span><span class="nf">IsIPv6</span><span class="p">(</span><span class="nx">svc</span><span class="p">.</span><span class="nx">Address</span><span class="p">)</span> <span class="o">!=</span> <span class="nx">isIPv6</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Not our family
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">activeServices</span><span class="p">[</span><span class="nx">cs</span><span class="p">];</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Delete service %s&#34;</span><span class="p">,</span> <span class="nx">svc</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipvs</span><span class="p">.</span><span class="nf">DeleteVirtualServer</span><span class="p">(</span><span class="nx">svc</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to delete service %s, error: %v&#34;</span><span class="p">,</span> <span class="nx">svc</span><span class="p">.</span><span class="nf">String</span><span class="p">(),</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">addr</span> <span class="o">:=</span> <span class="nx">svc</span><span class="p">.</span><span class="nx">Address</span><span class="p">.</span><span class="nf">String</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">legacyBindAddrs</span><span class="p">[</span><span class="nx">addr</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Unbinding address %s&#34;</span><span class="p">,</span> <span class="nx">addr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">netlinkHandle</span><span class="p">.</span><span class="nf">UnbindAddress</span><span class="p">(</span><span class="nx">addr</span><span class="p">,</span> <span class="nx">DefaultDummyDevice</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to unbind service addr %s from dummy interface %s: %v&#34;</span><span class="p">,</span> <span class="nx">addr</span><span class="p">,</span> <span class="nx">DefaultDummyDevice</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// In case we delete a multi-port service, avoid trying to unbind multiple times
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nb">delete</span><span class="p">(</span><span class="nx">legacyBindAddrs</span><span class="p">,</span> <span class="nx">addr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="性能提升点2">性能提升点2</h2>
<p>由上面的讲解可知，CRUD动作是每一个事件 <a href="https://github.com/kubernetes/kubernetes/blob/98d5dc5d36d34a7ee13368a7893dcb400ec4e566/pkg/proxy/ipvs/proxier.go#L1398-L1406">syncProxyRules</a> 被触发时都会进行执行，而删除动作存在多组循环（如构建维护的两个列表；进行循环删除）即每一次 Endpoints 变动也会触发 大量的 Service 的循环，从而检测 是否由遗留的Service资源，而这个操作保留到kubernetes 1.26版本</p>
<p>假设你的集群节点是5000个，service资源是两万个，那么当你更新一个Service资源循环的次数，会至少循环多达数万次（Service, EndpointSpilt, currentServices, NodeIP, Ingress）其中无用的为currentServices，因为这个只有在删除Service本身才会有效（如果存在20000个service，其中currentServices在构建与对比的过程超过4万次）</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>深入理解Kubernetes service - EndpointSlices做了什么？</title>
      <link>https://www.oomkill.com/2023/02/ch18-endpointslices/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/02/ch18-endpointslices/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="endpoint">Endpoint</h2>
<p>Endpoints 就是 service 中后端的server，通常来说 endpoint 与 service是关联的，例如下面的一个endpoints 资源。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Endpoints</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">subsets</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">addresses</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">ip</span><span class="p">:</span><span class="w"> </span><span class="m">172.17.0.2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">ip</span><span class="p">:</span><span class="w"> </span><span class="m">172.17.0.3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;111&#34;</span><span class="w"> </span><span class="c"># 多个端口需要用name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">88</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;222&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>而 Endpoints 资源是由控制平面的  Endpoints controller 进行管理的，主要用于将外部server引入至集群内时使用的，例如Kube-apiserver 在集群外的地址，以及external service所需要创建的。</p>
<p>我们看到 Endpoints controller 代码中，在对 该 informer 监听的包含 service 与 Pod，位于 <a href="https://github.com/kubernetes/kubernetes/blob/98d5dc5d36d34a7ee13368a7893dcb400ec4e566/pkg/controller/endpoint/endpoints_controller.go#L79-L128">NewEndpointController()</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// NewEndpointController returns a new *EndpointController.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewEndpointController</span><span class="p">(</span><span class="nx">podInformer</span> <span class="nx">coreinformers</span><span class="p">.</span><span class="nx">PodInformer</span><span class="p">,</span> <span class="nx">serviceInformer</span> <span class="nx">coreinformers</span><span class="p">.</span><span class="nx">ServiceInformer</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">endpointsInformer</span> <span class="nx">coreinformers</span><span class="p">.</span><span class="nx">EndpointsInformer</span><span class="p">,</span> <span class="nx">client</span> <span class="nx">clientset</span><span class="p">.</span><span class="nx">Interface</span><span class="p">,</span> <span class="nx">endpointUpdatesBatchPeriod</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">)</span> <span class="o">*</span><span class="nx">EndpointController</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">broadcaster</span> <span class="o">:=</span> <span class="nx">record</span><span class="p">.</span><span class="nf">NewBroadcaster</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">broadcaster</span><span class="p">.</span><span class="nf">StartStructuredLogging</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">broadcaster</span><span class="p">.</span><span class="nf">StartRecordingToSink</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">v1core</span><span class="p">.</span><span class="nx">EventSinkImpl</span><span class="p">{</span><span class="nx">Interface</span><span class="p">:</span> <span class="nx">client</span><span class="p">.</span><span class="nf">CoreV1</span><span class="p">().</span><span class="nf">Events</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">recorder</span> <span class="o">:=</span> <span class="nx">broadcaster</span><span class="p">.</span><span class="nf">NewRecorder</span><span class="p">(</span><span class="nx">scheme</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">EventSource</span><span class="p">{</span><span class="nx">Component</span><span class="p">:</span> <span class="s">&#34;endpoint-controller&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">client</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">client</span><span class="p">.</span><span class="nf">CoreV1</span><span class="p">().</span><span class="nf">RESTClient</span><span class="p">().</span><span class="nf">GetRateLimiter</span><span class="p">()</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ratelimiter</span><span class="p">.</span><span class="nf">RegisterMetricAndTrackRateLimiterUsage</span><span class="p">(</span><span class="s">&#34;endpoint_controller&#34;</span><span class="p">,</span> <span class="nx">client</span><span class="p">.</span><span class="nf">CoreV1</span><span class="p">().</span><span class="nf">RESTClient</span><span class="p">().</span><span class="nf">GetRateLimiter</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">e</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">EndpointController</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">client</span><span class="p">:</span>           <span class="nx">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">queue</span><span class="p">:</span>            <span class="nx">workqueue</span><span class="p">.</span><span class="nf">NewNamedRateLimitingQueue</span><span class="p">(</span><span class="nx">workqueue</span><span class="p">.</span><span class="nf">DefaultControllerRateLimiter</span><span class="p">(),</span> <span class="s">&#34;endpoint&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">workerLoopPeriod</span><span class="p">:</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">serviceInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">().</span><span class="nf">AddEventHandler</span><span class="p">(</span><span class="nx">cache</span><span class="p">.</span><span class="nx">ResourceEventHandlerFuncs</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">AddFunc</span><span class="p">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">onServiceUpdate</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">UpdateFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">old</span><span class="p">,</span> <span class="nx">cur</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">e</span><span class="p">.</span><span class="nf">onServiceUpdate</span><span class="p">(</span><span class="nx">cur</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DeleteFunc</span><span class="p">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">onServiceDelete</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">e</span><span class="p">.</span><span class="nx">serviceLister</span> <span class="p">=</span> <span class="nx">serviceInformer</span><span class="p">.</span><span class="nf">Lister</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">e</span><span class="p">.</span><span class="nx">servicesSynced</span> <span class="p">=</span> <span class="nx">serviceInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">().</span><span class="nx">HasSynced</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">podInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">().</span><span class="nf">AddEventHandler</span><span class="p">(</span><span class="nx">cache</span><span class="p">.</span><span class="nx">ResourceEventHandlerFuncs</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">AddFunc</span><span class="p">:</span>    <span class="nx">e</span><span class="p">.</span><span class="nx">addPod</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">UpdateFunc</span><span class="p">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">updatePod</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DeleteFunc</span><span class="p">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">deletePod</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">e</span><span class="p">.</span><span class="nx">podLister</span> <span class="p">=</span> <span class="nx">podInformer</span><span class="p">.</span><span class="nf">Lister</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">e</span><span class="p">.</span><span class="nx">podsSynced</span> <span class="p">=</span> <span class="nx">podInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">().</span><span class="nx">HasSynced</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">endpointsInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">().</span><span class="nf">AddEventHandler</span><span class="p">(</span><span class="nx">cache</span><span class="p">.</span><span class="nx">ResourceEventHandlerFuncs</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DeleteFunc</span><span class="p">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">onEndpointsDelete</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">e</span><span class="p">.</span><span class="nx">endpointsLister</span> <span class="p">=</span> <span class="nx">endpointsInformer</span><span class="p">.</span><span class="nf">Lister</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">e</span><span class="p">.</span><span class="nx">endpointsSynced</span> <span class="p">=</span> <span class="nx">endpointsInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">().</span><span class="nx">HasSynced</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">...</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="endpointslices-supa-href11asup">EndpointSlices <sup><a href="#1">[1]</a></sup></h2>
<p>EndpointSlices 是提供为集群内用于替换 Endpoints 资源的一种灵活并具有扩展性的一种资源，由控制平面的 EndpointSlices Controller 来创建和管理的，默认情况下 EndpointSlices Controller 创建和管理的EndpointSlices 资源将不大于100个Endpoints；可以通过 <code>kube-controller-manager</code> 的参数  <code>--max-endpoints-per-slice</code>  设置，该参数最大为1000 <sup><a href="#2">[2]</a></sup></p>
<p>通常情况下无需自行创建该资源，因为在创建 service 资源时 通常是通过 label 来匹配到对应的 backend server</p>
<p>下面是一个完整的 EndpointSlices 资源清单</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">addressType</span><span class="p">:</span><span class="w"> </span><span class="l">IPv4</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">discovery.k8s.io/v1beta1</span><span class="w"> </span><span class="c">#注意版本 1.21后是 v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">endpoints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">addresses</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="m">192.168.1.241</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">conditions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ready</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">targetRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">netbox-ff6dd9445-kxr4s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resourceVersion</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;1994535&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">topology</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kubernetes.io/hostname</span><span class="p">:</span><span class="w"> </span><span class="l">master-machine</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">addresses</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="m">192.168.1.242</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">conditions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ready</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">targetRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">netbox-ff6dd9445-566tj</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">topology</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kubernetes.io/hostname</span><span class="p">:</span><span class="w"> </span><span class="l">master-machine</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">EndpointSlice</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">endpoints.kubernetes.io/last-change-trigger-time</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2023-02-24T22:40:20+08:00&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">endpointslice.kubernetes.io/managed-by</span><span class="p">:</span><span class="w"> </span><span class="l">endpointslice-controller.k8s.io</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kubernetes.io/service-name</span><span class="p">:</span><span class="w"> </span><span class="l">netbox</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">netbox-l489z</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在代码中 <a href="https://github.com/kubernetes/kubernetes/blob/98d5dc5d36d34a7ee13368a7893dcb400ec4e566/pkg/apis/discovery/types.go#L29-L54">EndpointSlices</a> 资源是这么呈现的，可以看到主要的就是包含一组 Endpoints 资源</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">EndpointSlice</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span><span class="p">.</span><span class="nx">TypeMeta</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMeta</span>
</span></span><span class="line"><span class="cl">	<span class="nx">AddressType</span> <span class="nx">AddressType</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Endpoints</span> <span class="p">[]</span><span class="nx">Endpoint</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Ports</span> <span class="p">[]</span><span class="nx">EndpointPort</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="endpointslices-在-kube-proxy中的应用">EndpointSlices 在 kube-proxy中的应用</h2>
<p>Google 工程师 <em>Rob Scott</em> 在2020年一文 <sup><a href="#3">[3]</a></sup> 中提到了 EndpointSlices 的作用，从kubernetes 1.19 开始EndpointSlices 默认被开启，而开启后的kube-proxy将使用 EndpointSlices 读取集群内的service的 Endpoints，而这个最大的变化就是『拓扑感知路由』(<em><strong>Topology Aware Routing</strong></em>)</p>
<p><em>Rob Scott</em> 在文中提到 EndpointSlice API 是为了提升 Endpoints API 的限制，例如，etcd的存储大小，以及pod规模变动时最大产生的超过22TB数据的问题</p>
<p>而这些问题可以通过文中变化图来说明，开启功能后会将所有匹配到的 Endpoint，划分为多个EndpointSlices，而在大规模集群环境场景下，每次的变更只需要修改其中一个 EndpointSlices 即可，这将带给 kube-proxy 提供超Endpoint模式 10倍的性能</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/endpoint-slices.png" alt="端点切片"  /></p>
<center>图：Kubernetes EndpointSlices </center>
<center><em>Source：</em>https://kubernetes.io/blog/2020/09/02/scaling-kubernetes-networking-with-endpointslices</center><br>
<blockquote>
<p><em><strong>Notes</strong></em>：该文中没有提到的一点是：”EndpointSlices资源解决的是集群内的service节点问题，如你使用了endpoint类资源，那么不会触发到EndpointSlices的资源，这部分在 <code>kube-proxy</code> 源码中可以很清晰的看到</p>
</blockquote>
<p>下面的 kube-proxy 日志可以看到获取 server是通过 Endpoints 还是 EndpointSlices</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">endpointslicecache.go:322] Setting endpoints for &#34;default/netbox&#34; to [192.168.1.241:80 192.168.1.242:80]
</span></span><span class="line"><span class="cl">10008 proxier.go:1057] Syncing ipvs Proxier rules
</span></span><span class="line"><span class="cl">10008 iptables.go:343] running iptables-save [-t filter]
</span></span><span class="line"><span class="cl">10008 iptables.go:343] running iptables-save [-t nat]
</span></span><span class="line"><span class="cl">10008 ipset.go:173] Successfully add entry: 192.168.1.241,tcp:80,192.168.1.241 to ip set: KUBE-LOOP-BACK
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结">总结</h2>
<ul>
<li>Endpoints 与 EndpointSlices 均是为service提供端点的</li>
<li>Service规模越大，那么Endpoints中的 Pod 数量越大，传输的 EndPoints 对象就越大。集群中 Pod 更改的频率越高，也意味着传输在网络中发生的频率就越高</li>
<li>Endpoints 对象在大规模集群场景下存在下列问题：
<ul>
<li>增加网络流量</li>
<li>超大规模的 service 理论上会无法存储 该 Endpoints</li>
<li>处理Endpoints资源的 worker 会消耗更多的计算资源</li>
<li>隐性增加对控制平面的影响，service的可扩展性将降低</li>
</ul>
</li>
<li>Endpointslices 解决了：
<ul>
<li>部分更新，更少的网络流量</li>
<li>Worker 处理 Endpoints 更新所需的资源更少</li>
<li>减少对控制平面的影响，提升的性能和 service 规模</li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>Reference</strong></p>
<p><sup id="1">[1]</sup> <a href="https://kubernetes.io/docs/concepts/services-networking/endpoint-slices/"><em>EndpointSlices</em></a></p>
<p><sup id="2">[2]</sup> <a href="https://kubernetes.io/docs/concepts/services-networking/endpoint-slices/#address-types"><em>EndpointSlice API</em></a></p>
<p><sup id="3">[3]</sup> <a href="https://kubernetes.io/docs/concepts/services-networking/endpoint-slices/#address-types"><em>Scaling Kubernetes Networking With EndpointSlices</em></a></p>
<p><sup id="4">[4]</sup> <a href="https://kubernetes.io/blog/2020/09/02/scaling-kubernetes-networking-with-endpointslices/#scalability-limitations-of-the-endpoints-api"><em>Scalability Limitations of the Endpoints API</em></a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>深入理解Kubernetes service - 如何扩展现有的kube-proxy架构？</title>
      <link>https://www.oomkill.com/2023/02/ch23-extend-kube-proxy/</link>
      <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/02/ch23-extend-kube-proxy/</guid>
      <description></description>
      <content:encoded><![CDATA[<blockquote>
<p>本文是关于Kubernetes service解析的第四章</p>
<ul>
<li><a href="https://cylonchau.github.io/kubernetes-service-controller.html">深入理解Kubernetes service - 你真的理解service吗?</a></li>
<li><a href="https://cylonchau.github.io/kubernetes-endpointslices.html">深入理解Kubernetes service - EndpointSlices做了什么？</a></li>
<li><a href="https://cylonchau.github.io/kubernetes-kube-proxy-code.html">深入理解Kubernetes service - kube-proxy架构分析</a></li>
<li>深入理解Kubernetes service - 如何扩展现有的kube-proxy架构？</li>
</ul>
<p>所有关于Kubernetes service 部分代码上传至仓库 <a href="https://github.com/cylonchau/kube-haproxy">github.com/cylonchau/kube-haproxy</a></p>
</blockquote>
<h2 id="overview">Overview</h2>
<p>在前两部分中，学习了一些 service,于kube-proxy在设计架构，但存在扩展问题将引入了一些问题：</p>
<ul>
<li>为什么需要了解这部分内容呢？</li>
<li>与传统架构有什么区别呢？</li>
<li>于eBPF 的 cilium又有什么区别呢？</li>
<li>既然eBPF可以做到，那为什么要这部分内容呢？</li>
</ul>
<p>接下来的内容将围绕这四个问题展开来讲，而不是代码的讲解，代码可以看置顶</p>
<h2 id="ipvs与iptables在kubernetes中应用时的问题">IPVS与iptables在kubernetes中应用时的问题</h2>
<p>对于在使用了kubernetes用户以及了解 kube-proxy 架构后，知道当集群规模过大时，service必将增多，而一个service未必是一条iptables/ipvs规则，对于kubernetes这种分布式架构来说，集群规模越大，集群状态就越不可控，尤其时kube-proxy。</p>
<p>为什么单指kube-proxy呢？想想可以知道，pod的故障 或 node 的故障对于kubernetes集群来说却不是致命的，因为 这些资源集群中存在 避免方案，例如Pod的驱逐。而kube-proxy或iptables/IPVS问题将导致服务的不可控 『抖动』例如规则生成的快慢和Pod就绪的快慢不一致，部分节点不存在 service 此时服务必然抖动。</p>
<p>再例如 iptables/IPVS 排查的难度对于普通运维工程师或开发工程师的技术水平有很高的要求，网上随处可见分析该类问题的帖子：</p>
<ul>
<li>
<p><a href="https://www.bilibili.com/video/BV1yK411V7oa/?spm_id_from=333.337.search-card.all.click&amp;vd_source=80a7f916d4f5b3fd494735dbc609331f">kube-proxy源码分析与问题定位</a></p>
</li>
<li>
<p><a href="http://learn.lianglianglee.com/%E4%B8%93%E6%A0%8F/%E5%AE%B9%E5%99%A8%E5%AE%9E%E6%88%98%E9%AB%98%E6%89%8B%E8%AF%BE/%E5%8A%A0%E9%A4%9001%20%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90%EF%BC%9A%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3%E6%B5%B7%E9%87%8FIPVS%E8%A7%84%E5%88%99%E5%B8%A6%E6%9D%A5%E7%9A%84%E7%BD%91%E7%BB%9C%E5%BB%B6%E6%97%B6%E6%8A%96%E5%8A%A8%E9%97%AE%E9%A2%98%EF%BC%9F.md">案例分析：怎么解决海量IPVS规则带来的网络延时抖动问题？</a></p>
</li>
<li>
<p><a href="https://imroc.cc/kubernetes/networking/faq/ipvs-conn-reuse-mode.html#ipvs-%E8%BF%9E%E6%8E%A5%E5%A4%8D%E7%94%A8%E5%BC%95%E5%8F%91%E7%9A%84%E7%B3%BB%E5%88%97%E9%97%AE%E9%A2%98">ipvs 连接复用引发的系列问题</a></p>
</li>
<li>
<p><a href="https://www.diva-portal.org/smash/get/diva2:1610208/FULLTEXT01.pdf">Investigating Causes of Jitter in Container Networking</a></p>
</li>
<li>
<p><a href="https://main.qcloudimg.com/raw/document/intl/product/pdf/457_37358_en.pdf">ContainerNative network LoadBalancer IPVS jitter</a></p>
</li>
</ul>
<p>对于上述问题，相信遇到了很难定位处理，虽然现在已fixed，并有eBPF技术的加入减少了此类问题的发生，但是eBPF实际同理于IPVS 都是需要对Linux内核有一定了解后才可以，这也就是为什么需要了解这部分</p>
<h2 id="如果需要自定义proxier为什么会解决这个问题">如果需要自定义proxier为什么会解决这个问题</h2>
<p>这里就是放大到kubernetes意外的传统架构中，当直接部署于Linux系统上使用nginx等传统LB时就很少有人提到这些问题了，而这些问题存在一个关键字「Container」；而引发这个问题的则是 service。去除 service 的功能，传统架构于Kubernetes架构部署的应用则是相同的，只是区分了名称空间。</p>
<p>抓入关键的核心之后就做接下来的事情了，我称之为「shed kube-proxy, fetch service」；即把service提取到集群外部的LB之上，例如F5, nginx等。</p>
<p>这里会存在一个疑问：「这个不是ingress吗？」，这个问题会在下一章讲到 <a href="https://cylonchau.github.io/kubernetes-auditing.html">proxier与ingress有什么区别?</a></p>
<h2 id="软件的设计">软件的设计</h2>
<p>既然拿到了核心问题就该定义软件工作模式，这里将软件架构设计为三种：</p>
<ul>
<li>only fetch：任然需要 kube-proxy 组件，通过定义 contoller 将流量引入，即不过service，这种场景不会破坏现有的集群架构，从而去除service的功能，如果需要service功能配置外部service即可</li>
<li>SK (similar kube-proxy)：通过效仿kube-proxy + ipvs架构，将LB于proxier部署在每个worker节点上，让浏览都走本地</li>
<li>replacement kube-proxy：完全取代kube-proxy 这于cilium类似了，但不同的是，<strong>proxier</strong> 可以于 <code>kube-controller-manager</code>；<code>kube-scheduler</code> 作为控制平面为集群提供 <code>service </code> 功能，而无需为所有worker节点都部署一个 <code>kube-proxy</code> 或 <code>cilium</code> 这种架构</li>
</ul>
<h2 id="最后一个问题">最后一个问题</h2>
<p>此时可以引入最后一个问题了：「既然eBPF可以做到，那为什么要这部分内容呢？」。</p>
<p>答：其一简单，每个运维人员无需额外知识都可以对 service 问题进行排错，简便了运维复杂度。另外这一部分其实是对于完整企业生态来讲，统一的流量转发平台是所必须的，有了这个就不需要单独的 service 功能了</p>
<h2 id="实践基于haproxy的proxier">实践：基于haproxy的proxier</h2>
<p>在扩展proxier需要对 kube-proxy 有一定的了解，并且，kube-proxy 在可扩展性来说做的也是相当不错的，我们只需要实现一个 proxier.go 就可以基本上完成了对 kube-proxy ；而 proxier.go 的核心方法只需要三个函数即可（==这里是根据iptables/ipvs的设计进行的，也可以整合为一个方法==）</p>
<p>除了这三个函数外，其他的函数全都是 kube-proxy 已经实现好的通用的，这里直接使用或者按照其他内置proxier的方法即可</p>
<h3 id="满足条件">满足条件</h3>
<ul>
<li>haproxy工作与proxier相同的节点，可以是集群内也可以是集群外，整个集群只需要一个</li>
<li>实现方法：syncProxyRules(), syncService(),  syncEndpoint()</li>
</ul>
<p>查看当前的service</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl get endpointslices
</span></span><span class="line"><span class="cl">NAME           ADDRESSTYPE   PORTS   ENDPOINTS                     AGE
</span></span><span class="line"><span class="cl">kubernetes     IPv4          <span class="m">6443</span>    10.0.0.4                      195d
</span></span><span class="line"><span class="cl">netbox-l489z   IPv4          <span class="m">80</span>      192.168.1.241,192.168.1.242   2d1h
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看service 配置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">netbox</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">clusterIP</span><span class="p">:</span><span class="w"> </span><span class="m">192.168.129.5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">88</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">sessionAffinity</span><span class="p">:</span><span class="w"> </span><span class="l">None</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterIP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">status</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">loadBalancer</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>通过 proxier 生成了对应的 backend 与 frontend，这样就可以通过 haproxy 作为一个外部LB来跨过 service 与 IPVS/IPTables，通过这种情况下，我们可以将集群拉出一个平面至传统架构上，而又不影响集群的功能</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20230226234851398.png" alt="image-20230226234851398"  /></p>
<p>在这种场景下需要注意的是：</p>
<ul>
<li>OF模式下，我们需要 kube-proxy 组件，而使用 kube-proxy 组件</li>
<li>所有模式下，haproxy worker和kubernetes nodes需处于一个网络平面</li>
<li>非OF模式下需要自行修改 <code>kube-apiserver</code> 源代码（主要是使kubernetes service分配机制）</li>
</ul>
<h2 id="proxier与ingress的区别">Proxier与Ingress的区别</h2>
<p>肯定有人会问，kubernetes提供了Ingress功能不是和这个一样吗？</p>
<p>答：对比一个LB是Proxier还是Ingress最好的区别就是“舍去kube-proxy”可以工作正常吗？</p>
<p>而kubernetes官方也提供说明，Ingress的后端是service，service的后端则是IPVS/IPTables，而IPVS的后端才是Pod；相对于Proxier LB，他的后端则直接是Pod，跨越了Service。</p>
<ul>
<li>Kubernetes Ingress 架构说明 <sup><a href="#1">[1]</a></sup></li>
<li>Traefik Ingress 架构说明 <sup><a href="#2">[2]</a></sup></li>
<li>APISIX Ingress 架构说明 <sup><a href="#3">[3]</a></sup></li>
</ul>
<p>而相对的本文的学习思路，haproxy官方提供了对应的解决方案 <sup><a href="#4">[4]</a></sup> ；而由此，可以灵活的为Kubernetes提供更多的LB方案</p>
<blockquote>
<p><strong>Reference</strong></p>
<p><sup id="1">[1]</sup> <a href="https://kubernetes.io/docs/concepts/services-networking/ingress/#what-is-ingress"><em>Kubernetes Ingress 架构说明</em></a></p>
<p><sup id="2">[2]</sup> <a href="https://traefik.io/solutions/kubernetes-ingress/#architecture"><em>Traefik Ingress 架构说明</em></a></p>
<p><sup id="3">[3]</sup> <a href="https://github.com/apache/apisix-ingress-controller"><em>APISIX Ingress 架构说明</em></a></p>
<p><sup id="4">[4]</sup> <a href="https://haproxy-ingress.github.io/docs/examples/external-haproxy/"><em>External haproxy</em></a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>深入理解Kubernetes service - kube-proxy架构分析</title>
      <link>https://www.oomkill.com/2023/02/ch19-kube-proxy-code/</link>
      <pubDate>Mon, 06 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/02/ch19-kube-proxy-code/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="前提概述">前提概述</h2>
<p>kubernetes集群中运行在每个Worker节点上的组件 <strong>kube-proxy</strong>，本文讲解的是如何快速的了解 kube-proxy 的软件架构，而不是流程的分析，专注于 proxy 层面的设计讲解，而不会贴大量的代码</p>
<h2 id="kube-proxy软件设计">kube-proxy软件设计</h2>
<p>kube-proxy 在设计上分为三个模块 server 于 <a href="https://github.com/kubernetes/kubernetes/tree/master/cmd/kube-proxy">proxy</a>：</p>
<ul>
<li><a href="https://github.com/kubernetes/kubernetes/tree/master/cmd/kube-proxy">server</a>: 是一个常驻进程用于处理service的事件</li>
<li><a href="https://github.com/kubernetes/kubernetes/tree/v1.24.5/pkg/proxy">proxy</a>: 是 kube-proxy 的工作核心，实际上的角色是一个 service controller，通过监听 node, service, endpoint 而生成规则</li>
<li><a href="https://github.com/kubernetes/kubernetes/blob/v1.24.5/pkg/proxy/ipvs/proxier.go">proxier</a>: 是实现service的组件，例如iptables, ipvs&hellip;.</li>
</ul>
<h2 id="如何快速读懂kube-proxy源码">如何快速读懂kube-proxy源码</h2>
<p>要想快速读懂 kube-proxy 源码就需要对 kube-proxy 设计有深刻的了解，例如需要看 kube-proxy 的实现，我们就可以看 proxy的部分，下列是 proxy 部分的目录结构</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ tree -L <span class="m">1</span>
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── BUILD
</span></span><span class="line"><span class="cl">├── OWNERS
</span></span><span class="line"><span class="cl">├── apis
</span></span><span class="line"><span class="cl">├── config
</span></span><span class="line"><span class="cl">├── healthcheck
</span></span><span class="line"><span class="cl">├── iptables
</span></span><span class="line"><span class="cl">├── ipvs
</span></span><span class="line"><span class="cl">├── metaproxier
</span></span><span class="line"><span class="cl">├── metrics
</span></span><span class="line"><span class="cl">├── userspace
</span></span><span class="line"><span class="cl">├── util
</span></span><span class="line"><span class="cl">├── winuserspace
</span></span><span class="line"><span class="cl">├── winkernel
</span></span><span class="line"><span class="cl">├── doc.go
</span></span><span class="line"><span class="cl">├── endpoints.go
</span></span><span class="line"><span class="cl">├── endpoints_test.go
</span></span><span class="line"><span class="cl">├── endpointslicecache.go
</span></span><span class="line"><span class="cl">├── endpointslicecache_test.go
</span></span><span class="line"><span class="cl">├── service.go
</span></span><span class="line"><span class="cl">├── service_test.go
</span></span><span class="line"><span class="cl">├── topology.go
</span></span><span class="line"><span class="cl">├── topology_test.go
</span></span><span class="line"><span class="cl">└── types.go
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>目录 ipvs, iptables, 就是所知的 kube-proxy 提供的两种 load balancer</li>
<li>目录 apis, 则是kube-proxy 配置文件资源类型的定义，<code>--config=/etc/kubernetes/kube-proxy-config.yaml</code> 所指定问题的shema</li>
<li>目录config: 定义了每种资源的handler需要实现什么</li>
<li>service.go, endpoints.go：是controller的实现</li>
<li>type.go: 是每个资源的interface定义，例如：
<ul>
<li>Provider: 规定了每个proxier需要实现什么</li>
<li>ServicePort: service 控制器需要实现什么</li>
<li>Endpoint: service 控制器需要实现什么</li>
</ul>
</li>
</ul>
<p>上述是整个 proxy 的一级结构</p>
<h2 id="service-controller">service controller</h2>
<p>service控制器换句话说，就是工作内容类似于kubernetes集群中的pod控制器那些，所作的工作就是监听对应资源做出相应事件处理，而这个处理被定义为 <a href="https://github.com/kubernetes/kubernetes/blob/e979822c185a14537054f15808a118d7fcce1d6e/pkg/proxy/types.go#L30-L41">handler</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Provider</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">config</span><span class="p">.</span><span class="nx">EndpointsHandler</span>
</span></span><span class="line"><span class="cl">	<span class="nx">config</span><span class="p">.</span><span class="nx">EndpointSliceHandler</span>
</span></span><span class="line"><span class="cl">	<span class="nx">config</span><span class="p">.</span><span class="nx">ServiceHandler</span>
</span></span><span class="line"><span class="cl">	<span class="nx">config</span><span class="p">.</span><span class="nx">NodeHandler</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Sync immediately synchronizes the Provider&#39;s current state to proxy rules.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Sync</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// SyncLoop runs periodic work.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// This is expected to run as a goroutine or as the main loop of the app.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// It does not return.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">SyncLoop</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>由上面代码可以看到，每一个Provider 即 proxier （用于实现的LB的控制器）都需要包含对应资源的事件处理函数于 一个 <code>Sync()</code> 和 <code>SyncLoop()</code>，所以这里将总结为 controller 而不是用于这里给到的术语</p>
<p>同理，其他类型的 controller 则是相同与 service controller</p>
<h2 id="深入理解proxier">深入理解proxier</h2>
<p>这里将以 ipvs 为例，如图所示，这将是一个 proxier 的实现，而 proxier.go 则是真实的 proxier 实现</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20230212221556051.png" alt="image-20230212221556051"  /></p>
<center>图：Kubernetes API 请求的请求处理步骤图（详细）</center>
<p>而 ipvs 的 <a href="https://github.com/kubernetes/kubernetes/blob/v1.24.5/pkg/proxy/ipvs/proxier.go">proxier</a> 则是如下定义的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Proxier</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// endpointsChanges and serviceChanges contains all changes to endpoints and
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// services that happened since last syncProxyRules call. For a single object,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// changes are accumulated, i.e. previous is state from before all of them,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// current is state after applying all of those.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">endpointsChanges</span> <span class="o">*</span><span class="nx">proxy</span><span class="p">.</span><span class="nx">EndpointChangeTracker</span>
</span></span><span class="line"><span class="cl">	<span class="nx">serviceChanges</span>   <span class="o">*</span><span class="nx">proxy</span><span class="p">.</span><span class="nx">ServiceChangeTracker</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">mu</span>           <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span> <span class="c1">// protects the following fields
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">serviceMap</span>   <span class="nx">proxy</span><span class="p">.</span><span class="nx">ServiceMap</span>
</span></span><span class="line"><span class="cl">	<span class="nx">endpointsMap</span> <span class="nx">proxy</span><span class="p">.</span><span class="nx">EndpointsMap</span>
</span></span><span class="line"><span class="cl">	<span class="nx">portsMap</span>     <span class="kd">map</span><span class="p">[</span><span class="nx">utilproxy</span><span class="p">.</span><span class="nx">LocalPort</span><span class="p">]</span><span class="nx">utilproxy</span><span class="p">.</span><span class="nx">Closeable</span>
</span></span><span class="line"><span class="cl">	<span class="nx">nodeLabels</span>   <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// endpointsSynced, endpointSlicesSynced, and servicesSynced are set to true when
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// corresponding objects are synced after startup. This is used to avoid updating
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// ipvs rules with some partial data after kube-proxy restart.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">endpointsSynced</span>      <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="nx">endpointSlicesSynced</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="nx">servicesSynced</span>       <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="nx">initialized</span>          <span class="kt">int32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">syncRunner</span>           <span class="o">*</span><span class="nx">async</span><span class="p">.</span><span class="nx">BoundedFrequencyRunner</span> <span class="c1">// governs calls to syncProxyRules
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// These are effectively const and do not need the mutex to be held.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">syncPeriod</span>    <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span></span><span class="line"><span class="cl">	<span class="nx">minSyncPeriod</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Values are CIDR&#39;s to exclude when cleaning up IPVS rules.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">excludeCIDRs</span> <span class="p">[]</span><span class="o">*</span><span class="nx">net</span><span class="p">.</span><span class="nx">IPNet</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Set to true to set sysctls arp_ignore and arp_announce
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">strictARP</span>      <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="nx">iptables</span>       <span class="nx">utiliptables</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ipvs</span>           <span class="nx">utilipvs</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ipset</span>          <span class="nx">utilipset</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nx">exec</span>           <span class="nx">utilexec</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nx">masqueradeAll</span>  <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="nx">masqueradeMark</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">localDetector</span>  <span class="nx">proxyutiliptables</span><span class="p">.</span><span class="nx">LocalTrafficDetector</span>
</span></span><span class="line"><span class="cl">	<span class="nx">hostname</span>       <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">nodeIP</span>         <span class="nx">net</span><span class="p">.</span><span class="nx">IP</span>
</span></span><span class="line"><span class="cl">	<span class="nx">portMapper</span>     <span class="nx">utilproxy</span><span class="p">.</span><span class="nx">PortOpener</span>
</span></span><span class="line"><span class="cl">	<span class="nx">recorder</span>       <span class="nx">record</span><span class="p">.</span><span class="nx">EventRecorder</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">serviceHealthServer</span> <span class="nx">healthcheck</span><span class="p">.</span><span class="nx">ServiceHealthServer</span>
</span></span><span class="line"><span class="cl">	<span class="nx">healthzServer</span>       <span class="nx">healthcheck</span><span class="p">.</span><span class="nx">ProxierHealthUpdater</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ipvsScheduler</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Added as a member to the struct to allow injection for testing.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ipGetter</span> <span class="nx">IPGetter</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// The following buffers are used to reuse memory and avoid allocations
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// that are significantly impacting performance.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">iptablesData</span>     <span class="o">*</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span>
</span></span><span class="line"><span class="cl">	<span class="nx">filterChainsData</span> <span class="o">*</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span>
</span></span><span class="line"><span class="cl">	<span class="nx">natChains</span>        <span class="o">*</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span>
</span></span><span class="line"><span class="cl">	<span class="nx">filterChains</span>     <span class="o">*</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span>
</span></span><span class="line"><span class="cl">	<span class="nx">natRules</span>         <span class="o">*</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span>
</span></span><span class="line"><span class="cl">	<span class="nx">filterRules</span>      <span class="o">*</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Added as a member to the struct to allow injection for testing.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">netlinkHandle</span> <span class="nx">NetLinkHandle</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ipsetList is the list of ipsets that ipvs proxier used.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ipsetList</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">IPSet</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Values are as a parameter to select the interfaces which nodeport works.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">nodePortAddresses</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// networkInterfacer defines an interface for several net library functions.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Inject for test purpose.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">networkInterfacer</span>     <span class="nx">utilproxy</span><span class="p">.</span><span class="nx">NetworkInterfacer</span>
</span></span><span class="line"><span class="cl">	<span class="nx">gracefuldeleteManager</span> <span class="o">*</span><span class="nx">GracefulTerminationManager</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>再看这个结构体的 structure，发现他实现了上述提到的 Handler 和 <a href="https://github.com/kubernetes/kubernetes/blob/e979822c185a14537054f15808a118d7fcce1d6e/pkg/proxy/ipvs/proxier.go#L843-L849">Sync()</a></p>
<p>可以看到 Sync() 的实现是调用 runner.Run()</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">proxier</span> <span class="o">*</span><span class="nx">Proxier</span><span class="p">)</span> <span class="nf">Sync</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">healthzServer</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">proxier</span><span class="p">.</span><span class="nx">healthzServer</span><span class="p">.</span><span class="nf">QueuedUpdate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metrics</span><span class="p">.</span><span class="nx">SyncProxyRulesLastQueuedTimestamp</span><span class="p">.</span><span class="nf">SetToCurrentTime</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">proxier</span><span class="p">.</span><span class="nx">syncRunner</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而 handler 中的任意事件的触发则是调用 Sync()</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// handler 不同的事件均指向 On{rs}Update() 函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">proxier</span> <span class="o">*</span><span class="nx">Proxier</span><span class="p">)</span> <span class="nf">OnEndpointsAdd</span><span class="p">(</span><span class="nx">endpoints</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Endpoints</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">proxier</span><span class="p">.</span><span class="nf">OnEndpointsUpdate</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="nx">endpoints</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// OnEndpointsDelete is called whenever deletion of an existing endpoints object is observed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">proxier</span> <span class="o">*</span><span class="nx">Proxier</span><span class="p">)</span> <span class="nf">OnEndpointsDelete</span><span class="p">(</span><span class="nx">endpoints</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Endpoints</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">proxier</span><span class="p">.</span><span class="nf">OnEndpointsUpdate</span><span class="p">(</span><span class="nx">endpoints</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 而 update 调用的则是 Sync()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">proxier</span> <span class="o">*</span><span class="nx">Proxier</span><span class="p">)</span> <span class="nf">OnEndpointsUpdate</span><span class="p">(</span><span class="nx">oldEndpoints</span><span class="p">,</span> <span class="nx">endpoints</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Endpoints</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">endpointsChanges</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="nx">oldEndpoints</span><span class="p">,</span> <span class="nx">endpoints</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">proxier</span><span class="p">.</span><span class="nf">isInitialized</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">proxier</span><span class="p">.</span><span class="nf">Sync</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>到了这里，明了了 runner 才是这个 proxier 的核心，被定义于 proxier 结构图的 <a href="https://github.com/kubernetes/kubernetes/blob/e979822c185a14537054f15808a118d7fcce1d6e/pkg/proxy/ipvs/proxier.go#L232">syncRunner</a> 在初始化时被注入了函数 syncProxyRules()</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewProxier</span><span class="p">(</span><span class="nx">ipt</span> <span class="nx">utiliptables</span><span class="p">.</span><span class="nx">Interface</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">    <span class="nx">proxier</span><span class="p">.</span><span class="nx">syncRunner</span> <span class="p">=</span> <span class="nx">async</span><span class="p">.</span><span class="nf">NewBoundedFrequencyRunner</span><span class="p">(</span><span class="s">&#34;sync-runner&#34;</span><span class="p">,</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">syncProxyRules</span><span class="p">,</span> <span class="nx">minSyncPeriod</span><span class="p">,</span> <span class="nx">syncPeriod</span><span class="p">,</span> <span class="nx">burstSyncs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">proxier</span><span class="p">.</span><span class="nx">gracefuldeleteManager</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">proxier</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="syncproxyrules">syncProxyRules()</h2>
<p>而这个 <a href="https://github.com/kubernetes/kubernetes/blob/e979822c185a14537054f15808a118d7fcce1d6e/pkg/proxy/ipvs/proxier.go#L1004-L1621">syncProxyRules()</a> 则是完成了整个 ipvs 以及 service 的生命周期</p>
<p>对于了解kubernetes架构的同学来说，kube-proxy 完成的功能就是 ipvs 的规则管理，那么换句话说就是干预 ipvs 规则的生命周期，也就是分析函数 syncProxyRules() 是如何干预这些规则的。</p>
<p>syncProxyRules() 将动作分为两部分，一是对 ipvs 资源的增改，二是对资源的销毁；引入完概念后，就开始进行分析吧。</p>
<p>600多行的代码看起来很困难，那就拆分成步骤进行分析</p>
<h3 id="step1-前期准备工作">step1 前期准备工作</h3>
<p>为什么这么叫第一部分呢？看下列代码就知道，做的工作和 ipvs rules 没多大关系</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">proxier</span> <span class="o">*</span><span class="nx">Proxier</span><span class="p">)</span> <span class="nf">syncProxyRules</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 互斥锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">proxier</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c1">// don&#39;t sync rules till we&#39;ve received services and endpoints
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 在等待接收完信息前，不同步收到的 services和endpoints资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">!</span><span class="nx">proxier</span><span class="p">.</span><span class="nf">isInitialized</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Not syncing ipvs rules until Services and Endpoints have been received from master&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Keep track of how long syncs take.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 记录同步耗时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">start</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">metrics</span><span class="p">.</span><span class="nx">SyncProxyRulesLatency</span><span class="p">.</span><span class="nf">Observe</span><span class="p">(</span><span class="nx">metrics</span><span class="p">.</span><span class="nf">SinceInSeconds</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;syncProxyRules took %v&#34;</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Since</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取本地多个IP地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">localAddrs</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">utilproxy</span><span class="p">.</span><span class="nf">GetLocalAddrs</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to get local addresses during proxy sync: %v, assuming external IPs are not local&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">localAddrs</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Warning</span><span class="p">(</span><span class="s">&#34;No local addresses found, assuming all external IPs are not local&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">localAddrSet</span> <span class="o">:=</span> <span class="nx">utilnet</span><span class="p">.</span><span class="nx">IPSet</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">localAddrSet</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">localAddrs</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// We assume that if this was called, we really want to sync them,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// even if nothing changed in the meantime. In other words, callers are
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// responsible for detecting no-op changes and not calling this function.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 这两步骤正如注释所讲，如果在资源修改的前提下需要同步，也就是update操作包含了增改
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">serviceUpdateResult</span> <span class="o">:=</span> <span class="nx">proxy</span><span class="p">.</span><span class="nf">UpdateServiceMap</span><span class="p">(</span><span class="nx">proxier</span><span class="p">.</span><span class="nx">serviceMap</span><span class="p">,</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">serviceChanges</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">endpointUpdateResult</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">endpointsMap</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="nx">proxier</span><span class="p">.</span><span class="nx">endpointsChanges</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 陈腐的UDP信息处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">staleServices</span> <span class="o">:=</span> <span class="nx">serviceUpdateResult</span><span class="p">.</span><span class="nx">UDPStaleClusterIP</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// merge stale services gathered from updateEndpointsMap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">svcPortName</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">endpointUpdateResult</span><span class="p">.</span><span class="nx">StaleServiceNames</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">svcInfo</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">serviceMap</span><span class="p">[</span><span class="nx">svcPortName</span><span class="p">];</span> <span class="nx">ok</span> <span class="o">&amp;&amp;</span> <span class="nx">svcInfo</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">conntrack</span><span class="p">.</span><span class="nf">IsClearConntrackNeeded</span><span class="p">(</span><span class="nx">svcInfo</span><span class="p">.</span><span class="nf">Protocol</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Stale %s service %v -&gt; %s&#34;</span><span class="p">,</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">ToLower</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">svcInfo</span><span class="p">.</span><span class="nf">Protocol</span><span class="p">())),</span> <span class="nx">svcPortName</span><span class="p">,</span> <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">ClusterIP</span><span class="p">().</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="nx">staleServices</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">svcInfo</span><span class="p">.</span><span class="nf">ClusterIP</span><span class="p">().</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">extIP</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">ExternalIPStrings</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">staleServices</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">extIP</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="step2构建ipvs规则">step2：构建IPVS规则</h3>
<p>首先会经历一些预处理的操作 这部分掠过了 <a href="https://github.com/kubernetes/kubernetes/blob/e979822c185a14537054f15808a118d7fcce1d6e/pkg/proxy/ipvs/proxier.go#L1042-L1140">L1042-L1140</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Syncing ipvs Proxier rules&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Begin install iptables
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Reset all buffers used later.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// This is to avoid memory reallocations and thus improve performance.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">proxier</span><span class="p">.</span><span class="nx">natChains</span><span class="p">.</span><span class="nf">Reset</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">proxier</span><span class="p">.</span><span class="nx">natRules</span><span class="p">.</span><span class="nf">Reset</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">proxier</span><span class="p">.</span><span class="nx">filterChains</span><span class="p">.</span><span class="nf">Reset</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">proxier</span><span class="p">.</span><span class="nx">filterRules</span><span class="p">.</span><span class="nf">Reset</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Write table headers.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">writeLine</span><span class="p">(</span><span class="nx">proxier</span><span class="p">.</span><span class="nx">filterChains</span><span class="p">,</span> <span class="s">&#34;*filter&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">writeLine</span><span class="p">(</span><span class="nx">proxier</span><span class="p">.</span><span class="nx">natChains</span><span class="p">,</span> <span class="s">&#34;*nat&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">proxier</span><span class="p">.</span><span class="nf">createAndLinkeKubeChain</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// make sure dummy interface exists in the system where ipvs Proxier will bind service address on it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">netlinkHandle</span><span class="p">.</span><span class="nf">EnsureDummyDevice</span><span class="p">(</span><span class="nx">DefaultDummyDevice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to create dummy interface: %s, error: %v&#34;</span><span class="p">,</span> <span class="nx">DefaultDummyDevice</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// make sure ip sets exists in the system.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">set</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">ensureIPSet</span><span class="p">(</span><span class="nx">set</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">set</span><span class="p">.</span><span class="nf">resetEntries</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Accumulate the set of local ports that we will be holding open once this update is complete
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">replacementPortsMap</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="nx">utilproxy</span><span class="p">.</span><span class="nx">LocalPort</span><span class="p">]</span><span class="nx">utilproxy</span><span class="p">.</span><span class="nx">Closeable</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// activeIPVSServices represents IPVS service successfully created in this round of sync
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">activeIPVSServices</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">bool</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// currentIPVSServices represent IPVS services listed from the system
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">currentIPVSServices</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">utilipvs</span><span class="p">.</span><span class="nx">VirtualServer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// activeBindAddrs represents ip address successfully bind to DefaultDummyDevice in this round of sync
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">activeBindAddrs</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">bool</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">bindedAddresses</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipGetter</span><span class="p">.</span><span class="nf">BindedIPs</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;error listing addresses binded to dummy interface, error: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 检查是否是nodeport类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">hasNodePort</span> <span class="o">:=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">svc</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">serviceMap</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">svcInfo</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">svc</span><span class="p">.(</span><span class="o">*</span><span class="nx">serviceInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">ok</span> <span class="o">&amp;&amp;</span> <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">NodePort</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">hasNodePort</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Both nodeAddresses and nodeIPs can be reused for all nodePort services
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// and only need to be computed if we have at least one nodePort service.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// List of node addresses to listen on if a nodePort is set.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">nodeAddresses</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// List of node IP addresses to be used as IPVS services if nodePort is set.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">nodeIPs</span> <span class="p">[]</span><span class="nx">net</span><span class="p">.</span><span class="nx">IP</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">hasNodePort</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">nodeAddrSet</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">utilproxy</span><span class="p">.</span><span class="nf">GetNodeAddresses</span><span class="p">(</span><span class="nx">proxier</span><span class="p">.</span><span class="nx">nodePortAddresses</span><span class="p">,</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">networkInterfacer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to get node ip address matching nodeport cidr: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">nodeAddresses</span> <span class="p">=</span> <span class="nx">nodeAddrSet</span><span class="p">.</span><span class="nf">List</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">address</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nodeAddresses</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">utilproxy</span><span class="p">.</span><span class="nf">IsZeroCIDR</span><span class="p">(</span><span class="nx">address</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">nodeIPs</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipGetter</span><span class="p">.</span><span class="nf">NodeIPs</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to list all node IPs from host, err: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="k">break</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">nodeIPs</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">nodeIPs</span><span class="p">,</span> <span class="nx">net</span><span class="p">.</span><span class="nf">ParseIP</span><span class="p">(</span><span class="nx">address</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来是整个构建ipvs规则的关键部分，大概200-300行代码，通过循环 serviceMap 拿到每一个 service 的信息，然后在通过 循环 endpointsMap[svcName] 得到每个 service下所属的 endpoint ，然后构建 ipvs 的规则</p>
<p><a href="https://github.com/kubernetes/kubernetes/blob/e979822c185a14537054f15808a118d7fcce1d6e/pkg/proxy/ipvs/proxier.go#L1141-L1542">L1141-L1542</a> 这里也包含了 nodeport, clusterIP, ingress等不同的service类型</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span><span class="lnt">267
</span><span class="lnt">268
</span><span class="lnt">269
</span><span class="lnt">270
</span><span class="lnt">271
</span><span class="lnt">272
</span><span class="lnt">273
</span><span class="lnt">274
</span><span class="lnt">275
</span><span class="lnt">276
</span><span class="lnt">277
</span><span class="lnt">278
</span><span class="lnt">279
</span><span class="lnt">280
</span><span class="lnt">281
</span><span class="lnt">282
</span><span class="lnt">283
</span><span class="lnt">284
</span><span class="lnt">285
</span><span class="lnt">286
</span><span class="lnt">287
</span><span class="lnt">288
</span><span class="lnt">289
</span><span class="lnt">290
</span><span class="lnt">291
</span><span class="lnt">292
</span><span class="lnt">293
</span><span class="lnt">294
</span><span class="lnt">295
</span><span class="lnt">296
</span><span class="lnt">297
</span><span class="lnt">298
</span><span class="lnt">299
</span><span class="lnt">300
</span><span class="lnt">301
</span><span class="lnt">302
</span><span class="lnt">303
</span><span class="lnt">304
</span><span class="lnt">305
</span><span class="lnt">306
</span><span class="lnt">307
</span><span class="lnt">308
</span><span class="lnt">309
</span><span class="lnt">310
</span><span class="lnt">311
</span><span class="lnt">312
</span><span class="lnt">313
</span><span class="lnt">314
</span><span class="lnt">315
</span><span class="lnt">316
</span><span class="lnt">317
</span><span class="lnt">318
</span><span class="lnt">319
</span><span class="lnt">320
</span><span class="lnt">321
</span><span class="lnt">322
</span><span class="lnt">323
</span><span class="lnt">324
</span><span class="lnt">325
</span><span class="lnt">326
</span><span class="lnt">327
</span><span class="lnt">328
</span><span class="lnt">329
</span><span class="lnt">330
</span><span class="lnt">331
</span><span class="lnt">332
</span><span class="lnt">333
</span><span class="lnt">334
</span><span class="lnt">335
</span><span class="lnt">336
</span><span class="lnt">337
</span><span class="lnt">338
</span><span class="lnt">339
</span><span class="lnt">340
</span><span class="lnt">341
</span><span class="lnt">342
</span><span class="lnt">343
</span><span class="lnt">344
</span><span class="lnt">345
</span><span class="lnt">346
</span><span class="lnt">347
</span><span class="lnt">348
</span><span class="lnt">349
</span><span class="lnt">350
</span><span class="lnt">351
</span><span class="lnt">352
</span><span class="lnt">353
</span><span class="lnt">354
</span><span class="lnt">355
</span><span class="lnt">356
</span><span class="lnt">357
</span><span class="lnt">358
</span><span class="lnt">359
</span><span class="lnt">360
</span><span class="lnt">361
</span><span class="lnt">362
</span><span class="lnt">363
</span><span class="lnt">364
</span><span class="lnt">365
</span><span class="lnt">366
</span><span class="lnt">367
</span><span class="lnt">368
</span><span class="lnt">369
</span><span class="lnt">370
</span><span class="lnt">371
</span><span class="lnt">372
</span><span class="lnt">373
</span><span class="lnt">374
</span><span class="lnt">375
</span><span class="lnt">376
</span><span class="lnt">377
</span><span class="lnt">378
</span><span class="lnt">379
</span><span class="lnt">380
</span><span class="lnt">381
</span><span class="lnt">382
</span><span class="lnt">383
</span><span class="lnt">384
</span><span class="lnt">385
</span><span class="lnt">386
</span><span class="lnt">387
</span><span class="lnt">388
</span><span class="lnt">389
</span><span class="lnt">390
</span><span class="lnt">391
</span><span class="lnt">392
</span><span class="lnt">393
</span><span class="lnt">394
</span><span class="lnt">395
</span><span class="lnt">396
</span><span class="lnt">397
</span><span class="lnt">398
</span><span class="lnt">399
</span><span class="lnt">400
</span><span class="lnt">401
</span><span class="lnt">402
</span><span class="lnt">403
</span><span class="lnt">404
</span><span class="lnt">405
</span><span class="lnt">406
</span><span class="lnt">407
</span><span class="lnt">408
</span><span class="lnt">409
</span><span class="lnt">410
</span><span class="lnt">411
</span><span class="lnt">412
</span><span class="lnt">413
</span><span class="lnt">414
</span><span class="lnt">415
</span><span class="lnt">416
</span><span class="lnt">417
</span><span class="lnt">418
</span><span class="lnt">419
</span><span class="lnt">420
</span><span class="lnt">421
</span><span class="lnt">422
</span><span class="lnt">423
</span><span class="lnt">424
</span><span class="lnt">425
</span><span class="lnt">426
</span><span class="lnt">427
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">	<span class="c1">// Build IPVS rules for each service.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">svcName</span><span class="p">,</span> <span class="nx">svc</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">serviceMap</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">svcInfo</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">svc</span><span class="p">.(</span><span class="o">*</span><span class="nx">serviceInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to cast serviceInfo %q&#34;</span><span class="p">,</span> <span class="nx">svcName</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">isIPv6</span> <span class="o">:=</span> <span class="nx">utilnet</span><span class="p">.</span><span class="nf">IsIPv6</span><span class="p">(</span><span class="nx">svcInfo</span><span class="p">.</span><span class="nf">ClusterIP</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="nx">protocol</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">ToLower</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">svcInfo</span><span class="p">.</span><span class="nf">Protocol</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Precompute svcNameString; with many services the many calls
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// to ServicePortName.String() show up in CPU profiles.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">svcNameString</span> <span class="o">:=</span> <span class="nx">svcName</span><span class="p">.</span><span class="nf">String</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">        <span class="c1">// 循环endpoint
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// Handle traffic that loops back to the originator with SNAT.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">e</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">endpointsMap</span><span class="p">[</span><span class="nx">svcName</span><span class="p">]</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ep</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">e</span><span class="p">.(</span><span class="o">*</span><span class="nx">proxy</span><span class="p">.</span><span class="nx">BaseEndpointInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to cast BaseEndpointInfo %q&#34;</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ep</span><span class="p">.</span><span class="nx">IsLocal</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">epIP</span> <span class="o">:=</span> <span class="nx">ep</span><span class="p">.</span><span class="nf">IP</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nx">epPort</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ep</span><span class="p">.</span><span class="nf">Port</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Error parsing this endpoint has been logged. Skip to next endpoint.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">epIP</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="o">||</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">entry</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">utilipset</span><span class="p">.</span><span class="nx">Entry</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">IP</span><span class="p">:</span>       <span class="nx">epIP</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Port</span><span class="p">:</span>     <span class="nx">epPort</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Protocol</span><span class="p">:</span> <span class="nx">protocol</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">IP2</span><span class="p">:</span>      <span class="nx">epIP</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">SetType</span><span class="p">:</span>  <span class="nx">utilipset</span><span class="p">.</span><span class="nx">HashIPPortIP</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">valid</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeLoopBackIPSet</span><span class="p">].</span><span class="nf">validateEntry</span><span class="p">(</span><span class="nx">entry</span><span class="p">);</span> <span class="p">!</span><span class="nx">valid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="nx">EntryInvalidErr</span><span class="p">,</span> <span class="nx">entry</span><span class="p">,</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeLoopBackIPSet</span><span class="p">].</span><span class="nx">Name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeLoopBackIPSet</span><span class="p">].</span><span class="nx">activeEntries</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Capture the clusterIP.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// ipset call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">entry</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">utilipset</span><span class="p">.</span><span class="nx">Entry</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">IP</span><span class="p">:</span>       <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">ClusterIP</span><span class="p">().</span><span class="nf">String</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Port</span><span class="p">:</span>     <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">Port</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Protocol</span><span class="p">:</span> <span class="nx">protocol</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">SetType</span><span class="p">:</span>  <span class="nx">utilipset</span><span class="p">.</span><span class="nx">HashIPPort</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// add service Cluster IP:Port to kubeServiceAccess ip set for the purpose of solving hairpin.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// proxier.kubeServiceAccessSet.activeEntries.Insert(entry.String())
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">valid</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeClusterIPSet</span><span class="p">].</span><span class="nf">validateEntry</span><span class="p">(</span><span class="nx">entry</span><span class="p">);</span> <span class="p">!</span><span class="nx">valid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="nx">EntryInvalidErr</span><span class="p">,</span> <span class="nx">entry</span><span class="p">,</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeClusterIPSet</span><span class="p">].</span><span class="nx">Name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeClusterIPSet</span><span class="p">].</span><span class="nx">activeEntries</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// ipvs call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">serv</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">utilipvs</span><span class="p">.</span><span class="nx">VirtualServer</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Address</span><span class="p">:</span>   <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">ClusterIP</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Port</span><span class="p">:</span>      <span class="nb">uint16</span><span class="p">(</span><span class="nx">svcInfo</span><span class="p">.</span><span class="nf">Port</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Protocol</span><span class="p">:</span>  <span class="nb">string</span><span class="p">(</span><span class="nx">svcInfo</span><span class="p">.</span><span class="nf">Protocol</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Scheduler</span><span class="p">:</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipvsScheduler</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Set session affinity flag and timeout for IPVS service
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">SessionAffinityType</span><span class="p">()</span> <span class="o">==</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">ServiceAffinityClientIP</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">serv</span><span class="p">.</span><span class="nx">Flags</span> <span class="o">|=</span> <span class="nx">utilipvs</span><span class="p">.</span><span class="nx">FlagPersistent</span>
</span></span><span class="line"><span class="cl">			<span class="nx">serv</span><span class="p">.</span><span class="nx">Timeout</span> <span class="p">=</span> <span class="nb">uint32</span><span class="p">(</span><span class="nx">svcInfo</span><span class="p">.</span><span class="nf">StickyMaxAgeSeconds</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// We need to bind ClusterIP to dummy interface, so set `bindAddr` parameter to `true` in syncService()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nf">syncService</span><span class="p">(</span><span class="nx">svcNameString</span><span class="p">,</span> <span class="nx">serv</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">bindedAddresses</span><span class="p">);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">activeIPVSServices</span><span class="p">[</span><span class="nx">serv</span><span class="p">.</span><span class="nf">String</span><span class="p">()]</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">			<span class="nx">activeBindAddrs</span><span class="p">[</span><span class="nx">serv</span><span class="p">.</span><span class="nx">Address</span><span class="p">.</span><span class="nf">String</span><span class="p">()]</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// ExternalTrafficPolicy only works for NodePort and external LB traffic, does not affect ClusterIP
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// So we still need clusterIP rules in onlyNodeLocalEndpoints mode.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nf">syncEndpoint</span><span class="p">(</span><span class="nx">svcName</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">serv</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to sync endpoint for service: %v, err: %v&#34;</span><span class="p">,</span> <span class="nx">serv</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to sync service: %v, err: %v&#34;</span><span class="p">,</span> <span class="nx">serv</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Capture externalIPs.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">externalIP</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">ExternalIPStrings</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// If the &#34;external&#34; IP happens to be an IP that is local to this
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// machine, hold the local port open so no other process can open it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// (because the socket might open but it would never work).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="p">(</span><span class="nx">svcInfo</span><span class="p">.</span><span class="nf">Protocol</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">ProtocolSCTP</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">localAddrSet</span><span class="p">.</span><span class="nf">Has</span><span class="p">(</span><span class="nx">net</span><span class="p">.</span><span class="nf">ParseIP</span><span class="p">(</span><span class="nx">externalIP</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// We do not start listening on SCTP ports, according to our agreement in the SCTP support KEP
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">lp</span> <span class="o">:=</span> <span class="nx">utilproxy</span><span class="p">.</span><span class="nx">LocalPort</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Description</span><span class="p">:</span> <span class="s">&#34;externalIP for &#34;</span> <span class="o">+</span> <span class="nx">svcNameString</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="nx">IP</span><span class="p">:</span>          <span class="nx">externalIP</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Port</span><span class="p">:</span>        <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">Port</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Protocol</span><span class="p">:</span>    <span class="nx">protocol</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">portsMap</span><span class="p">[</span><span class="nx">lp</span><span class="p">]</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Port %s was open before and is still needed&#34;</span><span class="p">,</span> <span class="nx">lp</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">					<span class="nx">replacementPortsMap</span><span class="p">[</span><span class="nx">lp</span><span class="p">]</span> <span class="p">=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">portsMap</span><span class="p">[</span><span class="nx">lp</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">socket</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">portMapper</span><span class="p">.</span><span class="nf">OpenLocalPort</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lp</span><span class="p">,</span> <span class="nx">isIPv6</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">msg</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;can&#39;t open %s, skipping this externalIP: %v&#34;</span><span class="p">,</span> <span class="nx">lp</span><span class="p">.</span><span class="nf">String</span><span class="p">(),</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">						<span class="nx">proxier</span><span class="p">.</span><span class="nx">recorder</span><span class="p">.</span><span class="nf">Eventf</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">							<span class="o">&amp;</span><span class="nx">v1</span><span class="p">.</span><span class="nx">ObjectReference</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">								<span class="nx">Kind</span><span class="p">:</span>      <span class="s">&#34;Node&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">								<span class="nx">Name</span><span class="p">:</span>      <span class="nx">proxier</span><span class="p">.</span><span class="nx">hostname</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">								<span class="nx">UID</span><span class="p">:</span>       <span class="nx">types</span><span class="p">.</span><span class="nf">UID</span><span class="p">(</span><span class="nx">proxier</span><span class="p">.</span><span class="nx">hostname</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">								<span class="nx">Namespace</span><span class="p">:</span> <span class="s">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">							<span class="p">},</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">EventTypeWarning</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">(),</span> <span class="nx">msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">						<span class="nx">klog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">						<span class="k">continue</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="nx">replacementPortsMap</span><span class="p">[</span><span class="nx">lp</span><span class="p">]</span> <span class="p">=</span> <span class="nx">socket</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="c1">// We&#39;re holding the port, so it&#39;s OK to install IPVS rules.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">			<span class="c1">// ipset call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">entry</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">utilipset</span><span class="p">.</span><span class="nx">Entry</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">IP</span><span class="p">:</span>       <span class="nx">externalIP</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Port</span><span class="p">:</span>     <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">Port</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Protocol</span><span class="p">:</span> <span class="nx">protocol</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">SetType</span><span class="p">:</span>  <span class="nx">utilipset</span><span class="p">.</span><span class="nx">HashIPPort</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">utilfeature</span><span class="p">.</span><span class="nx">DefaultFeatureGate</span><span class="p">.</span><span class="nf">Enabled</span><span class="p">(</span><span class="nx">features</span><span class="p">.</span><span class="nx">ExternalPolicyForExternalIP</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">OnlyNodeLocalEndpoints</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">valid</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeExternalIPLocalSet</span><span class="p">].</span><span class="nf">validateEntry</span><span class="p">(</span><span class="nx">entry</span><span class="p">);</span> <span class="p">!</span><span class="nx">valid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="nx">EntryInvalidErr</span><span class="p">,</span> <span class="nx">entry</span><span class="p">,</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeExternalIPLocalSet</span><span class="p">].</span><span class="nx">Name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">					<span class="k">continue</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeExternalIPLocalSet</span><span class="p">].</span><span class="nx">activeEntries</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// We have to SNAT packets to external IPs.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">if</span> <span class="nx">valid</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeExternalIPSet</span><span class="p">].</span><span class="nf">validateEntry</span><span class="p">(</span><span class="nx">entry</span><span class="p">);</span> <span class="p">!</span><span class="nx">valid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="nx">EntryInvalidErr</span><span class="p">,</span> <span class="nx">entry</span><span class="p">,</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeExternalIPSet</span><span class="p">].</span><span class="nx">Name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">					<span class="k">continue</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeExternalIPSet</span><span class="p">].</span><span class="nx">activeEntries</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="c1">// ipvs call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">serv</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">utilipvs</span><span class="p">.</span><span class="nx">VirtualServer</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Address</span><span class="p">:</span>   <span class="nx">net</span><span class="p">.</span><span class="nf">ParseIP</span><span class="p">(</span><span class="nx">externalIP</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Port</span><span class="p">:</span>      <span class="nb">uint16</span><span class="p">(</span><span class="nx">svcInfo</span><span class="p">.</span><span class="nf">Port</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Protocol</span><span class="p">:</span>  <span class="nb">string</span><span class="p">(</span><span class="nx">svcInfo</span><span class="p">.</span><span class="nf">Protocol</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Scheduler</span><span class="p">:</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipvsScheduler</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">SessionAffinityType</span><span class="p">()</span> <span class="o">==</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">ServiceAffinityClientIP</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">serv</span><span class="p">.</span><span class="nx">Flags</span> <span class="o">|=</span> <span class="nx">utilipvs</span><span class="p">.</span><span class="nx">FlagPersistent</span>
</span></span><span class="line"><span class="cl">				<span class="nx">serv</span><span class="p">.</span><span class="nx">Timeout</span> <span class="p">=</span> <span class="nb">uint32</span><span class="p">(</span><span class="nx">svcInfo</span><span class="p">.</span><span class="nf">StickyMaxAgeSeconds</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nf">syncService</span><span class="p">(</span><span class="nx">svcNameString</span><span class="p">,</span> <span class="nx">serv</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">bindedAddresses</span><span class="p">);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">activeIPVSServices</span><span class="p">[</span><span class="nx">serv</span><span class="p">.</span><span class="nf">String</span><span class="p">()]</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">				<span class="nx">activeBindAddrs</span><span class="p">[</span><span class="nx">serv</span><span class="p">.</span><span class="nx">Address</span><span class="p">.</span><span class="nf">String</span><span class="p">()]</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="nx">onlyNodeLocalEndpoints</span> <span class="o">:=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">utilfeature</span><span class="p">.</span><span class="nx">DefaultFeatureGate</span><span class="p">.</span><span class="nf">Enabled</span><span class="p">(</span><span class="nx">features</span><span class="p">.</span><span class="nx">ExternalPolicyForExternalIP</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">onlyNodeLocalEndpoints</span> <span class="p">=</span> <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">OnlyNodeLocalEndpoints</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nf">syncEndpoint</span><span class="p">(</span><span class="nx">svcName</span><span class="p">,</span> <span class="nx">onlyNodeLocalEndpoints</span><span class="p">,</span> <span class="nx">serv</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to sync endpoint for service: %v, err: %v&#34;</span><span class="p">,</span> <span class="nx">serv</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to sync service: %v, err: %v&#34;</span><span class="p">,</span> <span class="nx">serv</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Capture load-balancer ingress.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ingress</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">LoadBalancerIPStrings</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">ingress</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// ipset call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">entry</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">utilipset</span><span class="p">.</span><span class="nx">Entry</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">IP</span><span class="p">:</span>       <span class="nx">ingress</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Port</span><span class="p">:</span>     <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">Port</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Protocol</span><span class="p">:</span> <span class="nx">protocol</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="nx">SetType</span><span class="p">:</span>  <span class="nx">utilipset</span><span class="p">.</span><span class="nx">HashIPPort</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// add service load balancer ingressIP:Port to kubeServiceAccess ip set for the purpose of solving hairpin.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// proxier.kubeServiceAccessSet.activeEntries.Insert(entry.String())
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// If we are proxying globally, we need to masquerade in case we cross nodes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// If we are proxying only locally, we can retain the source IP.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">if</span> <span class="nx">valid</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeLoadBalancerSet</span><span class="p">].</span><span class="nf">validateEntry</span><span class="p">(</span><span class="nx">entry</span><span class="p">);</span> <span class="p">!</span><span class="nx">valid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="nx">EntryInvalidErr</span><span class="p">,</span> <span class="nx">entry</span><span class="p">,</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeLoadBalancerSet</span><span class="p">].</span><span class="nx">Name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">					<span class="k">continue</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeLoadBalancerSet</span><span class="p">].</span><span class="nx">activeEntries</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// insert loadbalancer entry to lbIngressLocalSet if service externaltrafficpolicy=local
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">if</span> <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">OnlyNodeLocalEndpoints</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="nx">valid</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeLoadBalancerLocalSet</span><span class="p">].</span><span class="nf">validateEntry</span><span class="p">(</span><span class="nx">entry</span><span class="p">);</span> <span class="p">!</span><span class="nx">valid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="nx">EntryInvalidErr</span><span class="p">,</span> <span class="nx">entry</span><span class="p">,</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeLoadBalancerLocalSet</span><span class="p">].</span><span class="nx">Name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">						<span class="k">continue</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeLoadBalancerLocalSet</span><span class="p">].</span><span class="nx">activeEntries</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">svcInfo</span><span class="p">.</span><span class="nf">LoadBalancerSourceRanges</span><span class="p">())</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// The service firewall rules are created based on ServiceSpec.loadBalancerSourceRanges field.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="c1">// This currently works for loadbalancers that preserves source ips.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="c1">// For loadbalancers which direct traffic to service NodePort, the firewall rules will not apply.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="k">if</span> <span class="nx">valid</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeLoadbalancerFWSet</span><span class="p">].</span><span class="nf">validateEntry</span><span class="p">(</span><span class="nx">entry</span><span class="p">);</span> <span class="p">!</span><span class="nx">valid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="nx">EntryInvalidErr</span><span class="p">,</span> <span class="nx">entry</span><span class="p">,</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeLoadbalancerFWSet</span><span class="p">].</span><span class="nx">Name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">						<span class="k">continue</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeLoadbalancerFWSet</span><span class="p">].</span><span class="nx">activeEntries</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">					<span class="nx">allowFromNode</span> <span class="o">:=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">					<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">src</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">LoadBalancerSourceRanges</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="c1">// ipset call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>						<span class="nx">entry</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">utilipset</span><span class="p">.</span><span class="nx">Entry</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="nx">IP</span><span class="p">:</span>       <span class="nx">ingress</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">							<span class="nx">Port</span><span class="p">:</span>     <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">Port</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">							<span class="nx">Protocol</span><span class="p">:</span> <span class="nx">protocol</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">							<span class="nx">Net</span><span class="p">:</span>      <span class="nx">src</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">							<span class="nx">SetType</span><span class="p">:</span>  <span class="nx">utilipset</span><span class="p">.</span><span class="nx">HashIPPortNet</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span>
</span></span><span class="line"><span class="cl">						<span class="c1">// enumerate all white list source cidr
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>						<span class="k">if</span> <span class="nx">valid</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeLoadBalancerSourceCIDRSet</span><span class="p">].</span><span class="nf">validateEntry</span><span class="p">(</span><span class="nx">entry</span><span class="p">);</span> <span class="p">!</span><span class="nx">valid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="nx">EntryInvalidErr</span><span class="p">,</span> <span class="nx">entry</span><span class="p">,</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeLoadBalancerSourceCIDRSet</span><span class="p">].</span><span class="nx">Name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">							<span class="k">continue</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span>
</span></span><span class="line"><span class="cl">						<span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeLoadBalancerSourceCIDRSet</span><span class="p">].</span><span class="nx">activeEntries</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">						<span class="c1">// ignore error because it has been validated
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>						<span class="nx">_</span><span class="p">,</span> <span class="nx">cidr</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">ParseCIDR</span><span class="p">(</span><span class="nx">src</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">						<span class="k">if</span> <span class="nx">cidr</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="nx">proxier</span><span class="p">.</span><span class="nx">nodeIP</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="nx">allowFromNode</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// generally, ip route rule was added to intercept request to loadbalancer vip from the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="c1">// loadbalancer&#39;s backend hosts. In this case, request will not hit the loadbalancer but loop back directly.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="c1">// Need to add the following rule to allow request on host.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="k">if</span> <span class="nx">allowFromNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">entry</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">utilipset</span><span class="p">.</span><span class="nx">Entry</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="nx">IP</span><span class="p">:</span>       <span class="nx">ingress</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">							<span class="nx">Port</span><span class="p">:</span>     <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">Port</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">							<span class="nx">Protocol</span><span class="p">:</span> <span class="nx">protocol</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">							<span class="nx">IP2</span><span class="p">:</span>      <span class="nx">ingress</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">							<span class="nx">SetType</span><span class="p">:</span>  <span class="nx">utilipset</span><span class="p">.</span><span class="nx">HashIPPortIP</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span>
</span></span><span class="line"><span class="cl">						<span class="c1">// enumerate all white list source ip
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>						<span class="k">if</span> <span class="nx">valid</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeLoadBalancerSourceIPSet</span><span class="p">].</span><span class="nf">validateEntry</span><span class="p">(</span><span class="nx">entry</span><span class="p">);</span> <span class="p">!</span><span class="nx">valid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="nx">EntryInvalidErr</span><span class="p">,</span> <span class="nx">entry</span><span class="p">,</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeLoadBalancerSourceIPSet</span><span class="p">].</span><span class="nx">Name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">							<span class="k">continue</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span>
</span></span><span class="line"><span class="cl">						<span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeLoadBalancerSourceIPSet</span><span class="p">].</span><span class="nx">activeEntries</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="c1">// ipvs call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">serv</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">utilipvs</span><span class="p">.</span><span class="nx">VirtualServer</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Address</span><span class="p">:</span>   <span class="nx">net</span><span class="p">.</span><span class="nf">ParseIP</span><span class="p">(</span><span class="nx">ingress</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Port</span><span class="p">:</span>      <span class="nb">uint16</span><span class="p">(</span><span class="nx">svcInfo</span><span class="p">.</span><span class="nf">Port</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Protocol</span><span class="p">:</span>  <span class="nb">string</span><span class="p">(</span><span class="nx">svcInfo</span><span class="p">.</span><span class="nf">Protocol</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Scheduler</span><span class="p">:</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipvsScheduler</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">SessionAffinityType</span><span class="p">()</span> <span class="o">==</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">ServiceAffinityClientIP</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">serv</span><span class="p">.</span><span class="nx">Flags</span> <span class="o">|=</span> <span class="nx">utilipvs</span><span class="p">.</span><span class="nx">FlagPersistent</span>
</span></span><span class="line"><span class="cl">					<span class="nx">serv</span><span class="p">.</span><span class="nx">Timeout</span> <span class="p">=</span> <span class="nb">uint32</span><span class="p">(</span><span class="nx">svcInfo</span><span class="p">.</span><span class="nf">StickyMaxAgeSeconds</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nf">syncService</span><span class="p">(</span><span class="nx">svcNameString</span><span class="p">,</span> <span class="nx">serv</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">bindedAddresses</span><span class="p">);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">activeIPVSServices</span><span class="p">[</span><span class="nx">serv</span><span class="p">.</span><span class="nf">String</span><span class="p">()]</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">					<span class="nx">activeBindAddrs</span><span class="p">[</span><span class="nx">serv</span><span class="p">.</span><span class="nx">Address</span><span class="p">.</span><span class="nf">String</span><span class="p">()]</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nf">syncEndpoint</span><span class="p">(</span><span class="nx">svcName</span><span class="p">,</span> <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">OnlyNodeLocalEndpoints</span><span class="p">(),</span> <span class="nx">serv</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to sync endpoint for service: %v, err: %v&#34;</span><span class="p">,</span> <span class="nx">serv</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to sync service: %v, err: %v&#34;</span><span class="p">,</span> <span class="nx">serv</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">NodePort</span><span class="p">()</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">nodeAddresses</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="nb">len</span><span class="p">(</span><span class="nx">nodeIPs</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// Skip nodePort configuration since an error occurred when
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// computing nodeAddresses or nodeIPs.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="kd">var</span> <span class="nx">lps</span> <span class="p">[]</span><span class="nx">utilproxy</span><span class="p">.</span><span class="nx">LocalPort</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">address</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nodeAddresses</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">lp</span> <span class="o">:=</span> <span class="nx">utilproxy</span><span class="p">.</span><span class="nx">LocalPort</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Description</span><span class="p">:</span> <span class="s">&#34;nodePort for &#34;</span> <span class="o">+</span> <span class="nx">svcNameString</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="nx">IP</span><span class="p">:</span>          <span class="nx">address</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Port</span><span class="p">:</span>        <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">NodePort</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Protocol</span><span class="p">:</span>    <span class="nx">protocol</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">utilproxy</span><span class="p">.</span><span class="nf">IsZeroCIDR</span><span class="p">(</span><span class="nx">address</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// Empty IP address means all
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">lp</span><span class="p">.</span><span class="nx">IP</span> <span class="p">=</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">					<span class="nx">lps</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">lps</span><span class="p">,</span> <span class="nx">lp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// If we encounter a zero CIDR, then there is no point in processing the rest of the addresses.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="k">break</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">lps</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">lps</span><span class="p">,</span> <span class="nx">lp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="c1">// For ports on node IPs, open the actual port and hold it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">lp</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">lps</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">portsMap</span><span class="p">[</span><span class="nx">lp</span><span class="p">]</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Port %s was open before and is still needed&#34;</span><span class="p">,</span> <span class="nx">lp</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">					<span class="nx">replacementPortsMap</span><span class="p">[</span><span class="nx">lp</span><span class="p">]</span> <span class="p">=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">portsMap</span><span class="p">[</span><span class="nx">lp</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// We do not start listening on SCTP ports, according to our agreement in the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="c1">// SCTP support KEP
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">Protocol</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">ProtocolSCTP</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">socket</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">portMapper</span><span class="p">.</span><span class="nf">OpenLocalPort</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lp</span><span class="p">,</span> <span class="nx">isIPv6</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;can&#39;t open %s, skipping this nodePort: %v&#34;</span><span class="p">,</span> <span class="nx">lp</span><span class="p">.</span><span class="nf">String</span><span class="p">(),</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">						<span class="k">continue</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="nx">lp</span><span class="p">.</span><span class="nx">Protocol</span> <span class="o">==</span> <span class="s">&#34;udp&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">conntrack</span><span class="p">.</span><span class="nf">ClearEntriesForPort</span><span class="p">(</span><span class="nx">proxier</span><span class="p">.</span><span class="nx">exec</span><span class="p">,</span> <span class="nx">lp</span><span class="p">.</span><span class="nx">Port</span><span class="p">,</span> <span class="nx">isIPv6</span><span class="p">,</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">ProtocolUDP</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="nx">replacementPortsMap</span><span class="p">[</span><span class="nx">lp</span><span class="p">]</span> <span class="p">=</span> <span class="nx">socket</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span> <span class="c1">// We&#39;re holding the port, so it&#39;s OK to install ipvs rules.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="c1">// Nodeports need SNAT, unless they&#39;re local.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// ipset call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">			<span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">				<span class="nx">nodePortSet</span> <span class="o">*</span><span class="nx">IPSet</span>
</span></span><span class="line"><span class="cl">				<span class="nx">entries</span>     <span class="p">[]</span><span class="o">*</span><span class="nx">utilipset</span><span class="p">.</span><span class="nx">Entry</span>
</span></span><span class="line"><span class="cl">			<span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">switch</span> <span class="nx">protocol</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="s">&#34;tcp&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="nx">nodePortSet</span> <span class="p">=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeNodePortSetTCP</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">				<span class="nx">entries</span> <span class="p">=</span> <span class="p">[]</span><span class="o">*</span><span class="nx">utilipset</span><span class="p">.</span><span class="nx">Entry</span><span class="p">{{</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// No need to provide ip info
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">Port</span><span class="p">:</span>     <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">NodePort</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Protocol</span><span class="p">:</span> <span class="nx">protocol</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="nx">SetType</span><span class="p">:</span>  <span class="nx">utilipset</span><span class="p">.</span><span class="nx">BitmapPort</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="p">}}</span>
</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="s">&#34;udp&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="nx">nodePortSet</span> <span class="p">=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeNodePortSetUDP</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">				<span class="nx">entries</span> <span class="p">=</span> <span class="p">[]</span><span class="o">*</span><span class="nx">utilipset</span><span class="p">.</span><span class="nx">Entry</span><span class="p">{{</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// No need to provide ip info
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">Port</span><span class="p">:</span>     <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">NodePort</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Protocol</span><span class="p">:</span> <span class="nx">protocol</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="nx">SetType</span><span class="p">:</span>  <span class="nx">utilipset</span><span class="p">.</span><span class="nx">BitmapPort</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="p">}}</span>
</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="s">&#34;sctp&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="nx">nodePortSet</span> <span class="p">=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeNodePortSetSCTP</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// Since hash ip:port is used for SCTP, all the nodeIPs to be used in the SCTP ipset entries.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">entries</span> <span class="p">=</span> <span class="p">[]</span><span class="o">*</span><span class="nx">utilipset</span><span class="p">.</span><span class="nx">Entry</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">				<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">nodeIP</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nodeIPs</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">entries</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">entries</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">utilipset</span><span class="p">.</span><span class="nx">Entry</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">IP</span><span class="p">:</span>       <span class="nx">nodeIP</span><span class="p">.</span><span class="nf">String</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">						<span class="nx">Port</span><span class="p">:</span>     <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">NodePort</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">						<span class="nx">Protocol</span><span class="p">:</span> <span class="nx">protocol</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">						<span class="nx">SetType</span><span class="p">:</span>  <span class="nx">utilipset</span><span class="p">.</span><span class="nx">HashIPPort</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="p">})</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// It should never hit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Unsupported protocol type: %s&#34;</span><span class="p">,</span> <span class="nx">protocol</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">nodePortSet</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">entryInvalidErr</span> <span class="o">:=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">				<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">entry</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">entries</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="nx">valid</span> <span class="o">:=</span> <span class="nx">nodePortSet</span><span class="p">.</span><span class="nf">validateEntry</span><span class="p">(</span><span class="nx">entry</span><span class="p">);</span> <span class="p">!</span><span class="nx">valid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="nx">EntryInvalidErr</span><span class="p">,</span> <span class="nx">entry</span><span class="p">,</span> <span class="nx">nodePortSet</span><span class="p">.</span><span class="nx">Name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">						<span class="nx">entryInvalidErr</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">						<span class="k">break</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="nx">nodePortSet</span><span class="p">.</span><span class="nx">activeEntries</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">entryInvalidErr</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">continue</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="c1">// Add externaltrafficpolicy=local type nodeport entry
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">OnlyNodeLocalEndpoints</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="kd">var</span> <span class="nx">nodePortLocalSet</span> <span class="o">*</span><span class="nx">IPSet</span>
</span></span><span class="line"><span class="cl">				<span class="k">switch</span> <span class="nx">protocol</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="s">&#34;tcp&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="nx">nodePortLocalSet</span> <span class="p">=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeNodePortLocalSetTCP</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="s">&#34;udp&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="nx">nodePortLocalSet</span> <span class="p">=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeNodePortLocalSetUDP</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="s">&#34;sctp&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="nx">nodePortLocalSet</span> <span class="p">=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipsetList</span><span class="p">[</span><span class="nx">kubeNodePortLocalSetSCTP</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">				<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// It should never hit
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Unsupported protocol type: %s&#34;</span><span class="p">,</span> <span class="nx">protocol</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">nodePortLocalSet</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">entryInvalidErr</span> <span class="o">:=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">					<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">entry</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">entries</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="k">if</span> <span class="nx">valid</span> <span class="o">:=</span> <span class="nx">nodePortLocalSet</span><span class="p">.</span><span class="nf">validateEntry</span><span class="p">(</span><span class="nx">entry</span><span class="p">);</span> <span class="p">!</span><span class="nx">valid</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="nx">EntryInvalidErr</span><span class="p">,</span> <span class="nx">entry</span><span class="p">,</span> <span class="nx">nodePortLocalSet</span><span class="p">.</span><span class="nx">Name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">							<span class="nx">entryInvalidErr</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">							<span class="k">break</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span>
</span></span><span class="line"><span class="cl">						<span class="nx">nodePortLocalSet</span><span class="p">.</span><span class="nx">activeEntries</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="nx">entryInvalidErr</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="k">continue</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="c1">// Build ipvs kernel routes for each node ip address
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">nodeIP</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nodeIPs</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// ipvs call
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">serv</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">utilipvs</span><span class="p">.</span><span class="nx">VirtualServer</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Address</span><span class="p">:</span>   <span class="nx">nodeIP</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Port</span><span class="p">:</span>      <span class="nb">uint16</span><span class="p">(</span><span class="nx">svcInfo</span><span class="p">.</span><span class="nf">NodePort</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Protocol</span><span class="p">:</span>  <span class="nb">string</span><span class="p">(</span><span class="nx">svcInfo</span><span class="p">.</span><span class="nf">Protocol</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Scheduler</span><span class="p">:</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipvsScheduler</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">SessionAffinityType</span><span class="p">()</span> <span class="o">==</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">ServiceAffinityClientIP</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">serv</span><span class="p">.</span><span class="nx">Flags</span> <span class="o">|=</span> <span class="nx">utilipvs</span><span class="p">.</span><span class="nx">FlagPersistent</span>
</span></span><span class="line"><span class="cl">					<span class="nx">serv</span><span class="p">.</span><span class="nx">Timeout</span> <span class="p">=</span> <span class="nb">uint32</span><span class="p">(</span><span class="nx">svcInfo</span><span class="p">.</span><span class="nf">StickyMaxAgeSeconds</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// There is no need to bind Node IP to dummy interface, so set parameter `bindAddr` to `false`.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nf">syncService</span><span class="p">(</span><span class="nx">svcNameString</span><span class="p">,</span> <span class="nx">serv</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">bindedAddresses</span><span class="p">);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">activeIPVSServices</span><span class="p">[</span><span class="nx">serv</span><span class="p">.</span><span class="nf">String</span><span class="p">()]</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nf">syncEndpoint</span><span class="p">(</span><span class="nx">svcName</span><span class="p">,</span> <span class="nx">svcInfo</span><span class="p">.</span><span class="nf">OnlyNodeLocalEndpoints</span><span class="p">(),</span> <span class="nx">serv</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to sync endpoint for service: %v, err: %v&#34;</span><span class="p">,</span> <span class="nx">serv</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to sync service: %v, err: %v&#34;</span><span class="p">,</span> <span class="nx">serv</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中有两个非常重要的函数 <a href="https://github.com/kubernetes/kubernetes/blob/e979822c185a14537054f15808a118d7fcce1d6e/pkg/proxy/ipvs/proxier.go#L1215-L1229">syncService()</a> 于 <a href="https://github.com/kubernetes/kubernetes/blob/e979822c185a14537054f15808a118d7fcce1d6e/pkg/proxy/ipvs/proxier.go#L1215-L1229">syncEndpoint()</a>  这两个定义了同步的过程</p>
<p><a href="https://github.com/kubernetes/kubernetes/blob/e979822c185a14537054f15808a118d7fcce1d6e/pkg/proxy/ipvs/proxier.go#L1921-L1959">syncService()</a> 函数表示了增加或删除一个service，如果存在则修改，如果存在则添加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">proxier</span> <span class="o">*</span><span class="nx">Proxier</span><span class="p">)</span> <span class="nf">syncService</span><span class="p">(</span><span class="nx">svcName</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">vs</span> <span class="o">*</span><span class="nx">utilipvs</span><span class="p">.</span><span class="nx">VirtualServer</span><span class="p">,</span> <span class="nx">bindAddr</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">bindedAddresses</span> <span class="nx">sets</span><span class="p">.</span><span class="nx">String</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">appliedVirtualServer</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipvs</span><span class="p">.</span><span class="nf">GetVirtualServer</span><span class="p">(</span><span class="nx">vs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">appliedVirtualServer</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">||</span> <span class="p">!</span><span class="nx">appliedVirtualServer</span><span class="p">.</span><span class="nf">Equal</span><span class="p">(</span><span class="nx">vs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">appliedVirtualServer</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// IPVS service is not found, create a new service
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Adding new service %q %s:%d/%s&#34;</span><span class="p">,</span> <span class="nx">svcName</span><span class="p">,</span> <span class="nx">vs</span><span class="p">.</span><span class="nx">Address</span><span class="p">,</span> <span class="nx">vs</span><span class="p">.</span><span class="nx">Port</span><span class="p">,</span> <span class="nx">vs</span><span class="p">.</span><span class="nx">Protocol</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipvs</span><span class="p">.</span><span class="nf">AddVirtualServer</span><span class="p">(</span><span class="nx">vs</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to add IPVS service %q: %v&#34;</span><span class="p">,</span> <span class="nx">svcName</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// IPVS service was changed, update the existing one
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// During updates, service VIP will not go down
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;IPVS service %s was changed&#34;</span><span class="p">,</span> <span class="nx">svcName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipvs</span><span class="p">.</span><span class="nf">UpdateVirtualServer</span><span class="p">(</span><span class="nx">vs</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to update IPVS service, err:%v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// bind service address to dummy interface
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">bindAddr</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// always attempt to bind if bindedAddresses is nil,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// otherwise check if it&#39;s already binded and return early
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">bindedAddresses</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">bindedAddresses</span><span class="p">.</span><span class="nf">Has</span><span class="p">(</span><span class="nx">vs</span><span class="p">.</span><span class="nx">Address</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Bind addr %s&#34;</span><span class="p">,</span> <span class="nx">vs</span><span class="p">.</span><span class="nx">Address</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">netlinkHandle</span><span class="p">.</span><span class="nf">EnsureAddressBind</span><span class="p">(</span><span class="nx">vs</span><span class="p">.</span><span class="nx">Address</span><span class="p">.</span><span class="nf">String</span><span class="p">(),</span> <span class="nx">DefaultDummyDevice</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to bind service address to dummy device %q: %v&#34;</span><span class="p">,</span> <span class="nx">svcName</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>同理 <a href="https://github.com/kubernetes/kubernetes/blob/e979822c185a14537054f15808a118d7fcce1d6e/pkg/proxy/ipvs/proxier.go#L1961-L2090">syncEndpoint()</a> 也是相同的操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">proxier</span> <span class="o">*</span><span class="nx">Proxier</span><span class="p">)</span> <span class="nf">syncEndpoint</span><span class="p">(</span><span class="nx">svcPortName</span> <span class="nx">proxy</span><span class="p">.</span><span class="nx">ServicePortName</span><span class="p">,</span> <span class="nx">onlyNodeLocalEndpoints</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">vs</span> <span class="o">*</span><span class="nx">utilipvs</span><span class="p">.</span><span class="nx">VirtualServer</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">appliedVirtualServer</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipvs</span><span class="p">.</span><span class="nf">GetVirtualServer</span><span class="p">(</span><span class="nx">vs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">appliedVirtualServer</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to get IPVS service, error: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// curEndpoints represents IPVS destinations listed from current system.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">curEndpoints</span> <span class="o">:=</span> <span class="nx">sets</span><span class="p">.</span><span class="nf">NewString</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// newEndpoints represents Endpoints watched from API Server.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">newEndpoints</span> <span class="o">:=</span> <span class="nx">sets</span><span class="p">.</span><span class="nf">NewString</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">curDests</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipvs</span><span class="p">.</span><span class="nf">GetRealServers</span><span class="p">(</span><span class="nx">appliedVirtualServer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to list IPVS destinations, error: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">des</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">curDests</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">curEndpoints</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">des</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">endpoints</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">endpointsMap</span><span class="p">[</span><span class="nx">svcPortName</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Service Topology will not be enabled in the following cases:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 1. externalTrafficPolicy=Local (mutually exclusive with service topology).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 2. ServiceTopology is not enabled.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 3. EndpointSlice is not enabled (service topology depends on endpoint slice
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// to get topology information).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">!</span><span class="nx">onlyNodeLocalEndpoints</span> <span class="o">&amp;&amp;</span> <span class="nx">utilfeature</span><span class="p">.</span><span class="nx">DefaultFeatureGate</span><span class="p">.</span><span class="nf">Enabled</span><span class="p">(</span><span class="nx">features</span><span class="p">.</span><span class="nx">ServiceTopology</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">utilfeature</span><span class="p">.</span><span class="nx">DefaultFeatureGate</span><span class="p">.</span><span class="nf">Enabled</span><span class="p">(</span><span class="nx">features</span><span class="p">.</span><span class="nx">EndpointSliceProxying</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">endpoints</span> <span class="p">=</span> <span class="nx">proxy</span><span class="p">.</span><span class="nf">FilterTopologyEndpoint</span><span class="p">(</span><span class="nx">proxier</span><span class="p">.</span><span class="nx">nodeLabels</span><span class="p">,</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">serviceMap</span><span class="p">[</span><span class="nx">svcPortName</span><span class="p">].</span><span class="nf">TopologyKeys</span><span class="p">(),</span> <span class="nx">endpoints</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">epInfo</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">endpoints</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">onlyNodeLocalEndpoints</span> <span class="o">&amp;&amp;</span> <span class="p">!</span><span class="nx">epInfo</span><span class="p">.</span><span class="nf">GetIsLocal</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">newEndpoints</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">epInfo</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Create new endpoints
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ep</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">newEndpoints</span><span class="p">.</span><span class="nf">List</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ip</span><span class="p">,</span> <span class="nx">port</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">SplitHostPort</span><span class="p">(</span><span class="nx">ep</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to parse endpoint: %v, error: %v&#34;</span><span class="p">,</span> <span class="nx">ep</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">portNum</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">port</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to parse endpoint port %s, error: %v&#34;</span><span class="p">,</span> <span class="nx">port</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">newDest</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">utilipvs</span><span class="p">.</span><span class="nx">RealServer</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Address</span><span class="p">:</span> <span class="nx">net</span><span class="p">.</span><span class="nf">ParseIP</span><span class="p">(</span><span class="nx">ip</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Port</span><span class="p">:</span>    <span class="nb">uint16</span><span class="p">(</span><span class="nx">portNum</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Weight</span><span class="p">:</span>  <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">curEndpoints</span><span class="p">.</span><span class="nf">Has</span><span class="p">(</span><span class="nx">ep</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// check if newEndpoint is in gracefulDelete list, if true, delete this ep immediately
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">uniqueRS</span> <span class="o">:=</span> <span class="nf">GetUniqueRSName</span><span class="p">(</span><span class="nx">vs</span><span class="p">,</span> <span class="nx">newDest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">proxier</span><span class="p">.</span><span class="nx">gracefuldeleteManager</span><span class="p">.</span><span class="nf">InTerminationList</span><span class="p">(</span><span class="nx">uniqueRS</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;new ep %q is in graceful delete list&#34;</span><span class="p">,</span> <span class="nx">uniqueRS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">gracefuldeleteManager</span><span class="p">.</span><span class="nf">MoveRSOutofGracefulDeleteList</span><span class="p">(</span><span class="nx">uniqueRS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to delete endpoint: %v in gracefulDeleteQueue, error: %v&#34;</span><span class="p">,</span> <span class="nx">ep</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">err</span> <span class="p">=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">ipvs</span><span class="p">.</span><span class="nf">AddRealServer</span><span class="p">(</span><span class="nx">appliedVirtualServer</span><span class="p">,</span> <span class="nx">newDest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to add destination: %v, error: %v&#34;</span><span class="p">,</span> <span class="nx">newDest</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Delete old endpoints
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ep</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">curEndpoints</span><span class="p">.</span><span class="nf">Difference</span><span class="p">(</span><span class="nx">newEndpoints</span><span class="p">).</span><span class="nf">UnsortedList</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// if curEndpoint is in gracefulDelete, skip
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">uniqueRS</span> <span class="o">:=</span> <span class="nx">vs</span><span class="p">.</span><span class="nf">String</span><span class="p">()</span> <span class="o">+</span> <span class="s">&#34;/&#34;</span> <span class="o">+</span> <span class="nx">ep</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">gracefuldeleteManager</span><span class="p">.</span><span class="nf">InTerminationList</span><span class="p">(</span><span class="nx">uniqueRS</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ip</span><span class="p">,</span> <span class="nx">port</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">SplitHostPort</span><span class="p">(</span><span class="nx">ep</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to parse endpoint: %v, error: %v&#34;</span><span class="p">,</span> <span class="nx">ep</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">portNum</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">port</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to parse endpoint port %s, error: %v&#34;</span><span class="p">,</span> <span class="nx">port</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">delDest</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">utilipvs</span><span class="p">.</span><span class="nx">RealServer</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Address</span><span class="p">:</span> <span class="nx">net</span><span class="p">.</span><span class="nf">ParseIP</span><span class="p">(</span><span class="nx">ip</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Port</span><span class="p">:</span>    <span class="nb">uint16</span><span class="p">(</span><span class="nx">portNum</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Using graceful delete to delete: %v&#34;</span><span class="p">,</span> <span class="nx">uniqueRS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">err</span> <span class="p">=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">gracefuldeleteManager</span><span class="p">.</span><span class="nf">GracefulDeleteRS</span><span class="p">(</span><span class="nx">appliedVirtualServer</span><span class="p">,</span> <span class="nx">delDest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to delete destination: %v, error: %v&#34;</span><span class="p">,</span> <span class="nx">uniqueRS</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来就是同步规则的步骤了，<a href="https://github.com/kubernetes/kubernetes/blob/e979822c185a14537054f15808a118d7fcce1d6e/pkg/proxy/ipvs/proxier.go#L1544-L1621">L1544-L1621</a></p>
<h3 id="step-3规则的删除">step 3：规则的删除</h3>
<p>粗略翻到这里可能有一个疑问？没有提到删除，删除时包含在 syncXX() 函数中的</p>
<p>例如在 <a href="https://github.com/kubernetes/kubernetes/blob/e979822c185a14537054f15808a118d7fcce1d6e/pkg/proxy/ipvs/proxier.go#L2063-L2088">syncEndpoint()</a> 中会看是否在 终止列表中，如果在跳过，如果不在加入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">curEndpoints</span><span class="p">.</span><span class="nf">Has</span><span class="p">(</span><span class="nx">ep</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// check if newEndpoint is in gracefulDelete list, if true, delete this ep immediately
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">uniqueRS</span> <span class="o">:=</span> <span class="nf">GetUniqueRSName</span><span class="p">(</span><span class="nx">vs</span><span class="p">,</span> <span class="nx">newDest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">!</span><span class="nx">proxier</span><span class="p">.</span><span class="nx">gracefuldeleteManager</span><span class="p">.</span><span class="nf">InTerminationList</span><span class="p">(</span><span class="nx">uniqueRS</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">continue</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;new ep %q is in graceful delete list&#34;</span><span class="p">,</span> <span class="nx">uniqueRS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">gracefuldeleteManager</span><span class="p">.</span><span class="nf">MoveRSOutofGracefulDeleteList</span><span class="p">(</span><span class="nx">uniqueRS</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to delete endpoint: %v in gracefulDeleteQueue, error: %v&#34;</span><span class="p">,</span> <span class="nx">ep</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">continue</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而 <a href="https://github.com/kubernetes/kubernetes/blob/e979822c185a14537054f15808a118d7fcce1d6e/pkg/proxy/ipvs/proxier.go#L275">gracefuldeleteManager</a> 是一个 一直运行的协程，在初始化 proxier 时被 Run()</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Run start a goroutine to try to delete rs in the graceful delete rsList with an interval 1 minute
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">GracefulTerminationManager</span><span class="p">)</span> <span class="nf">Run</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nx">wait</span><span class="p">.</span><span class="nf">Until</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">tryDeleteRs</span><span class="p">,</span> <span class="nx">rsCheckDeleteInterval</span><span class="p">,</span> <span class="nx">wait</span><span class="p">.</span><span class="nx">NeverStop</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/kubernetes/kubernetes/blob/e979822c185a14537054f15808a118d7fcce1d6e/pkg/proxy/ipvs/proxier.go#L508">proxier.go</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">proxier</span><span class="p">.</span><span class="nx">syncRunner</span> <span class="p">=</span> <span class="nx">async</span><span class="p">.</span><span class="nf">NewBoundedFrequencyRunner</span><span class="p">(</span><span class="s">&#34;sync-runner&#34;</span><span class="p">,</span> <span class="nx">proxier</span><span class="p">.</span><span class="nx">syncProxyRules</span><span class="p">,</span> <span class="nx">minSyncPeriod</span><span class="p">,</span> <span class="nx">syncPeriod</span><span class="p">,</span> <span class="nx">burstSyncs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">proxier</span><span class="p">.</span><span class="nx">gracefuldeleteManager</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="nx">proxier</span><span class="p">,</span> <span class="kc">nil</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结">总结</h2>
<p>到这里已经清楚的掌握了 kube-proxy 的架构，接下来的会为扩展kubernetes中service架构，以及手撸一个 kube-proxy做准备；本系列第三部分：<a href="https://cylonchau.github.io/ch3.7-admission-webhook.html">如何扩展现有的kube-proxy架构</a></p>
<p>文中的知识都是个人根据理解整理的，如有不对的地方欢迎指出，感谢各位大佬</p>
<blockquote>
<p><strong>Reference</strong></p>
<p><sup id="5">[1]</sup> <a href="https://kubernetes.io/docs/concepts/services-networking/dual-stack/"><em>dual-stack service</em></a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>深入理解Kubernetes service - 你真的理解service吗？</title>
      <link>https://www.oomkill.com/2023/02/ch17-service-controller/</link>
      <pubDate>Mon, 06 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/02/ch17-service-controller/</guid>
      <description></description>
      <content:encoded><![CDATA[<blockquote>
<p>本文是关于Kubernetes service解析的第一章</p>
<ul>
<li>深入理解Kubernetes service - 你真的理解service吗?</li>
<li><a href="https://cylonchau.github.io/kubernetes-endpointslices.html">深入理解Kubernetes service - EndpointSlices做了什么？</a></li>
<li><a href="https://cylonchau.github.io/kubernetes-kube-proxy-code.html">深入理解Kubernetes service - kube-proxy架构分析</a></li>
<li><a href="https://cylonchau.github.io/kubernetes-extend-kube-proxy.html">深入理解Kubernetes service - 如何扩展现有的kube-proxy架构</a></li>
</ul>
<p>所有关于Kubernetes service 部分代码上传至仓库 <a href="https://github.com/cylonchau/kube-haproxy">github.com/cylonchau/kube-haproxy</a></p>
</blockquote>
<h2 id="前景">前景</h2>
<p>对于了解kubernetes架构时，已知的是 <code>service</code> 是kubernetes在设计时为了避免Pod在频繁创建和销毁时IP变更问题，从而给集群内服务（一组Pod）提供访问的一个入口。而Pod在这里的角色是 『后端』( <em><strong>backend</strong></em> ) ，而 service 的角色是 『前端』( <em><strong>frontend</strong></em> )。本文将阐述service的生命周期</p>
<h2 id="为什么需要了解这部分内容呢">为什么需要了解这部分内容呢</h2>
<p>对于 without kube-proxy来说，这部分是最重要的部分，因为service的生成不是kube-proxy来完成的，而这部分也就是service ip定义的核心。</p>
<h2 id="控制器">控制器</h2>
<p>service的资源创建很奇妙，继不属于 <code>controller-manager</code> 组件，也不属于 <code>kube-proxy</code> 组件，而是存在于 <code>apiserver</code> 中的一个被成为控制器的组件；而这个控制器又区别于准入控制器。更准确来说，准入控制器是位于kubeapiserver中的组件，而 <strong>控制器</strong> 则是存在于单独的一个包，这里包含了很多kubernetes集群的公共组件的功能，其中就有service。这也就是在操作kubernetes时 当 <code>controller-manager</code> 于  <code>kube-proxy</code> 未工作时，也可以准确的为service分配IP。</p>
<p>首先在构建出apiserver时，也就是代码 <a href="cmd/kube-apiserver/app/server.go">cmd/kube-apiserver/app/server.go</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">serviceIPRange</span><span class="p">,</span> <span class="nx">apiServerServiceIP</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">master</span><span class="p">.</span><span class="nf">ServiceIPRange</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">PrimaryServiceClusterIPRange</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/kubernetes/kubernetes/blob/58178e7f7aab455bc8de88d3bdd314b64141e7ee/pkg/master/services.go#L34-L54">master.ServiceIPRange</a> 承接了为service分配IP的功能，这部分逻辑就很简单了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">ServiceIPRange</span><span class="p">(</span><span class="nx">passedServiceClusterIPRange</span> <span class="nx">net</span><span class="p">.</span><span class="nx">IPNet</span><span class="p">)</span> <span class="p">(</span><span class="nx">net</span><span class="p">.</span><span class="nx">IPNet</span><span class="p">,</span> <span class="nx">net</span><span class="p">.</span><span class="nx">IP</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">serviceClusterIPRange</span> <span class="o">:=</span> <span class="nx">passedServiceClusterIPRange</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">passedServiceClusterIPRange</span><span class="p">.</span><span class="nx">IP</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Warningf</span><span class="p">(</span><span class="s">&#34;No CIDR for service cluster IPs specified. Default value which was %s is deprecated and will be removed in future releases. Please specify it using --service-cluster-ip-range on kube-apiserver.&#34;</span><span class="p">,</span> <span class="nx">kubeoptions</span><span class="p">.</span><span class="nx">DefaultServiceIPCIDR</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="nx">serviceClusterIPRange</span> <span class="p">=</span> <span class="nx">kubeoptions</span><span class="p">.</span><span class="nx">DefaultServiceIPCIDR</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">size</span> <span class="o">:=</span> <span class="nx">integer</span><span class="p">.</span><span class="nf">Int64Min</span><span class="p">(</span><span class="nx">utilnet</span><span class="p">.</span><span class="nf">RangeSize</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">serviceClusterIPRange</span><span class="p">),</span> <span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">size</span> <span class="p">&lt;</span> <span class="mi">8</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">net</span><span class="p">.</span><span class="nx">IPNet</span><span class="p">{},</span> <span class="nx">net</span><span class="p">.</span><span class="nx">IP</span><span class="p">{},</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;the service cluster IP range must be at least %d IP addresses&#34;</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Select the first valid IP from ServiceClusterIPRange to use as the GenericAPIServer service IP.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">apiServerServiceIP</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">utilnet</span><span class="p">.</span><span class="nf">GetIndexedIP</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">serviceClusterIPRange</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">net</span><span class="p">.</span><span class="nx">IPNet</span><span class="p">{},</span> <span class="nx">net</span><span class="p">.</span><span class="nx">IP</span><span class="p">{},</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Setting service IP to %q (read-write).&#34;</span><span class="p">,</span> <span class="nx">apiServerServiceIP</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">serviceClusterIPRange</span><span class="p">,</span> <span class="nx">apiServerServiceIP</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而后kube-apiserver为service分为两类</p>
<ul>
<li>apiserver 地址在集群内的service，在代码中表示为 <a href="https://github.com/kubernetes/kubernetes/blob/58178e7f7aab455bc8de88d3bdd314b64141e7ee/cmd/kube-apiserver/app/server.go#L351">APIServerServiceIP</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/blob/58178e7f7aab455bc8de88d3bdd314b64141e7ee/cmd/kube-apiserver/app/server.go#L352">Service</a>，<code>--service-cluster-ip-range</code> 配置指定的ip，通过『逗号』分割可以为两个</li>
</ul>
<p>有了对 service 更好的理解后，接下来开始本系列第二节<a href="https://cylonchau.github.io/kubernetes-without-service.html">深入理解Kubernetes service - kube-proxy软件架构分析</a></p>
<blockquote>
<p><strong>Reference</strong></p>
<p><sup id="1">[1]</sup> <a href="https://kubernetes.io/docs/concepts/services-networking/dual-stack/"><em>dual-stack service</em></a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>深入理解Kubernetes 4A - Audit源码解析</title>
      <link>https://www.oomkill.com/2022/11/ch34-auditing/</link>
      <pubDate>Thu, 24 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/11/ch34-auditing/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<blockquote>
<p>本文是关于Kubernetes 4A解析的第四章</p>
<ul>
<li><a href="https://cylonchau.github.io/kubernetes-authentication.html">深入理解Kubernetes 4A - Authentication源码解析</a></li>
<li><a href="https://cylonchau.github.io/kubernetes-authorization.html">深入理解Kubernetes 4A - Authorization源码解析</a></li>
<li><a href="https://cylonchau.github.io/ch3.7-admission-webhook.html">深入理解Kubernetes 4A - Admission Control源码解析</a></li>
<li>深入理解Kubernetes 4A - Audit源码解析</li>
</ul>
<p>所有关于Kubernetes 4A四部分代码上传至仓库 github.com/cylonchau/hello-k8s-4A</p>
</blockquote>
<p>审计是信息系统中非常重要的一部分，Kubernetes 1.11中也增加了审计 (<em><strong>Auditing</strong></em>) 功能，通过审计功能获得 deployment, ns,等资源操作的事件。</p>
<p><strong>objective</strong>：</p>
<ul>
<li>从设计角度了解Auditing在kubernets中是如何实现的</li>
<li>了解kubernetes auditing webhook</li>
<li>完成实验，通过webhook来收集审计日志</li>
</ul>
<p>如有错别字或理解错误地方请多多担待，代码是以1.24进行整理，实验是以1.19环境进行，差别不大。</p>
<h2 id="kubernetes-auditing">Kubernetes Auditing</h2>
<p>根据Kubernetes官方描述审计在kubernetes中是有控制平面 <em>kube-apiserver</em> 中产生的一个事件，记录了集群中所操作的资源，审计围绕下列几个维度来记录事件的：</p>
<ul>
<li>发生了什么</li>
<li>发生的事件</li>
<li>谁触发的</li>
<li>发生动作的对象</li>
<li>在哪里检查到动作的</li>
<li>从哪触发的</li>
<li>处理行为是什么</li>
</ul>
<p>审计生命周期开始于组件 <em>kube-apiserver</em> 准入控制阶段，在每个阶段内都会产生审计事件并经过预处理后写入后端，目前后端包含webhook与日志文件。</p>
<blockquote>
<p>审计日志功能增加了 <em>kube-apiserver</em> 的内存消耗，因为会为每个请求存储了审计所需的上下文。内存的消耗取决于审计日志配置 <sup><a href="#1">[1]</a></sup>。</p>
</blockquote>
<h2 id="审计事件设计">审计事件设计</h2>
<p>审计的schema不同于资源API的设计，没有 <code>metav1.ObjectMeta</code> 属性，Event是一个事件的结构体，Policy是事件配置，属于kubernetes资源，在代码 <a href="https://github.com/kubernetes/kubernetes/blob/e72eea92396503521f1acaab60a2975c13ffc618/staging/src/k8s.io/apiserver/pkg/apis/audit/types.go#L79-L148">k8s.io/apiserver/pkg/apis/audit/types.go</a> 可以看到</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Event</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span><span class="p">.</span><span class="nx">TypeMeta</span> <span class="s">`json:&#34;,inline&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Level</span> <span class="nx">Level</span> <span class="s">`json:&#34;level&#34; protobuf:&#34;bytes,1,opt,name=level,casttype=Level&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">	AuditID types.UID `</span><span class="nx">json</span><span class="p">:</span><span class="s">&#34;auditID&#34;</span> <span class="nx">protobuf</span><span class="p">:</span><span class="s">&#34;bytes,2,opt,name=auditID,casttype=k8s.io/apimachinery/pkg/types.UID&#34;`
</span></span></span><span class="line"><span class="cl"><span class="s">	
</span></span></span><span class="line"><span class="cl"><span class="s">	Stage Stage `</span><span class="nx">json</span><span class="p">:</span><span class="s">&#34;stage&#34;</span> <span class="nx">protobuf</span><span class="p">:</span><span class="s">&#34;bytes,3,opt,name=stage,casttype=Stage&#34;`
</span></span></span><span class="line"><span class="cl"><span class="s">	RequestURI string `</span><span class="nx">json</span><span class="p">:</span><span class="s">&#34;requestURI&#34;</span> <span class="nx">protobuf</span><span class="p">:</span><span class="s">&#34;bytes,4,opt,name=requestURI&#34;`
</span></span></span><span class="line"><span class="cl"><span class="s">	Verb string `</span><span class="nx">json</span><span class="p">:</span><span class="s">&#34;verb&#34;</span> <span class="nx">protobuf</span><span class="p">:</span><span class="s">&#34;bytes,5,opt,name=verb&#34;`
</span></span></span><span class="line"><span class="cl"><span class="s">	User authnv1.UserInfo `</span><span class="nx">json</span><span class="p">:</span><span class="s">&#34;user&#34;</span> <span class="nx">protobuf</span><span class="p">:</span><span class="s">&#34;bytes,6,opt,name=user&#34;`
</span></span></span><span class="line"><span class="cl"><span class="s">	ImpersonatedUser *authnv1.UserInfo `</span><span class="nx">json</span><span class="p">:</span><span class="s">&#34;impersonatedUser,omitempty&#34;</span> <span class="nx">protobuf</span><span class="p">:</span><span class="s">&#34;bytes,7,opt,name=impersonatedUser&#34;`
</span></span></span><span class="line"><span class="cl"><span class="s">	SourceIPs []string `</span><span class="nx">json</span><span class="p">:</span><span class="s">&#34;sourceIPs,omitempty&#34;</span> <span class="nx">protobuf</span><span class="p">:</span><span class="s">&#34;bytes,8,rep,name=sourceIPs&#34;`
</span></span></span><span class="line"><span class="cl"><span class="s">	UserAgent string `</span><span class="nx">json</span><span class="p">:</span><span class="s">&#34;userAgent,omitempty&#34;</span> <span class="nx">protobuf</span><span class="p">:</span><span class="s">&#34;bytes,16,opt,name=userAgent&#34;`
</span></span></span><span class="line"><span class="cl"><span class="s">	ObjectRef *ObjectReference `</span><span class="nx">json</span><span class="p">:</span><span class="s">&#34;objectRef,omitempty&#34;</span> <span class="nx">protobuf</span><span class="p">:</span><span class="s">&#34;bytes,9,opt,name=objectRef&#34;`
</span></span></span><span class="line"><span class="cl"><span class="s">	// +optional
</span></span></span><span class="line"><span class="cl"><span class="s">	ResponseStatus *metav1.Status `</span><span class="nx">json</span><span class="p">:</span><span class="s">&#34;responseStatus,omitempty&#34;</span> <span class="nx">protobuf</span><span class="p">:</span><span class="s">&#34;bytes,10,opt,name=responseStatus&#34;</span><span class="err">`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于记录的认证事件来说，会根据请求阶段记录审计的阶段，主要分为下属集中情况，每个请求会记录其中一个验证阶段，如代码所示 <sup><a href="#1">[1]</a></sup></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 这个阶段是audit handler收到请求后立即生成事件的阶段，然后委托handler chain处理。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">StageRequestReceived</span> <span class="nx">Stage</span> <span class="p">=</span> <span class="s">&#34;RequestReceived&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 这个阶段阶段仅对长时间运行的请求如 watch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 将在发送响应标头后，响应正文之前生成的阶段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">StageResponseStarted</span> <span class="nx">Stage</span> <span class="p">=</span> <span class="s">&#34;ResponseStarted&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 这个阶段是发送相应体后的事件。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">StageResponseComplete</span> <span class="nx">Stage</span> <span class="p">=</span> <span class="s">&#34;ResponseComplete&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 如果程序出现panic，则触发这个阶段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">StagePanic</span> <span class="nx">Stage</span> <span class="p">=</span> <span class="s">&#34;Panic&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="审计工作流程">审计工作流程</h2>
<p>审计真正工作的地方在 <a href="https://github.com/kubernetes/kubernetes/blob/e72eea92396503521f1acaab60a2975c13ffc618/staging/src/k8s.io/apiserver/pkg/endpoints/filters/audit.go#L42-L119">k8s.io/apiserver/pkg/endpoints/filters/audit.go.WithAudit</a> 函数，下面对与官方文档说明与这个实际代码进行结合</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">WithAudit</span><span class="p">(</span><span class="nx">handler</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span><span class="p">,</span> <span class="nx">sink</span> <span class="nx">audit</span><span class="p">.</span><span class="nx">Sink</span><span class="p">,</span> <span class="nx">policy</span> <span class="nx">audit</span><span class="p">.</span><span class="nx">PolicyRuleEvaluator</span><span class="p">,</span> <span class="nx">longRunningCheck</span> <span class="nx">request</span><span class="p">.</span><span class="nx">LongRunningRequestCheck</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// sink是一个backend（webhook 或 日志），policy则是自定义的事件配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果两者之一未配置，则不会使用审计功能
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">sink</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">policy</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">handler</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">req</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 通过给定的配置与请求构建出一个事件 context
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 这里可以看到
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">auditContext</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">evaluatePolicyAndCreateAuditEvent</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">policy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleError</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to create audit event: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="nx">responsewriters</span><span class="p">.</span><span class="nf">InternalError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;failed to create audit event&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 下面代码可以看出是对事件context进行构建，与拿到来自请求Context
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">ev</span> <span class="o">:=</span> <span class="nx">auditContext</span><span class="p">.</span><span class="nx">Event</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">ev</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">req</span><span class="p">.</span><span class="nf">Context</span><span class="p">()</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">handler</span><span class="p">.</span><span class="nf">ServeHTTP</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">req</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">req</span> <span class="p">=</span> <span class="nx">req</span><span class="p">.</span><span class="nf">WithContext</span><span class="p">(</span><span class="nx">audit</span><span class="p">.</span><span class="nf">WithAuditContext</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nf">Context</span><span class="p">(),</span> <span class="nx">auditContext</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">ctx</span> <span class="o">:=</span> <span class="nx">req</span><span class="p">.</span><span class="nf">Context</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">omitStages</span> <span class="o">:=</span> <span class="nx">auditContext</span><span class="p">.</span><span class="nx">RequestAuditConfig</span><span class="p">.</span><span class="nx">OmitStages</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">        <span class="c1">// 这里到StageRequestReceived阶段，如果是收到请求阶段则通过注入的后端进行处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">ev</span><span class="p">.</span><span class="nx">Stage</span> <span class="p">=</span> <span class="nx">auditinternal</span><span class="p">.</span><span class="nx">StageRequestReceived</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">processed</span> <span class="o">:=</span> <span class="nf">processAuditEvent</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">sink</span><span class="p">,</span> <span class="nx">ev</span><span class="p">,</span> <span class="nx">omitStages</span><span class="p">);</span> <span class="p">!</span><span class="nx">processed</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">audit</span><span class="p">.</span><span class="nx">ApiserverAuditDroppedCounter</span><span class="p">.</span><span class="nf">WithContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">).</span><span class="nf">Inc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nx">responsewriters</span><span class="p">.</span><span class="nf">InternalError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;failed to store audit event&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 拦截watch类长请求的状态码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="kd">var</span> <span class="nx">longRunningSink</span> <span class="nx">audit</span><span class="p">.</span><span class="nx">Sink</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">longRunningCheck</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ri</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">request</span><span class="p">.</span><span class="nf">RequestInfoFrom</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nf">longRunningCheck</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">ri</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">longRunningSink</span> <span class="p">=</span> <span class="nx">sink</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">respWriter</span> <span class="o">:=</span> <span class="nf">decorateResponseWriter</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">w</span><span class="p">,</span> <span class="nx">ev</span><span class="p">,</span> <span class="nx">longRunningSink</span><span class="p">,</span> <span class="nx">omitStages</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// send audit event when we leave this func, either via a panic or cleanly. In the case of long
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// running requests, this will be the second audit event.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 在离开函数前会处理 ResponseStarted、ResponseComplete、Panic这三个阶段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">r</span> <span class="o">:=</span> <span class="nb">recover</span><span class="p">();</span> <span class="nx">r</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">defer</span> <span class="nb">panic</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 当前发生panic的请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">ev</span><span class="p">.</span><span class="nx">Stage</span> <span class="p">=</span> <span class="nx">auditinternal</span><span class="p">.</span><span class="nx">StagePanic</span>
</span></span><span class="line"><span class="cl">				<span class="nx">ev</span><span class="p">.</span><span class="nx">ResponseStatus</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">metav1</span><span class="p">.</span><span class="nx">Status</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Code</span><span class="p">:</span>    <span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Status</span><span class="p">:</span>  <span class="nx">metav1</span><span class="p">.</span><span class="nx">StatusFailure</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Reason</span><span class="p">:</span>  <span class="nx">metav1</span><span class="p">.</span><span class="nx">StatusReasonInternalError</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Message</span><span class="p">:</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;APIServer panic&#39;d: %v&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nf">processAuditEvent</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">sink</span><span class="p">,</span> <span class="nx">ev</span><span class="p">,</span> <span class="nx">omitStages</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="c1">// if no StageResponseStarted event was sent b/c neither a status code nor a body was sent, fake it here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// But Audit-Id http header will only be sent when http.ResponseWriter.WriteHeader is called.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">fakedSuccessStatus</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">metav1</span><span class="p">.</span><span class="nx">Status</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Code</span><span class="p">:</span>    <span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Status</span><span class="p">:</span>  <span class="nx">metav1</span><span class="p">.</span><span class="nx">StatusSuccess</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Message</span><span class="p">:</span> <span class="s">&#34;Connection closed early&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">ResponseStatus</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">longRunningSink</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">ev</span><span class="p">.</span><span class="nx">ResponseStatus</span> <span class="p">=</span> <span class="nx">fakedSuccessStatus</span>
</span></span><span class="line"><span class="cl">				<span class="nx">ev</span><span class="p">.</span><span class="nx">Stage</span> <span class="p">=</span> <span class="nx">auditinternal</span><span class="p">.</span><span class="nx">StageResponseStarted</span>
</span></span><span class="line"><span class="cl">				<span class="nf">processAuditEvent</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">longRunningSink</span><span class="p">,</span> <span class="nx">ev</span><span class="p">,</span> <span class="nx">omitStages</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// ResponseStarted 在响应头发送后，响应体发送前的事件。watch会触发他
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            
</span></span><span class="line"><span class="cl">			<span class="nx">ev</span><span class="p">.</span><span class="nx">Stage</span> <span class="p">=</span> <span class="nx">auditinternal</span><span class="p">.</span><span class="nx">StageResponseComplete</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">ev</span><span class="p">.</span><span class="nx">ResponseStatus</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 没有相应状态 正是上面构造的fakedSuccessStatus
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">ev</span><span class="p">.</span><span class="nx">ResponseStatus</span> <span class="p">=</span> <span class="nx">fakedSuccessStatus</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 将事件发送到后端
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nf">processAuditEvent</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">sink</span><span class="p">,</span> <span class="nx">ev</span><span class="p">,</span> <span class="nx">omitStages</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">handler</span><span class="p">.</span><span class="nf">ServeHTTP</span><span class="p">(</span><span class="nx">respWriter</span><span class="p">,</span> <span class="nx">req</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>在评估请求时，会调用 <code>GetAuthorizerAttributes(ctx)</code> ，这里通过授权记录然后来通过给定的审计配置来</p>
</li>
<li>
<p>当在将事件发送到后端时，使用 <code>processAuditEvent()</code> 函数，最终修改时间后会转交至后端函数，例如webhook，会请求后端配置的webhook url的客户端，最终被执行 <code>return sink.ProcessEvents(ev)</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">backend</span><span class="p">)</span> <span class="nf">processEvents</span><span class="p">(</span><span class="nx">ev</span> <span class="o">...*</span><span class="nx">auditinternal</span><span class="p">.</span><span class="nx">Event</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">list</span> <span class="nx">auditinternal</span><span class="p">.</span><span class="nx">EventList</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">e</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">ev</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">list</span><span class="p">.</span><span class="nx">Items</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">Items</span><span class="p">,</span> <span class="o">*</span><span class="nx">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">w</span><span class="p">.</span><span class="nf">WithExponentialBackoff</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="kd">func</span><span class="p">()</span> <span class="nx">rest</span><span class="p">.</span><span class="nx">Result</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">trace</span> <span class="o">:=</span> <span class="nx">utiltrace</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;Call Audit Events webhook&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">utiltrace</span><span class="p">.</span><span class="nx">Field</span><span class="p">{</span><span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">			<span class="nx">utiltrace</span><span class="p">.</span><span class="nx">Field</span><span class="p">{</span><span class="s">&#34;event-count&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">Items</span><span class="p">)})</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Only log audit webhook traces that exceed a 25ms per object limit plus a 50ms request overhead allowance. The high per object limit used here is primarily to allow enough time for the serialization/deserialization of audit events, which contain nested request and response objects plus additional event fields.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">defer</span> <span class="nx">trace</span><span class="p">.</span><span class="nf">LogIfLong</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="mi">50</span><span class="o">+</span><span class="mi">25</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="nx">list</span><span class="p">.</span><span class="nx">Items</span><span class="p">))</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">w</span><span class="p">.</span><span class="nx">RestClient</span><span class="p">.</span><span class="nf">Post</span><span class="p">().</span><span class="nf">Body</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">list</span><span class="p">).</span><span class="nf">Do</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}).</span><span class="nf">Error</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>在 <a href="https://github.com/kubernetes/kubernetes/blob/e72eea92396503521f1acaab60a2975c13ffc618/staging/src/k8s.io/apiserver/pkg/endpoints/filters/audit.go#L125-L155">k8s.io/apiserver/pkg/endpoints/filters/audit.go.evaluatePolicyAndCreateAuditEvent</a> 会评估请求的级别和规则，而 <a href="https://github.com/kubernetes/kubernetes/blob/e72eea92396503521f1acaab60a2975c13ffc618/staging/src/k8s.io/apiserver/pkg/audit/policy/checker.go#L64-L84">k8s.io/apiserver/pkg/audit/policy/checker.go</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">policyRuleEvaluator</span><span class="p">)</span> <span class="nf">EvaluatePolicyRule</span><span class="p">(</span><span class="nx">attrs</span> <span class="nx">authorizer</span><span class="p">.</span><span class="nx">Attributes</span><span class="p">)</span> <span class="nx">auditinternal</span><span class="p">.</span><span class="nx">RequestAuditConfigWithLevel</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">rule</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">p</span><span class="p">.</span><span class="nx">Rules</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 评估则是评估用户与用户组，verb，ns,非API资源 /metrics /healthz
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nf">ruleMatches</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">rule</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 通过后，则将这条规则与配置返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">return</span> <span class="nx">auditinternal</span><span class="p">.</span><span class="nx">RequestAuditConfigWithLevel</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Level</span><span class="p">:</span> <span class="nx">rule</span><span class="p">.</span><span class="nx">Level</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">RequestAuditConfig</span><span class="p">:</span> <span class="nx">auditinternal</span><span class="p">.</span><span class="nx">RequestAuditConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">OmitStages</span><span class="p">:</span>        <span class="nx">rule</span><span class="p">.</span><span class="nx">OmitStages</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="nx">OmitManagedFields</span><span class="p">:</span> <span class="nf">isOmitManagedFields</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">rule</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">OmitManagedFields</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 如果条件都不满足，则构建一个
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="nx">auditinternal</span><span class="p">.</span><span class="nx">RequestAuditConfigWithLevel</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Level</span><span class="p">:</span> <span class="nx">DefaultAuditLevel</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">RequestAuditConfig</span><span class="p">:</span> <span class="nx">auditinternal</span><span class="p">.</span><span class="nx">RequestAuditConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">OmitStages</span><span class="p">:</span>        <span class="nx">p</span><span class="p">.</span><span class="nx">OmitStages</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">OmitManagedFields</span><span class="p">:</span> <span class="nx">p</span><span class="p">.</span><span class="nx">OmitManagedFields</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/kubernetes/kubernetes/blob/e72eea92396503521f1acaab60a2975c13ffc618/staging/src/k8s.io/apiserver/pkg/audit/request.go#L48-L93">k8s.io/apiserver/pkg/audit/request.go.NewEventFromRequest</a> 创建出审计事件对象被上面 <a href="https://github.com/kubernetes/kubernetes/blob/e72eea92396503521f1acaab60a2975c13ffc618/staging/src/k8s.io/apiserver/pkg/endpoints/filters/audit.go#L125-L155">evaluatePolicyAndCreateAuditEvent</a> 返回</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// evaluatePolicyAndCreateAuditEvent is responsible for evaluating the audit
</span></span></span><span class="line"><span class="cl"><span class="c1">// policy configuration applicable to the request and create a new audit
</span></span></span><span class="line"><span class="cl"><span class="c1">// event that will be written to the API audit log.
</span></span></span><span class="line"><span class="cl"><span class="c1">// - error if anything bad happened
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">evaluatePolicyAndCreateAuditEvent</span><span class="p">(</span><span class="nx">req</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">policy</span> <span class="nx">audit</span><span class="p">.</span><span class="nx">PolicyRuleEvaluator</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">audit</span><span class="p">.</span><span class="nx">AuditContext</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span> <span class="o">:=</span> <span class="nx">req</span><span class="p">.</span><span class="nf">Context</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">attribs</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">GetAuthorizerAttributes</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to GetAuthorizerAttributes: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ls</span> <span class="o">:=</span> <span class="nx">policy</span><span class="p">.</span><span class="nf">EvaluatePolicyRule</span><span class="p">(</span><span class="nx">attribs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">audit</span><span class="p">.</span><span class="nf">ObservePolicyLevel</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">ls</span><span class="p">.</span><span class="nx">Level</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">ls</span><span class="p">.</span><span class="nx">Level</span> <span class="o">==</span> <span class="nx">auditinternal</span><span class="p">.</span><span class="nx">LevelNone</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Don&#39;t audit.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="o">&amp;</span><span class="nx">audit</span><span class="p">.</span><span class="nx">AuditContext</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">RequestAuditConfig</span><span class="p">:</span> <span class="nx">ls</span><span class="p">.</span><span class="nx">RequestAuditConfig</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">requestReceivedTimestamp</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">request</span><span class="p">.</span><span class="nf">ReceivedTimestampFrom</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">requestReceivedTimestamp</span> <span class="p">=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ev</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">audit</span><span class="p">.</span><span class="nf">NewEventFromRequest</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">requestReceivedTimestamp</span><span class="p">,</span> <span class="nx">ls</span><span class="p">.</span><span class="nx">Level</span><span class="p">,</span> <span class="nx">attribs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to complete audit event from request: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">audit</span><span class="p">.</span><span class="nx">AuditContext</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">RequestAuditConfig</span><span class="p">:</span> <span class="nx">ls</span><span class="p">.</span><span class="nx">RequestAuditConfig</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Event</span><span class="p">:</span>              <span class="nx">ev</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>到这里，已经清楚的了解到，Kubernetes审计工作与什么位置了，而对于Kubernetes准入给出的登录（<em><strong>Authentication</strong></em>），授权 (<em><strong>Authorization</strong></em>) 与 准入控制 (<em><strong>Admission control</strong></em>) 三个阶段来说，Audition 位于授权之后，正如下图所示，而这个真正的流程在kubernetes中有个属于叫 <em><strong>handler chain</strong></em> 整个链条中，准入与审计只是其中一部分。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221128001225515.png" alt="image-20221128001225515"  /></p>
<center>图：Kubernetes 4A 的 handler chain</center><br>
<p>由图再结合代码可以看出，所有的客户端访问API都需要经过完整经由整个链条，而 Auditing 事件的构建是需要获取经由验证过的用户等资源构建出的事件，首次发生的为 <code>StageRequestReceived</code> ，这将在收到请求后执行，而由代码又可知，因为在最终结束掉整个请求时会执行 <code>WithAudit</code> 函数，这就为 <code>StageResponseComplete</code> 与 <code>StageResponseStarted</code> 这两个阶段被执行，而这个将发生在被注册的 handler 完成后，也就是  <em><strong>Admission control</strong></em> 后因为 AC 是在每个真实REST中被执行。TODO</p>
<h2 id="审计策略级别-supa-href22asup">审计策略级别 <sup><a href="#2">[2]</a></sup></h2>
<p>审计策略级别是控制审计记录将记录那些对象的数据内容，当事件被处理时，会按照配置的审计规则进行比较。而使用该功能需要 <em>kube-apiserver</em> 开启参数 <code>--audit-policy-file</code> 指定对应的配置，如果未指定则默认不记录任何事件，可供定义的级别有四个，被定义在 k8s.io/apiserver/pkg/apis/audit/v1/types.go 中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// LevelNone disables auditing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">LevelNone</span> <span class="nx">Level</span> <span class="p">=</span> <span class="s">&#34;None&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// LevelMetadata provides the basic level of auditing.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">LevelMetadata</span> <span class="nx">Level</span> <span class="p">=</span> <span class="s">&#34;Metadata&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// LevelRequest provides Metadata level of auditing, and additionally
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// logs the request object (does not apply for non-resource requests).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">LevelRequest</span> <span class="nx">Level</span> <span class="p">=</span> <span class="s">&#34;Request&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// LevelRequestResponse provides Request level of auditing, and additionally
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// logs the response object (does not apply for non-resource requests).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">LevelRequestResponse</span> <span class="nx">Level</span> <span class="p">=</span> <span class="s">&#34;RequestResponse&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>None</strong>： 不记录符合该规则的事件</li>
<li><strong>Metadata</strong>：只记录请求元数据（如User, timestamp, resources, verb），不记录请求和响应体。</li>
<li><strong>Request</strong>：记录事件元数据和请求体，不记录响应体。</li>
<li><strong>RequestResponse</strong>： 记录事件元数据，请求和响应体</li>
</ul>
<p>下面是Kubernetes官网给出的 Policy 的配置 <sup><a href="#2">[2]</a></sup></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">audit.k8s.io/v1</span><span class="w"> </span><span class="c"># This is required.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Policy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># omitStages 代表忽略该阶段所有请求事件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># RequestReceived 这里配置的指在RequestReceived阶段忽略所有请求事件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">omitStages</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="s2">&#34;RequestReceived&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 记录将以RequestResponse级别的格式记录pod更改</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">RequestResponse</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">group</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 这里资源的配置必须与RBAC配置的一致，pods将不支持pods/log这类子资源</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">resources</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;pods&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 如果需要配置子资源按照下列方式</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">Metadata</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">group</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">resources</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;pods/log&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;pods/status&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 不记录的资源为controller-leader的configmaps资源的请求</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">None</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">group</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">resources</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;configmaps&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">resourceNames</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;controller-leader&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 不记录用户为 &#34;system:kube-proxy&#34; 发起的对 endpoints与services资源的watch请求事件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">None</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">users</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;system:kube-proxy&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">verbs</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;watch&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">group</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w"> </span><span class="c"># core API group</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">resources</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;endpoints&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;services&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 每个登录成功的用户，都会被追加一个用户组为 &#34;system:authenticated&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 下述规则为不记录包含非资源类型的URL的已认证请求</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">None</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">userGroups</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;system:authenticated&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">nonResourceURLs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="s2">&#34;/api*&#34;</span><span class="w"> </span><span class="c"># Wildcard matching.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="s2">&#34;/version&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 记录kube-system名称空间configmap更改事件的请求体与元数据</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">Request</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">group</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w"> </span><span class="c"># core API group</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">resources</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;configmaps&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># This rule only applies to resources in the &#34;kube-system&#34; namespace.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># The empty string &#34;&#34; can be used to select non-namespaced resources.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">namespaces</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;kube-system&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 事件将记录所有名称空间内对于configmap与secret资源改变的元数据</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">Metadata</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">group</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w"> </span><span class="c"># core API group</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">resources</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;secrets&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;configmaps&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 记录对group为core与extensions下的资源类型请求的 请求体与元数据（request级别）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">Request</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">group</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w"> </span><span class="c"># core API group</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">group</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;extensions&#34;</span><span class="w"> </span><span class="c"># Version of group should NOT be included.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 这种属于泛规则，会记录所有上述其他之外的所有类型请求的元数据</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 类似于授权，小权限在前，* 最后</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">level</span><span class="p">:</span><span class="w"> </span><span class="l">Metadata</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Long-running requests like watches that fall under this rule will not</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># generate an audit event in RequestReceived.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">omitStages</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;RequestReceived&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="backend-supa-href33asup">Backend <sup><a href="#3">[3]</a></sup></h2>
<p>kubernetes目前为Auditing 提供了两个后端，日志方式与webhook方式，kubernetes审计事件会遵循 <code>audit.k8s.io</code> 结构写入到后端。</p>
<h3 id="日志模式配置">日志模式配置</h3>
<p>启用日志模式只需要配置几个参数 <sup><a href="#4">[4]</a></sup></p>
<ul>
<li><code>--audit-log-path</code> 写入审计事件的日志路径。这个是必须配置的否则默认输出到STDOUT</li>
<li><code>--audit-log-maxage</code>  审计日志文件保留的最大天数</li>
<li><code>--audit-log-maxbackup</code> 审计日志保留的的最大数量</li>
<li><code>--audit-log-maxsize</code> 审计日志文件最大大小（单位M）大于会切割</li>
</ul>
<p>例如配置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">--audit-policy-file<span class="o">=</span>/etc/kubernetes/audit-policy.yaml <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--audit-log-path<span class="o">=</span>/var/log/kubernetes/audit.log <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--audit-log-maxsize<span class="o">=</span>20M
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="webhook-supa-href55asup">webhook <sup><a href="#5">[5]</a></sup></h3>
<p>webhook是指审计事件将由 <em>kube-apiserver</em> 发送到webhook服务中记录，开启webhook只需要配置 <code>--audit-webhook-config-file</code> 与 <code>--audit-policy-file</code> 两个参数，而其他的则是对该模式的辅助</p>
<ul>
<li>
<p><code>--audit-webhook-config-file</code> ：webhook的配置文件，格式是kubeconfig类型，所有的信息不是kubernetes api配置，而是webhook相关信息</p>
</li>
<li>
<p><code>--audit-webhook-initial-backoff </code> ：第一次失败后重试事件，随后仍失败后将以指数方式退避重试</p>
</li>
<li>
<p><code>--audit-webhook-mode</code> ：发送至webhook的模式。 <em>batch</em>, <em>blocking</em>, <em>blocking-strict</em> 。</p>
</li>
</ul>
<p>例如配置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">--<span class="l">audit-policy-file=/etc/kubernetes/audit-policy.yaml \</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>--<span class="l">audit-webhook-config-file=/etc/kubernetes/auth/audit-webhook.yaml \</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>--<span class="l">audit-webhook-mode=batch \</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>对于initialBackoff 的退避重试则如代码所示 <a href="https://github.com/kubernetes/kubernetes/blob/e72eea92396503521f1acaab60a2975c13ffc618/staging/src/k8s.io/apiserver/pkg/server/options/audit.go#L584-L594">k8s.io/apiserver/pkg/server/options/audit.go</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">o</span> <span class="o">*</span><span class="nx">AuditWebhookOptions</span><span class="p">)</span> <span class="nf">newUntruncatedBackend</span><span class="p">(</span><span class="nx">customDial</span> <span class="nx">utilnet</span><span class="p">.</span><span class="nx">DialFunc</span><span class="p">)</span> <span class="p">(</span><span class="nx">audit</span><span class="p">.</span><span class="nx">Backend</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">groupVersion</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">schema</span><span class="p">.</span><span class="nf">ParseGroupVersion</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">GroupVersionString</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">webhook</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">pluginwebhook</span><span class="p">.</span><span class="nf">NewBackend</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">ConfigFile</span><span class="p">,</span> <span class="nx">groupVersion</span><span class="p">,</span> <span class="nx">webhook</span><span class="p">.</span><span class="nf">DefaultRetryBackoffWithInitialDelay</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">InitialBackoff</span><span class="p">),</span> <span class="nx">customDial</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;initializing audit webhook: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">webhook</span> <span class="p">=</span> <span class="nx">o</span><span class="p">.</span><span class="nx">BatchOptions</span><span class="p">.</span><span class="nf">wrapBackend</span><span class="p">(</span><span class="nx">webhook</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">webhook</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在函数 <a href="https://github.com/kubernetes/kubernetes/blob/e72eea92396503521f1acaab60a2975c13ffc618/staging/src/k8s.io/apiserver/pkg/util/webhook/webhook.go#L42-L49">k8s.io/apiserver/pkg/util/webhook/webhook.go.DefaultRetryBackoffWithInitialDelay</a> 中看到 通过 wait.Backoff 进行的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="k">return</span> <span class="nx">wait</span><span class="p">.</span><span class="nx">Backoff</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 时间间隔，用于调用 Step 方法时返回的时间间隔
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">Duration</span><span class="p">:</span> <span class="nx">initialBackoffDelay</span><span class="p">,</span>  
</span></span><span class="line"><span class="cl">   	
</span></span><span class="line"><span class="cl">    <span class="c1">// 用于计算下次的时间间隔，不能为负数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// Factor 大于 0 时，Backoff 在计算下次的时间间隔时都会根据 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// Duration * Factor，Factor * Duration 不能大于 Cap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">Factor</span><span class="p">:</span>   <span class="mf">1.5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// 抖动，Jitter &gt; 0 时，每次迭代的时间间隔都会额外加上 0 - Duration * Jitter 的随机时间,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 并且抖动出的时间不会设置为 Duration，而且不受 Caps 的限制
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">Jitter</span><span class="p">:</span>   <span class="mf">0.2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// 进行指数回退(*Factor) 操作的次数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 当 Factor * Duration &gt; Cap 时 Steps 会被设置为 0, Duration 设置为 Cap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 也就是说后续的迭代时间间隔都会返回 Duration
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">Steps</span><span class="p">:</span>    <span class="mi">5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// 还有一个cap（Cap time.Duration），是最大的时间间隔
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="批处理">批处理</h3>
<p>日志后端与webhook后端都支持批处理模式，默认值为webhook默认开启batch，而log则被禁用</p>
<ul>
<li><code>--audit-log-mode/--audit-webhook-mode</code> ：参数通过将webhook替换为log则为对应的 batch 模式的参数，可以通过 <code>kube-apiserver --help|grep &quot;audit&quot;|grep batch</code> 查看
<ul>
<li><code>batch</code> 默认值，缓冲事件进行异步批量处理
<ul>
<li><code>--audit-webhook-batch-buffer-size</code>：批处理之前要缓冲的事件数。如果传入事件的溢出，则被丢弃。</li>
<li><code>--audit-webhook-batch-max-size</code>：定义每一批中的最大事件数</li>
<li><code>--audit-webhook-batch-max-wait</code>：批处理队列未满时等待的事件，到时强制写入一次</li>
<li><code>--audit-webhook-batch-throttle-qps</code>：定义每秒最大平均批次</li>
<li><code>--audit-webhook-batch-throttle-burst</code>：如果之前还没使用throttle-qps之前，发送的最大批数，通常情况下为第一次启动时生效的参数</li>
</ul>
</li>
<li><code>blocking</code> 阻止 apiserver 处理每个单独事件</li>
<li><code>blocking-strict</code>：与 <em>blocking</em> 相同，但当 <em>RequestReceived</em> 阶段的审计日志记录失败时，对 kube-apiserver 的整个请求都将失败</li>
</ul>
</li>
</ul>
<h2 id="参数调整">参数调整</h2>
<p>适当的调整参数与策略可以有效适应 <em>kuber-apiserver</em> 的负载，如在记录日志时应只记录所需的事件，而不是所有的事件，这样可以避免 APIServer不必要开销，例如：</p>
<ul>
<li>每个请求存在多个阶段，而审计时其实不关心响应等信息，可以只记录 <code>RequestReceived</code> 的 <code>metadata</code> 级别。</li>
<li>&ldquo;pods/log&rdquo;, &ldquo;pods/status&rdquo; 在记录时应该区分子资源类型，而不要直接写 <em><code>pods</code></em> 或 <em><code>pods/*</code></em></li>
<li>kubernetes系统组件内的事件如果没有特殊要求可以不记录</li>
<li>对于资源类型，如configmap的请求其实没必要记录</li>
<li>审计记录应严格按照外部用户记录，而不是所有请求</li>
</ul>
<p>如何适配APIServer的负载能力，正如官方给的示例一样，如果 <em>kube-apiserver</em> 每秒收到100个请求，而记录事件为 <code>ResponseStarted</code> 和<code>ResponseComplete</code> 阶段，此时会记录的条数约 200/s ，如果batch缓冲区为100，那么需要配置的参数至少2Qps/s。再假设后端处理能力为5秒，那么缓冲区需要配置的大小至少为5秒的事件，即1000条evnet，10个batch。正如下图所示：</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/624219-20220802143739996-2062420228.png" alt="img"  /></p>
<center>图：审计批处理参数调优结构图</center>
<center><em>Source：</em>https://www.cnblogs.com/zhangmingcheng/p/16539514.html</center><br>
<p>而kube-apiserver提供了两个Prometheus指标可以用于监控审计子系统的状态</p>
<ul>
<li><code>apiserver_audit_event_total</code> 审计事件的总数</li>
<li><code>apiserver_audit_error_total</code> 由于错误而被丢弃的审计事件总数，例如panic类型事件</li>
</ul>
<h2 id="实验audit-webhook">实验：Audit Webhook</h2>
<p>编写一个webhook，用于处理接收到的日志，这里直接打印</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">serveAudit</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">b</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">httpError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">eventList</span> <span class="nx">audit</span><span class="p">.</span><span class="nx">EventList</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="p">=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">eventList</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Json convert err: &#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">httpError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">event</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">eventList</span><span class="p">.</span><span class="nx">Items</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// here is your logic
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;审计ID %s: 用户&lt;%s&gt;, 请求对象&lt;%s&gt;, 操作&lt;%s&gt;, 请求阶段&lt;%s&gt;\n&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">event</span><span class="p">.</span><span class="nx">AuditID</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">event</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">UID</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">event</span><span class="p">.</span><span class="nx">RequestURI</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">event</span><span class="p">.</span><span class="nx">Verb</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">event</span><span class="p">.</span><span class="nx">Stage</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">w</span><span class="p">.</span><span class="nf">WriteHeader</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>当使用命令执行查看Pod的操作时，会看到webhook收到的下述审计日志</p>
<p>操作命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="k">for</span> n in <span class="sb">`</span>seq <span class="m">1</span> 100<span class="sb">`</span><span class="p">;</span> <span class="k">do</span> kubectl get pod --user<span class="o">=</span>admin<span class="p">;</span> <span class="k">done</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>审计日志</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">审计ID c0313416-f950-4361-9823-7c4792b143fd: 用户&lt;admin&gt;, 请求对象&lt;/api/v1/namespaces/default/pods?limit=500&gt;, 操作&lt;list
</span></span><span class="line"><span class="cl">&gt;, 请求阶段&lt;ResponseComplete&gt;
</span></span><span class="line"><span class="cl">审计ID db2390c1-83cf-42e7-b589-70cd04003d0e: 用户&lt;admin&gt;, 请求对象&lt;/api/v1/namespaces/default/pods?limit=500&gt;, 操作&lt;list
</span></span><span class="line"><span class="cl">&gt;, 请求阶段&lt;ResponseComplete&gt;
</span></span><span class="line"><span class="cl">审计ID a8fc2ff9-d0c5-4263-901c-b5974fd58026: 用户&lt;admin&gt;, 请求对象&lt;/api/v1/namespaces/default/pods?limit=500&gt;, 操作&lt;list
</span></span><span class="line"><span class="cl">&gt;, 请求阶段&lt;ResponseComplete&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结">总结</h2>
<p>kubernetes通过插件的方式提供了提供了一个IT系统 4A模型为集群提供了安全保障，与传统的4A (<em><strong>Authentication</strong></em>, <em><strong>Authorization</strong></em>, <em><strong>Accounting</strong></em>, <em><strong>Auditing</strong></em>) 不同的是，对于 <em>Accounting</em> 与 <em>Authentication</em> 在kubernetes中设计来说 Kubernetes没有用户的实现而是一个抽象，这使得Kubernetes可以更灵活使用任意的用户系统完成登录（OID, X.509, webhook, proxy, SA&hellip;.），而对于授权来说，Kubernetes 通过多种授权模型(RBAC, ABAC, Node, Webhook)，为集群提供了灵活的权限；而不同的是，通过 <em><strong>Admission Control</strong></em> 可以为集群提供更多的安全策略，例如镜像策略，通过三方提供的控制器来自定义更多的安全策略，如OPA。而这种设计为Kubernetes集群提供了一种更灵活的安全。</p>
<h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://kubernetes.io/docs/tasks/debug/debug-cluster/audit/"><em><strong>Auditing</strong></em></a></p>
<p><sup id="2">[2]</sup> <a href="https://kubernetes.io/docs/tasks/debug/debug-cluster/audit/#audit-policy"><em><strong>Audit policy</strong></em></a></p>
<p><sup id="3">[3]</sup> <a href="https://kubernetes.io/docs/tasks/debug/debug-cluster/audit/#audit-backends"><em><strong>Audit backends</strong></em></a></p>
<p><sup id="4">[4]</sup> <a href="https://kubernetes.io/docs/tasks/debug/debug-cluster/audit/#log-backend"><em><strong>Log backend</strong></em></a></p>
<p><sup id="5">[5]</sup> <a href="https://kubernetes.io/docs/tasks/debug/debug-cluster/audit/#webhook-backend"><em><strong>Webhook backend</strong></em></a></p>
<p><sup id="6">[6]</sup> <a href="https://kubernetes.io/docs/tasks/debug/debug-cluster/audit/#batching"><em><strong>Event batching</strong></em></a></p>
<p><sup id="7">[7]</sup> <a href="https://kubernetes.io/docs/tasks/debug/debug-cluster/audit/#parameter-tuning"><em><strong>Parameter tuning</strong></em></a></p>
<p><sup id="8">[8]</sup> <a href="https://ldapwiki.com/wiki/Privilege%20Management%20Infrastructure"><em><strong>Privilege Management Infrastructure</strong></em></a></p>
<p><sup id="9">[9]</sup> <a href="https://www.cnblogs.com/zhangmingcheng/p/16539514.html"><em><strong>Kubernetes 审计（Auditing）功能详解</strong></em></a></p>
<p><sup id="10">[10]</sup> <a href="https://blog.tianfeiyu.com/2019/01/30/k8s-audit-webhook/"><em><strong>kubernetes 审计日志功能</strong></em></a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>深入理解Kubernetes 4A - Authorization源码解析</title>
      <link>https://www.oomkill.com/2022/11/ch32-authorization/</link>
      <pubDate>Thu, 24 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/11/ch32-authorization/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>在 Kubernetes 中，当一个访问请求通过了登录阶段（<em><strong>Authentication</strong></em>），必须还需要请求拥有该对象的访问权限，而授权部分也是Kubernetes API 访问控制中的第二个部分 <em><strong>Authorization</strong></em> .</p>
<p><em><strong>Authorization</strong></em> 在 Kubernetes中是以评估发起请求的用户，根据其身份特性评估这次请求是被 ”拒绝“ 还是 “允许”，同访问控制三部曲中其他两个插件 (<em><strong>Authentication</strong></em>, <em><strong>Adminssion Control</strong></em>) 一样，<em><strong>Authorization</strong></em> 也可以同时配置多个，当收到用户的请求时，会依次检查这个阶段配置的所有模块，如果任何一个模块对该请求授予权限（拒绝或允许），那么该阶段会直接返回，当所有模块都没有该用户所属的权限时，默认是拒绝，在Kubernetes中，被该插件拒绝的用户显示为HTTP 403。</p>
<p>如有错别字或理解错误地方请多多担待，代码是以1.24进行整理，实验是以1.19环境进行，差别不大</p>
<p><strong>objective</strong>：</p>
<ul>
<li>了解kubernetes Authorization机制</li>
<li>了解授权系统的设计</li>
<li>完成实验，使用 OPA 作为 Kubernetes 外部用户，权限认证模型 <em>RBAC</em> 的替代品</li>
</ul>
<h2 id="kubernetes是如何对用户授权的">Kubernetes是如何对用户授权的</h2>
<p>kubernetes对用户授权需要遵守的shema必须拥有下列属性，代码位于<a href="https://github.com/kubernetes/kubernetes/blob/57eb5d631ccd615cd161b6da36afc759af004b93/pkg/apis/authorization/types.go#L27-L36">pkg\apis\authorization\types.go</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">SubjectAccessReview</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// API必须实现的部分
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">metav1</span><span class="p">.</span><span class="nx">TypeMeta</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMeta</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 请求需要遵守的属性
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Spec</span> <span class="nx">SubjectAccessReviewSpec</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 请求被授权的状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Status</span> <span class="nx">SubjectAccessReviewStatus</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里可以看到数据模型是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">SubjectAccessReviewSpec</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ResourceAttributes describes information for a resource access request
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ResourceAttributes</span> <span class="o">*</span><span class="nx">ResourceAttributes</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// NonResourceAttributes describes information for a non-resource access request
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">NonResourceAttributes</span> <span class="o">*</span><span class="nx">NonResourceAttributes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 请求的用户，必填
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果只传递 User，而没有Group，那么权限必须与用户对应，例如rolebinding/clusterrolebing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果传递了User与Group，那么rolebinding/clusterrolebing权限最大为Group，最小为User
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">User</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Groups是用户所属组，可以有多个
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Groups</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 这里通常对于验证和授权阶段，没有特别的需求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Extra</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">ExtraValue</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// UID 请求用户的UID，通常来说与User相同，Authentication中也是这么做的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">UID</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>由此可得知，在授权部分，kubernetes要求请求必须存在</p>
<ul>
<li><strong>用户类属性</strong>：<strong>user</strong>，<strong>group</strong> ，<strong>extra</strong>  由 <em><strong>Authentication</strong></em> 提供的用户信息</li>
<li><strong>请求类属性</strong>：
<ul>
<li><strong>API资源</strong>： <code>curl $API_SERVER_URL/api/v1/namespaces</code></li>
<li><strong>请求路径</strong>： 非API资源格式的路径，<code>/api</code>，<code>/healthz</code></li>
<li><strong>verb</strong>：HTTP请求方法，GET，POST..</li>
</ul>
</li>
<li>资源类属性：
<ul>
<li>访问的资源的名称或ID，如Pod名</li>
<li>要访问的名称空间</li>
<li>资源所属组，Kubernetes资源有GVR组成</li>
</ul>
</li>
</ul>
<p>那么，<code>SubjectAccessReview.Spec</code> 为要审查的对象，<code>SubjectAccessReview.Status</code> 为审查结果，通常在每个请求到来时，入库前必定被审查</p>
<h2 id="kubernetes中的授权模式">Kubernetes中的授权模式</h2>
<p>知道授权的对象，就需要知道如何对该对象进行授权，Kubernetes authorizer 提供了下列授权模式</p>
<p><a href="pkg/kubeapiserver/authorizer/modes/modes.go">pkg/kubeapiserver/authorizer/modes/modes.go</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ModeAlwaysAllow is the mode to set all requests as authorized
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ModeAlwaysAllow</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">&#34;AlwaysAllow&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ModeAlwaysDeny is the mode to set no requests as authorized
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ModeAlwaysDeny</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">&#34;AlwaysDeny&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ModeABAC is the mode to use Attribute Based Access Control to authorize
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ModeABAC</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">&#34;ABAC&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ModeWebhook is the mode to make an external webhook call to authorize
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ModeWebhook</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">&#34;Webhook&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ModeRBAC is the mode to use Role Based Access Control to authorize
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ModeRBAC</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">&#34;RBAC&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// ModeNode is an authorization mode that authorizes API requests made by kubelets.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ModeNode</span> <span class="kt">string</span> <span class="p">=</span> <span class="s">&#34;Node&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看出，大致遵循模式进行授权</p>
<ul>
<li>ModeABAC (<em><strong>Attribute-based access control</strong></em>)：是一种将属性分组，而后属性组分配给用户的模型，通常情况下这种模型很少使用</li>
<li>ModeRBAC (<em><strong>Role Based Access Control</strong></em>) ：是kubernetes主流的授权模型，是将用户分组，将属性分配给用户组的一种模型</li>
<li>ModeNode：对kubelet授权的方式</li>
<li>ModeWebhook：用户注入给Kubernetes 授权插件进行回调的一种授权模式</li>
</ul>
<h2 id="kubernetes-授权生命周期">Kubernetes 授权生命周期</h2>
<p>在启动 <code>kube-apiserver</code> 是都会初始化被注入一个 <code>Authorizer</code> 而这个被上面模式进行实现，如 <code>RBACAuthorizer</code> ,  <code>WebhookAuthorizer</code> <a href="https://github.com/kubernetes/kubernetes/blob/release-1.24/staging/src/k8s.io/apiserver/pkg/authorization/authorizer/interfaces.go">k8s.io/apiserver/pkg/authorization/authorizer/interfaces.go</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Authorizer</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Authorize</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">a</span> <span class="nx">Attributes</span><span class="p">)</span> <span class="p">(</span><span class="nx">authorized</span> <span class="nx">Decision</span><span class="p">,</span> <span class="nx">reason</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在 Run 中会创建一个CreateServerChain，这里面可以看到对应注册进来的  <code>Authorizer </code>  <a href="https://github.com/kubernetes/kubernetes/blob/d818028a1851891cdf934a543bb7ff959ec23d50/cmd/kube-apiserver/app/server.go#L155-L173">k8s.io\kubernetes\cmd\kube-apiserver\app\server.go</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Run runs the specified APIServer.  This should never exit.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">completeOptions</span> <span class="nx">completedServerRunOptions</span><span class="p">,</span> <span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// To help debugging, immediately log version
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Version: %+v&#34;</span><span class="p">,</span> <span class="nx">version</span><span class="p">.</span><span class="nf">Get</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Golang settings&#34;</span><span class="p">,</span> <span class="s">&#34;GOGC&#34;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;GOGC&#34;</span><span class="p">),</span> <span class="s">&#34;GOMAXPROCS&#34;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;GOMAXPROCS&#34;</span><span class="p">),</span> <span class="s">&#34;GOTRACEBACK&#34;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;GOTRACEBACK&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">server</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">CreateServerChain</span><span class="p">(</span><span class="nx">completeOptions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">prepared</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">server</span><span class="p">.</span><span class="nf">PrepareRun</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">prepared</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到在创建这个 <code>Authorizer </code>  时会调用一个 <code>BuildAuthorizer</code> 构建这个 <code>Authorizer </code></p>
<p><a href="https://github.com/kubernetes/kubernetes/blob/d818028a1851891cdf934a543bb7ff959ec23d50/cmd/kube-apiserver/app/server.go#L448">k8s.io/kubernetes/cmd/kube-apiserver/app/server.go</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">buildGenericConfig</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span> <span class="o">*</span><span class="nx">options</span><span class="p">.</span><span class="nx">ServerRunOptions</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">proxyTransport</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Transport</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">genericConfig</span> <span class="o">*</span><span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">versionedInformers</span> <span class="nx">clientgoinformers</span><span class="p">.</span><span class="nx">SharedInformerFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">serviceResolver</span> <span class="nx">aggregatorapiserver</span><span class="p">.</span><span class="nx">ServiceResolver</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pluginInitializers</span> <span class="p">[]</span><span class="nx">admission</span><span class="p">.</span><span class="nx">PluginInitializer</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">admissionPostStartHook</span> <span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">PostStartHookFunc</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">storageFactory</span> <span class="o">*</span><span class="nx">serverstorage</span><span class="p">.</span><span class="nx">DefaultStorageFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lastErr</span> <span class="kt">error</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">Authorization</span><span class="p">.</span><span class="nx">Authorizer</span><span class="p">,</span> <span class="nx">genericConfig</span><span class="p">.</span><span class="nx">RuleResolver</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nf">BuildAuthorizer</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">genericConfig</span><span class="p">.</span><span class="nx">EgressSelector</span><span class="p">,</span> <span class="nx">versionedInformers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lastErr</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;invalid authorization config: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在代码 <code>BuildAuthorizer</code> 中构建了这个 <code>Authorizer</code> 其中可以看到 s 为 <code>kube-apiserver</code> 对于授权阶段的参数，例如参数，使用哪些模式 <code>--authorization-mode</code>，使用的webhook的配置 <code>--authentication-token-webhook-config-file</code> 等，通过传入的参数来决定这些</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// BuildAuthorizer constructs the authorizer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">BuildAuthorizer</span><span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">options</span><span class="p">.</span><span class="nx">ServerRunOptions</span><span class="p">,</span> <span class="nx">EgressSelector</span> <span class="o">*</span><span class="nx">egressselector</span><span class="p">.</span><span class="nx">EgressSelector</span><span class="p">,</span> <span class="nx">versionedInformers</span> <span class="nx">clientgoinformers</span><span class="p">.</span><span class="nx">SharedInformerFactory</span><span class="p">)</span> <span class="p">(</span><span class="nx">authorizer</span><span class="p">.</span><span class="nx">Authorizer</span><span class="p">,</span> <span class="nx">authorizer</span><span class="p">.</span><span class="nx">RuleResolver</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="c1">// 这里构建出  authorizer.Config
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">authorizationConfig</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Authorization</span><span class="p">.</span><span class="nf">ToAuthorizationConfig</span><span class="p">(</span><span class="nx">versionedInformers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">EgressSelector</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">egressDialer</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">EgressSelector</span><span class="p">.</span><span class="nf">Lookup</span><span class="p">(</span><span class="nx">egressselector</span><span class="p">.</span><span class="nx">ControlPlane</span><span class="p">.</span><span class="nf">AsNetworkContext</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">authorizationConfig</span><span class="p">.</span><span class="nx">CustomDial</span> <span class="p">=</span> <span class="nx">egressDialer</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">    <span class="c1">// 然后返回你开启的每一个webhook的模式的 authorizer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="nx">authorizationConfig</span><span class="p">.</span><span class="nf">New</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而对应这部分的数据结构如下所示  <a href="https://github.com/kubernetes/kubernetes/blob/d818028a1851891cdf934a543bb7ff959ec23d50/pkg/kubeapiserver/options/authorization.go#L34-L46">k8s.io/pkg/kubeapiserver/options/authorization.go</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// BuiltInAuthorizationOptions contains all build-in authorization options for API Server
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">BuiltInAuthorizationOptions</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Modes</span>                       <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">PolicyFile</span>                  <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">WebhookConfigFile</span>           <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">WebhookVersion</span>              <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">WebhookCacheAuthorizedTTL</span>   <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span></span><span class="line"><span class="cl">	<span class="nx">WebhookCacheUnauthorizedTTL</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// WebhookRetryBackoff specifies the backoff parameters for the authorization webhook retry logic.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// This allows us to configure the sleep time at each iteration and the maximum number of retries allowed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// before we fail the webhook call in order to limit the fan out that ensues when the system is degraded.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">WebhookRetryBackoff</span> <span class="o">*</span><span class="nx">wait</span><span class="p">.</span><span class="nx">Backoff</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>例如在客户端部分，如果需要授权，都会使用该操作，可以在代码 <a href="pkg/registry/authorization/subjectaccessreview/rest.go">k8s.io/pkg/registry/authorization/subjectaccessreview/rest.go</a>  中可以看到REST中会 authorizer.Authorize 去验证是否有权限操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">REST</span><span class="p">)</span> <span class="nf">Create</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">obj</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span><span class="p">,</span> <span class="nx">createValidation</span> <span class="nx">rest</span><span class="p">.</span><span class="nx">ValidateObjectFunc</span><span class="p">,</span> <span class="nx">options</span> <span class="o">*</span><span class="nx">metav1</span><span class="p">.</span><span class="nx">CreateOptions</span><span class="p">)</span> <span class="p">(</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">subjectAccessReview</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">obj</span><span class="p">.(</span><span class="o">*</span><span class="nx">authorizationapi</span><span class="p">.</span><span class="nx">SubjectAccessReview</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">apierrors</span><span class="p">.</span><span class="nf">NewBadRequest</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;not a SubjectAccessReview: %#v&#34;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">errs</span> <span class="o">:=</span> <span class="nx">authorizationvalidation</span><span class="p">.</span><span class="nf">ValidateSubjectAccessReview</span><span class="p">(</span><span class="nx">subjectAccessReview</span><span class="p">);</span> <span class="nb">len</span><span class="p">(</span><span class="nx">errs</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">apierrors</span><span class="p">.</span><span class="nf">NewInvalid</span><span class="p">(</span><span class="nx">authorizationapi</span><span class="p">.</span><span class="nf">Kind</span><span class="p">(</span><span class="nx">subjectAccessReview</span><span class="p">.</span><span class="nx">Kind</span><span class="p">),</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">errs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">createValidation</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">createValidation</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.</span><span class="nf">DeepCopyObject</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">authorizationAttributes</span> <span class="o">:=</span> <span class="nx">authorizationutil</span><span class="p">.</span><span class="nf">AuthorizationAttributesFrom</span><span class="p">(</span><span class="nx">subjectAccessReview</span><span class="p">.</span><span class="nx">Spec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">decision</span><span class="p">,</span> <span class="nx">reason</span><span class="p">,</span> <span class="nx">evaluationErr</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">authorizer</span><span class="p">.</span><span class="nf">Authorize</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">authorizationAttributes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">subjectAccessReview</span><span class="p">.</span><span class="nx">Status</span> <span class="p">=</span> <span class="nx">authorizationapi</span><span class="p">.</span><span class="nx">SubjectAccessReviewStatus</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Allowed</span><span class="p">:</span> <span class="p">(</span><span class="nx">decision</span> <span class="o">==</span> <span class="nx">authorizer</span><span class="p">.</span><span class="nx">DecisionAllow</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Denied</span><span class="p">:</span>  <span class="p">(</span><span class="nx">decision</span> <span class="o">==</span> <span class="nx">authorizer</span><span class="p">.</span><span class="nx">DecisionDeny</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Reason</span><span class="p">:</span>  <span class="nx">reason</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">evaluationErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">subjectAccessReview</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">EvaluationError</span> <span class="p">=</span> <span class="nx">evaluationErr</span><span class="p">.</span><span class="nf">Error</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">subjectAccessReview</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>authorizer.Authorize 会被实现在每一个该阶段的模式下，在 withAuthentication 构建了一个授权的 http.Handler 函数</p>
<p><a href="https://github.com/kubernetes/kubernetes/blob/d818028a1851891cdf934a543bb7ff959ec23d50/staging/src/k8s.io/apiserver/pkg/endpoints/filters/authorization.go#L45-L79">k8s.io/apiserver/pkg/endpoints/filters/authorization.go</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">WithAuthorization</span><span class="p">(</span><span class="nx">handler</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span><span class="p">,</span> <span class="nx">a</span> <span class="nx">authorizer</span><span class="p">.</span><span class="nx">Authorizer</span><span class="p">,</span> <span class="nx">s</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">NegotiatedSerializer</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">a</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Warning</span><span class="p">(</span><span class="s">&#34;Authorization is disabled&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">handler</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">http</span><span class="p">.</span><span class="nf">HandlerFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">req</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctx</span> <span class="o">:=</span> <span class="nx">req</span><span class="p">.</span><span class="nf">Context</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">attributes</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">GetAuthorizerAttributes</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">responsewriters</span><span class="p">.</span><span class="nf">InternalError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 这里调用了authorizer.Authorizer传入的authorizer来进行鉴权
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">authorized</span><span class="p">,</span> <span class="nx">reason</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">a</span><span class="p">.</span><span class="nf">Authorize</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">attributes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// an authorizer like RBAC could encounter evaluation errors and still allow the request, so authorizer decision is checked before error here.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">authorized</span> <span class="o">==</span> <span class="nx">authorizer</span><span class="p">.</span><span class="nx">DecisionAllow</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">audit</span><span class="p">.</span><span class="nf">AddAuditAnnotations</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">decisionAnnotationKey</span><span class="p">,</span> <span class="nx">decisionAllow</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">reasonAnnotationKey</span><span class="p">,</span> <span class="nx">reason</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">handler</span><span class="p">.</span><span class="nf">ServeHTTP</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">req</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">audit</span><span class="p">.</span><span class="nf">AddAuditAnnotation</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">reasonAnnotationKey</span><span class="p">,</span> <span class="nx">reasonError</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">responsewriters</span><span class="p">.</span><span class="nf">InternalError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Forbidden&#34;</span><span class="p">,</span> <span class="s">&#34;URI&#34;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">RequestURI</span><span class="p">,</span> <span class="s">&#34;Reason&#34;</span><span class="p">,</span> <span class="nx">reason</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">audit</span><span class="p">.</span><span class="nf">AddAuditAnnotations</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">decisionAnnotationKey</span><span class="p">,</span> <span class="nx">decisionForbid</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">reasonAnnotationKey</span><span class="p">,</span> <span class="nx">reason</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">responsewriters</span><span class="p">.</span><span class="nf">Forbidden</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">attributes</span><span class="p">,</span> <span class="nx">w</span><span class="p">,</span> <span class="nx">req</span><span class="p">,</span> <span class="nx">reason</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来在 createAggregatorConfig 调用了 BuildHandlerChainWithStorageVersionPrecondition 而又调用了</p>
<p><a href="https://github.com/kubernetes/kubernetes/blob/d818028a1851891cdf934a543bb7ff959ec23d50/cmd/kube-apiserver/app/aggregator.go#L56-L78">cmd/kube-apiserver/app/aggregator.go</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">createAggregatorConfig</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">kubeAPIServerConfig</span> <span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">commandOptions</span> <span class="o">*</span><span class="nx">options</span><span class="p">.</span><span class="nx">ServerRunOptions</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">externalInformers</span> <span class="nx">kubeexternalinformers</span><span class="p">.</span><span class="nx">SharedInformerFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">serviceResolver</span> <span class="nx">aggregatorapiserver</span><span class="p">.</span><span class="nx">ServiceResolver</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">proxyTransport</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Transport</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pluginInitializers</span> <span class="p">[]</span><span class="nx">admission</span><span class="p">.</span><span class="nx">PluginInitializer</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">aggregatorapiserver</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// make a shallow copy to let us twiddle a few things
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// most of the config actually remains the same.  We only need to mess with a couple items related to the particulars of the aggregator
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">genericConfig</span> <span class="o">:=</span> <span class="nx">kubeAPIServerConfig</span>
</span></span><span class="line"><span class="cl">	<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">PostStartHooks</span> <span class="p">=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">PostStartHookConfigEntry</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">RESTOptionsGetter</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// prevent generic API server from installing the OpenAPI handler. Aggregator server
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// has its own customized OpenAPI handler.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">SkipOpenAPIInstallation</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">utilfeature</span><span class="p">.</span><span class="nx">DefaultFeatureGate</span><span class="p">.</span><span class="nf">Enabled</span><span class="p">(</span><span class="nx">genericfeatures</span><span class="p">.</span><span class="nx">StorageVersionAPI</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">utilfeature</span><span class="p">.</span><span class="nx">DefaultFeatureGate</span><span class="p">.</span><span class="nf">Enabled</span><span class="p">(</span><span class="nx">genericfeatures</span><span class="p">.</span><span class="nx">APIServerIdentity</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Add StorageVersionPrecondition handler to aggregator-apiserver.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// The handler will block write requests to built-in resources until the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// target resources&#39; storage versions are up-to-date.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">genericConfig</span><span class="p">.</span><span class="nx">BuildHandlerChainFunc</span> <span class="p">=</span> <span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">BuildHandlerChainWithStorageVersionPrecondition</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而 <a href="https://github.com/kubernetes/kubernetes/blob/d818028a1851891cdf934a543bb7ff959ec23d50/staging/src/k8s.io/apiserver/pkg/server/config.go#L601-L655">k8s.io/apiserver/pkg/server/config.go</a> 返回这个函数 BuildHandlerChainWithStorageVersionPrecondition</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">handlerChainBuilder</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">handler</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span><span class="p">)</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nf">BuildHandlerChainFunc</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">apiServerHandler</span> <span class="o">:=</span> <span class="nf">NewAPIServerHandler</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Serializer</span><span class="p">,</span> <span class="nx">handlerChainBuilder</span><span class="p">,</span> <span class="nx">delegationTarget</span><span class="p">.</span><span class="nf">UnprotectedHandler</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">s</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">GenericAPIServer</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">discoveryAddresses</span><span class="p">:</span>         <span class="nx">c</span><span class="p">.</span><span class="nx">DiscoveryAddresses</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LoopbackClientConfig</span><span class="p">:</span>       <span class="nx">c</span><span class="p">.</span><span class="nx">LoopbackClientConfig</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">legacyAPIGroupPrefixes</span><span class="p">:</span>     <span class="nx">c</span><span class="p">.</span><span class="nx">LegacyAPIGroupPrefixes</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">admissionControl</span><span class="p">:</span>           <span class="nx">c</span><span class="p">.</span><span class="nx">AdmissionControl</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Serializer</span><span class="p">:</span>                 <span class="nx">c</span><span class="p">.</span><span class="nx">Serializer</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">AuditBackend</span><span class="p">:</span>               <span class="nx">c</span><span class="p">.</span><span class="nx">AuditBackend</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Authorizer</span><span class="p">:</span>                 <span class="nx">c</span><span class="p">.</span><span class="nx">Authorization</span><span class="p">.</span><span class="nx">Authorizer</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">delegationTarget</span><span class="p">:</span>           <span class="nx">delegationTarget</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">EquivalentResourceRegistry</span><span class="p">:</span> <span class="nx">c</span><span class="p">.</span><span class="nx">EquivalentResourceRegistry</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">HandlerChainWaitGroup</span><span class="p">:</span>      <span class="nx">c</span><span class="p">.</span><span class="nx">HandlerChainWaitGroup</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Handler</span><span class="p">:</span>                    <span class="nx">apiServerHandler</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">listedPathProvider</span><span class="p">:</span> <span class="nx">apiServerHandler</span><span class="p">,</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>只要知道哪里调用了 handlerChainBuilder 就知道了鉴权步骤在哪里了，可以看到 handlerChainBuilder 被传入了 apiServerHandler，而后被作为参数返回给 <code>listedPathProvider: &amp;GenericAPIServer{}</code></p>
<p>listedPathProvider在 <a href="https://github.com/kubernetes/kubernetes/blob/d818028a1851891cdf934a543bb7ff959ec23d50/staging/src/k8s.io/apiserver/pkg/server/genericapiserver.go#L282-L284">k8s.io/apiserver/pkg/server/genericapiserver.go</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">GenericAPIServer</span><span class="p">)</span> <span class="nf">ListedPaths</span><span class="p">()</span> <span class="p">[]</span><span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nx">listedPathProvider</span><span class="p">.</span><span class="nf">ListedPaths</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>ListedPaths() 又在代码  <a href="https://github.com/kubernetes/kubernetes/blob/d818028a1851891cdf934a543bb7ff959ec23d50/staging/src/k8s.io/apiserver/pkg/server/routes/index.go#L38-L47">k8s.io/apiserver/pkg/server/routes/index.go</a> 中被 构建成这个http服务</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// ListedPaths returns the paths that should be shown under /
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">a</span> <span class="o">*</span><span class="nx">APIServerHandler</span><span class="p">)</span> <span class="nf">ListedPaths</span><span class="p">()</span> <span class="p">[]</span><span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">handledPaths</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Extract the paths handled using restful.WebService
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ws</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">a</span><span class="p">.</span><span class="nx">GoRestfulContainer</span><span class="p">.</span><span class="nf">RegisteredWebServices</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">handledPaths</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">handledPaths</span><span class="p">,</span> <span class="nx">ws</span><span class="p">.</span><span class="nf">RootPath</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handledPaths</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">handledPaths</span><span class="p">,</span> <span class="nx">a</span><span class="p">.</span><span class="nx">NonGoRestfulMux</span><span class="p">.</span><span class="nf">ListedPaths</span><span class="p">()</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sort</span><span class="p">.</span><span class="nf">Strings</span><span class="p">(</span><span class="nx">handledPaths</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">handledPaths</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ServeHTTP serves the available paths.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">i</span> <span class="nx">IndexLister</span><span class="p">)</span> <span class="nf">ServeHTTP</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">responsewriters</span><span class="p">.</span><span class="nf">WriteRawJSON</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">StatusCode</span><span class="p">,</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">RootPaths</span><span class="p">{</span><span class="nx">Paths</span><span class="p">:</span> <span class="nx">i</span><span class="p">.</span><span class="nx">PathProvider</span><span class="p">.</span><span class="nf">ListedPaths</span><span class="p">()},</span> <span class="nx">w</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>至此，可以知道，每次请求时，我们在配置 <em>kube-apiserver</em> 配置的授权插件 <code>.authorizer.Authorize</code> ，而这个参数会被带至 <code>subjectAccessReview</code> 向下传递，其中 User,Group,Extra,UID 为 authentication 部分提供</p>
<h2 id="authorization-webhook">Authorization webhook</h2>
<p>Authorization webhook 位于 <a href="https://github.com/kubernetes/kubernetes/blob/d818028a1851891cdf934a543bb7ff959ec23d50/staging/src/k8s.io/apiserver/plugin/pkg/authorizer/webhook/webhook.go#L166-L247">k8s.io/apiserver/plugin/pkg/authorizer/webhook/webhook.go</a>，是通过 <em>kube-apiserver</em> 注入进来的配置，就是上面讲到的如果提供了配置就会加入这种类型的 Authorization 插件来认证。当配置此类型的授权插件，Authorize 会被调用，通过向注入的 URL 发起 REST 请求进行授权，请求对象是 <code>v1beta1.SubjectAccessReview</code></p>
<p>下面是请求的实例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">  &#34;apiVersion&#34;: &#34;authorization.k8s.io/v1beta1&#34;,
</span></span><span class="line"><span class="cl">  &#34;kind&#34;: &#34;SubjectAccessReview&#34;,
</span></span><span class="line"><span class="cl">  &#34;spec&#34;: {
</span></span><span class="line"><span class="cl">	&#34;resourceAttributes&#34;: {
</span></span><span class="line"><span class="cl">	  &#34;namespace&#34;: &#34;kittensandponies&#34;,
</span></span><span class="line"><span class="cl">	  &#34;verb&#34;: &#34;GET&#34;,
</span></span><span class="line"><span class="cl">	  &#34;group&#34;: &#34;group3&#34;,
</span></span><span class="line"><span class="cl">	  &#34;resource&#34;: &#34;pods&#34;
</span></span><span class="line"><span class="cl">	},
</span></span><span class="line"><span class="cl">	&#34;user&#34;: &#34;jane&#34;,
</span></span><span class="line"><span class="cl">	&#34;group&#34;: [
</span></span><span class="line"><span class="cl">	  &#34;group1&#34;,
</span></span><span class="line"><span class="cl">	  &#34;group2&#34;
</span></span><span class="line"><span class="cl">	]
</span></span><span class="line"><span class="cl">  }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>webhook 返回的格式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="c1">// 如果允许这个用户访问则返回这个格式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;apiVersion&#34;</span><span class="p">:</span> <span class="s2">&#34;authorization.k8s.io/v1beta1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;kind&#34;</span><span class="p">:</span> <span class="s2">&#34;SubjectAccessReview&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;allowed&#34;</span><span class="p">:</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 如果拒绝这个用户访问则返回这个格式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;apiVersion&#34;</span><span class="p">:</span> <span class="s2">&#34;authorization.k8s.io/v1beta1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;kind&#34;</span><span class="p">:</span> <span class="s2">&#34;SubjectAccessReview&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;status&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;allowed&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;reason&#34;</span><span class="p">:</span> <span class="s2">&#34;user does not have read access to the namespace&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于webhook来讲，只要接受请求保持上面格式，而返回格式为下属格式，就可以很好的将Kubernetes 权限体系接入到三方系统中，例如 <em><strong>open policy agent</strong></em>。</p>
<p>同样 webhook 也提供了  <code>Authorize</code> 函数，如同上面一样会被注入到每个handler中被执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">WebhookAuthorizer</span><span class="p">)</span> <span class="nf">Authorize</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">attr</span> <span class="nx">authorizer</span><span class="p">.</span><span class="nx">Attributes</span><span class="p">)</span> <span class="p">(</span><span class="nx">decision</span> <span class="nx">authorizer</span><span class="p">.</span><span class="nx">Decision</span><span class="p">,</span> <span class="nx">reason</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">r</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">authorizationv1</span><span class="p">.</span><span class="nx">SubjectAccessReview</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">user</span> <span class="o">:=</span> <span class="nx">attr</span><span class="p">.</span><span class="nf">GetUser</span><span class="p">();</span> <span class="nx">user</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">r</span><span class="p">.</span><span class="nx">Spec</span> <span class="p">=</span> <span class="nx">authorizationv1</span><span class="p">.</span><span class="nx">SubjectAccessReviewSpec</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">User</span><span class="p">:</span>   <span class="nx">user</span><span class="p">.</span><span class="nf">GetName</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">UID</span><span class="p">:</span>    <span class="nx">user</span><span class="p">.</span><span class="nf">GetUID</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Groups</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nf">GetGroups</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Extra</span><span class="p">:</span>  <span class="nf">convertToSARExtra</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nf">GetExtra</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">attr</span><span class="p">.</span><span class="nf">IsResourceRequest</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">r</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">ResourceAttributes</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">authorizationv1</span><span class="p">.</span><span class="nx">ResourceAttributes</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Namespace</span><span class="p">:</span>   <span class="nx">attr</span><span class="p">.</span><span class="nf">GetNamespace</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Verb</span><span class="p">:</span>        <span class="nx">attr</span><span class="p">.</span><span class="nf">GetVerb</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Group</span><span class="p">:</span>       <span class="nx">attr</span><span class="p">.</span><span class="nf">GetAPIGroup</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Version</span><span class="p">:</span>     <span class="nx">attr</span><span class="p">.</span><span class="nf">GetAPIVersion</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Resource</span><span class="p">:</span>    <span class="nx">attr</span><span class="p">.</span><span class="nf">GetResource</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Subresource</span><span class="p">:</span> <span class="nx">attr</span><span class="p">.</span><span class="nf">GetSubresource</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Name</span><span class="p">:</span>        <span class="nx">attr</span><span class="p">.</span><span class="nf">GetName</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">r</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">NonResourceAttributes</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">authorizationv1</span><span class="p">.</span><span class="nx">NonResourceAttributes</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Path</span><span class="p">:</span> <span class="nx">attr</span><span class="p">.</span><span class="nf">GetPath</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Verb</span><span class="p">:</span> <span class="nx">attr</span><span class="p">.</span><span class="nf">GetVerb</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">key</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">Spec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">w</span><span class="p">.</span><span class="nx">decisionOnError</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">entry</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">responseCache</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">key</span><span class="p">));</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">r</span><span class="p">.</span><span class="nx">Status</span> <span class="p">=</span> <span class="nx">entry</span><span class="p">.(</span><span class="nx">authorizationv1</span><span class="p">.</span><span class="nx">SubjectAccessReviewStatus</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">result</span> <span class="o">*</span><span class="nx">authorizationv1</span><span class="p">.</span><span class="nx">SubjectAccessReview</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// WithExponentialBackoff will return SAR create error (sarErr) if any.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">webhook</span><span class="p">.</span><span class="nf">WithExponentialBackoff</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">w</span><span class="p">.</span><span class="nx">retryBackoff</span><span class="p">,</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="kd">var</span> <span class="nx">sarErr</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">			<span class="kd">var</span> <span class="nx">statusCode</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nx">start</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nx">result</span><span class="p">,</span> <span class="nx">statusCode</span><span class="p">,</span> <span class="nx">sarErr</span> <span class="p">=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">subjectAccessReview</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">CreateOptions</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">			<span class="nx">latency</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Since</span><span class="p">(</span><span class="nx">start</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">statusCode</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">w</span><span class="p">.</span><span class="nx">metrics</span><span class="p">.</span><span class="nf">RecordRequestTotal</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Itoa</span><span class="p">(</span><span class="nx">statusCode</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">				<span class="nx">w</span><span class="p">.</span><span class="nx">metrics</span><span class="p">.</span><span class="nf">RecordRequestLatency</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Itoa</span><span class="p">(</span><span class="nx">statusCode</span><span class="p">),</span> <span class="nx">latency</span><span class="p">.</span><span class="nf">Seconds</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">sarErr</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">sarErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">w</span><span class="p">.</span><span class="nx">metrics</span><span class="p">.</span><span class="nf">RecordRequestTotal</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="s">&#34;&lt;error&gt;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">w</span><span class="p">.</span><span class="nx">metrics</span><span class="p">.</span><span class="nf">RecordRequestLatency</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="s">&#34;&lt;error&gt;&#34;</span><span class="p">,</span> <span class="nx">latency</span><span class="p">.</span><span class="nf">Seconds</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">sarErr</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span> <span class="nx">webhook</span><span class="p">.</span><span class="nx">DefaultShouldRetry</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to make webhook authorizer request: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">w</span><span class="p">.</span><span class="nx">decisionOnError</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">r</span><span class="p">.</span><span class="nx">Status</span> <span class="p">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">Status</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nf">shouldCache</span><span class="p">(</span><span class="nx">attr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Allowed</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">w</span><span class="p">.</span><span class="nx">responseCache</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">key</span><span class="p">),</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Status</span><span class="p">,</span> <span class="nx">w</span><span class="p">.</span><span class="nx">authorizedTTL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">w</span><span class="p">.</span><span class="nx">responseCache</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">key</span><span class="p">),</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Status</span><span class="p">,</span> <span class="nx">w</span><span class="p">.</span><span class="nx">unauthorizedTTL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">switch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Denied</span> <span class="o">&amp;&amp;</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Allowed</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">authorizer</span><span class="p">.</span><span class="nx">DecisionDeny</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Reason</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;webhook subject access review returned both allow and deny response&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Denied</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">authorizer</span><span class="p">.</span><span class="nx">DecisionDeny</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Reason</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Allowed</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">authorizer</span><span class="p">.</span><span class="nx">DecisionAllow</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Reason</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">authorizer</span><span class="p">.</span><span class="nx">DecisionNoOpinion</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Reason</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>执行 <code>webhook.Authorize()</code> 会执行 <code>w.subjectAccessReview.Create()</code> 在这里可以看到会发起一个POST请求将 <code>v1beta1.SubjectAccessReview</code> 传入给webhook</p>
<p><a href="https://github.com/kubernetes/kubernetes/blob/d818028a1851891cdf934a543bb7ff959ec23d50/staging/src/k8s.io/apiserver/plugin/pkg/authorizer/webhook/webhook.go#L317-L329">k8s.io/apiserver/plugin/pkg/authorizer/webhook/webhook.go.Create</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">subjectAccessReviewV1Client</span><span class="p">)</span> <span class="nf">Create</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">subjectAccessReview</span> <span class="o">*</span><span class="nx">authorizationv1</span><span class="p">.</span><span class="nx">SubjectAccessReview</span><span class="p">,</span> <span class="nx">opts</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">CreateOptions</span><span class="p">)</span> <span class="p">(</span><span class="nx">result</span> <span class="o">*</span><span class="nx">authorizationv1</span><span class="p">.</span><span class="nx">SubjectAccessReview</span><span class="p">,</span> <span class="nx">statusCode</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">result</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">authorizationv1</span><span class="p">.</span><span class="nx">SubjectAccessReview</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">restResult</span> <span class="o">:=</span> <span class="nx">t</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Post</span><span class="p">().</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Resource</span><span class="p">(</span><span class="s">&#34;subjectaccessreviews&#34;</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">VersionedParams</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">opts</span><span class="p">,</span> <span class="nx">scheme</span><span class="p">.</span><span class="nx">ParameterCodec</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Body</span><span class="p">(</span><span class="nx">subjectAccessReview</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">		<span class="nf">Do</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">restResult</span><span class="p">.</span><span class="nf">StatusCode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">statusCode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="p">=</span> <span class="nx">restResult</span><span class="p">.</span><span class="nf">Into</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="实验基于opa的rbac模型">实验：基于OPA的RBAC模型</h2>
<p>通过上面阐述，大致了解到kubernetes认证框架中的用户的分类以及认证的策略由哪些，实验的目的也是为了阐述一个结果，就是使用OIDC/webhook 是比其他方式更好的保护，管理kubernetes集群。首先在安全上，假设网络环境是不安全的，那么任意node节点遗漏 bootstrap  token文件，就意味着拥有了集群中最高权限；其次在管理上，越大的团队，人数越多，不可能每个用户都提供单独的证书或者token，要知道传统教程中讲到token在kubernetes集群中是永久有效的，除非你删除了这个secret/sa；而Kubernetes提供的插件就很好的解决了这些问题。</p>
<h3 id="实验环境">实验环境</h3>
<ul>
<li>一个kubernetes集群</li>
<li>了解OPA相关技术</li>
</ul>
<p><strong>实验大致分为以下几个步骤</strong>：</p>
<ul>
<li>建立一个HTTP服务器用于返回给kubernetes Authorization服务</li>
<li>查询用户操作是否有权限</li>
</ul>
<h3 id="实验开始">实验开始</h3>
<h4 id="编写webhook-authorization">编写webhook Authorization</h4>
<p>这里做的就是接收 <code>subjectAccessReview</code> ，将授权结果赋予 <code>subjectAccessReview.Status.Allowed</code> ，true/false，然后返回 <code>subjectAccessReview</code>  即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">serveAuthorization</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">b</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">httpError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Receied: &#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">subjectAccessReview</span> <span class="nx">authoV1</span><span class="p">.</span><span class="nx">SubjectAccessReview</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="p">=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">subjectAccessReview</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Json convert err: &#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">httpError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">subjectAccessReview</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Allowed</span> <span class="p">=</span> <span class="nx">rbac</span><span class="p">.</span><span class="nf">RBACChek</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">subjectAccessReview</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">b</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">subjectAccessReview</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Json convert err: &#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">httpError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Returning: &#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="编写rego">编写rego</h4>
<p>这里简单配置了两个权限，<em>admin</em> 组拥有所有操作权限，不包含 <code>watch</code> ，而 <em>conf</em> 组只能 <em>list</em>，在访问控制三部曲中，已授权的会增加一个组，例如 <code>system:authenticated</code> 代表被 <em>Authentication</em> 授予通过的用户，所以 Groups 为一个数组格式，这里检查为两个数组的交集 &gt; 1，则肯定代表这个用户拥有该组的权限。</p>
<p>实验中 <em>rego</em> 部分可以在 <a href="https://play.openpolicyagent.org/p/JFdryx8eqW">playground</a> 中测试</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">module</span> <span class="p">=</span> <span class="s">`package k8s
</span></span></span><span class="line"><span class="cl"><span class="s">import future.keywords.in
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">default allow = false
</span></span></span><span class="line"><span class="cl"><span class="s">admin_verbs := {&#34;create&#34;, &#34;list&#34;, &#34;delete&#34;, &#34;update&#34;}
</span></span></span><span class="line"><span class="cl"><span class="s">admin_groups := {&#34;admin&#34;}
</span></span></span><span class="line"><span class="cl"><span class="s">conf_groups := {&#34;conf&#34;}
</span></span></span><span class="line"><span class="cl"><span class="s">conf_verbs := {&#34;list&#34;}
</span></span></span><span class="line"><span class="cl"><span class="s">allow  {
</span></span></span><span class="line"><span class="cl"><span class="s">	groups := {v | v := input.spec.groups[_]}
</span></span></span><span class="line"><span class="cl"><span class="s">	count(admin_groups &amp; groups) &gt; 0
</span></span></span><span class="line"><span class="cl"><span class="s">	input.spec.resourceAttributes.verb in admin_verbs
</span></span></span><span class="line"><span class="cl"><span class="s">}
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">allow  {
</span></span></span><span class="line"><span class="cl"><span class="s">	groups := {v | v := input.spec.groups[_]}
</span></span></span><span class="line"><span class="cl"><span class="s">	count(conf_groups &amp; groups) &gt; 0
</span></span></span><span class="line"><span class="cl"><span class="s">	input.spec.resourceAttributes.verb in conf_verbs
</span></span></span><span class="line"><span class="cl"><span class="s">}
</span></span></span><span class="line"><span class="cl"><span class="s">`</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>下面编写 RBACChek 函数，由于go1.16提供了embed功能，就可以直接将 rego embed go中，最后<code>result.Allowed()</code>  如果 <em>input</em> 通过评估则为 <code>true</code> ，反之亦然</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">RBACChek</span><span class="p">(</span><span class="nx">req</span> <span class="o">*</span><span class="nx">authoV1</span><span class="p">.</span><span class="nx">SubjectAccessReview</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;\n%+v\n&#34;</span><span class="p">,</span> <span class="nx">req</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">query</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rego</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// query是要检查的模块，data是固定格式，这与playground中不一样，需要.allow
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// k8s是package
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">rego</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;data.k8s.allow&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rego</span><span class="p">.</span><span class="nf">Module</span><span class="p">(</span><span class="s">&#34;k8s.allow&#34;</span><span class="p">,</span> <span class="nx">module</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">).</span><span class="nf">PrepareForEval</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">result</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">query</span><span class="p">.</span><span class="nf">Eval</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">rego</span><span class="p">.</span><span class="nf">EvalInput</span><span class="p">(</span><span class="nx">req</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;evaluation error:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;undefined result&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">result</span><span class="p">.</span><span class="nf">Allowed</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="配置kube-apiserver">配置kube-apiserver</h4>
<p>Authorization webhook 与其他 webhook 一样，启用的方法也是修改 <em>kube-apiserver</em> 参数，并指定 <code>kubeconfig</code> 类型的配置文件，其中对于 Kubernetes 集群来说 <code>kubeconfig</code> 是 kubernetes 客户端访问的信息，而 webhook 这里的 <code>kubeconfig</code> 配置文件要填写的则是 webhook的信息，其中 user,cluster,contexts 属性均为 webhook的配置信息 <sup><a href="#1">[1]</a></sup>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">clusters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">cluster</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">server</span><span class="p">:</span><span class="w"> </span><span class="l">http://10.0.0.1:88/authorization</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">insecure-skip-tls-verify</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">authorizator</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">users</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">webhook-authorizator</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">current-context</span><span class="p">:</span><span class="w"> </span><span class="l">webhook-authorizator@authorizator</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">contexts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">context</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cluster</span><span class="p">:</span><span class="w"> </span><span class="l">authorizator</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">user</span><span class="p">:</span><span class="w"> </span><span class="l">webhook-authorizator</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">webhook-authorizator@authorizator</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>修改 <em>kube-apiserver</em> 参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">--<span class="l">authorization-webhook-config-file=/etc/kubernetes/auth/authorization-webhook.conf \</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 1s 是为了在测试时减少等待的时间，否则缓存太长不会走webhook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>--<span class="l">authorization-webhook-cache-authorized-ttl=1s \</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>--<span class="l">authorization-webhook-cache-unauthorized-ttl=1s \</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># api版本建议还是指定下，因为v1与v1beta1的 subjectAccessReview 内容不同rego因为格式问题会为空从而false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 代码中schema v1与v1beta1相同，测试时收到的请求的格式不一样，没找到原因 TODO</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>--<span class="l">authorization-webhook-version=v1 \</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="验证结果">验证结果</h3>
<p>准备三个外部用户，admin,admin1,searchUser，admin,admin1 为 admin 组，拥有所有权限，searchUser 为 conf 组，仅能 list 操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">admin</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">user</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">token</span><span class="p">:</span><span class="w"> </span><span class="l">admin@111</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">admin1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">user</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">token</span><span class="p">:</span><span class="w"> </span><span class="l">admin1@111</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">searchUser</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">user</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">token</span><span class="p">:</span><span class="w"> </span><span class="l">searchUser@111</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>测试用户 searchUser ，可以看到只能list操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl get pod --user<span class="o">=</span>searchUser
</span></span><span class="line"><span class="cl">NAME                      READY   STATUS             RESTARTS   AGE
</span></span><span class="line"><span class="cl">netbox-85865d5556-hfg6v   1/1     Running            <span class="m">0</span>          96d
</span></span><span class="line"><span class="cl">netbox-85865d5556-vlgr4   1/1     Running            <span class="m">0</span>          96d
</span></span><span class="line"><span class="cl">pod                       0/1     CrashLoopBackOff   <span class="m">95</span>         22h
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ kubectl delete pod pod --user<span class="o">=</span>searchUser
</span></span><span class="line"><span class="cl">Error from server <span class="o">(</span>Forbidden<span class="o">)</span>: pods <span class="s2">&#34;pod&#34;</span> is forbidden: User <span class="s2">&#34;searchUser&#34;</span> cannot delete resource <span class="s2">&#34;pods&#34;</span> in API group <span class="s2">&#34;&#34;</span> in the namespace <span class="s2">&#34;default&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>测试用户 admin，可以看出可以进行写与查看的操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl delete pod pod --user<span class="o">=</span>admin
</span></span><span class="line"><span class="cl">pod <span class="s2">&#34;pod&#34;</span> deleted
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ kubectl get pod --user<span class="o">=</span>admin
</span></span><span class="line"><span class="cl">NAME                      READY   STATUS    RESTARTS   AGE
</span></span><span class="line"><span class="cl">netbox-85865d5556-hfg6v   1/1     Running   <span class="m">0</span>          96d
</span></span><span class="line"><span class="cl">netbox-85865d5556-vlgr4   1/1     Running   <span class="m">0</span>          96d
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结">总结</h2>
<p>kubernetes 提供了 Authentication,Authorization,Adminsion Control,Audit 几种webhook，可以自行在Kubernetes之上实现一个4A的标准，Authorization部分提供了一个并行与，但脱离Kubernetes的授权系统，使得外部用户可以很灵活的被授权，而不是手动管理多个clusterrolebinding,rolebingding 之类的资源。</p>
<p>实验中使用了OPA，这里是将rego静态文件embed入go中，在正常情况下OPA给出的架构如下图所示，存在一个 <em><strong>OPA Service</strong></em>，来进行验证，而实验中是直接嵌入到go中，OPA本身也提供了 <em><strong>HTTP Service</strong></em>，可以直接编译运行为 HTTP服务  <sup><a href="#2">[2]</a></sup>。 TODO</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/image-20221124224618920.png" alt="image-20221124224618920"  /></p>
<center>图：OPA 架构</center>
<center><em>Source：</em>https://www.openpolicyagent.org/docs/latest/</center><br>
<p>OPA本身提供了 Gatekeeper ，可以作为Kubernetes 资源使用，官方示例是作为为一个kubernetes准入网关，也提供了ingress浏览的验证 <sup><a href="#3">[3]</a></sup></p>
<blockquote>
<p>Notes：实验中还需要注意的一点则是，如果RBAC与webhook同时验证时，需要合理的规划权限，例如集群组件的账户，coreDNS，flannel等，也会被拒绝（在OPA设置的 <code>default allow = false</code> ）。</p>
</blockquote>
<h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://kubernetes.io/docs/reference/access-authn-authz/webhook/"><em><strong>Webhook Mode</strong></em></a></p>
<p><sup id="2">[2]</sup> <a href="https://www.openpolicyagent.org/docs/latest/http-api-authorization/"><em><strong>HTTP APIs</strong></em></a></p>
<p><sup id="3">[3]</sup> <a href="https://www.openpolicyagent.org/docs/latest/kubernetes-introduction/#what-is-opa-gatekeeper"><em><strong>What is OPA Gatekeeper?</strong></em></a></p>
<p><sup id="4">[4]</sup> <a href="https://blog.haohtml.com/archives/31514"><em><strong>用 Goalng 开发 OPA 策略</strong></em></a></p>
<p><sup id="5">[5]</sup> <a href="https://blog.wu-boy.com/2021/04/setup-rbac-role-based-access-control-using-open-policy-agent/"><em><strong>初探 Open Policy Agent 實作 RBAC (Role-based access control) 權限控管</strong></em></a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>深入理解Kubernetes 4A - Authentication源码解析</title>
      <link>https://www.oomkill.com/2022/11/ch31-authentication/</link>
      <pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/11/ch31-authentication/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<blockquote>
<p>本文是关于Kubernetes 4A解析的第一章</p>
<ul>
<li>深入理解Kubernetes 4A - Authentication源码解析</li>
<li><a href="https://cylonchau.github.io/kubernetes-authorization.html">深入理解Kubernetes 4A - Authorization源码解析</a></li>
<li><a href="https://cylonchau.github.io/ch3.7-admission-webhook.html">深入理解Kubernetes 4A - Admission Control源码解析</a></li>
<li><a href="https://cylonchau.github.io/kubernetes-auditing.html">深入理解Kubernetes 4A - Audit源码解析</a></li>
</ul>
<p>所有关于Kubernetes 4A部分代码上传至仓库 github.com/cylonchau/hello-k8s-4A</p>
</blockquote>
<p>本章主要简单阐述kubernetes 认证相关原理，最后以实验来阐述kubernetes用户系统的思路</p>
<p><strong>objective</strong>：</p>
<ul>
<li>了解kubernetes 各种认证机制的原理</li>
<li>了解kubernetes 用户的概念</li>
<li>了解kubernetes authentication webhook</li>
<li>完成实验，如何将其他用户系统接入到kubernetes中的一个思路</li>
</ul>
<p>如有错别字或理解错误地方请多多担待，代码是以1.24进行整理，实验是以1.19环境进行，差别不大。</p>
<h2 id="kubernetes-认证">Kubernetes 认证</h2>
<p>在Kubernetes apiserver对于认证部分所描述的，对于所有用户访问Kubernetes API（通过任何客户端，客户端库，<code>kubectl</code> 等）时都会经历 验证 (<em><strong>Authentication</strong></em>) , 授权 (<em><strong>Authorization</strong></em>), 和准入控制 (<em><strong>Admission control</strong></em>) 三个阶段来完成对 “用户” 进行授权，整个流程正如下图所示</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/vhesGDFN3dLdzXwS7vzPdXkI3aglQYZgGhjc-Cx_boaV6URKFFoe8mFRZZUuJyGHywa_bOkeUlIkm-nJkCVMHPk9dr2dXFwNzAQJKzft2phsTcEDjdObjmugBcYtpdPLpLIYuIGzeFYvtsR2Lw.jpeg" alt="image-20221025003822017"  /></p>
<center>图：Kubernetes API 请求的请求处理步骤图</center>
<center><em>Source：</em>https://www.armosec.io/blog/kubernetes-admission-controller/</center><br>
<p>其中在大多数教程中，在对这三个阶段所做的工作大致上为：</p>
<ul>
<li>
<p><em><strong>Authentication</strong></em> 阶段所指用于确认请求访问Kubernetes API 用户是否为合法用户，拒绝为401</p>
</li>
<li>
<p><em><strong>Authorization</strong></em> 阶段所指的将是这个用户是否有对操作的资源的权限，拒绝为403</p>
</li>
<li>
<p><em><strong>Admission control</strong></em> 阶段所指控制对请求资源进行控制，通俗来说，就是一票否决权，即使前两个步骤完成</p>
</li>
</ul>
<p>到这里了解到了Kubernetes API实际上做的工作就是 “人类用户” 与 “kubernetes service account&quot; <sup><a href="#2">[2]</a></sup>；那么就引出了一个重要概念就是 “用户” 在Kubernetes中是什么，以及用户在认证中的也是本章节的中心。</p>
<p>在Kubernetes官方手册中给出了 ”用户“ 的概念，Kubernetes集群中存在的用户包括 ”普通用户“ 与 “service account” 但是 Kubernetes 没有普通用户的管理方式，只是将使用集群的证书CA签署的有效证书的用户都被视为合法用户 <sup><a href="#3">[3]</a></sup></p>
<p>那么对于使得Kubernetes集群有一个真正的用户系统，就可以根据上面给出的概念将Kubernetes用户分为 ”外部用户“ 与 ”内部用户“。如何理解外部与内部用户呢？实际上就是有Kubernetes管理的用户，即在kubernetes定义用户的数据模型这种为 “内部用户” ，正如 service account；反之，非Kubernetes托管的用户则为 ”外部用户“ 这中概念也更好的对kubernetes用户的阐述。</p>
<p>对于外部用户来说，实际上Kubernetes给出了多种用户概念 <sup><a href="#3">[3]</a></sup>，例如：</p>
<ul>
<li>拥有kubernetes集群证书的用户</li>
<li>拥有Kubernetes集群token的用户（<code>--token-auth-file</code> 指定的静态token）</li>
<li>用户来自外部用户系统，例如 <em>OpenID</em>，<em>LDAP</em>，<em>QQ connect</em>, <em>google identity platform</em> 等</li>
</ul>
<h2 id="向外部用户授权集群访问的示例">向外部用户授权集群访问的示例</h2>
<h3 id="场景1通过证书请求k8s">场景1：通过证书请求k8s</h3>
<p>该场景中kubernetes将使用证书中的cn作为用户，ou作为组，如果对应 <code>rolebinding/clusterrolebinding</code> 给予该用户权限，那么请求为合法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl https://hostname:6443/api/v1/pods <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	--cert ./client.pem <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	--key ./client-key.pem <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	--cacert ./ca.pem 
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来浅析下在代码中做的事情</p>
<p>确认用户是 <em><strong>apiserver</strong></em> 在 <em><strong>Authentication</strong></em> 阶段 做的事情，而对应代码在 <a href="pkg/kubeapiserver/authenticator">pkg/kubeapiserver/authenticator</a> 下，整个文件就是构建了一系列的认证器，而x.509证书指是其中一个</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 创建一个认证器，返回请求或一个k8s认证机制的标准错误
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">config</span> <span class="nx">Config</span><span class="p">)</span> <span class="nf">New</span><span class="p">()</span> <span class="p">(</span><span class="nx">authenticator</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="o">*</span><span class="nx">spec</span><span class="p">.</span><span class="nx">SecurityDefinitions</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// X509 methods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 可以看到这里就是将x509证书解析为user
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">config</span><span class="p">.</span><span class="nx">ClientCAContentProvider</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">certAuth</span> <span class="o">:=</span> <span class="nx">x509</span><span class="p">.</span><span class="nf">NewDynamic</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">ClientCAContentProvider</span><span class="p">.</span><span class="nx">VerifyOptions</span><span class="p">,</span> <span class="nx">x509</span><span class="p">.</span><span class="nx">CommonNameUserConversion</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">authenticators</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">authenticators</span><span class="p">,</span> <span class="nx">certAuth</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来看实现原理，NewDynamic函数位于代码 <a href="https://github.com/kubernetes/kubernetes/blob/fdc77503e954d1ee641c0e350481f7528e8d068b/staging/src/k8s.io/apiserver/pkg/authentication/request/x509/x509.go#L126-L130">k8s.io/apiserver/pkg/authentication/request/x509/x509.go</a></p>
<p>通过代码可以看出，是通过一个验证函数与用户来解析为一个 <em>Authenticator</em></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// NewDynamic returns a request.Authenticator that verifies client certificates using the provided
</span></span></span><span class="line"><span class="cl"><span class="c1">// VerifyOptionFunc (which may be dynamic), and converts valid certificate chains into user.Info using the provided UserConversion
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewDynamic</span><span class="p">(</span><span class="nx">verifyOptionsFn</span> <span class="nx">VerifyOptionFunc</span><span class="p">,</span> <span class="nx">user</span> <span class="nx">UserConversion</span><span class="p">)</span> <span class="o">*</span><span class="nx">Authenticator</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">Authenticator</span><span class="p">{</span><span class="nx">verifyOptionsFn</span><span class="p">,</span> <span class="nx">user</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>验证函数为 CAContentProvider 的方法，而x509部分实现为 <a href="https://github.com/kubernetes/kubernetes/blob/fdc77503e954d1ee641c0e350481f7528e8d068b/staging/src/k8s.io/apiserver/pkg/server/dynamiccertificates/dynamic_cafile_content.go#L253-L261">k8s.io/apiserver/pkg/server/dynamiccertificates/dynamic_cafile_content.go.VerifyOptions</a>；可以看出返回是一个 <code>x509.VerifyOptions</code> + 与认证的状态</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// VerifyOptions provides verifyoptions compatible with authenticators
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">DynamicFileCAContent</span><span class="p">)</span> <span class="nf">VerifyOptions</span><span class="p">()</span> <span class="p">(</span><span class="nx">x509</span><span class="p">.</span><span class="nx">VerifyOptions</span><span class="p">,</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">uncastObj</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">caBundle</span><span class="p">.</span><span class="nf">Load</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">uncastObj</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">x509</span><span class="p">.</span><span class="nx">VerifyOptions</span><span class="p">{},</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">uncastObj</span><span class="p">.(</span><span class="o">*</span><span class="nx">caBundleAndVerifier</span><span class="p">).</span><span class="nx">verifyOptions</span><span class="p">,</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而用户的获取则位于  <a href="https://github.com/kubernetes/kubernetes/blob/fdc77503e954d1ee641c0e350481f7528e8d068b/staging/src/k8s.io/apiserver/pkg/authentication/request/x509/x509.go#L248-L258">k8s.io/apiserver/pkg/authentication/request/x509/x509.go</a>；可以看出，用户正是拿的证书的CN，而组则是为证书的OU</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// CommonNameUserConversion builds user info from a certificate chain using the subject&#39;s CommonName
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">CommonNameUserConversion</span> <span class="p">=</span> <span class="nf">UserConversionFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">chain</span> <span class="p">[]</span><span class="o">*</span><span class="nx">x509</span><span class="p">.</span><span class="nx">Certificate</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">authenticator</span><span class="p">.</span><span class="nx">Response</span><span class="p">,</span> <span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">chain</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Subject</span><span class="p">.</span><span class="nx">CommonName</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">authenticator</span><span class="p">.</span><span class="nx">Response</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">User</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">DefaultInfo</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Name</span><span class="p">:</span>   <span class="nx">chain</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Subject</span><span class="p">.</span><span class="nx">CommonName</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Groups</span><span class="p">:</span> <span class="nx">chain</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Subject</span><span class="p">.</span><span class="nx">Organization</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>由于授权不在本章范围内，直接忽略至入库阶段，入库阶段由 <a href="https://github.com/kubernetes/kubernetes/blob/fdc77503e954d1ee641c0e350481f7528e8d068b/pkg/controlplane/instance.go#L561">RESTStorageProvider</a> 实现 这里，每一个Provider都提供了 <code>Authenticator</code> 这里包含了已经允许的请求，将会被对应的REST客户端写入到库中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">RESTStorageProvider</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Authenticator</span> <span class="nx">authenticator</span><span class="p">.</span><span class="nx">Request</span>
</span></span><span class="line"><span class="cl">	<span class="nx">APIAudiences</span>  <span class="nx">authenticator</span><span class="p">.</span><span class="nx">Audiences</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// RESTStorageProvider is a factory type for REST storage.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">RESTStorageProvider</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">GroupName</span><span class="p">()</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nf">NewRESTStorage</span><span class="p">(</span><span class="nx">apiResourceConfigSource</span> <span class="nx">serverstorage</span><span class="p">.</span><span class="nx">APIResourceConfigSource</span><span class="p">,</span> <span class="nx">restOptionsGetter</span> <span class="nx">generic</span><span class="p">.</span><span class="nx">RESTOptionsGetter</span><span class="p">)</span> <span class="p">(</span><span class="nx">genericapiserver</span><span class="p">.</span><span class="nx">APIGroupInfo</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="场景2通过token">场景2：通过token</h3>
<p>该场景中，当 <em><strong>kube-apiserver</strong></em> 开启了 <code>--enable-bootstrap-token-auth</code> 时，就可以使用 Bootstrap Token 进行认证，通常如下列命令，在请求头中增加 <code>Authorization: Bearer &lt;token&gt;</code> 标识</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ curl https://hostname:6443/api/v1/pods <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --cacert <span class="si">${</span><span class="nv">CACERT</span><span class="si">}</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --header <span class="s2">&#34;Authorization: Bearer &lt;token&gt;&#34;</span> <span class="se">\
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>接下来浅析下在代码中做的事情</p>
<p>可以看到，在代码 <a href="pkg/kubeapiserver/authenticator">pkg/kubeapiserver/authenticator.New()</a> 中当 <em><strong>kube-apiserver</strong></em> 指定了参数 <code>--token-auth-file=/etc/kubernetes/token.csv&quot;</code> 这种认证会被激活</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">TokenAuthFile</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">tokenAuth</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">newAuthenticatorFromTokenFile</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">TokenAuthFile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">tokenAuthenticators</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">tokenAuthenticators</span><span class="p">,</span> <span class="nx">authenticator</span><span class="p">.</span><span class="nf">WrapAudienceAgnosticToken</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">APIAudiences</span><span class="p">,</span> <span class="nx">tokenAuth</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>此时打开 token.csv 查看下token长什么样</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cat /etc/kubernetes/token.csv
</span></span><span class="line"><span class="cl">12ba4f.d82a57a4433b2359,<span class="s2">&#34;system:bootstrapper&#34;</span>,10001,<span class="s2">&#34;system:bootstrappers&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里回到代码 <a href="https://github.com/kubernetes/kubernetes/blob/fdc77503e954d1ee641c0e350481f7528e8d068b/staging/src/k8s.io/apiserver/pkg/authentication/token/tokenfile/tokenfile.go#L45-L91">k8s.io/apiserver/pkg/authentication/token/tokenfile/tokenfile.go.NewCSV</a> ，这里可以看出，就是读取 <code>--token-auth-file=</code> 参数指定的tokenfile，然后解析为用户，<code>record[1]</code> 作为用户名，<code>record[2]</code> 作为UID</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// NewCSV returns a TokenAuthenticator, populated from a CSV file.
</span></span></span><span class="line"><span class="cl"><span class="c1">// The CSV file must contain records in the format &#34;token,username,useruid&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewCSV</span><span class="p">(</span><span class="nx">path</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">TokenAuthenticator</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">recordNum</span> <span class="o">:=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tokens</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">user</span><span class="p">.</span><span class="nx">DefaultInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">reader</span> <span class="o">:=</span> <span class="nx">csv</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">reader</span><span class="p">.</span><span class="nx">FieldsPerRecord</span> <span class="p">=</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">record</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">reader</span><span class="p">.</span><span class="nf">Read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">record</span><span class="p">)</span> <span class="p">&lt;</span> <span class="mi">3</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;token file &#39;%s&#39; must have at least 3 columns (token, user name, user uid), found %d&#34;</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">record</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">recordNum</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">record</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Warningf</span><span class="p">(</span><span class="s">&#34;empty token has been found in token file &#39;%s&#39;, record number &#39;%d&#39;&#34;</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">recordNum</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">obj</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">DefaultInfo</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Name</span><span class="p">:</span> <span class="nx">record</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">			<span class="nx">UID</span><span class="p">:</span>  <span class="nx">record</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">exist</span> <span class="o">:=</span> <span class="nx">tokens</span><span class="p">[</span><span class="nx">record</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span> <span class="nx">exist</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Warningf</span><span class="p">(</span><span class="s">&#34;duplicate token has been found in token file &#39;%s&#39;, record number &#39;%d&#39;&#34;</span><span class="p">,</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">recordNum</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tokens</span><span class="p">[</span><span class="nx">record</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="p">=</span> <span class="nx">obj</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">record</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">4</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">obj</span><span class="p">.</span><span class="nx">Groups</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nx">record</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="s">&#34;,&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">TokenAuthenticator</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tokens</span><span class="p">:</span> <span class="nx">tokens</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而token file中配置的格式正是以逗号分隔的一组字符串，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">DefaultInfo</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span>   <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">UID</span>    <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Groups</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Extra</span>  <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这种用户最常见的方式就是 <em><strong>kubelet</strong></em> 通常会以此类用户向控制平面进行身份认证，例如下列配置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">KUBELET_ARGS</span><span class="o">=</span><span class="s2">&#34;--v=0 \
</span></span></span><span class="line"><span class="cl"><span class="s2">    --logtostderr=true \
</span></span></span><span class="line"><span class="cl"><span class="s2">    --config=/etc/kubernetes/kubelet-config.yaml \
</span></span></span><span class="line"><span class="cl"><span class="s2">    --kubeconfig=/etc/kubernetes/auth/kubelet.conf \
</span></span></span><span class="line"><span class="cl"><span class="s2">    --network-plugin=cni \
</span></span></span><span class="line"><span class="cl"><span class="s2">    --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 \
</span></span></span><span class="line"><span class="cl"><span class="s2">    --bootstrap-kubeconfig=/etc/kubernetes/auth/bootstrap.conf&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>/etc/kubernetes/auth/bootstrap.conf</code> 内容，这里就用到了 <em><strong>kube-apiserver</strong></em> 配置的 <code>--token-auth-file=</code> 用户名，组必须为 <code>system:bootstrappers</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">clusters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">cluster</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">certificate-authority-data</span><span class="p">:</span><span class="w"> </span><span class="l">......</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">server</span><span class="p">:</span><span class="w"> </span><span class="l">https://10.0.0.4:6443</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">contexts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">context</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cluster</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">user</span><span class="p">:</span><span class="w"> </span><span class="l">system:bootstrapper</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">system:bootstrapper@kubernetes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">current-context</span><span class="p">:</span><span class="w"> </span><span class="l">system:bootstrapper@kubernetes</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">preferences</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">users</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">system:bootstrapper</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>而通常在二进制部署时会出现的问题，例如下列错误</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Unable to register node &#34;hostname&#34; with API server: nodes is forbidden: User &#34;system:anonymous&#34; cannot create resource &#34;nodes&#34; in API group &#34;&#34; at the cluster scope
</span></span></code></pre></td></tr></table>
</div>
</div><p>而通常解决方法是执行下列命令，这里就是将 <em><strong>kubelet</strong></em> 与 <em><strong>kube-apiserver</strong></em> 通讯时的用户授权，因为kubernetes官方给出的条件是，用户组必须为 <code>system:bootstrappers</code>  <sup><a href="#4">[4]</a></sup></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl create clusterrolebinding kubelet-bootstrap --clusterrole<span class="o">=</span>system:node-bootstrapper --group<span class="o">=</span>system:bootstrappers
</span></span></code></pre></td></tr></table>
</div>
</div><p>生成的clusterrolebinding 如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRoleBinding</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">creationTimestamp</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2022-08-14T22:26:51Z&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">managedFields</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">fieldsType</span><span class="p">:</span><span class="w"> </span><span class="l">FieldsV1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="l">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">time</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2022-08-14T22:26:51Z&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">kubelet-bootstrap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">resourceVersion</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;158&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selfLink</span><span class="p">:</span><span class="w"> </span><span class="l">/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/kubelet-bootstrap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">uid</span><span class="p">:</span><span class="w"> </span><span class="l">b4d70f4f-4ae0-468f-86b7-55e9351e4719</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">roleRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apiGroup</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRole</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">system:node-bootstrapper</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">subjects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">apiGroup</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Group</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">system:bootstrappers</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>上述就是 bootstrap token，翻译后就是引导token，因为其做的工作就是将节点载入Kubernetes系统过程提供认证机制的用户。</p>
<blockquote>
<p>Notes：这种用户不存在与kubernetes内，可以算属于一个外部用户，但认证机制中存在并绑定了最高权限，也可以用来做其他访问时的认证</p>
</blockquote>
<h3 id="场景3serviceaccount">场景3：serviceaccount</h3>
<p>serviceaccount通常为API自动创建的，但在用户中，实际上认证存在两个方向，一个是 <code>--service-account-key-file</code> 这个参数可以指定多个，指定对应的证书文件公钥或私钥，用以办法sa的token</p>
<p>首先会根据指定的公钥或私钥文件生成token</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">ServiceAccountKeyFiles</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">serviceAccountAuth</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">newLegacyServiceAccountAuthenticator</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">ServiceAccountKeyFiles</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">ServiceAccountLookup</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">APIAudiences</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">ServiceAccountTokenGetter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">tokenAuthenticators</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">tokenAuthenticators</span><span class="p">,</span> <span class="nx">serviceAccountAuth</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">ServiceAccountIssuers</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">serviceAccountAuth</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">newServiceAccountAuthenticator</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">ServiceAccountIssuers</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">ServiceAccountKeyFiles</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">APIAudiences</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">ServiceAccountTokenGetter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">tokenAuthenticators</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">tokenAuthenticators</span><span class="p">,</span> <span class="nx">serviceAccountAuth</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于  <code>--service-account-key-file</code>  他生成的用户都是 “kubernetes/serviceaccount”  , 而对于 <code>--service-account-issuer</code> 只是对sa颁发者提供了一个称号标识是谁，而不是统一的 “kubernetes/serviceaccount” ，这里可以从代码中看到，两者是完全相同的，只是称号不同罢了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// newLegacyServiceAccountAuthenticator returns an authenticator.Token or an error
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">newLegacyServiceAccountAuthenticator</span><span class="p">(</span><span class="nx">keyfiles</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="nx">lookup</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">apiAudiences</span> <span class="nx">authenticator</span><span class="p">.</span><span class="nx">Audiences</span><span class="p">,</span> <span class="nx">serviceAccountGetter</span> <span class="nx">serviceaccount</span><span class="p">.</span><span class="nx">ServiceAccountTokenGetter</span><span class="p">)</span> <span class="p">(</span><span class="nx">authenticator</span><span class="p">.</span><span class="nx">Token</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">allPublicKeys</span> <span class="o">:=</span> <span class="p">[]</span><span class="kd">interface</span><span class="p">{}{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">keyfile</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">keyfiles</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">publicKeys</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">keyutil</span><span class="p">.</span><span class="nf">PublicKeysFromFile</span><span class="p">(</span><span class="nx">keyfile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">allPublicKeys</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">allPublicKeys</span><span class="p">,</span> <span class="nx">publicKeys</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 唯一的区别 这里使用了常量 serviceaccount.LegacyIssuer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">tokenAuthenticator</span> <span class="o">:=</span> <span class="nx">serviceaccount</span><span class="p">.</span><span class="nf">JWTTokenAuthenticator</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="nx">serviceaccount</span><span class="p">.</span><span class="nx">LegacyIssuer</span><span class="p">},</span> <span class="nx">allPublicKeys</span><span class="p">,</span> <span class="nx">apiAudiences</span><span class="p">,</span> <span class="nx">serviceaccount</span><span class="p">.</span><span class="nf">NewLegacyValidator</span><span class="p">(</span><span class="nx">lookup</span><span class="p">,</span> <span class="nx">serviceAccountGetter</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">tokenAuthenticator</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// newServiceAccountAuthenticator returns an authenticator.Token or an error
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">newServiceAccountAuthenticator</span><span class="p">(</span><span class="nx">issuers</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="nx">keyfiles</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="nx">apiAudiences</span> <span class="nx">authenticator</span><span class="p">.</span><span class="nx">Audiences</span><span class="p">,</span> <span class="nx">serviceAccountGetter</span> <span class="nx">serviceaccount</span><span class="p">.</span><span class="nx">ServiceAccountTokenGetter</span><span class="p">)</span> <span class="p">(</span><span class="nx">authenticator</span><span class="p">.</span><span class="nx">Token</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">allPublicKeys</span> <span class="o">:=</span> <span class="p">[]</span><span class="kd">interface</span><span class="p">{}{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">keyfile</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">keyfiles</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">publicKeys</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">keyutil</span><span class="p">.</span><span class="nf">PublicKeysFromFile</span><span class="p">(</span><span class="nx">keyfile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">allPublicKeys</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">allPublicKeys</span><span class="p">,</span> <span class="nx">publicKeys</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 唯一的区别 这里根据kube-apiserver提供的称号指定名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">tokenAuthenticator</span> <span class="o">:=</span> <span class="nx">serviceaccount</span><span class="p">.</span><span class="nf">JWTTokenAuthenticator</span><span class="p">(</span><span class="nx">issuers</span><span class="p">,</span> <span class="nx">allPublicKeys</span><span class="p">,</span> <span class="nx">apiAudiences</span><span class="p">,</span> <span class="nx">serviceaccount</span><span class="p">.</span><span class="nf">NewValidator</span><span class="p">(</span><span class="nx">serviceAccountGetter</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">tokenAuthenticator</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后根据ServiceAccounts，Secrets等值签发一个token，也就是通过下列命令获取的值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="err">$</span> <span class="nx">kubectl</span> <span class="nx">get</span> <span class="nx">secret</span> <span class="nx">multus</span><span class="o">-</span><span class="nx">token</span><span class="o">-</span><span class="nx">v6bfg</span> <span class="o">-</span><span class="nx">n</span> <span class="nx">kube</span><span class="o">-</span><span class="nx">system</span> <span class="o">-</span><span class="nx">o</span> <span class="nx">jsonpath</span><span class="p">={</span><span class="s">&#34;.data.token&#34;</span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="场景4openid">场景4：openid</h3>
<p>OpenID Connect是 OAuth2 风格，允许用户授权三方网站访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方网站或分享他们数据的所有内容，下面是一张kubernetes 使用 OID 认证的逻辑图</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/kube-login-oidc-ad4caf57f124e622897e0781fe1e3d6e1ecb5c6099776e6677ca800c4458f1de.jpg" alt="img"  /></p>
<center>图：Kubernetes OID认证</center>
<center><em>Source：</em>https://developer.okta.com/blog/2021/11/08/k8s-api-server-oidc</center><br>
<h3 id="场景5webhook">场景5：webhook</h3>
<p>webhook是kubernetes提供自定义认证的其中一种，主要是用于认证 “<em><strong>不记名 token</strong></em>“ 的钩子，“<em><strong>不记名 token</strong></em>“ 将 由身份验证服务创建。当用户对kubernetes访问时，会触发准入控制，当对kubernetes集群注册了 authenticaion webhook时，将会使用该webhook提供的方式进行身份验证时，此时会为您生成一个 token 。</p>
<p>如代码 <a href="pkg/kubeapiserver/authenticator">pkg/kubeapiserver/authenticator.New()</a>  中所示 newWebhookTokenAuthenticator 会通过提供的config (<code>--authentication-token-webhook-config-file</code>) 来创建出一个 WebhookTokenAuthenticator</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">WebhookTokenAuthnConfigFile</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">webhookTokenAuth</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">newWebhookTokenAuthenticator</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">tokenAuthenticators</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">tokenAuthenticators</span><span class="p">,</span> <span class="nx">webhookTokenAuth</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>下图是kubernetes 中 WebhookToken 验证的工作原理</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/25d075712ff343ce492a5db30733cd93.svg" alt="Webhook 令牌认证插件"  /></p>
<center>图：kubernetes WebhookToken验证原理</center>
<center><em>Source：</em>https://learnk8s.io/kubernetes-custom-authentication</center><br>
<p>最后由token中的authHandler，循环所有的Handlers在运行 <code>AuthenticateToken</code> 去进行获取用户的信息</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">authHandler</span> <span class="o">*</span><span class="nx">unionAuthTokenHandler</span><span class="p">)</span> <span class="nf">AuthenticateToken</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">token</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">authenticator</span><span class="p">.</span><span class="nx">Response</span><span class="p">,</span> <span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kd">var</span> <span class="nx">errlist</span> <span class="p">[]</span><span class="kt">error</span>
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">currAuthRequestHandler</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">authHandler</span><span class="p">.</span><span class="nx">Handlers</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">info</span><span class="p">,</span> <span class="nx">ok</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">currAuthRequestHandler</span><span class="p">.</span><span class="nf">AuthenticateToken</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">token</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">if</span> <span class="nx">authHandler</span><span class="p">.</span><span class="nx">FailOnError</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="nx">info</span><span class="p">,</span> <span class="nx">ok</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">         <span class="p">}</span>
</span></span><span class="line"><span class="cl">         <span class="nx">errlist</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">errlist</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="k">continue</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="nx">info</span><span class="p">,</span> <span class="nx">ok</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">utilerrors</span><span class="p">.</span><span class="nf">NewAggregate</span><span class="p">(</span><span class="nx">errlist</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而webhook插件也实现了这个方法 <code>AuthenticateToken</code> ,这里会通过POST请求，调用注入的webhook，该请求携带一个JSON 格式的 <code>TokenReview</code> 对象，其中包含要验证的令牌</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">w</span> <span class="o">*</span><span class="nx">WebhookTokenAuthenticator</span><span class="p">)</span> <span class="nf">AuthenticateToken</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">token</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">authenticator</span><span class="p">.</span><span class="nx">Response</span><span class="p">,</span> <span class="kt">bool</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">...</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">start</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">result</span><span class="p">,</span> <span class="nx">statusCode</span><span class="p">,</span> <span class="nx">tokenReviewErr</span> <span class="p">=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">tokenReview</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">CreateOptions</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">		<span class="nx">latency</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Since</span><span class="p">(</span><span class="nx">start</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>webhook token认证服务要返回<a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#userinfo-v1beta1-authentication-k8s-io">用户的身份信息</a>，就是上面token部分提到的数据结构（webhook来决定接受还是拒绝该用户）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">DefaultInfo</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span>   <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">UID</span>    <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Groups</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Extra</span>  <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="场景6代理认证">场景6：代理认证</h3>
<h2 id="实验基于ldap的身份认证">实验：基于LDAP的身份认证</h2>
<p>通过上面阐述，大致了解到kubernetes认证框架中的用户的分类以及认证的策略由哪些，实验的目的也是为了阐述一个结果，就是使用OIDC/webhook 是比其他方式更好的保护，管理kubernetes集群。首先在安全上，假设网络环境是不安全的，那么任意node节点遗漏 bootstrap token文件，就意味着拥有了集群中最高权限；其次在管理上，越大的团队，人数越多，不可能每个用户都提供单独的证书或者token，要知道传统教程中讲到token在kubernetes集群中是永久有效的，除非你删除了这个secret/sa；而Kubernetes提供的插件就很好的解决了这些问题。</p>
<h3 id="实验环境">实验环境</h3>
<ul>
<li>一个kubernetes集群</li>
<li>一个openldap服务，建议可以是集群外部的，因为webhook不像SSSD有缓存机制，并且集群不可用，那么认证不可用，当认证不可用时会导致集群不可用，这样事故影响的范围可以得到控制，也叫最小化半径</li>
<li>了解ldap相关技术，并了解go ldap客户端</li>
</ul>
<p><strong>实验大致分为以下几个步骤</strong>：</p>
<ul>
<li>建立一个HTTP服务器用于返回给kubernetes Authenticaion服务</li>
<li>查询ldap该用户是否合法
<ul>
<li>查询用户是否合法</li>
<li>查询用户所属组是否拥有权限</li>
</ul>
</li>
</ul>
<h3 id="实验开始">实验开始</h3>
<h4 id="初始化用户数据">初始化用户数据</h4>
<p>首先准备openldap初始化数据，创建三个 posixGroup 组，与5个用户 admin, admin1, admin11, searchUser, syncUser 密码均为111，组与用户关联使用的 <code>memberUid</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat <span class="s">&lt;&lt; EOF | ldapdelete -r  -H ldap://10.0.0.3 -D &#34;cn=admin,dc=test,dc=com&#34; -w 111
</span></span></span><span class="line"><span class="cl"><span class="s">dn: dc=test,dc=com
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: top
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: organizationalUnit
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: extensibleObject
</span></span></span><span class="line"><span class="cl"><span class="s">description: US Organization
</span></span></span><span class="line"><span class="cl"><span class="s">ou: people
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">dn: ou=tvb,dc=test,dc=com
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: organizationalUnit
</span></span></span><span class="line"><span class="cl"><span class="s">description: Television Broadcasts Limited
</span></span></span><span class="line"><span class="cl"><span class="s">ou: tvb
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">dn: cn=admin,ou=tvb,dc=test,dc=com
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: posixGroup
</span></span></span><span class="line"><span class="cl"><span class="s">gidNumber: 10000
</span></span></span><span class="line"><span class="cl"><span class="s">cn: admin
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">dn: cn=conf,ou=tvb,dc=test,dc=com
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: posixGroup
</span></span></span><span class="line"><span class="cl"><span class="s">gidNumber: 10001
</span></span></span><span class="line"><span class="cl"><span class="s">cn: conf
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">dn: cn=dir,ou=tvb,dc=test,dc=com
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: posixGroup
</span></span></span><span class="line"><span class="cl"><span class="s">gidNumber: 10002
</span></span></span><span class="line"><span class="cl"><span class="s">cn: dir
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">dn: uid=syncUser,ou=tvb,dc=test,dc=com
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: inetOrgPerson
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: organizationalPerson
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: person
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: posixAccount
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: shadowAccount
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: pwdPolicy
</span></span></span><span class="line"><span class="cl"><span class="s">pwdAttribute: userPassword
</span></span></span><span class="line"><span class="cl"><span class="s">uid: syncUser
</span></span></span><span class="line"><span class="cl"><span class="s">cn: syncUser
</span></span></span><span class="line"><span class="cl"><span class="s">uidNumber: 10006
</span></span></span><span class="line"><span class="cl"><span class="s">gidNumber: 10002
</span></span></span><span class="line"><span class="cl"><span class="s">homeDirectory: /home/syncUser
</span></span></span><span class="line"><span class="cl"><span class="s">loginShell: /bin/bash
</span></span></span><span class="line"><span class="cl"><span class="s">sn: syncUser
</span></span></span><span class="line"><span class="cl"><span class="s">givenName: syncUser
</span></span></span><span class="line"><span class="cl"><span class="s">memberOf: cn=confGroup,ou=tvb,dc=test,dc=com
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">dn: uid=searchUser,ou=tvb,dc=test,dc=com
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: inetOrgPerson
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: organizationalPerson
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: person
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: posixAccount
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: shadowAccount
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: pwdPolicy
</span></span></span><span class="line"><span class="cl"><span class="s">pwdAttribute: userPassword
</span></span></span><span class="line"><span class="cl"><span class="s">uid: searchUser
</span></span></span><span class="line"><span class="cl"><span class="s">cn: searchUser
</span></span></span><span class="line"><span class="cl"><span class="s">uidNumber: 10005
</span></span></span><span class="line"><span class="cl"><span class="s">gidNumber: 10001
</span></span></span><span class="line"><span class="cl"><span class="s">homeDirectory: /home/searchUser
</span></span></span><span class="line"><span class="cl"><span class="s">loginShell: /bin/bash
</span></span></span><span class="line"><span class="cl"><span class="s">sn: searchUser
</span></span></span><span class="line"><span class="cl"><span class="s">givenName: searchUser
</span></span></span><span class="line"><span class="cl"><span class="s">memberOf: cn=dirGroup,ou=tvb,dc=test,dc=com
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">dn: uid=admin1,ou=tvb,dc=test,dc=com
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: inetOrgPerson
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: organizationalPerson
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: person
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: posixAccount
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: shadowAccount
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: pwdPolicy
</span></span></span><span class="line"><span class="cl"><span class="s">pwdAttribute: userPassword
</span></span></span><span class="line"><span class="cl"><span class="s">uid: admin1
</span></span></span><span class="line"><span class="cl"><span class="s">sn: admin1
</span></span></span><span class="line"><span class="cl"><span class="s">cn: admin
</span></span></span><span class="line"><span class="cl"><span class="s">uidNumber: 10010
</span></span></span><span class="line"><span class="cl"><span class="s">gidNumber: 10000
</span></span></span><span class="line"><span class="cl"><span class="s">homeDirectory: /home/admin
</span></span></span><span class="line"><span class="cl"><span class="s">loginShell: /bin/bash
</span></span></span><span class="line"><span class="cl"><span class="s">givenName: admin
</span></span></span><span class="line"><span class="cl"><span class="s">memberOf: cn=adminGroup,ou=tvb,dc=test,dc=com
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">dn: uid=admin11,ou=tvb,dc=test,dc=com
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: inetOrgPerson
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: organizationalPerson
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: person
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: posixAccount
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: shadowAccount
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: pwdPolicy
</span></span></span><span class="line"><span class="cl"><span class="s">sn: admin11
</span></span></span><span class="line"><span class="cl"><span class="s">pwdAttribute: userPassword
</span></span></span><span class="line"><span class="cl"><span class="s">uid: admin11
</span></span></span><span class="line"><span class="cl"><span class="s">cn: admin11
</span></span></span><span class="line"><span class="cl"><span class="s">uidNumber: 10011
</span></span></span><span class="line"><span class="cl"><span class="s">gidNumber: 10000
</span></span></span><span class="line"><span class="cl"><span class="s">homeDirectory: /home/admin
</span></span></span><span class="line"><span class="cl"><span class="s">loginShell: /bin/bash
</span></span></span><span class="line"><span class="cl"><span class="s">givenName: admin11
</span></span></span><span class="line"><span class="cl"><span class="s">memberOf: cn=adminGroup,ou=tvb,dc=test,dc=com
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">dn: uid=admin,ou=tvb,dc=test,dc=com
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: inetOrgPerson
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: organizationalPerson
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: person
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: posixAccount
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: shadowAccount
</span></span></span><span class="line"><span class="cl"><span class="s">objectClass: pwdPolicy
</span></span></span><span class="line"><span class="cl"><span class="s">pwdAttribute: userPassword
</span></span></span><span class="line"><span class="cl"><span class="s">uid: admin
</span></span></span><span class="line"><span class="cl"><span class="s">cn: admin
</span></span></span><span class="line"><span class="cl"><span class="s">uidNumber: 10009
</span></span></span><span class="line"><span class="cl"><span class="s">gidNumber: 10000
</span></span></span><span class="line"><span class="cl"><span class="s">homeDirectory: /home/admin
</span></span></span><span class="line"><span class="cl"><span class="s">loginShell: /bin/bash
</span></span></span><span class="line"><span class="cl"><span class="s">sn: admin
</span></span></span><span class="line"><span class="cl"><span class="s">givenName: admin
</span></span></span><span class="line"><span class="cl"><span class="s">memberOf: cn=adminGroup,ou=tvb,dc=test,dc=com
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来需要确定如何为认证成功的用户，上面讲到对于kubernetes中用户格式为 <code>v1.UserInfo</code> 的格式，即要获得用户，即用户组，假设需要查找的用户为，admin，那么在openldap中查询filter如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="s2">&#34;(|(&amp;(objectClass=posixAccount)(uid=admin))(&amp;(objectClass=posixGroup)(memberUid=admin)))&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面语句意思是，找到 <code>objectClass=posixAccount</code> 并且 <code>uid=admin</code> 或者 <code>objectClass=posixGroup</code> 并且 <code>memberUid=admin</code> 的条目信息，这里使用 ”|“ 与 ”&amp;“ 是为了要拿到这两个结果。</p>
<h4 id="编写webhook查询用户部分">编写webhook查询用户部分</h4>
<p>这里由于openldap配置密码保存格式不是明文的，如果直接使用 ”=“ 来验证是查询不到内容的，故直接多用了一次登录来验证用户是否合法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">ldapSearch</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">UserInfo</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ldapconn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ldap</span><span class="p">.</span><span class="nf">DialURL</span><span class="p">(</span><span class="nx">ldapURL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">ldapconn</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Authenticate as LDAP admin user
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">err</span> <span class="p">=</span> <span class="nx">ldapconn</span><span class="p">.</span><span class="nf">Bind</span><span class="p">(</span><span class="s">&#34;uid=searchUser,ou=tvb,dc=test,dc=com&#34;</span><span class="p">,</span> <span class="s">&#34;111&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Execute LDAP Search request
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">result</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ldapconn</span><span class="p">.</span><span class="nf">Search</span><span class="p">(</span><span class="nx">ldap</span><span class="p">.</span><span class="nf">NewSearchRequest</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;ou=tvb,dc=test,dc=com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ldap</span><span class="p">.</span><span class="nx">ScopeWholeSubtree</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ldap</span><span class="p">.</span><span class="nx">NeverDerefAliases</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;(&amp;(objectClass=posixGroup)(memberUid=%s))&#34;</span><span class="p">,</span> <span class="nx">username</span><span class="p">),</span> <span class="c1">// Filter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="kc">nil</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="kc">nil</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">userResult</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ldapconn</span><span class="p">.</span><span class="nf">Search</span><span class="p">(</span><span class="nx">ldap</span><span class="p">.</span><span class="nf">NewSearchRequest</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;ou=tvb,dc=test,dc=com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ldap</span><span class="p">.</span><span class="nx">ScopeWholeSubtree</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ldap</span><span class="p">.</span><span class="nx">NeverDerefAliases</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;(&amp;(objectClass=posixAccount)(uid=%s))&#34;</span><span class="p">,</span> <span class="nx">username</span><span class="p">),</span> <span class="c1">// Filter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="kc">nil</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="kc">nil</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">Entries</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;User does not exist&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;User does not exist&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 验证用户名密码是否正确
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ldapconn</span><span class="p">.</span><span class="nf">Bind</span><span class="p">(</span><span class="nx">userResult</span><span class="p">.</span><span class="nx">Entries</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">DN</span><span class="p">,</span> <span class="nx">password</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">e</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;Failed to auth. %s\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;User %s Authenticated successfuly!&#34;</span><span class="p">,</span> <span class="nx">username</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 拼接为kubernetes authentication 的用户格式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">user</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">v1</span><span class="p">.</span><span class="nx">UserInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">result</span><span class="p">.</span><span class="nx">Entries</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">attrubute</span> <span class="o">:=</span> <span class="nx">v</span><span class="p">.</span><span class="nf">GetAttributeValue</span><span class="p">(</span><span class="s">&#34;objectClass&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="nx">attrubute</span><span class="p">,</span> <span class="s">&#34;posixGroup&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">user</span><span class="p">.</span><span class="nx">Groups</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">Groups</span><span class="p">,</span> <span class="nx">v</span><span class="p">.</span><span class="nf">GetAttributeValue</span><span class="p">(</span><span class="s">&#34;cn&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">u</span> <span class="o">:=</span> <span class="nx">userResult</span><span class="p">.</span><span class="nx">Entries</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">GetAttributeValue</span><span class="p">(</span><span class="s">&#34;uid&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">user</span><span class="p">.</span><span class="nx">UID</span> <span class="p">=</span> <span class="nx">u</span>
</span></span><span class="line"><span class="cl">		<span class="nx">user</span><span class="p">.</span><span class="nx">Username</span> <span class="p">=</span> <span class="nx">u</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">user</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="编写http部分">编写HTTP部分</h4>
<p>这里有几个需要注意的部分，即用户或者理解为要认证的token的定义，此处使用了 ”username@password“ 格式作为用户的辨别，即登录kubernetes时需要直接输入 ”username@password“ 来作为登录的凭据。</p>
<p>第二个部分为返回值，返回给Kubernetes的格式必须为 <code>api/authentication/v1.TokenReview</code> 格式，<code>Status.Authenticated</code> 表示用户身份验证结果，如果该用户合法，则设置 <code>tokenReview.Status.Authenticated = true</code> 反之亦然。如果验证成功还需要 <code>Status.User</code> 这就是在<code>ldapSearch</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">serve</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">b</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">httpError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Receiving: %s\n&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">tokenReview</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">TokenReview</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="p">=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">tokenReview</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Json convert err: &#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">httpError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 提取用户名与密码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">s</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">SplitN</span><span class="p">(</span><span class="nx">tokenReview</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Token</span><span class="p">,</span> <span class="s">&#34;@&#34;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;badly formatted token: %s&#34;</span><span class="p">,</span> <span class="nx">tokenReview</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Token</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nf">httpError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;badly formatted token: %s&#34;</span><span class="p">,</span> <span class="nx">tokenReview</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Token</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 查询ldap，验证用户是否合法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">userInfo</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">ldapSearch</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 这里不打印日志的原因是 ldapSearch 中打印过了
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 设置返回的tokenReview
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">userInfo</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tokenReview</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Authenticated</span> <span class="p">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tokenReview</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Authenticated</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tokenReview</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">User</span> <span class="p">=</span> <span class="o">*</span><span class="nx">userInfo</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">b</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">tokenReview</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Json convert err: &#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">httpError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Returning: &#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">httpError</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Error: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">w</span><span class="p">.</span><span class="nf">WriteHeader</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">)</span> <span class="c1">// 500
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintln</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;httpcode 500: &#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>下面是完整的代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;encoding/json&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;errors&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;flag&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;io/ioutil&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net/http&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;strings&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;github.com/go-ldap/ldap&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/api/authentication/v1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/klog/v2&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">ldapURL</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">InitFlags</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">flag</span><span class="p">.</span><span class="nf">Parse</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">http</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/authenticate&#34;</span><span class="p">,</span> <span class="nx">serve</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Listening on port 443 waiting for requests...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:443&#34;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ldapURL</span> <span class="p">=</span> <span class="s">&#34;ldap://10.0.0.10:389&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nf">ldapSearch</span><span class="p">(</span><span class="s">&#34;admin&#34;</span><span class="p">,</span> <span class="s">&#34;1111&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">serve</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">b</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">httpError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Receiving: %s\n&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">tokenReview</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">TokenReview</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="p">=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">tokenReview</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Json convert err: &#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">httpError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 提取用户名与密码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">s</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">SplitN</span><span class="p">(</span><span class="nx">tokenReview</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Token</span><span class="p">,</span> <span class="s">&#34;@&#34;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;badly formatted token: %s&#34;</span><span class="p">,</span> <span class="nx">tokenReview</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Token</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nf">httpError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;badly formatted token: %s&#34;</span><span class="p">,</span> <span class="nx">tokenReview</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Token</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 查询ldap，验证用户是否合法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">userInfo</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">ldapSearch</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">password</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 这里不打印日志的原因是 ldapSearch 中打印过了
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 设置返回的tokenReview
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">userInfo</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tokenReview</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Authenticated</span> <span class="p">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tokenReview</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Authenticated</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tokenReview</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">User</span> <span class="p">=</span> <span class="o">*</span><span class="nx">userInfo</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">b</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">tokenReview</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Json convert err: &#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">httpError</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Returning: &#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">httpError</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Error: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">w</span><span class="p">.</span><span class="nf">WriteHeader</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">)</span> <span class="c1">// 500
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintln</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;httpcode 500: &#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">ldapSearch</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">password</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">UserInfo</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ldapconn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ldap</span><span class="p">.</span><span class="nf">DialURL</span><span class="p">(</span><span class="nx">ldapURL</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">ldapconn</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Authenticate as LDAP admin user
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">err</span> <span class="p">=</span> <span class="nx">ldapconn</span><span class="p">.</span><span class="nf">Bind</span><span class="p">(</span><span class="s">&#34;cn=admin,dc=test,dc=com&#34;</span><span class="p">,</span> <span class="s">&#34;111&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Execute LDAP Search request
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">result</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ldapconn</span><span class="p">.</span><span class="nf">Search</span><span class="p">(</span><span class="nx">ldap</span><span class="p">.</span><span class="nf">NewSearchRequest</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;ou=tvb,dc=test,dc=com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ldap</span><span class="p">.</span><span class="nx">ScopeWholeSubtree</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ldap</span><span class="p">.</span><span class="nx">NeverDerefAliases</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;(&amp;(objectClass=posixGroup)(memberUid=%s))&#34;</span><span class="p">,</span> <span class="nx">username</span><span class="p">),</span> <span class="c1">// Filter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="kc">nil</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="kc">nil</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">userResult</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ldapconn</span><span class="p">.</span><span class="nf">Search</span><span class="p">(</span><span class="nx">ldap</span><span class="p">.</span><span class="nf">NewSearchRequest</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;ou=tvb,dc=test,dc=com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ldap</span><span class="p">.</span><span class="nx">ScopeWholeSubtree</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ldap</span><span class="p">.</span><span class="nx">NeverDerefAliases</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;(&amp;(objectClass=posixAccount)(uid=%s))&#34;</span><span class="p">,</span> <span class="nx">username</span><span class="p">),</span> <span class="c1">// Filter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="kc">nil</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="kc">nil</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">Entries</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;User does not exist&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;User does not exist&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 验证用户名密码是否正确
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ldapconn</span><span class="p">.</span><span class="nf">Bind</span><span class="p">(</span><span class="nx">userResult</span><span class="p">.</span><span class="nx">Entries</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">DN</span><span class="p">,</span> <span class="nx">password</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">e</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;Failed to auth. %s\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;User %s Authenticated successfuly!&#34;</span><span class="p">,</span> <span class="nx">username</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 拼接为kubernetes authentication 的用户格式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">user</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">v1</span><span class="p">.</span><span class="nx">UserInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">result</span><span class="p">.</span><span class="nx">Entries</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">attrubute</span> <span class="o">:=</span> <span class="nx">v</span><span class="p">.</span><span class="nf">GetAttributeValue</span><span class="p">(</span><span class="s">&#34;objectClass&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="nx">attrubute</span><span class="p">,</span> <span class="s">&#34;posixGroup&#34;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">user</span><span class="p">.</span><span class="nx">Groups</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">Groups</span><span class="p">,</span> <span class="nx">v</span><span class="p">.</span><span class="nf">GetAttributeValue</span><span class="p">(</span><span class="s">&#34;cn&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">u</span> <span class="o">:=</span> <span class="nx">userResult</span><span class="p">.</span><span class="nx">Entries</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">GetAttributeValue</span><span class="p">(</span><span class="s">&#34;uid&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">user</span><span class="p">.</span><span class="nx">UID</span> <span class="p">=</span> <span class="nx">u</span>
</span></span><span class="line"><span class="cl">		<span class="nx">user</span><span class="p">.</span><span class="nx">Username</span> <span class="p">=</span> <span class="nx">u</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">user</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="部署webhook">部署webhook</h3>
<p>kubernetes官方手册中指出，启用webhook认证的标记是在 <em><strong>kube-apiserver</strong></em> 指定参数 <code>--authentication-token-webhook-config-file</code> 。而这个配置文件是一个 <em>kubeconfig</em> 类型的文件格式 <sup><a href="#5">[5]</a></sup></p>
<p>下列是部署在kubernetes集群外部的配置</p>
<p>创建一个给 <em>kube-apiserver</em> 使用的配置文件 <code>/etc/kubernetes/auth/authentication-webhook.conf</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">clusters</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">cluster</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">server</span><span class="p">:</span><span class="w"> </span><span class="l">http://10.0.0.1:88/authenticate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">authenticator</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">users</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">webhook-authenticator</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">current-context</span><span class="p">:</span><span class="w"> </span><span class="l">webhook-authenticator@authenticator</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">contexts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">context</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cluster</span><span class="p">:</span><span class="w"> </span><span class="l">authenticator</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">user</span><span class="p">:</span><span class="w"> </span><span class="l">webhook-authenticator</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">webhook-authenticator@authenticator</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>修改 <em>kube-apiserver</em> 参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 指向对应的配置文件</span>
</span></span><span class="line"><span class="cl">--authentication-token-webhook-config-file<span class="o">=</span>/etc/kubernetes/auth/authentication-webhook.conf
</span></span><span class="line"><span class="cl"><span class="c1"># 这个是token缓存时间，指的是用户在访问API时验证通过后在一定时间内无需在请求webhook进行认证了</span>
</span></span><span class="line"><span class="cl">--authentication-token-webhook-cache-ttl<span class="o">=</span>30m
</span></span><span class="line"><span class="cl"><span class="c1"># 版本指定为API使用哪个版本？authentication.k8s.io/v1或v1beta1</span>
</span></span><span class="line"><span class="cl">--authentication-token-webhook-version<span class="o">=</span>v1
</span></span></code></pre></td></tr></table>
</div>
</div><p>启动服务后，创建一个 kubeconfig 中的用户用于验证结果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">apiVersion: v1
</span></span><span class="line"><span class="cl">clusters:
</span></span><span class="line"><span class="cl">- cluster:
</span></span><span class="line"><span class="cl">    certificate-authority-data: 
</span></span><span class="line"><span class="cl">    server: https://10.0.0.4:6443
</span></span><span class="line"><span class="cl">  name: kubernetes
</span></span><span class="line"><span class="cl">contexts:
</span></span><span class="line"><span class="cl">- context:
</span></span><span class="line"><span class="cl">    cluster: kubernetes
</span></span><span class="line"><span class="cl">    user: k8s-admin
</span></span><span class="line"><span class="cl">  name: k8s-admin@kubernetes
</span></span><span class="line"><span class="cl">current-context: k8s-admin@kubernetes
</span></span><span class="line"><span class="cl">kind: Config
</span></span><span class="line"><span class="cl">preferences: {}
</span></span><span class="line"><span class="cl">users:
</span></span><span class="line"><span class="cl">- name: admin
</span></span><span class="line"><span class="cl">  user: 
</span></span><span class="line"><span class="cl">    token: admin@111
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="验证结果">验证结果</h3>
<p><strong>当密码不正确时，使用用户admin请求集群</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl get pods --user<span class="o">=</span>admin
</span></span><span class="line"><span class="cl">error: You must be logged in to the server <span class="o">(</span>Unauthorized<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>当密码正确时，使用用户admin请求集群</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl get pods --user<span class="o">=</span>admin
</span></span><span class="line"><span class="cl">Error from server <span class="o">(</span>Forbidden<span class="o">)</span>: pods is forbidden: User <span class="s2">&#34;admin&#34;</span> cannot list resource <span class="s2">&#34;pods&#34;</span> in API group <span class="s2">&#34;&#34;</span> in the namespace <span class="s2">&#34;default&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到admin用户是一个不存在与集群中的用户，并且提示没有权限操作对应资源，此时将admin用户与集群中的cluster-admin绑定，测试结果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl create clusterrolebinding admin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	--clusterrole<span class="o">=</span>cluster-admin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	--group<span class="o">=</span>admin
</span></span></code></pre></td></tr></table>
</div>
</div><p>此时再尝试使用admin用户访问集群</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl get pods --user<span class="o">=</span>admin
</span></span><span class="line"><span class="cl">NAME                      READY   STATUS    RESTARTS   AGE
</span></span><span class="line"><span class="cl">netbox-85865d5556-hfg6v   1/1     Running   <span class="m">0</span>          91d
</span></span><span class="line"><span class="cl">netbox-85865d5556-vlgr4   1/1     Running   <span class="m">0</span>          91d
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结">总结</h2>
<p>kubernetes authentication 插件提供的功能可以注入一个认证系统，这样可以完美解决了kubernetes中用户的问题，而这些用户并不存在与kubernetes中，并且也无需为多个用户准备大量serviceaccount或者证书，也可以完成鉴权操作。首先返回值标准如下所示，如果kubernetes集群有对在其他用户系统中获得的 <code>Groups</code> 并建立了 <code>clusterrolebinding</code> 或 <code>rolebinding</code> 那么这个组的所有用户都将有这些权限。管理员只需要维护与公司用户系统中组同样多的 clusterrole 与 clusterrolebinding 即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">DefaultInfo</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span>   <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">UID</span>    <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Groups</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Extra</span>  <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">][]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于如何将 kubernetes 与其他平台进行融合可以参考 <a href="https://cylonchau.github.io/kubernetes-dashborad-based.html">文章</a></p>
<blockquote>
<p>Notes：Kubernetes原生就支持OID，完全不用自己开发webhook从而实现接入其他系统，这里展示的只是一个思路</p>
</blockquote>
<h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://learnk8s.io/kubernetes-custom-authentication"><em><strong>Implementing a custom Kubernetes authentication method</strong></em></a></p>
<p><sup id="2">[2]</sup> <a href="https://kubernetes.io/docs/concepts/security/controlling-access/"><em><strong>Controlling Access to the Kubernetes API</strong></em></a></p>
<p><sup id="3">[3]</sup> <a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#users-in-kubernetes"><em><strong>Users in Kubernetes</strong></em></a></p>
<p><sup id="4">[4]</sup> <a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#bootstrap-tokens"><em><strong>bootstrap tokens</strong></em></a></p>
<p><sup id="5">[5]</sup> <a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#webhook-token-authentication"><em><strong>Webhook Token Authentication</strong></em></a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>基于Prometheus的Kubernetes网络调度器</title>
      <link>https://www.oomkill.com/2022/08/ch22-custom-scheduler/</link>
      <pubDate>Mon, 08 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/08/ch22-custom-scheduler/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>本文将深入讲解 如何扩展 Kubernetes scheduler 中各个扩展点如何使用，与扩展scheduler的原理，这些是作为扩展 <em>scheduler</em> 的所需的知识点。最后会完成一个实验，基于网络流量的调度器。</p>
<h2 id="kubernetes调度配置">kubernetes调度配置</h2>
<p>kubernetes集群中允许运行多个不同的 <em>scheduler</em>  ，也可以为Pod指定不同的调度器进行调度。在一般的Kubernetes调度教程中并没有提到这点，这也就是说，对于亲和性，污点等策略实际上并没有完全的使用kubernetes调度功能，在之前的文章中提到的一些调度插件，如基于端口占用的调度 <code>NodePorts</code> 等策略一般情况下是没有使用到的，本章节就是对这部分内容进行讲解，这也是作为扩展调度器的一个基础。</p>
<h3 id="scheduler-configuration-supa-href11asup">Scheduler Configuration <sup><a href="#1">[1]</a></sup></h3>
<p><em>kube-scheduler</em> 提供了配置文件的资源，作为给 <em>kube-scheduler</em> 的配置文件，启动时通过 <code>--onfig=</code> 来指定文件。目前各个kubernetes版本中使用的 <code>KubeSchedulerConfiguration</code> 为，</p>
<ul>
<li>1.21 之前版本使用 <code>v1beta1</code></li>
<li>1.22 版本使用 <code>v1beta2</code> ，但保留了 <code>v1beta1</code></li>
<li>1.23, 1.24, 1.25 版本使用 <code>v1beta3</code> ，但保留了  <code>v1beta2</code>，删除了 <code>v1beta1</code></li>
</ul>
<p>下面是一个简单的 <em>kubeSchedulerConfiguration</em> 示例，其中 <code>kubeconfig</code> 与启动参数 <code>--kubeconfig</code> 是相同的功效。而 <em>kubeSchedulerConfiguration</em> 与其他组件的配置文件类似，如 <em>kubeletConfiguration</em> 都是作为服务启动的配置文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">kubescheduler.config.k8s.io/v1beta1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">KubeSchedulerConfiguration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">clientConnection</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">kubeconfig</span><span class="p">:</span><span class="w"> </span><span class="l">/etc/srv/kubernetes/kube-scheduler/kubeconfig</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Notes: <code>--kubeconfig</code> 与 <code>--config</code> 是不可以同时指定的，指定了 <code>--config</code> 则其他参数自然失效 <sup><a href="#2">[2]</a></sup></p>
</blockquote>
<h3 id="kubeschedulerconfiguration使用">kubeSchedulerConfiguration使用</h3>
<p>通过配置文件，用户可以自定义多个调度器，以及配置每个阶段的扩展点。而插件就是通过这些扩展点来提供在整个调度上下文中的调度行为。</p>
<p>下面配置是对于配置扩展点的部分的一个示例，关于扩展点的讲解可以参考kubernetes官方文档调度上下文部分</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">kubescheduler.config.k8s.io/v1beta1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">KubeSchedulerConfiguration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">profiles</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">plugins</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">score</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">disabled</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">PodTopologySpread</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">enabled</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">MyCustomPluginA</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">MyCustomPluginB</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Notes: 如果name=&quot;*&quot; 的话，这种情况下将禁用/启用对应扩展点的所有插件</p>
</blockquote>
<p>既然kubernetes提供了多调度器，那么对于配置文件来说自然支持多个配置文件，profile也是列表形式，只要指定多个配置列表即可，下面是多配置文件示例，其中，如果存在多个扩展点，也可以为每个调度器配置多个扩展点。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">kubescheduler.config.k8s.io/v1beta2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">KubeSchedulerConfiguration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">profiles</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">schedulerName</span><span class="p">:</span><span class="w"> </span><span class="l">default-scheduler</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  	</span><span class="nt">plugins</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">preScore</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">disabled</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;*&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">score</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">disabled</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;*&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">schedulerName</span><span class="p">:</span><span class="w"> </span><span class="kc">no</span>-<span class="l">scoring-scheduler</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">plugins</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">preScore</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">disabled</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;*&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">score</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">disabled</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;*&#39;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="scheduler调度插件-supa-href33asup">scheduler调度插件 <sup><a href="#3">[3]</a></sup></h3>
<p><em>kube-scheduler</em> 默认提供了很多插件作为调度方法，默认不配置的情况下会启用这些插件，如：</p>
<ul>
<li><em><strong>ImageLocality</strong></em>：调度将更偏向于Node存在容器镜像的节点。扩展点：<code>score</code>.</li>
<li><em><strong>TaintToleration</strong></em>：实现污点与容忍度功能。扩展点：<code>filter</code>, <code>preScore</code>, <code>score</code>.</li>
<li><em><strong>NodeName</strong></em>：实现调度策略中最简单的调度方法 <code>NodeName</code> 的实现。扩展点：<code>filter</code>.</li>
<li><em><strong>NodePorts</strong></em>：调度将检查Node端口是否已占用。扩展点：<code>preFilter</code>, <code>filter</code>.</li>
<li><em><strong>NodeAffinity</strong></em>：提供节点亲和性相关功能。扩展点：<code>filter</code>, <code>score</code>.</li>
<li><em><strong>PodTopologySpread</strong></em>：实现Pod拓扑域的功能。扩展点：<code>preFilter</code>, <code>filter</code>, <code>preScore</code>, <code>score</code>.</li>
<li><em><strong>NodeResourcesFit</strong></em>：该插件将检查节点是否拥有 Pod 请求的所有资源。使用以下三种策略之一：<code>LeastAllocated</code> （默认）<code>MostAllocated</code> 和 <code>RequestedToCapacityRatio</code>。扩展点：<code>preFilter</code>, <code>filter</code>, <code>score</code>.</li>
<li><em><strong>VolumeBinding</strong></em>：检查节点是否有或是否可以绑定请求的 <a href="https://kubernetes.io/docs/concepts/storage/volumes/">卷</a>. 扩展点：<code>preFilter</code>, <code>filter</code>, <code>reserve</code>, <code>preBind</code>, <code>score</code>.</li>
<li><em><strong>VolumeRestrictions</strong></em>：检查安装在节点中的卷是否满足特定于卷提供程序的限制。扩展点：<code>filter</code>.</li>
<li><em><strong>VolumeZone</strong></em>：检查请求的卷是否满足它们可能具有的任何区域要求。扩展点：<code>filter</code>.</li>
<li><em><strong>InterPodAffinity</strong></em>： 实现Pod 间的亲和性与反亲和性的功能。扩展点：<code>preFilter</code>, <code>filter</code>, <code>preScore</code>, <code>score</code>.</li>
<li><em><strong>PrioritySort</strong></em>：提供基于默认优先级的排序。扩展点：<code>queueSort</code>.</li>
</ul>
<p>对于更多配置文件使用案例可以参考官方给出的文档</p>
<h2 id="如何扩展kube-scheduler-supa-href44asup">如何扩展kube-scheduler <sup><a href="#4">[4]</a></sup></h2>
<p>当在第一次考虑编写调度程序时，通常会认为扩展 <em>kube-scheduler</em> 是一件非常困难的事情，其实这些事情 kubernetes 官方早就想到了，kubernetes为此在 1.15 版本引入了framework的概念，framework旨在使 <em>scheduler</em> 更具有扩展性。</p>
<p><em>framework</em> 通过重新定义 各扩展点，将其作为 <em>plugins</em> 来使用，并且支持用户注册 <code>out of tree</code> 的扩展，使其可以被注册到 <em>kube-scheduler</em> 中，下面将对这些步骤进行分析。</p>
<h3 id="定义入口">定义入口</h3>
<p><em>scheduler</em> 允许进行自定义，但是对于只需要引用对应的 <a href="https://github.com/kubernetes/kubernetes/blob/e37e4ab4cc8dcda84f1344dda47a97bb1927d074/cmd/kube-scheduler/app/server.go#L64-L117">NewSchedulerCommand</a>，并且实现自己的 <em>plugins</em> 的逻辑即可。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nx">scheduler</span> <span class="s">&#34;k8s.io/kubernetes/cmd/kube-scheduler/app&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">command</span> <span class="o">:=</span> <span class="nx">scheduler</span><span class="p">.</span><span class="nf">NewSchedulerCommand</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithPlugin</span><span class="p">(</span><span class="s">&#34;example-plugin1&#34;</span><span class="p">,</span> <span class="nx">ExamplePlugin1</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithPlugin</span><span class="p">(</span><span class="s">&#34;example-plugin2&#34;</span><span class="p">,</span> <span class="nx">ExamplePlugin2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">command</span><span class="p">.</span><span class="nf">Execute</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintf</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stderr</span><span class="p">,</span> <span class="s">&#34;%v\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而 <strong>NewSchedulerCommand</strong> 允许注入 out of tree plugins，也就是注入外部的自定义 plugins，这种情况下就无需通过修改源码方式去定义一个调度器，而仅仅通过自行实现即可完成一个自定义调度器。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// WithPlugin 用于注入out of tree plugins 因此scheduler代码中没有其引用。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">WithPlugin</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">factory</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">PluginFactory</span><span class="p">)</span> <span class="nx">Option</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">registry</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Registry</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">registry</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">factory</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="插件实现">插件实现</h3>
<p>对于插件的实现仅仅需要实现对应的扩展点接口。下面通过内置插件进行分析</p>
<p>对于内置插件 <code>NodeAffinity</code> ,我们通过观察他的结构可以发现，实现插件就是实现对应的扩展点抽象 <em>interface</em> 即可。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220807212221684.png" alt="image-20220807212221684"  /></p>
<h4 id="定义插件结构体">定义插件结构体</h4>
<p>其中 <a href="https://github.com/kubernetes/kubernetes/blob/e37e4ab4cc8dcda84f1344dda47a97bb1927d074/pkg/scheduler/framework/v1alpha1/interface.go#L495-L524">framework.FrameworkHandle</a> 是提供了Kubernetes API与 <em>scheduler</em> 之间调用使用的，通过结构可以看出包含 lister，informer等等，这个参数也是必须要实现的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">NodeAffinity</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">handle</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">FrameworkHandle</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="实现对应的扩展点">实现对应的扩展点</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">pl</span> <span class="o">*</span><span class="nx">NodeAffinity</span><span class="p">)</span> <span class="nf">Score</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">state</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">nodeName</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">int64</span><span class="p">,</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Status</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">nodeInfo</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">pl</span><span class="p">.</span><span class="nx">handle</span><span class="p">.</span><span class="nf">SnapshotSharedLister</span><span class="p">().</span><span class="nf">NodeInfos</span><span class="p">().</span><span class="nf">Get</span><span class="p">(</span><span class="nx">nodeName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">NewStatus</span><span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Error</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;getting node %q from Snapshot: %v&#34;</span><span class="p">,</span> <span class="nx">nodeName</span><span class="p">,</span> <span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">node</span> <span class="o">:=</span> <span class="nx">nodeInfo</span><span class="p">.</span><span class="nf">Node</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">node</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">NewStatus</span><span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Error</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;getting node %q from Snapshot: %v&#34;</span><span class="p">,</span> <span class="nx">nodeName</span><span class="p">,</span> <span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">affinity</span> <span class="o">:=</span> <span class="nx">pod</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Affinity</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">count</span> <span class="kt">int64</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// A nil element of PreferredDuringSchedulingIgnoredDuringExecution matches no objects.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// An element of PreferredDuringSchedulingIgnoredDuringExecution that refers to an
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// empty PreferredSchedulingTerm matches all objects.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">affinity</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">affinity</span><span class="p">.</span><span class="nx">NodeAffinity</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">affinity</span><span class="p">.</span><span class="nx">NodeAffinity</span><span class="p">.</span><span class="nx">PreferredDuringSchedulingIgnoredDuringExecution</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Match PreferredDuringSchedulingIgnoredDuringExecution term by term.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">affinity</span><span class="p">.</span><span class="nx">NodeAffinity</span><span class="p">.</span><span class="nx">PreferredDuringSchedulingIgnoredDuringExecution</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">preferredSchedulingTerm</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">affinity</span><span class="p">.</span><span class="nx">NodeAffinity</span><span class="p">.</span><span class="nx">PreferredDuringSchedulingIgnoredDuringExecution</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">preferredSchedulingTerm</span><span class="p">.</span><span class="nx">Weight</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="c1">// TODO: Avoid computing it for all nodes if this becomes a performance problem.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">nodeSelector</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">v1helper</span><span class="p">.</span><span class="nf">NodeSelectorRequirementsAsSelector</span><span class="p">(</span><span class="nx">preferredSchedulingTerm</span><span class="p">.</span><span class="nx">Preference</span><span class="p">.</span><span class="nx">MatchExpressions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">NewStatus</span><span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Error</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">nodeSelector</span><span class="p">.</span><span class="nf">Matches</span><span class="p">(</span><span class="nx">labels</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">Labels</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">count</span> <span class="o">+=</span> <span class="nb">int64</span><span class="p">(</span><span class="nx">preferredSchedulingTerm</span><span class="p">.</span><span class="nx">Weight</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">count</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后在通过实现一个 <a href="https://github.com/kubernetes/kubernetes/blob/e37e4ab4cc8dcda84f1344dda47a97bb1927d074/pkg/scheduler/framework/plugins/nodeaffinity/node_affinity.go#L116-L118">New</a> 函数来提供注册这个扩展的方法。通过这个 <em>New</em> 函数可以在 <code>main.go</code> 中将其作为 out of tree plugins 注入到 <em>scheduler</em> 中即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// New initializes a new plugin and returns it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">_</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span><span class="p">,</span> <span class="nx">h</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">FrameworkHandle</span><span class="p">)</span> <span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Plugin</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">NodeAffinity</span><span class="p">{</span><span class="nx">handle</span><span class="p">:</span> <span class="nx">h</span><span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="实验基于网络流量的调度-supa-href77asup">实验：基于网络流量的调度 <sup><a href="#7">[7]</a></sup></h2>
<p>通过上面阅读了解到了如何扩展 <em>scheduler</em> 插件，下面实验将完成一个基于流量的调度，通常情况下，网络一个Node在一段时间内使用的网络流量也是作为生产环境中很常见的情况。例如在配置均衡的多个主机中，主机A作为业务拉单脚本运行，主机B作为计算服务运行。通常来说计算服务会使用更多的系统资源，而拉单需要更多的是网络流量，此时在调度时，默认调度器有限选择的是系统空闲资源多的节点，这种情况下如果有Pod被调度到该节点上，那么可能双方业务都会收到影响（前端代理觉得这个节点连接数少会被大量调度，而拉单脚本因为网络带宽的占用降低了效能）。</p>
<h3 id="实验环境">实验环境</h3>
<ul>
<li>一个kubernetes集群，至少保证有两个节点。</li>
<li>提供的kubernetes集群都需要安装prometheus node_exporter，可以是集群内部的，也可以是集群外部的，这里使用的是集群外部的。</li>
<li>对 <a href="https://prometheus.io/docs/prometheus/latest/querying/basics/">promQL</a> 与 <a href="https://github.com/prometheus/client_golang">client_golang</a> 有所了解</li>
</ul>
<p><strong>实验大致分为以下几个步骤</strong>：</p>
<ul>
<li>定义插件API
<ul>
<li>插件命名为 <code>NetworkTraffic</code></li>
</ul>
</li>
<li>定义扩展点
<ul>
<li>这里使用了 Score 扩展点，并且定义评分的算法</li>
</ul>
</li>
<li>定义分数获取途径（从prometheus指标中拿到对应的数据）</li>
<li>定义对自定义调度器的参数传入</li>
<li>将项目部署到集群中（集群内部署与集群外部署）</li>
<li>实验的结果验证</li>
</ul>
<p>实验将仿照内置插件 <a href="https://github.com/kubernetes/kubernetes/blob/e37e4ab4cc8dcda84f1344dda47a97bb1927d074/pkg/scheduler/framework/plugins/nodeaffinity/node_affinity.go">nodeaffinity</a> 完成代码编写，为什么选择这个插件，只是因为这个插件相对比较简单，并且与我们实验目的基本相同，其实其他插件也是同样的效果。</p>
<p>整个实验的代码上传至 github.com/CylonChau/customScheduler</p>
<h3 id="实验开始">实验开始</h3>
<h4 id="错误处理">错误处理</h4>
<p>在初始化项目时，<code>go mod tidy</code> 等操作时，会遇到大量下面的错误</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">go: github.com/GoogleCloudPlatform/spark-on-k8s-operator@v0.0.0-20210307184338-1947244ce5f4 requires
</span></span><span class="line"><span class="cl">        k8s.io/apiextensions-apiserver@v0.0.0: reading k8s.io/apiextensions-apiserver/go.mod at revision v0.0.0: unknown revision v0.0.0
</span></span></code></pre></td></tr></table>
</div>
</div><p>kubernetes issue #79384 <sup><a href="#5">[5]</a></sup> 中有提到这个问题，粗略浏览下没有说明为什么会出现这个问题，在最下方有个大佬提供了一个脚本，出现上述问题无法解决时直接运行该脚本后正常。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/bin/sh
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nb">set</span> -euo pipefail
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">VERSION</span><span class="o">=</span><span class="si">${</span><span class="nv">1</span><span class="p">#</span><span class="s2">&#34;v&#34;</span><span class="si">}</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&#34;</span><span class="nv">$VERSION</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;Must specify version!&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">exit</span> <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="nv">MODS</span><span class="o">=(</span><span class="k">$(</span>
</span></span><span class="line"><span class="cl">    curl -sS https://raw.githubusercontent.com/kubernetes/kubernetes/v<span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span>/go.mod <span class="p">|</span>
</span></span><span class="line"><span class="cl">    sed -n <span class="s1">&#39;s|.*k8s.io/\(.*\) =&gt; ./staging/src/k8s.io/.*|k8s.io/\1|p&#39;</span>
</span></span><span class="line"><span class="cl"><span class="k">)</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> MOD in <span class="s2">&#34;</span><span class="si">${</span><span class="nv">MODS</span><span class="p">[@]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="nv">V</span><span class="o">=</span><span class="k">$(</span>
</span></span><span class="line"><span class="cl">        go mod download -json <span class="s2">&#34;</span><span class="si">${</span><span class="nv">MOD</span><span class="si">}</span><span class="s2">@kubernetes-</span><span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span><span class="s2">&#34;</span> <span class="p">|</span>
</span></span><span class="line"><span class="cl">        sed -n <span class="s1">&#39;s|.*&#34;Version&#34;: &#34;\(.*\)&#34;.*|\1|p&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="k">)</span>
</span></span><span class="line"><span class="cl">    go mod edit <span class="s2">&#34;-replace=</span><span class="si">${</span><span class="nv">MOD</span><span class="si">}</span><span class="s2">=</span><span class="si">${</span><span class="nv">MOD</span><span class="si">}</span><span class="s2">@</span><span class="si">${</span><span class="nv">V</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span><span class="line"><span class="cl">go get <span class="s2">&#34;k8s.io/kubernetes@v</span><span class="si">${</span><span class="nv">VERSION</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="定义插件api">定义插件API</h4>
<p>通过上面内容描述了解到了定义插件只需要实现对应的扩展点抽象 <em>interface</em> ，那么可以初始化项目目录 <code>pkg/networtraffic/networktraffice.go</code>。</p>
<p>定义插件名称与变量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">const</span> <span class="nx">Name</span> <span class="p">=</span> <span class="s">&#34;NetworkTraffic&#34;</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">_</span> <span class="p">=</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">ScorePlugin</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">NetworkTraffic</span><span class="p">{})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>定义插件的结构体</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">NetworkTraffic</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 这个作为后面获取node网络流量使用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">prometheus</span> <span class="o">*</span><span class="nx">PrometheusHandle</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// FrameworkHandle 提供插件可以使用的数据和一些工具。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 它在插件初始化时传递给 plugin 工厂类。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// plugin 必须存储和使用这个handle来调用framework函数。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">handle</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">FrameworkHandle</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="定义扩展点">定义扩展点</h4>
<p>因为选用 Score 扩展点，需要定义对应的方法，来实现对应的抽象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">n</span> <span class="o">*</span><span class="nx">NetworkTraffic</span><span class="p">)</span> <span class="nf">Score</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">state</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">p</span> <span class="o">*</span><span class="nx">corev1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">nodeName</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">int64</span><span class="p">,</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Status</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 通过promethes拿到一段时间的node的网络使用情况
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">nodeBandwidth</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">prometheus</span><span class="p">.</span><span class="nf">GetGauge</span><span class="p">(</span><span class="nx">nodeName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">NewStatus</span><span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Error</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;error getting node bandwidth measure: %s&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bandWidth</span> <span class="o">:=</span> <span class="nb">int64</span><span class="p">(</span><span class="nx">nodeBandwidth</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;[NetworkTraffic] node &#39;%s&#39; bandwidth: %s&#34;</span><span class="p">,</span> <span class="nx">nodeName</span><span class="p">,</span> <span class="nx">bandWidth</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">bandWidth</span><span class="p">,</span> <span class="kc">nil</span> <span class="c1">// 这里直接返回就行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来需要对结果归一化，这里就回到了调度框架中扩展点的执行问题上了，通过源码可以看出，Score 扩展点需要实现的并不只是这单一的方法。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Run NormalizeScore method for each ScorePlugin in parallel.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">parallelize</span><span class="p">.</span><span class="nf">Until</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">scorePlugins</span><span class="p">),</span> <span class="kd">func</span><span class="p">(</span><span class="nx">index</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pl</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">scorePlugins</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="nx">nodeScoreList</span> <span class="o">:=</span> <span class="nx">pluginToNodeScores</span><span class="p">[</span><span class="nx">pl</span><span class="p">.</span><span class="nf">Name</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">pl</span><span class="p">.</span><span class="nf">ScoreExtensions</span><span class="p">()</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">status</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nf">runScoreExtension</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">pl</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">,</span> <span class="nx">nodeScoreList</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">!</span><span class="nx">status</span><span class="p">.</span><span class="nf">IsSuccess</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">err</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;normalize score plugin %q failed with error %v&#34;</span><span class="p">,</span> <span class="nx">pl</span><span class="p">.</span><span class="nf">Name</span><span class="p">(),</span> <span class="nx">status</span><span class="p">.</span><span class="nf">Message</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        <span class="nx">errCh</span><span class="p">.</span><span class="nf">SendErrorWithCancel</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">cancel</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过上面代码了解到，实现 <code>Score </code> 就必须实现 <code>ScoreExtensions</code>，如果没有实现则直接返回。而根据 <code>nodeaffinity</code> 中示例发现这个方法仅仅返回的是这个扩展点对象本身，而具体的归一化也就是真正进行打分的操作在 <code>NormalizeScore</code> 中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// NormalizeScore invoked after scoring all nodes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">pl</span> <span class="o">*</span><span class="nx">NodeAffinity</span><span class="p">)</span> <span class="nf">NormalizeScore</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">state</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">scores</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">NodeScoreList</span><span class="p">)</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Status</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">pluginhelper</span><span class="p">.</span><span class="nf">DefaultNormalizeScore</span><span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">MaxNodeScore</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">scores</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ScoreExtensions of the Score plugin.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">pl</span> <span class="o">*</span><span class="nx">NodeAffinity</span><span class="p">)</span> <span class="nf">ScoreExtensions</span><span class="p">()</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">ScoreExtensions</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">pl</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而在 <a href="https://github.com/kubernetes/kubernetes/blob/e37e4ab4cc8dcda84f1344dda47a97bb1927d074/pkg/scheduler/framework/runtime/framework.go#L692-L700">framework</a> 中，真正执行的操作的方法也是 <code>NormalizeScore()</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">frameworkImpl</span><span class="p">)</span> <span class="nf">runScoreExtension</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">pl</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">ScorePlugin</span><span class="p">,</span> <span class="nx">state</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">nodeScoreList</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">NodeScoreList</span><span class="p">)</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Status</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">state</span><span class="p">.</span><span class="nf">ShouldRecordPluginMetrics</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">pl</span><span class="p">.</span><span class="nf">ScoreExtensions</span><span class="p">().</span><span class="nf">NormalizeScore</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">,</span> <span class="nx">nodeScoreList</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">startTime</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">status</span> <span class="o">:=</span> <span class="nx">pl</span><span class="p">.</span><span class="nf">ScoreExtensions</span><span class="p">().</span><span class="nf">NormalizeScore</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">,</span> <span class="nx">nodeScoreList</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">f</span><span class="p">.</span><span class="nx">metricsRecorder</span><span class="p">.</span><span class="nf">observePluginDurationAsync</span><span class="p">(</span><span class="nx">scoreExtensionNormalize</span><span class="p">,</span> <span class="nx">pl</span><span class="p">.</span><span class="nf">Name</span><span class="p">(),</span> <span class="nx">status</span><span class="p">,</span> <span class="nx">metrics</span><span class="p">.</span><span class="nf">SinceInSeconds</span><span class="p">(</span><span class="nx">startTime</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">status</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>下面来实现对应的方法</p>
<p>在 <em>NormalizeScore</em> 中需要实现具体的选择node的算法，因为对node打分结果的区间为 $[0,100]$ ，所以这里实现的算法公式将为 $最高分 - (当前带宽 / 最高最高带宽 * 100)$，这样就保证了，带宽占用越大的机器，分数越低。</p>
<p>例如，最高带宽为200000，而当前Node带宽为140000，那么这个Node分数为：$max - \frac{140000}{200000}\times 100 = 100 - (0.7\times100)=30$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 如果返回framework.ScoreExtensions 就需要实现framework.ScoreExtensions
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">n</span> <span class="o">*</span><span class="nx">NetworkTraffic</span><span class="p">)</span> <span class="nf">ScoreExtensions</span><span class="p">()</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">ScoreExtensions</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">n</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// NormalizeScore与ScoreExtensions是固定格式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">n</span> <span class="o">*</span><span class="nx">NetworkTraffic</span><span class="p">)</span> <span class="nf">NormalizeScore</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">state</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">corev1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">scores</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">NodeScoreList</span><span class="p">)</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Status</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">higherScore</span> <span class="kt">int64</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">node</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">scores</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">higherScore</span> <span class="p">&lt;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Score</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">higherScore</span> <span class="p">=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Score</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 计算公式为，满分 - (当前带宽 / 最高最高带宽 * 100)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 公式的计算结果为，带宽占用越大的机器，分数越低
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">node</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">scores</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scores</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Score</span> <span class="p">=</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">MaxNodeScore</span> <span class="o">-</span> <span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">Score</span> <span class="o">*</span> <span class="mi">100</span> <span class="o">/</span> <span class="nx">higherScore</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;[NetworkTraffic] Nodes final score: %v&#34;</span><span class="p">,</span> <span class="nx">scores</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;[NetworkTraffic] Nodes final score: %v&#34;</span><span class="p">,</span> <span class="nx">scores</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Notes：在kubernetes中最大的node数支持5000个，岂不是在获取最大分数时循环就占用了大量的性能，其实不必担心。<em>scheduler</em> 提供了一个参数 <code>percentageOfNodesToScore</code>。这个参数决定了这里要循环的数量。更多的细节可以参考官方文档对这部分的说明 <sup><a href="#6">[6]</a></sup></p>
</blockquote>
<p><strong>配置插件名称</strong></p>
<p>为了使插件注册时候使用，还需要为其配置一个名称</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Name returns name of the plugin. It is used in logs, etc.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">n</span> <span class="o">*</span><span class="nx">NetworkTraffic</span><span class="p">)</span> <span class="nf">Name</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">Name</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="定义prometheushandle">定义PrometheusHandle</h4>
<p>网络插件的扩展中还存在一个 <code>prometheusHandle</code>，这个就是操作prometheus-server拿去指标的动作。</p>
<p>首先需要定义一个 <em>PrometheusHandle</em> 的结构体</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">PrometheusHandle</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">deviceName</span> <span class="kt">string</span> <span class="c1">// 网络接口名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">timeRange</span>  <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span> <span class="c1">// 抓取的时间段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ip</span>         <span class="kt">string</span> <span class="c1">// prometheus server的连接地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">client</span>     <span class="nx">v1</span><span class="p">.</span><span class="nx">API</span> <span class="c1">// 操作prometheus的客户端
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>有了结构就需要查询的动作和指标，对于指标来说，这里使用了 <code>node_network_receive_bytes_total</code> 作为获取Node的网络流量的计算方式。由于环境是部署在集群之外的，没有node的主机名，通过 <code>promQL</code> 获取，整个语句如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sum_over_time<span class="o">(</span>node_network_receive_bytes_total<span class="o">{</span><span class="nv">device</span><span class="o">=</span><span class="s2">&#34;eth0&#34;</span><span class="o">}[</span>1s<span class="o">])</span> * on<span class="o">(</span>instance<span class="o">)</span> group_left<span class="o">(</span>nodename<span class="o">)</span> <span class="o">(</span>node_uname_info<span class="o">{</span><span class="nv">nodename</span><span class="o">=</span><span class="s2">&#34;node01&#34;</span><span class="o">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>整个 <em>Prometheus</em> 部分如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">PrometheusHandle</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">deviceName</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">timeRange</span>  <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ip</span>         <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span>     <span class="nx">v1</span><span class="p">.</span><span class="nx">API</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewProme</span><span class="p">(</span><span class="nx">ip</span><span class="p">,</span> <span class="nx">deviceName</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">timeRace</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">)</span> <span class="o">*</span><span class="nx">PrometheusHandle</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">api</span><span class="p">.</span><span class="nf">NewClient</span><span class="p">(</span><span class="nx">api</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span><span class="nx">Address</span><span class="p">:</span> <span class="nx">ip</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;[NetworkTraffic] FatalError creating prometheus client: %s&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">PrometheusHandle</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">deviceName</span><span class="p">:</span> <span class="nx">deviceName</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ip</span><span class="p">:</span>         <span class="nx">ip</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">timeRange</span><span class="p">:</span>  <span class="nx">timeRace</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">client</span><span class="p">:</span>     <span class="nx">v1</span><span class="p">.</span><span class="nf">NewAPI</span><span class="p">(</span><span class="nx">client</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">PrometheusHandle</span><span class="p">)</span> <span class="nf">GetGauge</span><span class="p">(</span><span class="nx">node</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">model</span><span class="p">.</span><span class="nx">Sample</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">value</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="nx">nodeMeasureQueryTemplate</span><span class="p">,</span> <span class="nx">node</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">deviceName</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">timeRange</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="nx">nodeMeasureQueryTemplate</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">deviceName</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">timeRange</span><span class="p">,</span> <span class="nx">node</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;[NetworkTraffic] Error querying prometheus: %w&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">nodeMeasure</span> <span class="o">:=</span> <span class="nx">value</span><span class="p">.(</span><span class="nx">model</span><span class="p">.</span><span class="nx">Vector</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">nodeMeasure</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;[NetworkTraffic] Invalid response, expected 1 value, got %d&#34;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">nodeMeasure</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">nodeMeasure</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">PrometheusHandle</span><span class="p">)</span> <span class="nf">query</span><span class="p">(</span><span class="nx">promQL</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">model</span><span class="p">.</span><span class="nx">Value</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 通过promQL查询并返回结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">results</span><span class="p">,</span> <span class="nx">warnings</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">client</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="nx">promQL</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">warnings</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Warningf</span><span class="p">(</span><span class="s">&#34;[NetworkTraffic Plugin] Warnings: %v\n&#34;</span><span class="p">,</span> <span class="nx">warnings</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">results</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="定义调度器传入的参数">定义调度器传入的参数</h4>
<p>因为需要指定 <em>prometheus</em> 的地址，网卡名称，和获取数据的大小，故整个结构体如下，另外，参数结构必须遵循<code>&lt;Plugin Name&gt;Args</code> 格式的名称。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">NetworkTrafficArgs</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">IP</span>         <span class="kt">string</span> <span class="s">`json:&#34;ip&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">DeviceName</span> <span class="kt">string</span> <span class="s">`json:&#34;deviceName&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">TimeRange</span>  <span class="kt">int</span>    <span class="s">`json:&#34;timeRange&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>为了使这个类型的数据作为 <code>KubeSchedulerConfiguration</code> 可以解析的结构，还需要做一步操作，就是在扩展APIServer时扩展对应的资源类型。在这里kubernetes中提供两种方法来扩展 <code>KubeSchedulerConfiguration</code> 的资源类型。</p>
<p>一种是旧版中提供了 <a href="https://github.com/kubernetes/kubernetes/blob/7a98bb2b7c9112935387825f2fce1b7d40b76236/pkg/scheduler/framework/plugins/nodelabel/node_label.go#L65-L80">framework.DecodeInto</a> 函数可以做这个操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">plArgs</span> <span class="o">*</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Unknown</span><span class="p">,</span> <span class="nx">handle</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">FrameworkHandle</span><span class="p">)</span> <span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Plugin</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">args</span> <span class="o">:=</span> <span class="nx">Args</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">DecodeInto</span><span class="p">(</span><span class="nx">plArgs</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">args</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>另外一种方式是必须实现对应的深拷贝方法，例如 <a href="https://github.com/kubernetes/kubernetes/blob/e37e4ab4cc8dcda84f1344dda47a97bb1927d074/pkg/scheduler/apis/config/types_pluginargs.go#L37-L49">NodeLabel</a> 中的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// NodeLabelArgs holds arguments used to configure the NodeLabel plugin.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">NodeLabelArgs</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span><span class="p">.</span><span class="nx">TypeMeta</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// PresentLabels should be present for the node to be considered a fit for hosting the pod
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">PresentLabels</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// AbsentLabels should be absent for the node to be considered a fit for hosting the pod
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">AbsentLabels</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Nodes that have labels in the list will get a higher score.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">PresentLabelsPreference</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Nodes that don&#39;t have labels in the list will get a higher score.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">AbsentLabelsPreference</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后将其注册到register中，整个行为与扩展APIServer是类似的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// addKnownTypes registers known types to the given scheme
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">addKnownTypes</span><span class="p">(</span><span class="nx">scheme</span> <span class="o">*</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">scheme</span><span class="p">.</span><span class="nf">AddKnownTypes</span><span class="p">(</span><span class="nx">SchemeGroupVersion</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">KubeSchedulerConfiguration</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">Policy</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">InterPodAffinityArgs</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">NodeLabelArgs</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">NodeResourcesFitArgs</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">PodTopologySpreadArgs</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">RequestedToCapacityRatioArgs</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">ServiceAffinityArgs</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">VolumeBindingArgs</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">NodeResourcesLeastAllocatedArgs</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">NodeResourcesMostAllocatedArgs</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">scheme</span><span class="p">.</span><span class="nf">AddKnownTypes</span><span class="p">(</span><span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersion</span><span class="p">{</span><span class="nx">Group</span><span class="p">:</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">Version</span><span class="p">:</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">APIVersionInternal</span><span class="p">},</span> <span class="o">&amp;</span><span class="nx">Policy</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Notes：对于生成深拷贝函数及其他文件，可以使用 kubernetes 代码库中的脚本 <a href="https://github.com/kubernetes/kubernetes/blob/v1.24.3/hack/update-codegen.sh">kubernetes/hack/update-codegen.sh</a></p>
</blockquote>
<p>这里为了方便使用了 <em>framework.DecodeInto</em> 的方式。</p>
<h4 id="项目部署">项目部署</h4>
<p>准备 scheduler 的 profile，可以看到，我们自定义的参数，就可以被识别为 <em>KubeSchedulerConfiguration</em> 的资源类型了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">kubescheduler.config.k8s.io/v1beta1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">KubeSchedulerConfiguration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">clientConnection</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">kubeconfig</span><span class="p">:</span><span class="w"> </span><span class="l">/mnt/d/src/go_work/customScheduler/scheduler.conf</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">profiles</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">schedulerName</span><span class="p">:</span><span class="w"> </span><span class="l">custom-scheduler</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">plugins</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">score</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">enabled</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;NetworkTraffic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">disabled</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;*&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pluginConfig</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;NetworkTraffic&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">args</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ip</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;http://10.0.0.4:9090&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">deviceName</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;eth0&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">timeRange</span><span class="p">:</span><span class="w"> </span><span class="m">60</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如果需要部署到集群内部，可以打包成镜像</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> golang:alpine AS builder</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">MAINTAINER</span><span class="s"> cylon</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /scheduler</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> ./ /scheduler<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> GOPROXY https://goproxy.cn,direct<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    sed -i <span class="s1">&#39;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#39;</span> /etc/apk/repositories <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    apk add upx  <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="nv">GOOS</span><span class="o">=</span>linux <span class="nv">GOARCH</span><span class="o">=</span>amd64 <span class="nv">CGO_ENABLED</span><span class="o">=</span><span class="m">0</span> go build -ldflags <span class="s2">&#34;-s -w&#34;</span> -o scheduler main.go <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    upx -1 scheduler <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    chmod +x scheduler<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> alpine AS runner</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /go/scheduler</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>builder /scheduler/scheduler .<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>builder /scheduler/scheduler.yaml /etc/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">VOLUME</span> <span class="p">[</span><span class="s2">&#34;./scheduler&#34;</span><span class="p">]</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>部署在集群内部所需的资源清单</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">scheduler-sa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kube-system</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRoleBinding</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">scheduler</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">subjects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">scheduler-sa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kube-system</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">roleRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRole</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">system:kube-scheduler</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apiGroup</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">custom-scheduler</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">kube-system</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">component</span><span class="p">:</span><span class="w"> </span><span class="l">custom-scheduler</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">component</span><span class="p">:</span><span class="w"> </span><span class="l">custom-scheduler</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">component</span><span class="p">:</span><span class="w"> </span><span class="l">custom-scheduler</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">serviceAccountName</span><span class="p">:</span><span class="w"> </span><span class="l">scheduler-sa</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">priorityClassName</span><span class="p">:</span><span class="w"> </span><span class="l">system-cluster-critical</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">scheduler</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">cylonchau/custom-scheduler:v0.0.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">./scheduler</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- --<span class="l">config=/etc/scheduler.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- --<span class="l">v=3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">livenessProbe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">httpGet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/healthz</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">10251</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">initialDelaySeconds</span><span class="p">:</span><span class="w"> </span><span class="m">15</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">readinessProbe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">httpGet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/healthz</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">10251</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>启动自定义 <em>scheduler</em>，这里通过简单的二进制方式启动，所以需要一个kubeconfig做认证文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./main --logtostderr<span class="o">=</span><span class="nb">true</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	--address<span class="o">=</span>127.0.0.1 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	--v<span class="o">=</span><span class="m">3</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	--config<span class="o">=</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/scheduler.yaml <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	--kubeconfig<span class="o">=</span><span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/scheduler.conf
</span></span></code></pre></td></tr></table>
</div>
</div><p>启动后为了验证方便性，关闭了原来的 <em>kube-scheduler</em> 服务，因为原来的  <em>kube-scheduler</em> 已经作为HA中的master，所以不会使用自定义的 <em>scheduler</em> 导致pod pending。</p>
<h4 id="验证结果">验证结果</h4>
<p>准备一个需要部署的Pod，指定使用的调度器名称</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx-deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx:1.14.2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">schedulerName</span><span class="p">:</span><span class="w"> </span><span class="l">custom-scheduler</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这里实验环境为2个节点的kubernetes集群，master与node01，因为master的服务比node01要多，这种情况下不管怎样，调度结果永远会被调度到node01上。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl get pods -o wide
</span></span><span class="line"><span class="cl">NAME                                READY   STATUS    RESTARTS   AGE   IP             NODE     NOMINATED NODE   READINESS GATES
</span></span><span class="line"><span class="cl">nginx-deployment-69f76b454c-lpwbl   1/1     Running   <span class="m">0</span>          43s   192.168.0.17   node01   &lt;none&gt;           &lt;none&gt;
</span></span><span class="line"><span class="cl">nginx-deployment-69f76b454c-vsb7k   1/1     Running   <span class="m">0</span>          43s   192.168.0.16   node01   &lt;none&gt;           &lt;none&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>而调度器的日志如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">I0808 01:56:31.098189   27131 networktraffic.go:83] [NetworkTraffic] node &#39;node01&#39; bandwidth: %!s(int64=12541068340)
</span></span><span class="line"><span class="cl">I0808 01:56:31.098461   27131 networktraffic.go:70] [NetworkTraffic] Nodes final score: [{master-machine 0} {node01 12541068340}]
</span></span><span class="line"><span class="cl">I0808 01:56:31.098651   27131 networktraffic.go:70] [NetworkTraffic] Nodes final score: [{master-machine 0} {node01 71}]
</span></span><span class="line"><span class="cl">I0808 01:56:31.098911   27131 networktraffic.go:73] [NetworkTraffic] Nodes final score: [{master-machine 0} {node01 71}]
</span></span><span class="line"><span class="cl">I0808 01:56:31.099275   27131 default_binder.go:51] Attempting to bind default/nginx-deployment-69f76b454c-vsb7k to node01
</span></span><span class="line"><span class="cl">I0808 01:56:31.101414   27131 eventhandlers.go:225] add event for scheduled pod default/nginx-deployment-69f76b454c-lpwbl
</span></span><span class="line"><span class="cl">I0808 01:56:31.101414   27131 eventhandlers.go:205] delete event for unscheduled pod default/nginx-deployment-69f76b454c-lpwbl
</span></span><span class="line"><span class="cl">I0808 01:56:31.103604   27131 scheduler.go:609] &#34;Successfully bound pod to node&#34; pod=&#34;default/nginx-deployment-69f76b454c-lpwbl&#34; node=&#34;no
</span></span><span class="line"><span class="cl">de01&#34; evaluatedNodes=2 feasibleNodes=2
</span></span><span class="line"><span class="cl">I0808 01:56:31.104540   27131 scheduler.go:609] &#34;Successfully bound pod to node&#34; pod=&#34;default/nginx-deployment-69f76b454c-vsb7k&#34; node=&#34;no
</span></span><span class="line"><span class="cl">de01&#34; evaluatedNodes=2 feasibleNodes=2
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://kubernetes.io/docs/reference/scheduling/config/">scheduling config</a></p>
<p><sup id="2">[2]</sup> <a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-scheduler/">kube-scheduler</a></p>
<p><sup id="3">[3]</sup> <a href="https://kubernetes.io/docs/reference/scheduling/config/#scheduling-plugins">scheduling-plugins</a></p>
<p><sup id="4">[4]</sup> <a href="https://github.com/kubernetes/enhancements/blob/master/keps/sig-scheduling/624-scheduling-framework/README.md#custom-scheduler-plugins-out-of-tree">custom scheduler plugins</a></p>
<p><sup id="5">[5]</sup> <a href="https://github.com/kubernetes/kubernetes/issues/79384">ssues #79384</a></p>
<p><sup id="6">[6]</sup> <a href="https://kubernetes.io/zh-cn/docs/concepts/scheduling-eviction/scheduler-perf-tuning/">scheduler perf tuning</a></p>
<p><sup id="7">[7]</sup> <a href="https://medium.com/@juliorenner123/k8s-creating-a-kube-scheduler-plugin-8a826c486a1">creating a kube-scheduler plugin</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>如何理解kubernetes调度框架与插件？</title>
      <link>https://www.oomkill.com/2022/07/ch21-scheduling-algorithm/</link>
      <pubDate>Wed, 27 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/07/ch21-scheduling-algorithm/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="调度框架-supa-href11asup">调度框架 <sup><a href="#1">[1]</a></sup></h2>
<p>本文基于 <a href="https://github.com/kubernetes/kubernetes/tree/release-1.24/pkg/scheduler">kubernetes 1.24</a> 进行分析</p>
<p>调度框架（<code>Scheduling Framework</code>）是Kubernetes 的调度器 <code>kube-scheduler</code> 设计的的可插拔架构，将插件（调度算法）嵌入到调度上下文的每个扩展点中，并编译为 <code>kube-scheduler</code></p>
<p>在 <code>kube-scheduler</code> 1.22 之后，在 <a href="https://github.com/kubernetes/kubernetes/blob/release-1.24/pkg/scheduler/framework/interface.go">pkg/scheduler/framework/interface.go</a> 中定义了一个 <a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/framework/interface.go#L295-L297">Plugin</a> 的 <em>interface</em>，这个 <em>interface</em> 作为了所有插件的父级。而每个未调度的 Pod，Kubernetes 调度器会根据一组规则尝试在集群中寻找一个节点。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Plugin</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Name</span><span class="p">()</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>下面会对每个算法是如何实现的进行分析</p>
<p>在初始化 <em>scheduler</em> 时，会创建一个 <code>profile</code>，profile是关于 <em>scheduler</em> 调度配置相关的定义</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">client</span> <span class="nx">clientset</span><span class="p">.</span><span class="nx">Interface</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">	<span class="nx">profiles</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">profile</span><span class="p">.</span><span class="nf">NewMap</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">profiles</span><span class="p">,</span> <span class="nx">registry</span><span class="p">,</span> <span class="nx">recorderFactory</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithComponentConfigVersion</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">componentConfigVersion</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithClientSet</span><span class="p">(</span><span class="nx">client</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithKubeConfig</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">kubeConfig</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithInformerFactory</span><span class="p">(</span><span class="nx">informerFactory</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithSnapshotSharedLister</span><span class="p">(</span><span class="nx">snapshot</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithPodNominator</span><span class="p">(</span><span class="nx">nominator</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithCaptureProfile</span><span class="p">(</span><span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">CaptureProfile</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">frameworkCapturer</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithClusterEventMap</span><span class="p">(</span><span class="nx">clusterEventMap</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithParallelism</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">parallelism</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithExtenders</span><span class="p">(</span><span class="nx">extenders</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;initializing profiles: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">profiles</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;at least one profile is required&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>关于 <code>profile</code> 的实现，则为 <code>KubeSchedulerProfile</code>，也是作为 yaml生成时传入的配置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// KubeSchedulerProfile 是一个 scheduling profile.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">KubeSchedulerProfile</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// SchedulerName 是与此配置文件关联的调度程序的名称。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果 SchedulerName 与 pod “spec.schedulerName”匹配，则使用此配置文件调度 pod。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">SchedulerName</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Plugins指定应该启用或禁用的插件集。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 启用的插件是除了默认插件之外应该启用的插件。禁用插件应是禁用的任何默认插件。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 当没有为扩展点指定启用或禁用插件时，将使用该扩展点的默认插件（如果有）。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果指定了 QueueSort 插件，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 则必须为所有配置文件指定相同的 QueueSort Plugin 和 PluginConfig。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 这个Plugins展现的形式则是调度上下文中的所有扩展点(这是抽象)，实际中会表现为多个扩展点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Plugins</span> <span class="o">*</span><span class="nx">Plugins</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// PluginConfig 是每个插件的一组可选的自定义插件参数。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果省略PluginConfig参数等同于使用该插件的默认配置。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">PluginConfig</span> <span class="p">[]</span><span class="nx">PluginConfig</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于 <code>profile.NewMap</code> 就是根据给定的配置来构建这个framework，因为配置可能是存在多个的。而 <a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/framework/runtime/registry.go#L70">Registry</a> 则是所有可用插件的集合，内部构造则是 <a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/framework/runtime/registry.go#L30">PluginFactory</a> ,通过函数来构建出对应的 plugin</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewMap</span><span class="p">(</span><span class="nx">cfgs</span> <span class="p">[]</span><span class="nx">config</span><span class="p">.</span><span class="nx">KubeSchedulerProfile</span><span class="p">,</span> <span class="nx">r</span> <span class="nx">frameworkruntime</span><span class="p">.</span><span class="nx">Registry</span><span class="p">,</span> <span class="nx">recorderFact</span> <span class="nx">RecorderFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{},</span> <span class="nx">opts</span> <span class="o">...</span><span class="nx">frameworkruntime</span><span class="p">.</span><span class="nx">Option</span><span class="p">)</span> <span class="p">(</span><span class="nx">Map</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">m</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="nx">Map</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">v</span> <span class="o">:=</span> <span class="nx">cfgValidator</span><span class="p">{</span><span class="nx">m</span><span class="p">:</span> <span class="nx">m</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">cfg</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">cfgs</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">p</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">newProfile</span><span class="p">(</span><span class="nx">cfg</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">recorderFact</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">,</span> <span class="nx">opts</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;creating profile for scheduler name %s: %v&#34;</span><span class="p">,</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">SchedulerName</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">v</span><span class="p">.</span><span class="nf">validate</span><span class="p">(</span><span class="nx">cfg</span><span class="p">,</span> <span class="nx">p</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">m</span><span class="p">[</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">SchedulerName</span><span class="p">]</span> <span class="p">=</span> <span class="nx">p</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">m</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// newProfile 给的配置构建出一个profile
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">newProfile</span><span class="p">(</span><span class="nx">cfg</span> <span class="nx">config</span><span class="p">.</span><span class="nx">KubeSchedulerProfile</span><span class="p">,</span> <span class="nx">r</span> <span class="nx">frameworkruntime</span><span class="p">.</span><span class="nx">Registry</span><span class="p">,</span> <span class="nx">recorderFact</span> <span class="nx">RecorderFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{},</span> <span class="nx">opts</span> <span class="o">...</span><span class="nx">frameworkruntime</span><span class="p">.</span><span class="nx">Option</span><span class="p">)</span> <span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Framework</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">recorder</span> <span class="o">:=</span> <span class="nf">recorderFact</span><span class="p">(</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">SchedulerName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">opts</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">opts</span><span class="p">,</span> <span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithEventRecorder</span><span class="p">(</span><span class="nx">recorder</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">NewFramework</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">cfg</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">,</span> <span class="nx">opts</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到最终返回的是一个 <code>Framework</code> 。那么来看下这个 <code>Framework</code></p>
<p><a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/framework/interface.go#L495-L566">Framework</a> 是一个抽象，管理着调度过程中所使用的所有插件，并在调度上下文中适当的位置去运行对应的插件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Framework</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Handle</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// QueueSortFunc 返回对调度队列中的 Pod 进行排序的函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 也就是less，在Sort打分阶段的打分函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">QueueSortFunc</span><span class="p">()</span> <span class="nx">LessFunc</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// RunPreFilterPlugins 运行配置的一组PreFilter插件。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果这组插件中，任何一个插件失败，则返回 *Status 并设置为non-success。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果返回状态为non-success，则调度周期中止。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 它还返回一个 PreFilterResult，它可能会影响到要评估下游的节点。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">	<span class="nf">RunPreFilterPlugins</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">state</span> <span class="o">*</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">PreFilterResult</span><span class="p">,</span> <span class="o">*</span><span class="nx">Status</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// RunPostFilterPlugins 运行配置的一组PostFilter插件。 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// PostFilter 插件是通知性插件，在这种情况下应配置为先执行并返回 Unschedulable 状态，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 或者尝试更改集群状态以使 pod 在未来的调度周期中可能会被调度。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">RunPostFilterPlugins</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">state</span> <span class="o">*</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">filteredNodeStatusMap</span> <span class="nx">NodeToStatusMap</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">PostFilterResult</span><span class="p">,</span> <span class="o">*</span><span class="nx">Status</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// RunPreBindPlugins 运行配置的一组 PreBind 插件。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果任何一个插件返回错误，则返回 *Status 并且code设置为non-success。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果code为“Unschedulable”，则调度检查失败，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 则认为是内部错误。在任何一种情况下，Pod都不会被bound。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">RunPreBindPlugins</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">state</span> <span class="o">*</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">nodeName</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">Status</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// RunPostBindPlugins 运行配置的一组PostBind插件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">RunPostBindPlugins</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">state</span> <span class="o">*</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">nodeName</span> <span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// RunReservePluginsReserve运行配置的一组Reserve插件的Reserve方法。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果在这组调用中的任何一个插件返回错误，则不会继续运行剩余调用的插件并返回错误。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 在这种情况下，pod将不能被调度。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">RunReservePluginsReserve</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">state</span> <span class="o">*</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">nodeName</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">Status</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// RunReservePluginsUnreserve运行配置的一组Reserve插件的Unreserve方法。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">RunReservePluginsUnreserve</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">state</span> <span class="o">*</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">nodeName</span> <span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// RunPermitPlugins运行配置的一组Permit插件。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果这些插件中的任何一个返回“Success”或“Wait”之外的状态，则它不会继续运行其余插件并返回错误。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 否则，如果任何插件返回 “Wait”，则此函数将创建等待pod并将其添加到当前等待pod的map中，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 并使用“Wait” code返回状态。 Pod将在Permit插件返回的最短持续时间内保持等待pod。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">RunPermitPlugins</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">state</span> <span class="o">*</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">nodeName</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">Status</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果pod是waiting pod，WaitOnPermit 将阻塞，直到等待的pod被允许或拒绝。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">WaitOnPermit</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="o">*</span><span class="nx">Status</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// RunBindPlugins运行配置的一组bind插件。 Bind插件可以选择是否处理Pod。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果 Bind 插件选择跳过binding，它应该返回 code=5(&#34;skip&#34;)状态。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 否则，它应该返回“Error”或“Success”。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果没有插件处理绑定，则RunBindPlugins返回code=5(&#34;skip&#34;)的状态。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">RunBindPlugins</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">state</span> <span class="o">*</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">nodeName</span> <span class="kt">string</span><span class="p">)</span> <span class="o">*</span><span class="nx">Status</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 如果至少定义了一个filter插件，则HasFilterPlugins返回true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">HasFilterPlugins</span><span class="p">()</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果至少定义了一个PostFilter插件，则HasPostFilterPlugins返回 true。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">HasPostFilterPlugins</span><span class="p">()</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 如果至少定义了一个Score插件，则HasScorePlugins返回 true。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">HasScorePlugins</span><span class="p">()</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ListPlugins将返回map。key为扩展点名称，value则是配置的插件列表。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">ListPlugins</span><span class="p">()</span> <span class="o">*</span><span class="nx">config</span><span class="p">.</span><span class="nx">Plugins</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ProfileName则是与profile name关联的framework
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">ProfileName</span><span class="p">()</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而实现这个抽象的则是 <a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/framework/runtime/framework.go#L73-L102">frameworkImpl</a>；<code>frameworkImpl</code> 是初始化与运行 <em>scheduler plugins</em> 的组件，并在调度上下文中会运行这些扩展点</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">type frameworkImpl struct {
</span></span><span class="line"><span class="cl">   registry             Registry
</span></span><span class="line"><span class="cl">   snapshotSharedLister framework.SharedLister
</span></span><span class="line"><span class="cl">   waitingPods          *waitingPodsMap
</span></span><span class="line"><span class="cl">   scorePluginWeight    map[string]int
</span></span><span class="line"><span class="cl">   queueSortPlugins     []framework.QueueSortPlugin
</span></span><span class="line"><span class="cl">   preFilterPlugins     []framework.PreFilterPlugin
</span></span><span class="line"><span class="cl">   filterPlugins        []framework.FilterPlugin
</span></span><span class="line"><span class="cl">   postFilterPlugins    []framework.PostFilterPlugin
</span></span><span class="line"><span class="cl">   preScorePlugins      []framework.PreScorePlugin
</span></span><span class="line"><span class="cl">   scorePlugins         []framework.ScorePlugin
</span></span><span class="line"><span class="cl">   reservePlugins       []framework.ReservePlugin
</span></span><span class="line"><span class="cl">   preBindPlugins       []framework.PreBindPlugin
</span></span><span class="line"><span class="cl">   bindPlugins          []framework.BindPlugin
</span></span><span class="line"><span class="cl">   postBindPlugins      []framework.PostBindPlugin
</span></span><span class="line"><span class="cl">   permitPlugins        []framework.PermitPlugin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   clientSet       clientset.Interface
</span></span><span class="line"><span class="cl">   kubeConfig      *restclient.Config
</span></span><span class="line"><span class="cl">   eventRecorder   events.EventRecorder
</span></span><span class="line"><span class="cl">   informerFactory informers.SharedInformerFactory
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   metricsRecorder *metricsRecorder
</span></span><span class="line"><span class="cl">   profileName     string
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   extenders []framework.Extender
</span></span><span class="line"><span class="cl">   framework.PodNominator
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   parallelizer parallelize.Parallelizer
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>那么来看下 Registry ，<code>Registry </code> 是作为一个可用插件的集合。<code>framework</code> 使用 <code>registry</code> 来启用和对插件配置的初始化。在初始化框架之前，所有插件都必须在注册表中。表现形式就是一个 <code>map[]</code>；<em>key</em> 是插件的名称，value是 <code>PluginFactory</code> 。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Registry</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">PluginFactory</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而在 <a href="https://github.com/kubernetes/kubernetes/blob/release-1.24/pkg/scheduler/framework/plugins/registry.go">pkg\scheduler\framework\plugins\registry.go</a> 中会将所有的 <code>in-tree plugin</code> 注册进来。通过 <code>NewInTreeRegistry</code> 。后续如果还有插件要注册，可以通过 <a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/scheduler.go#L176-L180">WithFrameworkOutOfTreeRegistry</a>  来注册其他的插件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewInTreeRegistry</span><span class="p">()</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Registry</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fts</span> <span class="o">:=</span> <span class="nx">plfeature</span><span class="p">.</span><span class="nx">Features</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">EnableReadWriteOncePod</span><span class="p">:</span>                       <span class="nx">feature</span><span class="p">.</span><span class="nx">DefaultFeatureGate</span><span class="p">.</span><span class="nf">Enabled</span><span class="p">(</span><span class="nx">features</span><span class="p">.</span><span class="nx">ReadWriteOncePod</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">EnableVolumeCapacityPriority</span><span class="p">:</span>                 <span class="nx">feature</span><span class="p">.</span><span class="nx">DefaultFeatureGate</span><span class="p">.</span><span class="nf">Enabled</span><span class="p">(</span><span class="nx">features</span><span class="p">.</span><span class="nx">VolumeCapacityPriority</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">EnableMinDomainsInPodTopologySpread</span><span class="p">:</span>          <span class="nx">feature</span><span class="p">.</span><span class="nx">DefaultFeatureGate</span><span class="p">.</span><span class="nf">Enabled</span><span class="p">(</span><span class="nx">features</span><span class="p">.</span><span class="nx">MinDomainsInPodTopologySpread</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">EnableNodeInclusionPolicyInPodTopologySpread</span><span class="p">:</span> <span class="nx">feature</span><span class="p">.</span><span class="nx">DefaultFeatureGate</span><span class="p">.</span><span class="nf">Enabled</span><span class="p">(</span><span class="nx">features</span><span class="p">.</span><span class="nx">NodeInclusionPolicyInPodTopologySpread</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Registry</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">selectorspread</span><span class="p">.</span><span class="nx">Name</span><span class="p">:</span>                  <span class="nx">selectorspread</span><span class="p">.</span><span class="nx">New</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">imagelocality</span><span class="p">.</span><span class="nx">Name</span><span class="p">:</span>                   <span class="nx">imagelocality</span><span class="p">.</span><span class="nx">New</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tainttoleration</span><span class="p">.</span><span class="nx">Name</span><span class="p">:</span>                 <span class="nx">tainttoleration</span><span class="p">.</span><span class="nx">New</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">nodename</span><span class="p">.</span><span class="nx">Name</span><span class="p">:</span>                        <span class="nx">nodename</span><span class="p">.</span><span class="nx">New</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">nodeports</span><span class="p">.</span><span class="nx">Name</span><span class="p">:</span>                       <span class="nx">nodeports</span><span class="p">.</span><span class="nx">New</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">nodeaffinity</span><span class="p">.</span><span class="nx">Name</span><span class="p">:</span>                    <span class="nx">nodeaffinity</span><span class="p">.</span><span class="nx">New</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">podtopologyspread</span><span class="p">.</span><span class="nx">Name</span><span class="p">:</span>               <span class="nx">runtime</span><span class="p">.</span><span class="nf">FactoryAdapter</span><span class="p">(</span><span class="nx">fts</span><span class="p">,</span> <span class="nx">podtopologyspread</span><span class="p">.</span><span class="nx">New</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">nodeunschedulable</span><span class="p">.</span><span class="nx">Name</span><span class="p">:</span>               <span class="nx">nodeunschedulable</span><span class="p">.</span><span class="nx">New</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">noderesources</span><span class="p">.</span><span class="nx">Name</span><span class="p">:</span>                   <span class="nx">runtime</span><span class="p">.</span><span class="nf">FactoryAdapter</span><span class="p">(</span><span class="nx">fts</span><span class="p">,</span> <span class="nx">noderesources</span><span class="p">.</span><span class="nx">NewFit</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">noderesources</span><span class="p">.</span><span class="nx">BalancedAllocationName</span><span class="p">:</span> <span class="nx">runtime</span><span class="p">.</span><span class="nf">FactoryAdapter</span><span class="p">(</span><span class="nx">fts</span><span class="p">,</span> <span class="nx">noderesources</span><span class="p">.</span><span class="nx">NewBalancedAllocation</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">volumebinding</span><span class="p">.</span><span class="nx">Name</span><span class="p">:</span>                   <span class="nx">runtime</span><span class="p">.</span><span class="nf">FactoryAdapter</span><span class="p">(</span><span class="nx">fts</span><span class="p">,</span> <span class="nx">volumebinding</span><span class="p">.</span><span class="nx">New</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">volumerestrictions</span><span class="p">.</span><span class="nx">Name</span><span class="p">:</span>              <span class="nx">runtime</span><span class="p">.</span><span class="nf">FactoryAdapter</span><span class="p">(</span><span class="nx">fts</span><span class="p">,</span> <span class="nx">volumerestrictions</span><span class="p">.</span><span class="nx">New</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">volumezone</span><span class="p">.</span><span class="nx">Name</span><span class="p">:</span>                      <span class="nx">volumezone</span><span class="p">.</span><span class="nx">New</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">nodevolumelimits</span><span class="p">.</span><span class="nx">CSIName</span><span class="p">:</span>             <span class="nx">runtime</span><span class="p">.</span><span class="nf">FactoryAdapter</span><span class="p">(</span><span class="nx">fts</span><span class="p">,</span> <span class="nx">nodevolumelimits</span><span class="p">.</span><span class="nx">NewCSI</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">nodevolumelimits</span><span class="p">.</span><span class="nx">EBSName</span><span class="p">:</span>             <span class="nx">runtime</span><span class="p">.</span><span class="nf">FactoryAdapter</span><span class="p">(</span><span class="nx">fts</span><span class="p">,</span> <span class="nx">nodevolumelimits</span><span class="p">.</span><span class="nx">NewEBS</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">nodevolumelimits</span><span class="p">.</span><span class="nx">GCEPDName</span><span class="p">:</span>           <span class="nx">runtime</span><span class="p">.</span><span class="nf">FactoryAdapter</span><span class="p">(</span><span class="nx">fts</span><span class="p">,</span> <span class="nx">nodevolumelimits</span><span class="p">.</span><span class="nx">NewGCEPD</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">nodevolumelimits</span><span class="p">.</span><span class="nx">AzureDiskName</span><span class="p">:</span>       <span class="nx">runtime</span><span class="p">.</span><span class="nf">FactoryAdapter</span><span class="p">(</span><span class="nx">fts</span><span class="p">,</span> <span class="nx">nodevolumelimits</span><span class="p">.</span><span class="nx">NewAzureDisk</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">nodevolumelimits</span><span class="p">.</span><span class="nx">CinderName</span><span class="p">:</span>          <span class="nx">runtime</span><span class="p">.</span><span class="nf">FactoryAdapter</span><span class="p">(</span><span class="nx">fts</span><span class="p">,</span> <span class="nx">nodevolumelimits</span><span class="p">.</span><span class="nx">NewCinder</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">interpodaffinity</span><span class="p">.</span><span class="nx">Name</span><span class="p">:</span>                <span class="nx">interpodaffinity</span><span class="p">.</span><span class="nx">New</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">queuesort</span><span class="p">.</span><span class="nx">Name</span><span class="p">:</span>                       <span class="nx">queuesort</span><span class="p">.</span><span class="nx">New</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">defaultbinder</span><span class="p">.</span><span class="nx">Name</span><span class="p">:</span>                   <span class="nx">defaultbinder</span><span class="p">.</span><span class="nx">New</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">defaultpreemption</span><span class="p">.</span><span class="nx">Name</span><span class="p">:</span>               <span class="nx">runtime</span><span class="p">.</span><span class="nf">FactoryAdapter</span><span class="p">(</span><span class="nx">fts</span><span class="p">,</span> <span class="nx">defaultpreemption</span><span class="p">.</span><span class="nx">New</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>这里插入一个题外话，关于 <em>in-tree plugin</em></p>
<p>在这里没有找到关于，<em>kube-scheduler</em> ，只是找到有关的概念，大概可以解释为，in-tree表示为随kubernetes官方提供的二进制构建的 <em>plugin</em> 则为 <code>in-tree</code>，而独立于kubernetes代码库之外的为 <code>out-of-tree</code> <sup><a href="#3">[3]</a></sup> 。这种情况下，可以理解为，AA则是 <code>out-of-tree</code> 而 <code>Pod</code>, <code>DeplymentSet</code> 等是 <code>in-tree</code>。</p>
</blockquote>
<p>接下来回到初始化 <em>scheduler</em> ，在初始化一个 <em>scheduler</em> 时，会通过<code>NewInTreeRegistry</code> 来初始化</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">client</span> <span class="nx">clientset</span><span class="p">.</span><span class="nx">Interface</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">	<span class="nx">registry</span> <span class="o">:=</span> <span class="nx">frameworkplugins</span><span class="p">.</span><span class="nf">NewInTreeRegistry</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">registry</span><span class="p">.</span><span class="nf">Merge</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">frameworkOutOfTreeRegistry</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">         
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">profiles</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">profile</span><span class="p">.</span><span class="nf">NewMap</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">profiles</span><span class="p">,</span> <span class="nx">registry</span><span class="p">,</span> <span class="nx">recorderFactory</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithComponentConfigVersion</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">componentConfigVersion</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithClientSet</span><span class="p">(</span><span class="nx">client</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithKubeConfig</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">kubeConfig</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithInformerFactory</span><span class="p">(</span><span class="nx">informerFactory</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithSnapshotSharedLister</span><span class="p">(</span><span class="nx">snapshot</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithPodNominator</span><span class="p">(</span><span class="nx">nominator</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithCaptureProfile</span><span class="p">(</span><span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">CaptureProfile</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">frameworkCapturer</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithClusterEventMap</span><span class="p">(</span><span class="nx">clusterEventMap</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithParallelism</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">parallelism</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithExtenders</span><span class="p">(</span><span class="nx">extenders</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来在调度上下文 <code>scheduleOne</code> 中 <code>schedulePod</code> 时，会通过 <code>framework</code> 调用对应的插件来处理这个扩展点工作。具体的体现在，pkg\scheduler\schedule_one.go 中的预选阶段</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">sched</span> <span class="o">*</span><span class="nx">Scheduler</span><span class="p">)</span> <span class="nf">schedulePod</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">fwk</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">Framework</span><span class="p">,</span> <span class="nx">state</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="p">(</span><span class="nx">result</span> <span class="nx">ScheduleResult</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">trace</span> <span class="o">:=</span> <span class="nx">utiltrace</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;Scheduling&#34;</span><span class="p">,</span> <span class="nx">utiltrace</span><span class="p">.</span><span class="nx">Field</span><span class="p">{</span><span class="nx">Key</span><span class="p">:</span> <span class="s">&#34;namespace&#34;</span><span class="p">,</span> <span class="nx">Value</span><span class="p">:</span> <span class="nx">pod</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">},</span> <span class="nx">utiltrace</span><span class="p">.</span><span class="nx">Field</span><span class="p">{</span><span class="nx">Key</span><span class="p">:</span> <span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="nx">Value</span><span class="p">:</span> <span class="nx">pod</span><span class="p">.</span><span class="nx">Name</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">trace</span><span class="p">.</span><span class="nf">LogIfLong</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">Cache</span><span class="p">.</span><span class="nf">UpdateSnapshot</span><span class="p">(</span><span class="nx">sched</span><span class="p">.</span><span class="nx">nodeInfoSnapshot</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">trace</span><span class="p">.</span><span class="nf">Step</span><span class="p">(</span><span class="s">&#34;Snapshotting scheduler cache and node infos done&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">nodeInfoSnapshot</span><span class="p">.</span><span class="nf">NumNodes</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">ErrNoNodesAvailable</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">feasibleNodes</span><span class="p">,</span> <span class="nx">diagnosis</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nf">findNodesThatFitPod</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">fwk</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">trace</span><span class="p">.</span><span class="nf">Step</span><span class="p">(</span><span class="s">&#34;Computing predicates done&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>与其他扩展点部分，在调度上下文 <a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/schedule_one.go#L66-L278">scheduleOne</a> 中可以很好的看出，功能都是 <code>framework</code> 提供的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">sched</span> <span class="o">*</span><span class="nx">Scheduler</span><span class="p">)</span> <span class="nf">scheduleOne</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">	<span class="nx">scheduleResult</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nf">SchedulePod</span><span class="p">(</span><span class="nx">schedulingCycleCtx</span><span class="p">,</span> <span class="nx">fwk</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">	<span class="c1">// Run the Reserve method of reserve plugins.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">sts</span> <span class="o">:=</span> <span class="nx">fwk</span><span class="p">.</span><span class="nf">RunReservePluginsReserve</span><span class="p">(</span><span class="nx">schedulingCycleCtx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">assumedPod</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">SuggestedHost</span><span class="p">);</span> <span class="p">!</span><span class="nx">sts</span><span class="p">.</span><span class="nf">IsSuccess</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">	<span class="c1">// Run &#34;permit&#34; plugins.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">runPermitStatus</span> <span class="o">:=</span> <span class="nx">fwk</span><span class="p">.</span><span class="nf">RunPermitPlugins</span><span class="p">(</span><span class="nx">schedulingCycleCtx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">assumedPod</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">SuggestedHost</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">		<span class="c1">// One of the plugins returned status different than success or wait.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">fwk</span><span class="p">.</span><span class="nf">RunReservePluginsUnreserve</span><span class="p">(</span><span class="nx">schedulingCycleCtx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">assumedPod</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">SuggestedHost</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">	<span class="c1">// bind the pod to its host asynchronously (we can do this b/c of the assumption step above).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="o">...</span>
</span></span><span class="line"><span class="cl">		<span class="nx">waitOnPermitStatus</span> <span class="o">:=</span> <span class="nx">fwk</span><span class="p">.</span><span class="nf">WaitOnPermit</span><span class="p">(</span><span class="nx">bindingCycleCtx</span><span class="p">,</span> <span class="nx">assumedPod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">waitOnPermitStatus</span><span class="p">.</span><span class="nf">IsSuccess</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="o">...</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// trigger un-reserve plugins to clean up state associated with the reserved Pod
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">fwk</span><span class="p">.</span><span class="nf">RunReservePluginsUnreserve</span><span class="p">(</span><span class="nx">bindingCycleCtx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">assumedPod</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">SuggestedHost</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Run &#34;prebind&#34; plugins.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">preBindStatus</span> <span class="o">:=</span> <span class="nx">fwk</span><span class="p">.</span><span class="nf">RunPreBindPlugins</span><span class="p">(</span><span class="nx">bindingCycleCtx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">assumedPod</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">SuggestedHost</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		
</span></span><span class="line"><span class="cl">        <span class="o">...</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">			<span class="c1">// trigger un-reserve plugins to clean up state associated with the reserved Pod
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">fwk</span><span class="p">.</span><span class="nf">RunReservePluginsUnreserve</span><span class="p">(</span><span class="nx">bindingCycleCtx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">assumedPod</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">SuggestedHost</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">        <span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="o">...</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// trigger un-reserve plugins to clean up state associated with the reserved Pod
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">fwk</span><span class="p">.</span><span class="nf">RunReservePluginsUnreserve</span><span class="p">(</span><span class="nx">bindingCycleCtx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">assumedPod</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">SuggestedHost</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			
</span></span><span class="line"><span class="cl">        <span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Run &#34;postbind&#34; plugins.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">fwk</span><span class="p">.</span><span class="nf">RunPostBindPlugins</span><span class="p">(</span><span class="nx">bindingCycleCtx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">assumedPod</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">SuggestedHost</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="插件-supa-href44asup">插件 <sup><a href="#4">[4]</a></sup></h2>
<p>插件（<code>Plugins</code>）（也可以算是调度策略）在 <code>kube-scheduler</code> 中的实现为 <code>framework plugin</code>，插件API的实现分为两个步骤**：register** 和 <strong>configured</strong>，然后都实现了其父方法 <code>Plugin</code>。然后可以通过配置（kube-scheduler <code>--config</code> 提供）启动或禁用插件；除了默认插件外，还可以实现自定义调度插件与默认插件进行绑定。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Plugin</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">Name</span><span class="p">()</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// sort扩展点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">QueueSortPlugin</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Plugin</span>
</span></span><span class="line"><span class="cl">    <span class="nf">Less</span><span class="p">(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">pod</span><span class="p">,</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">pod</span><span class="p">)</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// PreFilter扩展点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">PreFilterPlugin</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Plugin</span>
</span></span><span class="line"><span class="cl">    <span class="nf">PreFilter</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">pod</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="插件的载入过程">插件的载入过程</h3>
<p>在 <em>scheduler</em> 被启动时，会 <code>scheduler.New(cc.Client..</code> 这个时候会传入 <code>profiles</code>，整个的流如下：</p>
<ul>
<li><code>NewScheduler</code> ：<a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/cmd/kube-scheduler/app/server.go#L327-L346">kubernetes/cmd/kube-scheduler/app/server.go</a></li>
<li><code>profile.NewMap</code>：<a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/profile/profile.go#L48-L64">kubernetes/pkg/scheduler/scheduler.go</a>
<ul>
<li><code>newProfile</code>：<a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/profile/profile.go#L37-L42">kubernetes/pkg/scheduler/scheduler.go</a></li>
</ul>
</li>
<li><code>frameworkruntime.NewFramework</code>：<a href="kubernetes/pkg/scheduler/framework/runtime/framework.go">kubernetes/pkg/scheduler/framework/runtime/framework.go</a>
<ul>
<li><code>pluginsNeeded</code>：<a href="kubernetes/pkg/scheduler/framework/runtime/framework.go">kubernetes/pkg/scheduler/framework/runtime/framework.go</a></li>
</ul>
</li>
</ul>
<h4 id="newscheduler">NewScheduler</h4>
<p>我们了解如何 New 一个 <em>scheduler</em> 即为 <code>Setup</code> 中去配置这些参数，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Setup</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">opts</span> <span class="o">*</span><span class="nx">options</span><span class="p">.</span><span class="nx">Options</span><span class="p">,</span> <span class="nx">outOfTreeRegistryOptions</span> <span class="o">...</span><span class="nx">Option</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">schedulerserverconfig</span><span class="p">.</span><span class="nx">CompletedConfig</span><span class="p">,</span> <span class="o">*</span><span class="nx">scheduler</span><span class="p">.</span><span class="nx">Scheduler</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">	<span class="c1">// Create the scheduler.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">sched</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">scheduler</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cc</span><span class="p">.</span><span class="nx">InformerFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cc</span><span class="p">.</span><span class="nx">DynInformerFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">recorderFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithComponentConfigVersion</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">.</span><span class="nx">TypeMeta</span><span class="p">.</span><span class="nx">APIVersion</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithKubeConfig</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">KubeConfig</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithProfiles</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">.</span><span class="nx">Profiles</span><span class="o">...</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithPercentageOfNodesToScore</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">.</span><span class="nx">PercentageOfNodesToScore</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithFrameworkOutOfTreeRegistry</span><span class="p">(</span><span class="nx">outOfTreeRegistry</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithPodMaxBackoffSeconds</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">.</span><span class="nx">PodMaxBackoffSeconds</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithPodInitialBackoffSeconds</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">.</span><span class="nx">PodInitialBackoffSeconds</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithPodMaxInUnschedulablePodsDuration</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">PodMaxInUnschedulablePodsDuration</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithExtenders</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">.</span><span class="nx">Extenders</span><span class="o">...</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithParallelism</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">.</span><span class="nx">Parallelism</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithBuildFrameworkCapturer</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">profile</span> <span class="nx">kubeschedulerconfig</span><span class="p">.</span><span class="nx">KubeSchedulerProfile</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Profiles are processed during Framework instantiation to set default plugins and configurations. Capturing them for logging
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">completedProfiles</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">completedProfiles</span><span class="p">,</span> <span class="nx">profile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}),</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="profilenewmap">profile.NewMap</h4>
<p>在 <code>scheduler.New</code> 中，会根据配置生成profile，而 <code>profile.NewMap</code> 会完成这一步</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">client</span> <span class="nx">clientset</span><span class="p">.</span><span class="nx">Interface</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">         
</span></span><span class="line"><span class="cl">	<span class="nx">clusterEventMap</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">framework</span><span class="p">.</span><span class="nx">ClusterEvent</span><span class="p">]</span><span class="nx">sets</span><span class="p">.</span><span class="nx">String</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">profiles</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">profile</span><span class="p">.</span><span class="nf">NewMap</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">profiles</span><span class="p">,</span> <span class="nx">registry</span><span class="p">,</span> <span class="nx">recorderFactory</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithComponentConfigVersion</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">componentConfigVersion</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithClientSet</span><span class="p">(</span><span class="nx">client</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithKubeConfig</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">kubeConfig</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithInformerFactory</span><span class="p">(</span><span class="nx">informerFactory</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithSnapshotSharedLister</span><span class="p">(</span><span class="nx">snapshot</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithPodNominator</span><span class="p">(</span><span class="nx">nominator</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithCaptureProfile</span><span class="p">(</span><span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">CaptureProfile</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">frameworkCapturer</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithClusterEventMap</span><span class="p">(</span><span class="nx">clusterEventMap</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithParallelism</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">parallelism</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithExtenders</span><span class="p">(</span><span class="nx">extenders</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">         <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="newframework">NewFramework</h4>
<p><code>newProfile</code> 返回的则是一个创建好的 framework</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">newProfile</span><span class="p">(</span><span class="nx">cfg</span> <span class="nx">config</span><span class="p">.</span><span class="nx">KubeSchedulerProfile</span><span class="p">,</span> <span class="nx">r</span> <span class="nx">frameworkruntime</span><span class="p">.</span><span class="nx">Registry</span><span class="p">,</span> <span class="nx">recorderFact</span> <span class="nx">RecorderFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{},</span> <span class="nx">opts</span> <span class="o">...</span><span class="nx">frameworkruntime</span><span class="p">.</span><span class="nx">Option</span><span class="p">)</span> <span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Framework</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">recorder</span> <span class="o">:=</span> <span class="nf">recorderFact</span><span class="p">(</span><span class="nx">cfg</span><span class="p">.</span><span class="nx">SchedulerName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">opts</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">opts</span><span class="p">,</span> <span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithEventRecorder</span><span class="p">(</span><span class="nx">recorder</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">NewFramework</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">cfg</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">,</span> <span class="nx">opts</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最终会走到 <code>pluginsNeeded</code>，这里会根据配置中开启的插件而返回一个插件集，这个就是最终在每个扩展点中药执行的插件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">frameworkImpl</span><span class="p">)</span> <span class="nf">pluginsNeeded</span><span class="p">(</span><span class="nx">plugins</span> <span class="o">*</span><span class="nx">config</span><span class="p">.</span><span class="nx">Plugins</span><span class="p">)</span> <span class="nx">sets</span><span class="p">.</span><span class="nx">String</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pgSet</span> <span class="o">:=</span> <span class="nx">sets</span><span class="p">.</span><span class="nx">String</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">plugins</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">pgSet</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">find</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">pgs</span> <span class="o">*</span><span class="nx">config</span><span class="p">.</span><span class="nx">PluginSet</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">pg</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">pgs</span><span class="p">.</span><span class="nx">Enabled</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">pgSet</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">pg</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取到所有的扩展点，找到为Enabled的插件加入到pgSet
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">e</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">f</span><span class="p">.</span><span class="nf">getExtensionPoints</span><span class="p">(</span><span class="nx">plugins</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">find</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">plugins</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Parse MultiPoint separately since they are not returned by f.getExtensionPoints()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">plugins</span><span class="p">.</span><span class="nx">MultiPoint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">pgSet</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="插件的执行">插件的执行</h3>
<p>在对插件源码部分分析，会找几个典型的插件进行分析，而不会对全部的进行分析，因为总的来说是大同小异，分析的插件有 <code>NodePorts</code>，<code>NodeResourcesFit</code>，<code>podtopologyspread</code></p>
<h4 id="nodeports">NodePorts</h4>
<p>这里以一个简单的插件来分析；<code>NodePorts</code> 插件用于检查Pod请求的端口，在节点上是否为空闲端口。</p>
<p><a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/framework/plugins/nodeports/node_ports.go#L30">NodePorts</a> 实现了 <code>FilterPlugin</code> 和 <code>PreFilterPlugin</code></p>
<p><a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/framework/plugins/nodeports/node_ports.go#L77-L81">PreFilter</a>  将会被 <code>framework</code> 中 <code>PreFilter</code> 扩展点被调用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">pl</span> <span class="o">*</span><span class="nx">NodePorts</span><span class="p">)</span> <span class="nf">PreFilter</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">cycleState</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">PreFilterResult</span><span class="p">,</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Status</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span> <span class="o">:=</span> <span class="nf">getContainerPorts</span><span class="p">(</span><span class="nx">pod</span><span class="p">)</span> <span class="c1">// 或得Pod得端口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 写入状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cycleState</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">preFilterStateKey</span><span class="p">,</span> <span class="nf">preFilterState</span><span class="p">(</span><span class="nx">s</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/framework/plugins/nodeports/node_ports.go#L113-L125">Filter</a> 将会被 <code>framework</code> 中 <code>Filter</code> 扩展点被调用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Filter invoked at the filter extension point.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">pl</span> <span class="o">*</span><span class="nx">NodePorts</span><span class="p">)</span> <span class="nf">Filter</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">cycleState</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">nodeInfo</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">)</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Status</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="nx">wantPorts</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">getPreFilterState</span><span class="p">(</span><span class="nx">cycleState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">AsStatus</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nx">fits</span> <span class="o">:=</span> <span class="nf">fitsPorts</span><span class="p">(</span><span class="nx">wantPorts</span><span class="p">,</span> <span class="nx">nodeInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="p">!</span><span class="nx">fits</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">NewStatus</span><span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Unschedulable</span><span class="p">,</span> <span class="nx">ErrReason</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">fitsPorts</span><span class="p">(</span><span class="nx">wantPorts</span> <span class="p">[]</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">ContainerPort</span><span class="p">,</span> <span class="nx">nodeInfo</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 对比existingPorts 和 wantPorts是否冲突，冲突则调度失败
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">existingPorts</span> <span class="o">:=</span> <span class="nx">nodeInfo</span><span class="p">.</span><span class="nx">UsedPorts</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">cp</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">wantPorts</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">existingPorts</span><span class="p">.</span><span class="nf">CheckConflict</span><span class="p">(</span><span class="nx">cp</span><span class="p">.</span><span class="nx">HostIP</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">cp</span><span class="p">.</span><span class="nx">Protocol</span><span class="p">),</span> <span class="nx">cp</span><span class="p">.</span><span class="nx">HostPort</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/framework/plugins/nodeports/node_ports.go#L144-L146">New</a> ，初始化新插件，在 <code>register</code> 中注册得</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">_</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span><span class="p">,</span> <span class="nx">_</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">Handle</span><span class="p">)</span> <span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Plugin</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">NodePorts</span><span class="p">{},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在调用中，如果有任何一个插件返回错误，则跳过该扩展点注册得其他插件，返回失败。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">frameworkImpl</span><span class="p">)</span> <span class="nf">RunFilterPlugins</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">state</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">nodeInfo</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">PluginToStatus</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">statuses</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">PluginToStatus</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">pl</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">f</span><span class="p">.</span><span class="nx">filterPlugins</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">pluginStatus</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nf">runFilterPlugin</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">pl</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">,</span> <span class="nx">nodeInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">pluginStatus</span><span class="p">.</span><span class="nf">IsSuccess</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">pluginStatus</span><span class="p">.</span><span class="nf">IsUnschedulable</span><span class="p">()</span> 
</span></span><span class="line"><span class="cl">				<span class="nx">errStatus</span> <span class="o">:=</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">AsStatus</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;running %q filter plugin: %w&#34;</span><span class="p">,</span> <span class="nx">pl</span><span class="p">.</span><span class="nf">Name</span><span class="p">(),</span> <span class="nx">pluginStatus</span><span class="p">.</span><span class="nf">AsError</span><span class="p">())).</span><span class="nf">WithFailedPlugin</span><span class="p">(</span><span class="nx">pl</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Status</span><span class="p">{</span><span class="nx">pl</span><span class="p">.</span><span class="nf">Name</span><span class="p">():</span> <span class="nx">errStatus</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">pluginStatus</span><span class="p">.</span><span class="nf">SetFailedPlugin</span><span class="p">(</span><span class="nx">pl</span><span class="p">.</span><span class="nf">Name</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="nx">statuses</span><span class="p">[</span><span class="nx">pl</span><span class="p">.</span><span class="nf">Name</span><span class="p">()]</span> <span class="p">=</span> <span class="nx">pluginStatus</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">statuses</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>返回得状态是一个 Status 结构体，该结构体表示了插件运行的结果。由 <code>Code</code>、<code>reasons</code>、（可选）<code>err</code> 和 <code>failedPlugin</code> （失败的那个插件名）组成。当 <em>code</em> 不是 <code>Success</code> 时，应说明原因。而且，当 <em>code</em> 为 <code>Success</code> 时，其他所有字段都应为空。<code>nil</code> 状态也被视为成功。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Status</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">code</span>    <span class="nx">Code</span>
</span></span><span class="line"><span class="cl">	<span class="nx">reasons</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span>     <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// failedPlugin is an optional field that records the plugin name a Pod failed by.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// It&#39;s set by the framework when code is Error, Unschedulable or UnschedulableAndUnresolvable.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">failedPlugin</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="noderesourcesfit--supa-href55asup">NodeResourcesFit  <sup><a href="#5">[5]</a></sup></h4>
<p><code>NodeResourcesFit</code> 扩展检查节点是否拥有 Pod 请求的所有资源。分数可以使用以下三种策略之一，扩展点为：<code>preFilter</code>， <code>filter</code>，<code>score</code></p>
<ul>
<li><code>LeastAllocated</code> （默认）</li>
<li><code>MostAllocated</code></li>
<li><code>RequestedToCapacityRatio</code></li>
</ul>
<h4 id="fit">Fit</h4>
<p><code>NodeResourcesFit  </code> PreFilter 可以看到调用得 <code>computePodResourceRequest</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">// PreFilter invoked at the prefilter extension point.
</span></span><span class="line"><span class="cl">func (f *Fit) PreFilter(ctx context.Context, cycleState *framework.CycleState, pod *v1.Pod) (*framework.PreFilterResult, *framework.Status) {
</span></span><span class="line"><span class="cl">   cycleState.Write(preFilterStateKey, computePodResourceRequest(pod))
</span></span><span class="line"><span class="cl">   return nil, nil
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/framework/plugins/noderesources/fit.go#L133-L175">computePodResourceRequest</a> 这里有一个注释，总体解释起来是这样得：<code>computePodResourceRequest</code> ，返回值（ <code>framework.Resource</code>）覆盖了每一个维度中资源的最大宽度。因为将按照 <code>init-containers</code> , <code>containers</code> 得顺序运行，会通过迭代方式收集每个维度中的最大值。计算时会对常规容器的资源向量求和，因为<code>containers</code> 运行会同时运行多个容器。计算示例为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">Pod</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="l">InitContainers</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">IC1</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">CPU</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">Memory</span><span class="p">:</span><span class="w"> </span><span class="l">1G</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">IC2</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">CPU</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">Memory</span><span class="p">:</span><span class="w"> </span><span class="l">3G</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="l">Containers</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">C1</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">CPU</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">Memory</span><span class="p">:</span><span class="w"> </span><span class="l">1G</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">C2</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">CPU</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">Memory</span><span class="p">:</span><span class="w"> </span><span class="l">1G</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在维度1中（<code>InitContainers</code>）所需资源最大值时，CPU=2, Memory=3G；而维度2（<code>Containers</code>）所需资源最大值为：CPU=2, Memory=1G；那么最终结果为 CPU=3, Memory=3G，因为在维度1，最大资源时Memory=3G；而维度2最大资源是CPU=1+2, Memory=1+1，取每个维度中最大资源最大宽度即为 CPU=3, Memory=3G。</p>
<p>下面则看下代码得实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">computePodResourceRequest</span><span class="p">(</span><span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="o">*</span><span class="nx">preFilterState</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">result</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">preFilterState</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">container</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">pod</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Containers</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">result</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">container</span><span class="p">.</span><span class="nx">Resources</span><span class="p">.</span><span class="nx">Requests</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 取最大得资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">container</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">pod</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">InitContainers</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">result</span><span class="p">.</span><span class="nf">SetMaxResource</span><span class="p">(</span><span class="nx">container</span><span class="p">.</span><span class="nx">Resources</span><span class="p">.</span><span class="nx">Requests</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 如果Overhead正在使用，需要将其计算到总资源中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">pod</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Overhead</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">result</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">pod</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">Overhead</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">result</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// SetMaxResource 是比较ResourceList并为每个资源取最大值。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">Resource</span><span class="p">)</span> <span class="nf">SetMaxResource</span><span class="p">(</span><span class="nx">rl</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">ResourceList</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">r</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">rName</span><span class="p">,</span> <span class="nx">rQuantity</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">rl</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">switch</span> <span class="nx">rName</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">ResourceMemory</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="nx">r</span><span class="p">.</span><span class="nx">Memory</span> <span class="p">=</span> <span class="nf">max</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">Memory</span><span class="p">,</span> <span class="nx">rQuantity</span><span class="p">.</span><span class="nf">Value</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">ResourceCPU</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="nx">r</span><span class="p">.</span><span class="nx">MilliCPU</span> <span class="p">=</span> <span class="nf">max</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">MilliCPU</span><span class="p">,</span> <span class="nx">rQuantity</span><span class="p">.</span><span class="nf">MilliValue</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">ResourceEphemeralStorage</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">utilfeature</span><span class="p">.</span><span class="nx">DefaultFeatureGate</span><span class="p">.</span><span class="nf">Enabled</span><span class="p">(</span><span class="nx">features</span><span class="p">.</span><span class="nx">LocalStorageCapacityIsolation</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">r</span><span class="p">.</span><span class="nx">EphemeralStorage</span> <span class="p">=</span> <span class="nf">max</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">EphemeralStorage</span><span class="p">,</span> <span class="nx">rQuantity</span><span class="p">.</span><span class="nf">Value</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">schedutil</span><span class="p">.</span><span class="nf">IsScalarResourceName</span><span class="p">(</span><span class="nx">rName</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">r</span><span class="p">.</span><span class="nf">SetScalar</span><span class="p">(</span><span class="nx">rName</span><span class="p">,</span> <span class="nf">max</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">ScalarResources</span><span class="p">[</span><span class="nx">rName</span><span class="p">],</span> <span class="nx">rQuantity</span><span class="p">.</span><span class="nf">Value</span><span class="p">()))</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="leastallocate">leastAllocate</h4>
<p>LeastAllocated 是 NodeResourcesFit 的打分策略 ，<code>LeastAllocated</code> 打分的标准是更偏向于请求资源较少的Node。将会先计算出Node上调度的pod请求的内存、CPU与其他资源的百分比，然后并根据请求的比例与容量的平均值的最小值进行优先级排序。</p>
<p>计算公式是这样的：$\frac{\frac{cpu((capacity-requested) \times MaxNodeScore \times cpuWeight)}{capacity} + \frac{memory((capacity-requested) \times MaxNodeScore \times memoryWeight}{capacity}) + &hellip;}{weightSum}$</p>
<p>下面来看下实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">leastResourceScorer</span><span class="p">(</span><span class="nx">resToWeightMap</span> <span class="nx">resourceToWeightMap</span><span class="p">)</span> <span class="kd">func</span><span class="p">(</span><span class="nx">resourceToValueMap</span><span class="p">,</span> <span class="nx">resourceToValueMap</span><span class="p">)</span> <span class="kt">int64</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">requested</span><span class="p">,</span> <span class="nx">allocable</span> <span class="nx">resourceToValueMap</span><span class="p">)</span> <span class="kt">int64</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">nodeScore</span><span class="p">,</span> <span class="nx">weightSum</span> <span class="kt">int64</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">resource</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">requested</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">weight</span> <span class="o">:=</span> <span class="nx">resToWeightMap</span><span class="p">[</span><span class="nx">resource</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="c1">//  计算出的资源分数乘weight
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">resourceScore</span> <span class="o">:=</span> <span class="nf">leastRequestedScore</span><span class="p">(</span><span class="nx">requested</span><span class="p">[</span><span class="nx">resource</span><span class="p">],</span> <span class="nx">allocable</span><span class="p">[</span><span class="nx">resource</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">			<span class="nx">nodeScore</span> <span class="o">+=</span> <span class="nx">resourceScore</span> <span class="o">*</span> <span class="nx">weight</span>
</span></span><span class="line"><span class="cl">			<span class="nx">weightSum</span> <span class="o">+=</span> <span class="nx">weight</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">weightSum</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 最终除weightSum
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="nx">nodeScore</span> <span class="o">/</span> <span class="nx">weightSum</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>leastRequestedScore 计算标准为<strong>未使用容量</strong>的计算范围为 <code>0~MaxNodeScore</code>，0 为最低优先级，<code>MaxNodeScore</code> 为最高优先级。未使用的资源越多，得分越高。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">leastRequestedScore</span><span class="p">(</span><span class="nx">requested</span><span class="p">,</span> <span class="nx">capacity</span> <span class="kt">int64</span><span class="p">)</span> <span class="kt">int64</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">capacity</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">requested</span> <span class="p">&gt;</span> <span class="nx">capacity</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 容量 - 请求的 x 预期值（100）/ 容量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="p">((</span><span class="nx">capacity</span> <span class="o">-</span> <span class="nx">requested</span><span class="p">)</span> <span class="o">*</span> <span class="nb">int64</span><span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">MaxNodeScore</span><span class="p">))</span> <span class="o">/</span> <span class="nx">capacity</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="topology-supa-href66asup">Topology <sup><a href="#6">[6]</a></sup></h3>
<h4 id="concept">Concept</h4>
<p>在对 <code>podtopologyspread</code> 插件进行分析前，先需要掌握Pod拓扑的概念。</p>
<p>Pod拓扑（<code>Pod Topology</code>）是Kubernetes Pod调度机制，可以将Pod分布在集群中不同 <code>Zone</code> ，以及用户自定义的各种拓扑域 （<code>topology domains</code>）。当有了拓扑域后，用户可以更高效的利用集群资源。</p>
<p>如何来解释拓扑域，首先需要提及为什么需要拓扑域，在集群有3个节点，并且当Pod副本数为2时，又不希望两个Pod在同一个Node上运行。在随着扩大Pod的规模，副本数扩展到到15个时，这时候最理想的方式是每个Node运行5个Pod，在这种背景下，用户希望对集群中Zone的安排为相似的副本数量，并且在集群存在部分问题时可以更好的自愈（也是按照相似的副本数量均匀的分布在Node上）。在这种情况下Kubernetes 提供了Pod 拓扑约束来解决这个问题。</p>
<h4 id="定义一个topology">定义一个Topology</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">example-pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Configure a topology spread constraint</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">topologySpreadConstraints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">maxSkew</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;integer&gt;</span><span class="w"> </span><span class="c"># </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">minDomains</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;integer&gt;</span><span class="w"> </span><span class="c"># optional; alpha since v1.24</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">topologyKey</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;string&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">whenUnsatisfiable</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;string&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labelSelector</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;object&gt;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>参数的描述</strong>：</p>
<ul>
<li><strong>maxSkew</strong>：Required，Pod分布不均的程度，并且数字必须大于零
<ul>
<li>当 <code>whenUnsatisfiable: DoNotSchedule</code>，则定义目标拓扑中匹配 pod 的数量与 <strong>全局最小值</strong>（<em>拓扑域中的标签选择器匹配的 pod 的最小数量</em> ）<code>maxSkew</code>之间的最大允许差异。例如有 3 个 <code>Zone</code>，分别具有 2、4 和 5 个匹配的 pod，则全局最小值为 2</li>
<li>当 <code>whenUnsatisfiable: ScheduleAnyway</code>，<em>scheduler</em> 会为减少倾斜的拓扑提供更高的优先级。</li>
</ul>
</li>
<li><strong>minDomains</strong>：optional，符合条件的域的最小数量。
<ul>
<li>如果不指定该选项 <code>minDomains</code>，则约束的行为 <code>minDomains: 1</code> 。</li>
<li><code>minDomains</code>必须大于 0。<code>minDomains</code>与 <code>whenUnsatisfiable</code> 一起时为<code>whenUnsatisfiable: DoNotSchedule</code>。</li>
</ul>
</li>
<li><strong>topologyKey</strong>：Node label的key，如果多个Node都使用了这个lable key那么 <em>scheduler</em> 将这些 Node 看作为相同的拓扑域。</li>
<li><strong>whenUnsatisfiable</strong>：当 Pod 不满足分布的约束时，怎么去处理
<ul>
<li><code>DoNotSchedule</code>（默认）不要调度。</li>
<li><code>ScheduleAnyway</code>仍然调度它，同时优先考虑最小化倾斜节点</li>
</ul>
</li>
<li><strong>labelSelector</strong>：查找匹配的 Pod label选择器的node进行技术，以计算Pod如何分布在拓扑域中</li>
</ul>
<h4 id="对于拓扑域的理解">对于拓扑域的理解</h4>
<p>对于拓扑域，官方是这么说明的，假设有一个带有以下lable的 4 节点集群：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">NAME    STATUS   ROLES    AGE     VERSION   LABELS
</span></span><span class="line"><span class="cl">node1   Ready    &lt;none&gt;   4m26s   v1.16.0   <span class="nv">node</span><span class="o">=</span>node1,zone<span class="o">=</span>zoneA
</span></span><span class="line"><span class="cl">node2   Ready    &lt;none&gt;   3m58s   v1.16.0   <span class="nv">node</span><span class="o">=</span>node2,zone<span class="o">=</span>zoneA
</span></span><span class="line"><span class="cl">node3   Ready    &lt;none&gt;   3m17s   v1.16.0   <span class="nv">node</span><span class="o">=</span>node3,zone<span class="o">=</span>zoneB
</span></span><span class="line"><span class="cl">node4   Ready    &lt;none&gt;   2m43s   v1.16.0   <span class="nv">node</span><span class="o">=</span>node4,zone<span class="o">=</span>zoneB
</span></span></code></pre></td></tr></table>
</div>
</div><p>那么集群拓扑如图：</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220725223516451.png" alt="image-20220725223516451"  /></p>
<center class="podsc">图1：集群拓扑图</center>
<center><em>Source：</em>https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/</center>
<p>假设一个 4 节点集群，其中 3个label被标记为<code>foo: bar</code>的 Pod 分别位于Node1、Node2 和 Node3：</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220725224602667.png" alt="image-20220725224602667"  /></p>
<center class="podsc">图2：集群拓扑图</center>
<center><em>Source：</em>https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/</center>
<p>这种情况下，新部署一个Pod，并希望新Pod与现有Pod跨 <code>Zone</code>均匀分布，资源清单文件如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mypod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">foo</span><span class="p">:</span><span class="w"> </span><span class="l">bar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">topologySpreadConstraints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">maxSkew</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">topologyKey</span><span class="p">:</span><span class="w"> </span><span class="l">zone</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">whenUnsatisfiable</span><span class="p">:</span><span class="w"> </span><span class="l">DoNotSchedule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">labelSelector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">foo</span><span class="p">:</span><span class="w"> </span><span class="l">bar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">pause</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">k8s.gcr.io/pause:3.1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这个清单对于拓扑域来说，<code>topologyKey: zone</code> 表示对Pod均匀分布仅应用于已标记的节点（如 <code>foo: bar</code>），将会跳过没有标签的节点（如<code>zone: &lt;any value&gt;</code>）。如果 <em>scheduler</em> 找不到满足约束的方法，<code>whenUnsatisfiable: DoNotSchedule</code> 设置的策略则是 <em>scheduler</em> 对新部署的Pod保持 <code>Pendding</code></p>
<p>如果此时 <em>scheduler</em> 将新Pod 调度至 $Zone_A$，此时Pod分布在拓扑域间为 $[3,1]$ ，而 <code>maxSkew</code> 配置的值是1。此时倾斜值为 $Zone_A - Zone_B = 3-1=2$，不满足 <code>maxSkew=1</code>，故这个Pod只能被调度到 $Zone_B$。</p>
<p>此时Pod调度拓扑图为图3或图4</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220725230358777.png" alt="image-20220725230358777"  /></p>
<center class="podsc">图3：集群拓扑图</center>
<center><em>Source：</em>https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/</center>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220725230515969.png" alt="image-20220725230515969"  /></p>
<center class="podsc">图4：集群拓扑图</center>
<center><em>Source：</em>https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/</center>
<p>如果需要将Pod调度到 $Zone_A$ ,可以按照如下方式进行：</p>
<ul>
<li>修改 <code>maxSkew=2</code></li>
<li>修改 <code>topologyKey: node</code> 而不是 <code>Zone</code> ，这种模式下可以将 Pod 均匀分布在Node而不是Zone之间。</li>
<li>修改 <code>whenUnsatisfiable: DoNotSchedule</code> 为 <code>whenUnsatisfiable: ScheduleAnyway</code> 确保新的Pod始终可被调度</li>
</ul>
<p>下面再通过一个例子增强对拓扑域了解</p>
<p><strong>多拓扑约束</strong></p>
<p>设拥有一个 4 节点集群，其中 3 个现有 Pod 标记 <code>foo: bar </code>分别位于 <code>node1</code>、<code>node2</code> 和 <code>node3</code></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220725231905415.png" alt="image-20220725231905415"  /></p>
<center class="podsc">图5：集群拓扑图</center>
<center><em>Source：</em>https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/</center>
<p>部署的资源清单如下：可以看出拓扑分布约束配置了多个</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">mypod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">foo</span><span class="p">:</span><span class="w"> </span><span class="l">bar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">topologySpreadConstraints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">maxSkew</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">topologyKey</span><span class="p">:</span><span class="w"> </span><span class="l">zone</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">whenUnsatisfiable</span><span class="p">:</span><span class="w"> </span><span class="l">DoNotSchedule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">labelSelector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">foo</span><span class="p">:</span><span class="w"> </span><span class="l">bar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">maxSkew</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">topologyKey</span><span class="p">:</span><span class="w"> </span><span class="l">node</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">whenUnsatisfiable</span><span class="p">:</span><span class="w"> </span><span class="l">DoNotSchedule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">labelSelector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">foo</span><span class="p">:</span><span class="w"> </span><span class="l">bar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">pause</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">k8s.gcr.io/pause:3.1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在这种情况下，为了匹配第一个约束条件，新Pod 只能放置在 $Zone_B$ ；而就第二个约束条件，新Pod只能调度到 <code>node4</code>。在这种配置多约束条件下， <em>scheduler</em> 只考虑满足所有约束的值，因此唯一有效的是 <code>node4</code>。</p>
<h4 id="如何为集群设置一个默认拓扑域约束">如何为集群设置一个默认拓扑域约束</h4>
<p>默认情况下，拓扑域约束也作 <em>scheduler</em> 的为 <em>scheduler configurtion</em> 中的一部分参数，这也意味着，可以通过profile为整个集群级别指定一个默认的拓扑域调度约束，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">kubescheduler.config.k8s.io/v1beta3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">KubeSchedulerConfiguration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">profiles</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">schedulerName</span><span class="p">:</span><span class="w"> </span><span class="l">default-scheduler</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pluginConfig</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">PodTopologySpread</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">args</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">defaultConstraints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">maxSkew</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">topologyKey</span><span class="p">:</span><span class="w"> </span><span class="l">topology.kubernetes.io/zone</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">whenUnsatisfiable</span><span class="p">:</span><span class="w"> </span><span class="l">ScheduleAnyway</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">defaultingType</span><span class="p">:</span><span class="w"> </span><span class="l">List</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="默认约束策略">默认约束策略</h4>
<p>如果在没有配置集群级别的约束策略时，<em>kube-scheduler</em> 内部 <code>topologyspread</code> 插件提供了一个默认的拓扑约束策略，大致上如下列清单所示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">defaultConstraints:
</span></span><span class="line"><span class="cl">  - maxSkew: 3
</span></span><span class="line"><span class="cl">    topologyKey: &#34;kubernetes.io/hostname&#34;
</span></span><span class="line"><span class="cl">    whenUnsatisfiable: ScheduleAnyway
</span></span><span class="line"><span class="cl">  - maxSkew: 5
</span></span><span class="line"><span class="cl">    topologyKey: &#34;topology.kubernetes.io/zone&#34;
</span></span><span class="line"><span class="cl">    whenUnsatisfiable: ScheduleAnyway
</span></span></code></pre></td></tr></table>
</div>
</div><p>上述清单中内容可以在 <a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/framework/plugins/podtopologyspread/plugin.go#L42-L53">pkg\scheduler\framework\plugins\podtopologyspread\plugin.go</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">systemDefaultConstraints</span> <span class="p">=</span> <span class="p">[]</span><span class="nx">v1</span><span class="p">.</span><span class="nx">TopologySpreadConstraint</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">TopologyKey</span><span class="p">:</span>       <span class="nx">v1</span><span class="p">.</span><span class="nx">LabelHostname</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">WhenUnsatisfiable</span><span class="p">:</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">ScheduleAnyway</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">MaxSkew</span><span class="p">:</span>           <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">TopologyKey</span><span class="p">:</span>       <span class="nx">v1</span><span class="p">.</span><span class="nx">LabelTopologyZone</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">WhenUnsatisfiable</span><span class="p">:</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">ScheduleAnyway</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">MaxSkew</span><span class="p">:</span>           <span class="mi">5</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以通过在配置文件中留空，来禁用默认配置</p>
<ul>
<li><code>defaultConstraints: []</code></li>
<li><code>defaultingType: List</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">kubescheduler.config.k8s.io/v1beta3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">KubeSchedulerConfiguration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">profiles</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">schedulerName</span><span class="p">:</span><span class="w"> </span><span class="l">default-scheduler</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">pluginConfig</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">PodTopologySpread</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">args</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">defaultConstraints</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">defaultingType</span><span class="p">:</span><span class="w"> </span><span class="l">List</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="通过源码学习topology">通过源码学习Topology</h3>
<p><code>podtopologyspread</code> 实现了4种扩展点方法，包含 <code>filter</code> 和 <code>score</code></p>
<h4 id="prefilter">PreFilter</h4>
<p>可以看到 <code>PreFilter</code> 的核心为 <code>calPreFilterState</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">pl</span> <span class="o">*</span><span class="nx">PodTopologySpread</span><span class="p">)</span> <span class="nf">PreFilter</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">cycleState</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">PreFilterResult</span><span class="p">,</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Status</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">pl</span><span class="p">.</span><span class="nf">calPreFilterState</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">AsStatus</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cycleState</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">preFilterStateKey</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/framework/plugins/podtopologyspread/filtering.go#L225-L307">calPreFilterState</a> 主要功能是用在计算如何在拓扑域中分布Pod，首先看段代码时，需要掌握下属几个概念</p>
<ul>
<li><a href="#preFilterState">preFilterState</a></li>
<li><a href="#criticalPaths">criticalPaths</a></li>
<li><a href="#update">update</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">pl</span> <span class="o">*</span><span class="nx">PodTopologySpread</span><span class="p">)</span> <span class="nf">calPreFilterState</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">preFilterState</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取Node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">allNodes</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">pl</span><span class="p">.</span><span class="nx">sharedLister</span><span class="p">.</span><span class="nf">NodeInfos</span><span class="p">().</span><span class="nf">List</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;listing NodeInfos: %w&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">constraints</span> <span class="p">[]</span><span class="nx">topologySpreadConstraint</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">pod</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">TopologySpreadConstraints</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 这里会构建出TopologySpreadConstraints，因为约束是不确定的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">constraints</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nf">filterTopologySpreadConstraints</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">			<span class="nx">pod</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">TopologySpreadConstraints</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">v1</span><span class="p">.</span><span class="nx">DoNotSchedule</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">pl</span><span class="p">.</span><span class="nx">enableMinDomainsInPodTopologySpread</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">pl</span><span class="p">.</span><span class="nx">enableNodeInclusionPolicyInPodTopologySpread</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;obtaining pod&#39;s hard topology spread constraints: %w&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// buildDefaultConstraints使用&#34;.DefaultConstraints&#34;与pod匹配的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// service、replication controllers、replica sets 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 和stateful sets的选择器为pod构建一个约束。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">constraints</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">pl</span><span class="p">.</span><span class="nf">buildDefaultConstraints</span><span class="p">(</span><span class="nx">pod</span><span class="p">,</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">DoNotSchedule</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;setting default hard topology spread constraints: %w&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">constraints</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span> <span class="c1">// 如果是空的，则返回空preFilterState
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="o">&amp;</span><span class="nx">preFilterState</span><span class="p">{},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化一个 preFilterState 状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">s</span> <span class="o">:=</span> <span class="nx">preFilterState</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Constraints</span><span class="p">:</span>          <span class="nx">constraints</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">TpKeyToCriticalPaths</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">criticalPaths</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">constraints</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">TpPairToMatchNum</span><span class="p">:</span>     <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">topologyPair</span><span class="p">]</span><span class="kt">int</span><span class="p">,</span> <span class="nf">sizeHeuristic</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">allNodes</span><span class="p">),</span> <span class="nx">constraints</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 根据node统计拓扑域数量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">tpCountsByNode</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kd">map</span><span class="p">[</span><span class="nx">topologyPair</span><span class="p">]</span><span class="kt">int</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">allNodes</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 获取pod亲和度配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">requiredNodeAffinity</span> <span class="o">:=</span> <span class="nx">nodeaffinity</span><span class="p">.</span><span class="nf">GetRequiredNodeAffinity</span><span class="p">(</span><span class="nx">pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">processNode</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">nodeInfo</span> <span class="o">:=</span> <span class="nx">allNodes</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="nx">node</span> <span class="o">:=</span> <span class="nx">nodeInfo</span><span class="p">.</span><span class="nf">Node</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">node</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;Node not found&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 通过spreading去过滤node以用作filters，错误解析以向后兼容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">!</span><span class="nx">pl</span><span class="p">.</span><span class="nx">enableNodeInclusionPolicyInPodTopologySpread</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">match</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">requiredNodeAffinity</span><span class="p">.</span><span class="nf">Match</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span> <span class="p">!</span><span class="nx">match</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 确保node的lable 包含topologyKeys定义的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="p">!</span><span class="nf">nodeLabelsMatchSpreadConstraints</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">Labels</span><span class="p">,</span> <span class="nx">constraints</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">tpCounts</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">topologyPair</span><span class="p">]</span><span class="kt">int</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">constraints</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">c</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">constraints</span> <span class="p">{</span> <span class="c1">// 对应的约束列表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">pl</span><span class="p">.</span><span class="nx">enableNodeInclusionPolicyInPodTopologySpread</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">				<span class="p">!</span><span class="nx">c</span><span class="p">.</span><span class="nf">matchNodeInclusionPolicies</span><span class="p">(</span><span class="nx">pod</span><span class="p">,</span> <span class="nx">node</span><span class="p">,</span> <span class="nx">requiredNodeAffinity</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 构建出 topologyPair 以key value形式，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// 通常情况下TopologyKey属于什么类型的拓扑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">//  node.Labels[c.TopologyKey] 则是属于这个拓扑中那个子域
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">pair</span> <span class="o">:=</span> <span class="nx">topologyPair</span><span class="p">{</span><span class="nx">key</span><span class="p">:</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TopologyKey</span><span class="p">,</span> <span class="nx">value</span><span class="p">:</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Labels</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">TopologyKey</span><span class="p">]}</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 计算与标签选择器相匹配的pod有多少个
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">count</span> <span class="o">:=</span> <span class="nf">countPodsMatchSelector</span><span class="p">(</span><span class="nx">nodeInfo</span><span class="p">.</span><span class="nx">Pods</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Selector</span><span class="p">,</span> <span class="nx">pod</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">tpCounts</span><span class="p">[</span><span class="nx">pair</span><span class="p">]</span> <span class="p">=</span> <span class="nx">count</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tpCountsByNode</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">tpCounts</span> <span class="c1">// 最终形成的拓扑结构
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 执行上面的定义的processNode，执行的数量就是node的数量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">pl</span><span class="p">.</span><span class="nx">parallelizer</span><span class="p">.</span><span class="nf">Until</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">allNodes</span><span class="p">),</span> <span class="nx">processNode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 最后构建出 TpPairToMatchNum
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 表示每个拓扑域中的每个子域各分布多少Pod，如图6所示
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tpCounts</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tpCountsByNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">tp</span><span class="p">,</span> <span class="nx">count</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tpCounts</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">s</span><span class="p">.</span><span class="nx">TpPairToMatchNum</span><span class="p">[</span><span class="nx">tp</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">count</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">pl</span><span class="p">.</span><span class="nx">enableMinDomainsInPodTopologySpread</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 根据状态进行构建 preFilterState
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">s</span><span class="p">.</span><span class="nx">TpKeyToDomainsNum</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">constraints</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">tp</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span><span class="p">.</span><span class="nx">TpPairToMatchNum</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">s</span><span class="p">.</span><span class="nx">TpKeyToDomainsNum</span><span class="p">[</span><span class="nx">tp</span><span class="p">.</span><span class="nx">key</span><span class="p">]</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 计算最小匹配出的拓扑对
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">constraints</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">key</span> <span class="o">:=</span> <span class="nx">constraints</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">TopologyKey</span>
</span></span><span class="line"><span class="cl">		<span class="nx">s</span><span class="p">.</span><span class="nx">TpKeyToCriticalPaths</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="p">=</span> <span class="nf">newCriticalPaths</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">pair</span><span class="p">,</span> <span class="nx">num</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span><span class="p">.</span><span class="nx">TpPairToMatchNum</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">s</span><span class="p">.</span><span class="nx">TpKeyToCriticalPaths</span><span class="p">[</span><span class="nx">pair</span><span class="p">.</span><span class="nx">key</span><span class="p">].</span><span class="nf">update</span><span class="p">(</span><span class="nx">pair</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">s</span><span class="p">,</span> <span class="kc">nil</span> <span class="c1">// 返回的值则包含最小的分布
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p class="preFilterState">preFilterState</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// preFilterState 是在PreFilter处计算并在Filter处使用。
</span></span></span><span class="line"><span class="cl"><span class="c1">// 它结合了 “TpKeyToCriticalPaths” 和 “TpPairToMatchNum” 来表示：
</span></span></span><span class="line"><span class="cl"><span class="c1">//（1）在每个分布约束上匹配最少pod的criticalPaths。 
</span></span></span><span class="line"><span class="cl"><span class="c1">// (2) 在每个分布约束上匹配的pod的数量。
</span></span></span><span class="line"><span class="cl"><span class="c1">// “nil preFilterState” 则表示没有设置（在PreFilter阶段）；
</span></span></span><span class="line"><span class="cl"><span class="c1">// empty “preFilterState”对象则表示它是一个合法的状态，并在PreFilter阶段设置。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">preFilterState</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Constraints</span> <span class="p">[]</span><span class="nx">topologySpreadConstraint</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 这里记录2条关键路径而不是所有关键路径。 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// criticalPaths[0].MatchNum 始终保存最小匹配数。 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// criticalPaths[1].MatchNum 总是大于或等于criticalPaths[0].MatchNum，但不能保证是第二个最小匹配数。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">TpKeyToCriticalPaths</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">criticalPaths</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">    <span class="c1">// TpKeyToDomainsNum 以 “topologyKey” 作为key ，并以zone的数量作为值。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">TpKeyToDomainsNum</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">    <span class="c1">// TpPairToMatchNum 以 “topologyPair作为key” ，并以匹配到pod的数量作为value。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">TpPairToMatchNum</span> <span class="kd">map</span><span class="p">[</span><span class="nx">topologyPair</span><span class="p">]</span><span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p class="criticalPaths">criticalPaths</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// [2]criticalPath能够工作的原因是基于当前抢占算法的实现，特别是以下两个事实
</span></span></span><span class="line"><span class="cl"><span class="c1">// 事实 1：只抢占同一节点上的Pod，而不是多个节点上的 Pod。
</span></span></span><span class="line"><span class="cl"><span class="c1">// 事实 2：每个节点在其抢占周期期间在“preFilterState”的单独副本上进行评估。如果我们计划转向更复杂的算法，例如“多个节点上的任意pod”时则需要重新考虑这种结构。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">criticalPaths</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// TopologyValue代表映射到拓扑键的拓扑值。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">TopologyValue</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// MatchNum代表匹配到的pod数量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">MatchNum</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>单元测试中的测试案例，具有两个约束条件的场景，通过表格来解析如下：</p>
<p>Node列表与标签如下表：</p>
<table>
<thead>
<tr>
<th>Node Name</th>
<th>🏷️Lable-zone</th>
<th>🏷️Lable-node</th>
</tr>
</thead>
<tbody>
<tr>
<td>node-a</td>
<td>zone1</td>
<td>node-a</td>
</tr>
<tr>
<td>node-b</td>
<td>zone1</td>
<td>node-b</td>
</tr>
<tr>
<td>node-x</td>
<td>zone2</td>
<td>node-x</td>
</tr>
<tr>
<td>node-y</td>
<td>zone2</td>
<td>node-y</td>
</tr>
</tbody>
</table>
<p>Pod列表与标签如下表：</p>
<table>
<thead>
<tr>
<th>Pod Name</th>
<th>Node</th>
<th>🏷️Label</th>
</tr>
</thead>
<tbody>
<tr>
<td>p-a1</td>
<td>node-a</td>
<td>foo:</td>
</tr>
<tr>
<td>p-a2</td>
<td>node-a</td>
<td>foo:</td>
</tr>
<tr>
<td>p-b1</td>
<td>node-b</td>
<td>foo:</td>
</tr>
<tr>
<td>p-y1</td>
<td>node-y</td>
<td>foo:</td>
</tr>
<tr>
<td>p-y2</td>
<td>node-y</td>
<td>foo:</td>
</tr>
<tr>
<td>p-y3</td>
<td>node-y</td>
<td>foo:</td>
</tr>
<tr>
<td>p-y4</td>
<td>node-y</td>
<td>foo:</td>
</tr>
</tbody>
</table>
<p>对应的拓扑约束</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">topologySpreadConstraints</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">MaxSkew</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nt">TopologyKey</span><span class="p">:</span><span class="w"> </span><span class="l">zone</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nt">labelSelector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	  </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="nt">foo</span><span class="p">:</span><span class="w"> </span><span class="l">bar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nt">MinDomains</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nt">NodeAffinityPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Honor</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nt">NodeTaintsPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Ignore</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">MaxSkew</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nt">TopologyKey</span><span class="p">:</span><span class="w"> </span><span class="l">node</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nt">labelSelector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	  </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	    </span><span class="nt">foo</span><span class="p">:</span><span class="w"> </span><span class="l">bar</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nt">MinDomains</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nt">NodeAffinityPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Honor</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="nt">NodeTaintsPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Ignore</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>那么整个分布如下：</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220726214255638.png" alt="image-20220726214255638"  /></p>
<center class="podsc">图6：具有两个场景的分布图</center>
<p id="prefiltertesting">实现的测试代码如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">name</span><span class="p">:</span> <span class="s">&#34;normal case with two spreadConstraints&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pod</span><span class="p">:</span> <span class="nx">st</span><span class="p">.</span><span class="nf">MakePod</span><span class="p">().</span><span class="nf">Name</span><span class="p">(</span><span class="s">&#34;p&#34;</span><span class="p">).</span><span class="nf">Label</span><span class="p">(</span><span class="s">&#34;foo&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">    <span class="nf">SpreadConstraint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#34;zone&#34;</span><span class="p">,</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">DoNotSchedule</span><span class="p">,</span> <span class="nx">fooSelector</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">    <span class="nf">SpreadConstraint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&#34;node&#34;</span><span class="p">,</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">DoNotSchedule</span><span class="p">,</span> <span class="nx">fooSelector</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">    <span class="nf">Obj</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">nodes</span><span class="p">:</span> <span class="p">[]</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Node</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">st</span><span class="p">.</span><span class="nf">MakeNode</span><span class="p">().</span><span class="nf">Name</span><span class="p">(</span><span class="s">&#34;node-a&#34;</span><span class="p">).</span><span class="nf">Label</span><span class="p">(</span><span class="s">&#34;zone&#34;</span><span class="p">,</span> <span class="s">&#34;zone1&#34;</span><span class="p">).</span><span class="nf">Label</span><span class="p">(</span><span class="s">&#34;node&#34;</span><span class="p">,</span> <span class="s">&#34;node-a&#34;</span><span class="p">).</span><span class="nf">Obj</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">        <span class="nx">st</span><span class="p">.</span><span class="nf">MakeNode</span><span class="p">().</span><span class="nf">Name</span><span class="p">(</span><span class="s">&#34;node-b&#34;</span><span class="p">).</span><span class="nf">Label</span><span class="p">(</span><span class="s">&#34;zone&#34;</span><span class="p">,</span> <span class="s">&#34;zone1&#34;</span><span class="p">).</span><span class="nf">Label</span><span class="p">(</span><span class="s">&#34;node&#34;</span><span class="p">,</span> <span class="s">&#34;node-b&#34;</span><span class="p">).</span><span class="nf">Obj</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">        <span class="nx">st</span><span class="p">.</span><span class="nf">MakeNode</span><span class="p">().</span><span class="nf">Name</span><span class="p">(</span><span class="s">&#34;node-x&#34;</span><span class="p">).</span><span class="nf">Label</span><span class="p">(</span><span class="s">&#34;zone&#34;</span><span class="p">,</span> <span class="s">&#34;zone2&#34;</span><span class="p">).</span><span class="nf">Label</span><span class="p">(</span><span class="s">&#34;node&#34;</span><span class="p">,</span> <span class="s">&#34;node-x&#34;</span><span class="p">).</span><span class="nf">Obj</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">        <span class="nx">st</span><span class="p">.</span><span class="nf">MakeNode</span><span class="p">().</span><span class="nf">Name</span><span class="p">(</span><span class="s">&#34;node-y&#34;</span><span class="p">).</span><span class="nf">Label</span><span class="p">(</span><span class="s">&#34;zone&#34;</span><span class="p">,</span> <span class="s">&#34;zone2&#34;</span><span class="p">).</span><span class="nf">Label</span><span class="p">(</span><span class="s">&#34;node&#34;</span><span class="p">,</span> <span class="s">&#34;node-y&#34;</span><span class="p">).</span><span class="nf">Obj</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">existingPods</span><span class="p">:</span> <span class="p">[]</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">st</span><span class="p">.</span><span class="nf">MakePod</span><span class="p">().</span><span class="nf">Name</span><span class="p">(</span><span class="s">&#34;p-a1&#34;</span><span class="p">).</span><span class="nf">Node</span><span class="p">(</span><span class="s">&#34;node-a&#34;</span><span class="p">).</span><span class="nf">Label</span><span class="p">(</span><span class="s">&#34;foo&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">).</span><span class="nf">Obj</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">        <span class="nx">st</span><span class="p">.</span><span class="nf">MakePod</span><span class="p">().</span><span class="nf">Name</span><span class="p">(</span><span class="s">&#34;p-a2&#34;</span><span class="p">).</span><span class="nf">Node</span><span class="p">(</span><span class="s">&#34;node-a&#34;</span><span class="p">).</span><span class="nf">Label</span><span class="p">(</span><span class="s">&#34;foo&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">).</span><span class="nf">Obj</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">        <span class="nx">st</span><span class="p">.</span><span class="nf">MakePod</span><span class="p">().</span><span class="nf">Name</span><span class="p">(</span><span class="s">&#34;p-b1&#34;</span><span class="p">).</span><span class="nf">Node</span><span class="p">(</span><span class="s">&#34;node-b&#34;</span><span class="p">).</span><span class="nf">Label</span><span class="p">(</span><span class="s">&#34;foo&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">).</span><span class="nf">Obj</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">        <span class="nx">st</span><span class="p">.</span><span class="nf">MakePod</span><span class="p">().</span><span class="nf">Name</span><span class="p">(</span><span class="s">&#34;p-y1&#34;</span><span class="p">).</span><span class="nf">Node</span><span class="p">(</span><span class="s">&#34;node-y&#34;</span><span class="p">).</span><span class="nf">Label</span><span class="p">(</span><span class="s">&#34;foo&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">).</span><span class="nf">Obj</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">        <span class="nx">st</span><span class="p">.</span><span class="nf">MakePod</span><span class="p">().</span><span class="nf">Name</span><span class="p">(</span><span class="s">&#34;p-y2&#34;</span><span class="p">).</span><span class="nf">Node</span><span class="p">(</span><span class="s">&#34;node-y&#34;</span><span class="p">).</span><span class="nf">Label</span><span class="p">(</span><span class="s">&#34;foo&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">).</span><span class="nf">Obj</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">        <span class="nx">st</span><span class="p">.</span><span class="nf">MakePod</span><span class="p">().</span><span class="nf">Name</span><span class="p">(</span><span class="s">&#34;p-y3&#34;</span><span class="p">).</span><span class="nf">Node</span><span class="p">(</span><span class="s">&#34;node-y&#34;</span><span class="p">).</span><span class="nf">Label</span><span class="p">(</span><span class="s">&#34;foo&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">).</span><span class="nf">Obj</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">        <span class="nx">st</span><span class="p">.</span><span class="nf">MakePod</span><span class="p">().</span><span class="nf">Name</span><span class="p">(</span><span class="s">&#34;p-y4&#34;</span><span class="p">).</span><span class="nf">Node</span><span class="p">(</span><span class="s">&#34;node-y&#34;</span><span class="p">).</span><span class="nf">Label</span><span class="p">(</span><span class="s">&#34;foo&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">).</span><span class="nf">Obj</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">want</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">preFilterState</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">Constraints</span><span class="p">:</span> <span class="p">[]</span><span class="nx">topologySpreadConstraint</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">MaxSkew</span><span class="p">:</span>            <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">TopologyKey</span><span class="p">:</span>        <span class="s">&#34;zone&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">Selector</span><span class="p">:</span>           <span class="nf">mustConvertLabelSelectorAsSelector</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">fooSelector</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="nx">MinDomains</span><span class="p">:</span>         <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">NodeAffinityPolicy</span><span class="p">:</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">NodeInclusionPolicyHonor</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">NodeTaintsPolicy</span><span class="p">:</span>   <span class="nx">v1</span><span class="p">.</span><span class="nx">NodeInclusionPolicyIgnore</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">MaxSkew</span><span class="p">:</span>            <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">TopologyKey</span><span class="p">:</span>        <span class="s">&#34;node&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">Selector</span><span class="p">:</span>           <span class="nf">mustConvertLabelSelectorAsSelector</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span> <span class="nx">fooSelector</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                <span class="nx">MinDomains</span><span class="p">:</span>         <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">NodeAffinityPolicy</span><span class="p">:</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">NodeInclusionPolicyHonor</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">NodeTaintsPolicy</span><span class="p">:</span>   <span class="nx">v1</span><span class="p">.</span><span class="nx">NodeInclusionPolicyIgnore</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">TpKeyToCriticalPaths</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">criticalPaths</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;zone&#34;</span><span class="p">:</span> <span class="p">{{</span><span class="s">&#34;zone1&#34;</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span> <span class="p">{</span><span class="s">&#34;zone2&#34;</span><span class="p">,</span> <span class="mi">4</span><span class="p">}},</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;node&#34;</span><span class="p">:</span> <span class="p">{{</span><span class="s">&#34;node-x&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="s">&#34;node-b&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">}},</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="nx">pair</span><span class="p">,</span> <span class="nx">num</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span><span class="p">.</span><span class="nx">TpPairToMatchNum</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">s</span><span class="p">.</span><span class="nx">TpKeyToCriticalPaths</span><span class="p">[</span><span class="nx">pair</span><span class="p">.</span><span class="nx">key</span><span class="p">].</span><span class="nf">update</span><span class="p">(</span><span class="nx">pair</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span> <span class="nx">num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">TpPairToMatchNum</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="nx">topologyPair</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="nx">key</span><span class="p">:</span> <span class="s">&#34;zone&#34;</span><span class="p">,</span> <span class="nx">value</span><span class="p">:</span> <span class="s">&#34;zone1&#34;</span><span class="p">}:</span>  <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="nx">key</span><span class="p">:</span> <span class="s">&#34;zone&#34;</span><span class="p">,</span> <span class="nx">value</span><span class="p">:</span> <span class="s">&#34;zone2&#34;</span><span class="p">}:</span>  <span class="mi">4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="nx">key</span><span class="p">:</span> <span class="s">&#34;node&#34;</span><span class="p">,</span> <span class="nx">value</span><span class="p">:</span> <span class="s">&#34;node-a&#34;</span><span class="p">}:</span> <span class="mi">2</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="nx">key</span><span class="p">:</span> <span class="s">&#34;node&#34;</span><span class="p">,</span> <span class="nx">value</span><span class="p">:</span> <span class="s">&#34;node-b&#34;</span><span class="p">}:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="nx">key</span><span class="p">:</span> <span class="s">&#34;node&#34;</span><span class="p">,</span> <span class="nx">value</span><span class="p">:</span> <span class="s">&#34;node-x&#34;</span><span class="p">}:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="nx">key</span><span class="p">:</span> <span class="s">&#34;node&#34;</span><span class="p">,</span> <span class="nx">value</span><span class="p">:</span> <span class="s">&#34;node-y&#34;</span><span class="p">}:</span> <span class="mi">4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p class="update">update</p>
<p><a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/framework/plugins/podtopologyspread/filtering.go#L120-L148">update</a> 函数实际上时用于计算 <a href="#criticalPaths">criticalPaths</a> 中的第一位始终保持为是一个最小Pod匹配值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">criticalPaths</span><span class="p">)</span> <span class="nf">update</span><span class="p">(</span><span class="nx">tpVal</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// first verify if `tpVal` exists or not
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">i</span> <span class="o">:=</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">tpVal</span> <span class="o">==</span> <span class="nx">p</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">TopologyValue</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">i</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">tpVal</span> <span class="o">==</span> <span class="nx">p</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">TopologyValue</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">i</span> <span class="p">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// `tpVal` 表示已经存在
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">p</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">MatchNum</span> <span class="p">=</span> <span class="nx">num</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">p</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">MatchNum</span> <span class="p">&gt;</span> <span class="nx">p</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">MatchNum</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// swap paths[0] and paths[1]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">p</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">p</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nx">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// `tpVal` 表示不存在，如一个新初始化的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// num对应子域分布的pod
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 说明第一个元素不是最小的，则作为交换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">num</span> <span class="p">&lt;</span> <span class="nx">p</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">MatchNum</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// update paths[1] with paths[0]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="nx">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// update paths[0]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">p</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">TopologyValue</span><span class="p">,</span> <span class="nx">p</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">MatchNum</span> <span class="p">=</span> <span class="nx">tpVal</span><span class="p">,</span> <span class="nx">num</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">num</span> <span class="p">&lt;</span> <span class="nx">p</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">MatchNum</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 如果小于 paths[1]，则更新它，永远保证元素0是最小，1是次小的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">p</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">TopologyValue</span><span class="p">,</span> <span class="nx">p</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">MatchNum</span> <span class="p">=</span> <span class="nx">tpVal</span><span class="p">,</span> <span class="nx">num</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>综合来讲 <code>Prefilter</code> 主要做的工作是。循环所有的节点，先根据 <code>NodeAffinity</code> 或者 <code>NodeSelector</code> 进行过滤，然后根据约束中定义的 <code>topologyKeys</code> （拓扑划分的依据） 来选择节点。</p>
<p>接下来会计算出每个拓扑域下的拓扑对（可以理解为子域）匹配的 Pod 数量，存入 <code>TpPairToMatchNum</code> 中，最后就是要把所有约束中匹配的 Pod 数量最小（第二小）匹配出来的路径（代码是这么定义的，理解上可以看作是分布图）放入 <code>TpKeyToCriticalPaths</code> 中保存起来。整个 <code>preFilterState</code> 保存下来传递到后续的 <code>filter</code> 插件中使用。</p>
<h4 id="filter">Filter</h4>
<p>在 <a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/framework/plugins/podtopologyspread/filtering.go#L178">preFilter</a> 中 最后的计算结果会保存在 <code>CycleState</code> 中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">cycleState</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">preFilterStateKey</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/framework/plugins/podtopologyspread/filtering.go#L310-L362">Filter</a> 主要是从 <code>PreFilter</code> 处理的过程中拿到状态 <code>preFilterState</code>，然后看下每个拓扑约束中的 <code>MaxSkew</code> 是否合法，具体的计算公式为：$matchNum + selfMatchNum - minMatchNum$</p>
<ul>
<li><code>matchNum</code>：Prefilter 中计算出的对应的拓扑分布数量，可以在<a href="#prefiltertesting">Prefilter</a>中参考对应的内容
<ul>
<li><code>if tpCount, ok := s.TpPairToMatchNum[pair]; ok {</code></li>
</ul>
</li>
<li><code>selfMatchNum</code>：匹配到label的数量，匹配到则是1，否则为0</li>
<li><code> minMatchNum</code>：获的 <code>Prefilter </code> 中计算出来的最小匹配的值</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">pl</span> <span class="o">*</span><span class="nx">PodTopologySpread</span><span class="p">)</span> <span class="nf">Filter</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">cycleState</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">nodeInfo</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">)</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Status</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">node</span> <span class="o">:=</span> <span class="nx">nodeInfo</span><span class="p">.</span><span class="nf">Node</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">node</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">AsStatus</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;node not found&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 拿到 prefilter处理的s，即preFilterState
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">s</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">getPreFilterState</span><span class="p">(</span><span class="nx">cycleState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">AsStatus</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 一个 空类型的 preFilterState是合法的，这种情况下将容忍每一个被调度的 Pod
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">Constraints</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">podLabelSet</span> <span class="o">:=</span> <span class="nx">labels</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="nx">pod</span><span class="p">.</span><span class="nx">Labels</span><span class="p">)</span> <span class="c1">// 设置标签
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">c</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Constraints</span> <span class="p">{</span> <span class="c1">// 因为拓扑约束允许多个所以
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">tpKey</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TopologyKey</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tpVal</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Labels</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">TopologyKey</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Node doesn&#39;t have required label&#34;</span><span class="p">,</span> <span class="s">&#34;node&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">node</span><span class="p">),</span> <span class="s">&#34;label&#34;</span><span class="p">,</span> <span class="nx">tpKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">NewStatus</span><span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">UnschedulableAndUnresolvable</span><span class="p">,</span> <span class="nx">ErrReasonNodeLabelNotMatch</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 判断标准
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// 现有的匹配数量 + 子匹配（1|0） - 全局minimum &lt;= maxSkew
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">minMatchNum</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nf">minMatchNum</span><span class="p">(</span><span class="nx">tpKey</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">MinDomains</span><span class="p">,</span> <span class="nx">pl</span><span class="p">.</span><span class="nx">enableMinDomainsInPodTopologySpread</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Internal error occurred while retrieving value precalculated in PreFilter&#34;</span><span class="p">,</span> <span class="s">&#34;topologyKey&#34;</span><span class="p">,</span> <span class="nx">tpKey</span><span class="p">,</span> <span class="s">&#34;paths&#34;</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">TpKeyToCriticalPaths</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">selfMatchNum</span> <span class="o">:=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Selector</span><span class="p">.</span><span class="nf">Matches</span><span class="p">(</span><span class="nx">podLabelSet</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">selfMatchNum</span> <span class="p">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">pair</span> <span class="o">:=</span> <span class="nx">topologyPair</span><span class="p">{</span><span class="nx">key</span><span class="p">:</span> <span class="nx">tpKey</span><span class="p">,</span> <span class="nx">value</span><span class="p">:</span> <span class="nx">tpVal</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">matchNum</span> <span class="o">:=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">tpCount</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">TpPairToMatchNum</span><span class="p">[</span><span class="nx">pair</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">matchNum</span> <span class="p">=</span> <span class="nx">tpCount</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">skew</span> <span class="o">:=</span> <span class="nx">matchNum</span> <span class="o">+</span> <span class="nx">selfMatchNum</span> <span class="o">-</span> <span class="nx">minMatchNum</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">skew</span> <span class="p">&gt;</span> <span class="nb">int</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">MaxSkew</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Node failed spreadConstraint: matchNum + selfMatchNum - minMatchNum &gt; maxSkew&#34;</span><span class="p">,</span> <span class="s">&#34;node&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">node</span><span class="p">),</span> <span class="s">&#34;topologyKey&#34;</span><span class="p">,</span> <span class="nx">tpKey</span><span class="p">,</span> <span class="s">&#34;matchNum&#34;</span><span class="p">,</span> <span class="nx">matchNum</span><span class="p">,</span> <span class="s">&#34;selfMatchNum&#34;</span><span class="p">,</span> <span class="nx">selfMatchNum</span><span class="p">,</span> <span class="s">&#34;minMatchNum&#34;</span><span class="p">,</span> <span class="nx">minMatchNum</span><span class="p">,</span> <span class="s">&#34;maxSkew&#34;</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">MaxSkew</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">NewStatus</span><span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Unschedulable</span><span class="p">,</span> <span class="nx">ErrReasonConstraintsNotMatch</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>minMatchNum</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// minMatchNum用于计算 倾斜的全局最小值，同时考虑 MinDomains。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">preFilterState</span><span class="p">)</span> <span class="nf">minMatchNum</span><span class="p">(</span><span class="nx">tpKey</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">minDomains</span> <span class="kt">int32</span><span class="p">,</span> <span class="nx">enableMinDomainsInPodTopologySpread</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">paths</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">TpKeyToCriticalPaths</span><span class="p">[</span><span class="nx">tpKey</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to retrieve path by topology key&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 通常来说最小值是第一个
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">minMatchNum</span> <span class="o">:=</span> <span class="nx">paths</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">MatchNum</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">enableMinDomainsInPodTopologySpread</span> <span class="p">{</span> <span class="c1">// 就是plugin的配置的 enableMinDomainsInPodTopologySpread
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="nx">minMatchNum</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">domainsNum</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">TpKeyToDomainsNum</span><span class="p">[</span><span class="nx">tpKey</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to retrieve the number of domains by topology key&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">domainsNum</span> <span class="p">&lt;</span> <span class="nb">int</span><span class="p">(</span><span class="nx">minDomains</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 当有匹配拓扑键的符合条件的域的数量小于 配置的&#34;minDomains&#34;(每个约束条件的这个配置) 时，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">//它将全局“minimum” 设置为0。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// 因为minimum默认就为1，如果他小于1，就让他为0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">minMatchNum</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">minMatchNum</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="prescore">PreScore</h4>
<p>与 Filter 类似， <code>PreScore</code> 也是类似 <code>PreFilter</code> 的构成。 <code>initPreScoreState</code> 来完成过滤。</p>
<p>有了 <code>PreFilter</code> 基础后，对于 Score 来说大同小异</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">pl</span> <span class="o">*</span><span class="nx">PodTopologySpread</span><span class="p">)</span> <span class="nf">PreScore</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cycleState</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">filteredNodes</span> <span class="p">[]</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Node</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Status</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">allNodes</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">pl</span><span class="p">.</span><span class="nx">sharedLister</span><span class="p">.</span><span class="nf">NodeInfos</span><span class="p">().</span><span class="nf">List</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">AsStatus</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;getting all nodes: %w&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">filteredNodes</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="nb">len</span><span class="p">(</span><span class="nx">allNodes</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// No nodes to score.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">state</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">preScoreState</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">IgnoredNodes</span><span class="p">:</span>            <span class="nx">sets</span><span class="p">.</span><span class="nf">NewString</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">TopologyPairToPodCounts</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">topologyPair</span><span class="p">]</span><span class="o">*</span><span class="kt">int64</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Only require that nodes have all the topology labels if using
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// non-system-default spreading rules. This allows nodes that don&#39;t have a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// zone label to still have hostname spreading.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 如果使用非系统默认分布规则，则仅要求节点具有所有拓扑标签。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 这将允许没有zone标签的节点仍然具有hostname分布。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">requireAllTopologies</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">pod</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">TopologySpreadConstraints</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="p">!</span><span class="nx">pl</span><span class="p">.</span><span class="nx">systemDefaulted</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="p">=</span> <span class="nx">pl</span><span class="p">.</span><span class="nf">initPreScoreState</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">,</span> <span class="nx">filteredNodes</span><span class="p">,</span> <span class="nx">requireAllTopologies</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">AsStatus</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;calculating preScoreState: %w&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// return if incoming pod doesn&#39;t have soft topology spread Constraints.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">Constraints</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cycleState</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">preScoreStateKey</span><span class="p">,</span> <span class="nx">state</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Ignore parsing errors for backwards compatibility.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">requiredNodeAffinity</span> <span class="o">:=</span> <span class="nx">nodeaffinity</span><span class="p">.</span><span class="nf">GetRequiredNodeAffinity</span><span class="p">(</span><span class="nx">pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">processAllNode</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">nodeInfo</span> <span class="o">:=</span> <span class="nx">allNodes</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="nx">node</span> <span class="o">:=</span> <span class="nx">nodeInfo</span><span class="p">.</span><span class="nf">Node</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">node</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">pl</span><span class="p">.</span><span class="nx">enableNodeInclusionPolicyInPodTopologySpread</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// `node` should satisfy incoming pod&#39;s NodeSelector/NodeAffinity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">match</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">requiredNodeAffinity</span><span class="p">.</span><span class="nf">Match</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span> <span class="p">!</span><span class="nx">match</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// All topologyKeys need to be present in `node`
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">requireAllTopologies</span> <span class="o">&amp;&amp;</span> <span class="p">!</span><span class="nf">nodeLabelsMatchSpreadConstraints</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">Labels</span><span class="p">,</span> <span class="nx">state</span><span class="p">.</span><span class="nx">Constraints</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">c</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">state</span><span class="p">.</span><span class="nx">Constraints</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">pl</span><span class="p">.</span><span class="nx">enableNodeInclusionPolicyInPodTopologySpread</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">				<span class="p">!</span><span class="nx">c</span><span class="p">.</span><span class="nf">matchNodeInclusionPolicies</span><span class="p">(</span><span class="nx">pod</span><span class="p">,</span> <span class="nx">node</span><span class="p">,</span> <span class="nx">requiredNodeAffinity</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nx">pair</span> <span class="o">:=</span> <span class="nx">topologyPair</span><span class="p">{</span><span class="nx">key</span><span class="p">:</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TopologyKey</span><span class="p">,</span> <span class="nx">value</span><span class="p">:</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Labels</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">TopologyKey</span><span class="p">]}</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// If current topology pair is not associated with any candidate node,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// continue to avoid unnecessary calculation.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// Per-node counts are also skipped, as they are done during Score.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">tpCount</span> <span class="o">:=</span> <span class="nx">state</span><span class="p">.</span><span class="nx">TopologyPairToPodCounts</span><span class="p">[</span><span class="nx">pair</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">tpCount</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">count</span> <span class="o">:=</span> <span class="nf">countPodsMatchSelector</span><span class="p">(</span><span class="nx">nodeInfo</span><span class="p">.</span><span class="nx">Pods</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Selector</span><span class="p">,</span> <span class="nx">pod</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">atomic</span><span class="p">.</span><span class="nf">AddInt64</span><span class="p">(</span><span class="nx">tpCount</span><span class="p">,</span> <span class="nb">int64</span><span class="p">(</span><span class="nx">count</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pl</span><span class="p">.</span><span class="nx">parallelizer</span><span class="p">.</span><span class="nf">Until</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">allNodes</span><span class="p">),</span> <span class="nx">processAllNode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 保存状态给后面sorce调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cycleState</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">preScoreStateKey</span><span class="p">,</span> <span class="nx">state</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>与Filter中Update使用的函数一样，这里也会到这一步，这里会构建出TopologySpreadConstraints，因为约束是不确定的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">filterTopologySpreadConstraints</span><span class="p">(</span><span class="nx">constraints</span> <span class="p">[]</span><span class="nx">v1</span><span class="p">.</span><span class="nx">TopologySpreadConstraint</span><span class="p">,</span> <span class="nx">action</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">UnsatisfiableConstraintAction</span><span class="p">,</span> <span class="nx">enableMinDomainsInPodTopologySpread</span><span class="p">,</span> <span class="nx">enableNodeInclusionPolicyInPodTopologySpread</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">([]</span><span class="nx">topologySpreadConstraint</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">result</span> <span class="p">[]</span><span class="nx">topologySpreadConstraint</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">c</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">constraints</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">c</span><span class="p">.</span><span class="nx">WhenUnsatisfiable</span> <span class="o">==</span> <span class="nx">action</span> <span class="p">{</span> <span class="c1">// 始终调度时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">selector</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">metav1</span><span class="p">.</span><span class="nf">LabelSelectorAsSelector</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">LabelSelector</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">tsc</span> <span class="o">:=</span> <span class="nx">topologySpreadConstraint</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">MaxSkew</span><span class="p">:</span>            <span class="nx">c</span><span class="p">.</span><span class="nx">MaxSkew</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">TopologyKey</span><span class="p">:</span>        <span class="nx">c</span><span class="p">.</span><span class="nx">TopologyKey</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Selector</span><span class="p">:</span>           <span class="nx">selector</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">MinDomains</span><span class="p">:</span>         <span class="mi">1</span><span class="p">,</span>                            <span class="c1">// If MinDomains is nil, we treat MinDomains as 1.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">NodeAffinityPolicy</span><span class="p">:</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">NodeInclusionPolicyHonor</span><span class="p">,</span>  <span class="c1">// If NodeAffinityPolicy is nil, we treat NodeAffinityPolicy as &#34;Honor&#34;.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">NodeTaintsPolicy</span><span class="p">:</span>   <span class="nx">v1</span><span class="p">.</span><span class="nx">NodeInclusionPolicyIgnore</span><span class="p">,</span> <span class="c1">// If NodeTaintsPolicy is nil, we treat NodeTaintsPolicy as &#34;Ignore&#34;.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">enableMinDomainsInPodTopologySpread</span> <span class="o">&amp;&amp;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">MinDomains</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">tsc</span><span class="p">.</span><span class="nx">MinDomains</span> <span class="p">=</span> <span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">MinDomains</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">enableNodeInclusionPolicyInPodTopologySpread</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">c</span><span class="p">.</span><span class="nx">NodeAffinityPolicy</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">tsc</span><span class="p">.</span><span class="nx">NodeAffinityPolicy</span> <span class="p">=</span> <span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">NodeAffinityPolicy</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">c</span><span class="p">.</span><span class="nx">NodeTaintsPolicy</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">tsc</span><span class="p">.</span><span class="nx">NodeTaintsPolicy</span> <span class="p">=</span> <span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">NodeTaintsPolicy</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">result</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">tsc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="score">Score</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-GO" data-lang="GO"><span class="line"><span class="cl"><span class="c1">// 在分数扩展点调用分数。该函数返回的“score”是 `nodeName` 上匹配的 pod 数量，稍后会进行归一化。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">pl</span> <span class="o">*</span><span class="nx">PodTopologySpread</span><span class="p">)</span> <span class="nf">Score</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">cycleState</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">nodeName</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">int64</span><span class="p">,</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Status</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">nodeInfo</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">pl</span><span class="p">.</span><span class="nx">sharedLister</span><span class="p">.</span><span class="nf">NodeInfos</span><span class="p">().</span><span class="nf">Get</span><span class="p">(</span><span class="nx">nodeName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">AsStatus</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;getting node %q from Snapshot: %w&#34;</span><span class="p">,</span> <span class="nx">nodeName</span><span class="p">,</span> <span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">node</span> <span class="o">:=</span> <span class="nx">nodeInfo</span><span class="p">.</span><span class="nf">Node</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">getPreScoreState</span><span class="p">(</span><span class="nx">cycleState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">AsStatus</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Return if the node is not qualified.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">s</span><span class="p">.</span><span class="nx">IgnoredNodes</span><span class="p">.</span><span class="nf">Has</span><span class="p">(</span><span class="nx">node</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 对于每个当前的 &lt;pair&gt;，当前节点获得 &lt;matchSum&gt; 的信用分。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 计算 &lt;matchSum&gt;总和 并将其作为该节点的分数返回。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">score</span> <span class="kt">float64</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">c</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span><span class="p">.</span><span class="nx">Constraints</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">tpVal</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Labels</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">TopologyKey</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="kd">var</span> <span class="nx">cnt</span> <span class="kt">int64</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TopologyKey</span> <span class="o">==</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">LabelHostname</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">cnt</span> <span class="p">=</span> <span class="nb">int64</span><span class="p">(</span><span class="nf">countPodsMatchSelector</span><span class="p">(</span><span class="nx">nodeInfo</span><span class="p">.</span><span class="nx">Pods</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Selector</span><span class="p">,</span> <span class="nx">pod</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">pair</span> <span class="o">:=</span> <span class="nx">topologyPair</span><span class="p">{</span><span class="nx">key</span><span class="p">:</span> <span class="nx">c</span><span class="p">.</span><span class="nx">TopologyKey</span><span class="p">,</span> <span class="nx">value</span><span class="p">:</span> <span class="nx">tpVal</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">cnt</span> <span class="p">=</span> <span class="o">*</span><span class="nx">s</span><span class="p">.</span><span class="nx">TopologyPairToPodCounts</span><span class="p">[</span><span class="nx">pair</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">score</span> <span class="o">+=</span> <span class="nf">scoreForCount</span><span class="p">(</span><span class="nx">cnt</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">MaxSkew</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">TopologyNormalizingWeight</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nb">int64</span><span class="p">(</span><span class="nx">math</span><span class="p">.</span><span class="nf">Round</span><span class="p">(</span><span class="nx">score</span><span class="p">)),</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在 <a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/framework/runtime/framework.go#L940-L952">Framework</a> 中会运行 <code>ScoreExtension</code> ，即 <code>NormalizeScore</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Run NormalizeScore method for each ScorePlugin in parallel.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">f</span><span class="p">.</span><span class="nf">Parallelizer</span><span class="p">().</span><span class="nf">Until</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">scorePlugins</span><span class="p">),</span> <span class="kd">func</span><span class="p">(</span><span class="nx">index</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">pl</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">scorePlugins</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="nx">nodeScoreList</span> <span class="o">:=</span> <span class="nx">pluginToNodeScores</span><span class="p">[</span><span class="nx">pl</span><span class="p">.</span><span class="nf">Name</span><span class="p">()]</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">pl</span><span class="p">.</span><span class="nf">ScoreExtensions</span><span class="p">()</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">status</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nf">runScoreExtension</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">pl</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">,</span> <span class="nx">nodeScoreList</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">!</span><span class="nx">status</span><span class="p">.</span><span class="nf">IsSuccess</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">err</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;plugin %q failed with: %w&#34;</span><span class="p">,</span> <span class="nx">pl</span><span class="p">.</span><span class="nf">Name</span><span class="p">(),</span> <span class="nx">status</span><span class="p">.</span><span class="nf">AsError</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        <span class="nx">errCh</span><span class="p">.</span><span class="nf">SendErrorWithCancel</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">cancel</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">errCh</span><span class="p">.</span><span class="nf">ReceiveError</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">AsStatus</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;running Normalize on Score plugins: %w&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/framework/plugins/podtopologyspread/scoring.go#L216-L255">NormalizeScore</a> 会为所有的node根据之前计算出的权重进行打分</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">pl</span> <span class="o">*</span><span class="nx">PodTopologySpread</span><span class="p">)</span> <span class="nf">NormalizeScore</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">cycleState</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span> <span class="nx">scores</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">NodeScoreList</span><span class="p">)</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Status</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">getPreScoreState</span><span class="p">(</span><span class="nx">cycleState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">AsStatus</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">s</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 计算 &lt;minScore&gt; 和 &lt;maxScore&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">minScore</span> <span class="kt">int64</span> <span class="p">=</span> <span class="nx">math</span><span class="p">.</span><span class="nx">MaxInt64</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">maxScore</span> <span class="kt">int64</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">score</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">scores</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// it&#39;s mandatory to check if &lt;score.Name&gt; is present in m.IgnoredNodes
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">s</span><span class="p">.</span><span class="nx">IgnoredNodes</span><span class="p">.</span><span class="nf">Has</span><span class="p">(</span><span class="nx">score</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">scores</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Score</span> <span class="p">=</span> <span class="nx">invalidScore</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">score</span><span class="p">.</span><span class="nx">Score</span> <span class="p">&lt;</span> <span class="nx">minScore</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">minScore</span> <span class="p">=</span> <span class="nx">score</span><span class="p">.</span><span class="nx">Score</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">score</span><span class="p">.</span><span class="nx">Score</span> <span class="p">&gt;</span> <span class="nx">maxScore</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">maxScore</span> <span class="p">=</span> <span class="nx">score</span><span class="p">.</span><span class="nx">Score</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">scores</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">scores</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Score</span> <span class="o">==</span> <span class="nx">invalidScore</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">scores</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Score</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">maxScore</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">scores</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Score</span> <span class="p">=</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">MaxNodeScore</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">s</span> <span class="o">:=</span> <span class="nx">scores</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Score</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scores</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Score</span> <span class="p">=</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">MaxNodeScore</span> <span class="o">*</span> <span class="p">(</span><span class="nx">maxScore</span> <span class="o">+</span> <span class="nx">minScore</span> <span class="o">-</span> <span class="nx">s</span><span class="p">)</span> <span class="o">/</span> <span class="nx">maxScore</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>到此，对于pod拓扑插件功能大概可以明了了，</p>
<ul>
<li>Filter 部分（<code>PreFilter</code>，<code>Filter</code>）完成拓扑对(<code>Topology Pair</code>)划分</li>
<li>Score部分（<code>PreScore</code>, <code>Score</code> , <code>NormalizeScore</code> ）主要是对拓扑对（可以理解为拓扑结构划分）来选择一个最适合的pod的节点（即分数最优的节点）</li>
</ul>
<p>而在 <a href="https://github.com/kubernetes/kubernetes/blob/release-1.24/pkg/scheduler/framework/plugins/podtopologyspread/scoring_test.go">scoring_test.go</a> 给了很多用例，可以更深入的了解这部分算法</p>
<h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-scheduling/scheduling_code_hierarchy_overview.md">scheduling code hierarchy</a></p>
<p><sup id="2">[2]</sup> <a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-scheduling/scheduler_algorithm.md">scheduler algorithm</a></p>
<p><sup id="3">[3]</sup> <a href="https://github.com/kubernetes/community/blob/master/sig-storage/volume-plugin-faq.md#in-tree-vs-out-of-tree-volume-plugins">in tree VS out of tree volume plugins</a></p>
<p><sup id="4">[4]</sup> <a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-scheduling/scheduler_framework_plugins.md">scheduler_framework_plugins</a></p>
<p><sup id="5">[5]</sup> <a href="https://kubernetes.io/docs/reference/scheduling/config/">scheduling config</a></p>
<p><sup id="6">[6]</sup> <a href="https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/">topology spread constraints</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>kube-scheduler的调度上下文</title>
      <link>https://www.oomkill.com/2022/07/ch20-schedule-workflow/</link>
      <pubDate>Thu, 21 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/07/ch20-schedule-workflow/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="scheduler">Scheduler</h2>
<p><a href="https://github.com/kubernetes/kubernetes/blob/140c27533044e9e00f800d3ad0517540e3e4ecad/pkg/scheduler/scheduler.go#L64-L102">Scheduler</a> 是整个 <code>kube-scheduler</code> 的一个 structure，提供了 <code>kube-scheduler</code> 运行所需的组件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Scheduler</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Cache是一个抽象，会缓存pod的信息，作为scheduler进行查找，操作是基于Pod进行增加
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Cache</span> <span class="nx">internalcache</span><span class="p">.</span><span class="nx">Cache</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Extenders 算是调度框架中提供的调度插件，会影响kubernetes中的调度策略
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Extenders</span> <span class="p">[]</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Extender</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// NextPod 作为一个函数提供，会阻塞获取下一个ke&#39;diao&#39;du
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">NextPod</span> <span class="kd">func</span><span class="p">()</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Error is called if there is an error. It is passed the pod in
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// question, and the error
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Error</span> <span class="kd">func</span><span class="p">(</span><span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// SchedulePod 尝试将给出的pod调度到Node。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">SchedulePod</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">fwk</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">Framework</span><span class="p">,</span> <span class="nx">state</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="p">(</span><span class="nx">ScheduleResult</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 关闭scheduler的信号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">StopEverything</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// SchedulingQueue保存要调度的Pod
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">SchedulingQueue</span> <span class="nx">internalqueue</span><span class="p">.</span><span class="nx">SchedulingQueue</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Profiles中是多个调度框架
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Profiles</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">Map</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="nx">clientset</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nx">nodeInfoSnapshot</span> <span class="o">*</span><span class="nx">internalcache</span><span class="p">.</span><span class="nx">Snapshot</span>
</span></span><span class="line"><span class="cl">	<span class="nx">percentageOfNodesToScore</span> <span class="kt">int32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">nextStartNodeIndex</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>作为实际执行的两个核心，<code>SchedulingQueue</code> ，与 <code>scheduleOne</code> 将会分析到这两个</p>
<h2 id="schedulingqueue">SchedulingQueue</h2>
<p>在知道 <code>kube-scheduler</code> 初始化过程后，需要对 <code>kube-scheduler</code> 的整个 <em>structure</em> 和 <em>workflow</em> 进行分析</p>
<p>在 <a href="https://github.com/kubernetes/kubernetes/blob/140c27533044e9e00f800d3ad0517540e3e4ecad/pkg/scheduler/scheduler.go#L336-L340">Run</a> 中，运行的是 一个 <code>SchedulingQueue</code> 与 一个 <code>scheduleOne</code> ，从结构上看是属于 <em>Scheduler</em></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">sched</span> <span class="o">*</span><span class="nx">Scheduler</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sched</span><span class="p">.</span><span class="nx">SchedulingQueue</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// We need to start scheduleOne loop in a dedicated goroutine,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// because scheduleOne function hangs on getting the next item
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// from the SchedulingQueue.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// If there are no new pods to schedule, it will be hanging there
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// and if done in this goroutine it will be blocking closing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// SchedulingQueue, in effect causing a deadlock on shutdown.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="nx">wait</span><span class="p">.</span><span class="nf">UntilWithContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">scheduleOne</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sched</span><span class="p">.</span><span class="nx">SchedulingQueue</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/kubernetes/kubernetes/blob/140c27533044e9e00f800d3ad0517540e3e4ecad/pkg/scheduler/internal/queue/scheduling_queue.go#L81-L110">SchedulingQueue</a> 是一个队列的抽象，用于存储等待调度的Pod。该接口遵循类似于 cache.FIFO 和 cache.Heap 的模式。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">SchedulingQueue</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">framework</span><span class="p">.</span><span class="nx">PodNominator</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Add</span><span class="p">(</span><span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Activate moves the given pods to activeQ iff they&#39;re in unschedulablePods or backoffQ.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// The passed-in pods are originally compiled from plugins that want to activate Pods,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// by injecting the pods through a reserved CycleState struct (PodsToActivate).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Activate</span><span class="p">(</span><span class="nx">pods</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 将不可调度的Pod重入到队列中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">AddUnschedulableIfNotPresent</span><span class="p">(</span><span class="nx">pod</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span><span class="p">,</span> <span class="nx">podSchedulingCycle</span> <span class="kt">int64</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// SchedulingCycle returns the current number of scheduling cycle which is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// cached by scheduling queue. Normally, incrementing this number whenever
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// a pod is popped (e.g. called Pop()) is enough.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">SchedulingCycle</span><span class="p">()</span> <span class="kt">int64</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Pop会弹出一个pod，并从head优先级队列中删除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Pop</span><span class="p">()</span> <span class="p">(</span><span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Update</span><span class="p">(</span><span class="nx">oldPod</span><span class="p">,</span> <span class="nx">newPod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Delete</span><span class="p">(</span><span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="nf">MoveAllToActiveOrBackoffQueue</span><span class="p">(</span><span class="nx">event</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">ClusterEvent</span><span class="p">,</span> <span class="nx">preCheck</span> <span class="nx">PreEnqueueCheck</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">AssignedPodAdded</span><span class="p">(</span><span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">AssignedPodUpdated</span><span class="p">(</span><span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">PendingPods</span><span class="p">()</span> <span class="p">[]</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Close closes the SchedulingQueue so that the goroutine which is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// waiting to pop items can exit gracefully.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Run starts the goroutines managing the queue.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而 <a href="https://github.com/kubernetes/kubernetes/blob/140c27533044e9e00f800d3ad0517540e3e4ecad/pkg/scheduler/internal/queue/scheduling_queue.go#L134-L175">PriorityQueue</a> 是 <code>SchedulingQueue</code> 的实现，该部分的核心构成是两个子队列与一个数据结构，即 <code>activeQ</code>、<code>backoffQ</code> 和 <code>unschedulablePods</code></p>
<ul>
<li><code>activeQ</code>：是一个 <em>heap</em> 类型的优先级队列，是 <em>sheduler</em> 从中获得优先级最高的Pod进行调度</li>
<li><code>backoffQ</code>：也是一个 <em>heap</em> 类型的优先级队列，存放的是不可调度的Pod</li>
<li><code>unschedulablePods </code>：保存确定不可被调度的Pod</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-GO" data-lang="GO"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">SchedulingQueue</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">framework</span><span class="p">.</span><span class="nx">PodNominator</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Add</span><span class="p">(</span><span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Activate moves the given pods to activeQ iff they&#39;re in unschedulablePods or backoffQ.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// The passed-in pods are originally compiled from plugins that want to activate Pods,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// by injecting the pods through a reserved CycleState struct (PodsToActivate).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Activate</span><span class="p">(</span><span class="nx">pods</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// AddUnschedulableIfNotPresent adds an unschedulable pod back to scheduling queue.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// The podSchedulingCycle represents the current scheduling cycle number which can be
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// returned by calling SchedulingCycle().
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">AddUnschedulableIfNotPresent</span><span class="p">(</span><span class="nx">pod</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span><span class="p">,</span> <span class="nx">podSchedulingCycle</span> <span class="kt">int64</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// SchedulingCycle returns the current number of scheduling cycle which is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// cached by scheduling queue. Normally, incrementing this number whenever
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// a pod is popped (e.g. called Pop()) is enough.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">SchedulingCycle</span><span class="p">()</span> <span class="kt">int64</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Pop removes the head of the queue and returns it. It blocks if the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// queue is empty and waits until a new item is added to the queue.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Pop</span><span class="p">()</span> <span class="p">(</span><span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Update</span><span class="p">(</span><span class="nx">oldPod</span><span class="p">,</span> <span class="nx">newPod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Delete</span><span class="p">(</span><span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="nf">MoveAllToActiveOrBackoffQueue</span><span class="p">(</span><span class="nx">event</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">ClusterEvent</span><span class="p">,</span> <span class="nx">preCheck</span> <span class="nx">PreEnqueueCheck</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">AssignedPodAdded</span><span class="p">(</span><span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">AssignedPodUpdated</span><span class="p">(</span><span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">PendingPods</span><span class="p">()</span> <span class="p">[]</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Close closes the SchedulingQueue so that the goroutine which is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// waiting to pop items can exit gracefully.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Run starts the goroutines managing the queue.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在New <em>scheduler</em> 时可以看到会初始化这个queue</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">podQueue</span> <span class="o">:=</span> <span class="nx">internalqueue</span><span class="p">.</span><span class="nf">NewSchedulingQueue</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 实现pod对比的一个函数即less
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">profiles</span><span class="p">[</span><span class="nx">options</span><span class="p">.</span><span class="nx">profiles</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">SchedulerName</span><span class="p">].</span><span class="nf">QueueSortFunc</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">informerFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">internalqueue</span><span class="p">.</span><span class="nf">WithPodInitialBackoffDuration</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">podInitialBackoffSeconds</span><span class="p">)</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">internalqueue</span><span class="p">.</span><span class="nf">WithPodMaxBackoffDuration</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">podMaxBackoffSeconds</span><span class="p">)</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">internalqueue</span><span class="p">.</span><span class="nf">WithPodNominator</span><span class="p">(</span><span class="nx">nominator</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">internalqueue</span><span class="p">.</span><span class="nf">WithClusterEventMap</span><span class="p">(</span><span class="nx">clusterEventMap</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">internalqueue</span><span class="p">.</span><span class="nf">WithPodMaxInUnschedulablePodsDuration</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">podMaxInUnschedulablePodsDuration</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而 <a href="https://github.com/kubernetes/kubernetes/blob/140c27533044e9e00f800d3ad0517540e3e4ecad/pkg/scheduler/internal/queue/scheduling_queue.go#L252-L289">NewSchedulingQueue</a> 则是初始化这个 PriorityQueue</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// NewSchedulingQueue initializes a priority queue as a new scheduling queue.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewSchedulingQueue</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lessFn</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">LessFunc</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">informerFactory</span> <span class="nx">informers</span><span class="p">.</span><span class="nx">SharedInformerFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">opts</span> <span class="o">...</span><span class="nx">Option</span><span class="p">)</span> <span class="nx">SchedulingQueue</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nf">NewPriorityQueue</span><span class="p">(</span><span class="nx">lessFn</span><span class="p">,</span> <span class="nx">informerFactory</span><span class="p">,</span> <span class="nx">opts</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// NewPriorityQueue creates a PriorityQueue object.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewPriorityQueue</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lessFn</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">LessFunc</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">informerFactory</span> <span class="nx">informers</span><span class="p">.</span><span class="nx">SharedInformerFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">opts</span> <span class="o">...</span><span class="nx">Option</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="o">*</span><span class="nx">PriorityQueue</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">options</span> <span class="o">:=</span> <span class="nx">defaultPriorityQueueOptions</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">opt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">opts</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">opt</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 这个就是 less函数，作为打分的一部分
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">comp</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">podInfo1</span><span class="p">,</span> <span class="nx">podInfo2</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">pInfo1</span> <span class="o">:=</span> <span class="nx">podInfo1</span><span class="p">.(</span><span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">pInfo2</span> <span class="o">:=</span> <span class="nx">podInfo2</span><span class="p">.(</span><span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nf">lessFn</span><span class="p">(</span><span class="nx">pInfo1</span><span class="p">,</span> <span class="nx">pInfo2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">podNominator</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">options</span><span class="p">.</span><span class="nx">podNominator</span> <span class="p">=</span> <span class="nf">NewPodNominator</span><span class="p">(</span><span class="nx">informerFactory</span><span class="p">.</span><span class="nf">Core</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">Pods</span><span class="p">().</span><span class="nf">Lister</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">pq</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">PriorityQueue</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">PodNominator</span><span class="p">:</span>                      <span class="nx">options</span><span class="p">.</span><span class="nx">podNominator</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clock</span><span class="p">:</span>                             <span class="nx">options</span><span class="p">.</span><span class="nx">clock</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">stop</span><span class="p">:</span>                              <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">podInitialBackoffDuration</span><span class="p">:</span>         <span class="nx">options</span><span class="p">.</span><span class="nx">podInitialBackoffDuration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">podMaxBackoffDuration</span><span class="p">:</span>             <span class="nx">options</span><span class="p">.</span><span class="nx">podMaxBackoffDuration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">podMaxInUnschedulablePodsDuration</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">podMaxInUnschedulablePodsDuration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">activeQ</span><span class="p">:</span>                           <span class="nx">heap</span><span class="p">.</span><span class="nf">NewWithRecorder</span><span class="p">(</span><span class="nx">podInfoKeyFunc</span><span class="p">,</span> <span class="nx">comp</span><span class="p">,</span> <span class="nx">metrics</span><span class="p">.</span><span class="nf">NewActivePodsRecorder</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">unschedulablePods</span><span class="p">:</span>                 <span class="nf">newUnschedulablePods</span><span class="p">(</span><span class="nx">metrics</span><span class="p">.</span><span class="nf">NewUnschedulablePodsRecorder</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">moveRequestCycle</span><span class="p">:</span>                  <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterEventMap</span><span class="p">:</span>                   <span class="nx">options</span><span class="p">.</span><span class="nx">clusterEventMap</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pq</span><span class="p">.</span><span class="nx">cond</span><span class="p">.</span><span class="nx">L</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">pq</span><span class="p">.</span><span class="nx">lock</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pq</span><span class="p">.</span><span class="nx">podBackoffQ</span> <span class="p">=</span> <span class="nx">heap</span><span class="p">.</span><span class="nf">NewWithRecorder</span><span class="p">(</span><span class="nx">podInfoKeyFunc</span><span class="p">,</span> <span class="nx">pq</span><span class="p">.</span><span class="nx">podsCompareBackoffCompleted</span><span class="p">,</span> <span class="nx">metrics</span><span class="p">.</span><span class="nf">NewBackoffPodsRecorder</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pq</span><span class="p">.</span><span class="nx">nsLister</span> <span class="p">=</span> <span class="nx">informerFactory</span><span class="p">.</span><span class="nf">Core</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">Namespaces</span><span class="p">().</span><span class="nf">Lister</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">pq</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>了解了Queue的结构，就需要知道 入队列与出队列是在哪里操作的。在初始化时，需要注册一个 <code>addEventHandlerFuncs</code> 这个时候，会注入三个动作函数，也就是controller中的概念；而在AddFunc中可以看到会入队列。</p>
<p>注入是对 Pod 的<a href="https://github.com/kubernetes/kubernetes/blob/140c27533044e9e00f800d3ad0517540e3e4ecad/pkg/scheduler/eventhandlers.go#L302-L305">informer</a>注入的，注入的函数 <a href="https://github.com/kubernetes/kubernetes/blob/140c27533044e9e00f800d3ad0517540e3e4ecad/pkg/scheduler/eventhandlers.go#L114-L120">addPodToSchedulingQueue</a>  就是入栈</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">Handler</span><span class="p">:</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">ResourceEventHandlerFuncs</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">AddFunc</span><span class="p">:</span>    <span class="nx">sched</span><span class="p">.</span><span class="nx">addPodToSchedulingQueue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">UpdateFunc</span><span class="p">:</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">updatePodInSchedulingQueue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">DeleteFunc</span><span class="p">:</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">deletePodFromSchedulingQueue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">sched</span> <span class="o">*</span><span class="nx">Scheduler</span><span class="p">)</span> <span class="nf">addPodToSchedulingQueue</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pod</span> <span class="o">:=</span> <span class="nx">obj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Add event for unscheduled pod&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">SchedulingQueue</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">pod</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleError</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;unable to queue %T: %v&#34;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">,</span> <span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而这个 <code>SchedulingQueue</code> 的实现就是 <code>PriorityQueue</code> ，而Add中则对 activeQ进行的操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">PriorityQueue</span><span class="p">)</span> <span class="nf">Add</span><span class="p">(</span><span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p</span><span class="p">.</span><span class="nx">lock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">p</span><span class="p">.</span><span class="nx">lock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 格式化入栈数据，包含podinfo，里会包含v1.Pod
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 初始化的时间，创建的时间，以及不能被调度时的记录其plugin的名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">pInfo</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nf">newQueuedPodInfo</span><span class="p">(</span><span class="nx">pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 入栈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">activeQ</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">pInfo</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Error adding pod to the active queue&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">p</span><span class="p">.</span><span class="nx">unschedulablePods</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">pod</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;Error: pod is already in the unschedulable queue&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">p</span><span class="p">.</span><span class="nx">unschedulablePods</span><span class="p">.</span><span class="nb">delete</span><span class="p">(</span><span class="nx">pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Delete pod from backoffQ if it is backing off
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">podBackoffQ</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="nx">pInfo</span><span class="p">);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;Error: pod is already in the podBackoff queue&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metrics</span><span class="p">.</span><span class="nx">SchedulerQueueIncomingPods</span><span class="p">.</span><span class="nf">WithLabelValues</span><span class="p">(</span><span class="s">&#34;active&#34;</span><span class="p">,</span> <span class="nx">PodAdd</span><span class="p">).</span><span class="nf">Inc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p</span><span class="p">.</span><span class="nx">PodNominator</span><span class="p">.</span><span class="nf">AddNominatedPod</span><span class="p">(</span><span class="nx">pInfo</span><span class="p">.</span><span class="nx">PodInfo</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p</span><span class="p">.</span><span class="nx">cond</span><span class="p">.</span><span class="nf">Broadcast</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在上面看 <em>scheduler</em> 结构时，可以看到有一个 nextPod的，nextPod就是从队列中弹出一个pod，这个在<em>scheduler</em> 时会传入 <a href="https://github.com/kubernetes/kubernetes/blob/140c27533044e9e00f800d3ad0517540e3e4ecad/pkg/scheduler/internal/queue/scheduling_queue.go#L952-L965">MakeNextPodFunc</a> 就是这个 nextpod</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">MakeNextPodFunc</span><span class="p">(</span><span class="nx">queue</span> <span class="nx">SchedulingQueue</span><span class="p">)</span> <span class="kd">func</span><span class="p">()</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kd">func</span><span class="p">()</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">podInfo</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">queue</span><span class="p">.</span><span class="nf">Pop</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;About to try and schedule pod&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">podInfo</span><span class="p">.</span><span class="nx">Pod</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">plugin</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">podInfo</span><span class="p">.</span><span class="nx">UnschedulablePlugins</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">metrics</span><span class="p">.</span><span class="nf">UnschedulableReason</span><span class="p">(</span><span class="nx">plugin</span><span class="p">,</span> <span class="nx">podInfo</span><span class="p">.</span><span class="nx">Pod</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">SchedulerName</span><span class="p">).</span><span class="nf">Dec</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">podInfo</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Error while retrieving next pod from scheduling queue&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而这个 <code>queue.Pop()</code> 对应的就是 <code>PriorityQueue</code> 的 <a href="https://github.com/kubernetes/kubernetes/blob/140c27533044e9e00f800d3ad0517540e3e4ecad/pkg/scheduler/internal/queue/scheduling_queue.go#L483-L503">Pop()</a> ，在这里会将作为 activeQ 的消费端</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">PriorityQueue</span><span class="p">)</span> <span class="nf">Pop</span><span class="p">()</span> <span class="p">(</span><span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="nx">p</span><span class="p">.</span><span class="nx">lock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">   <span class="k">defer</span> <span class="nx">p</span><span class="p">.</span><span class="nx">lock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="nx">p</span><span class="p">.</span><span class="nx">activeQ</span><span class="p">.</span><span class="nf">Len</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// When the queue is empty, invocation of Pop() is blocked until new item is enqueued.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// When Close() is called, the p.closed is set and the condition is broadcast,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="c1">// which causes this loop to continue and return from the Pop().
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span> <span class="nx">p</span><span class="p">.</span><span class="nx">closed</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="nx">queueClosed</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="nx">p</span><span class="p">.</span><span class="nx">cond</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="nx">obj</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">activeQ</span><span class="p">.</span><span class="nf">Pop</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="nx">pInfo</span> <span class="o">:=</span> <span class="nx">obj</span><span class="p">.(</span><span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="nx">pInfo</span><span class="p">.</span><span class="nx">Attempts</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">   <span class="nx">p</span><span class="p">.</span><span class="nx">schedulingCycle</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="nx">pInfo</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在上面入口部分也看到了，scheduleOne 和 scheduler，scheduleOne 就是去消费一个Pod，他会调用 NextPod，NextPod就是在初始化传入的 <code>MakeNextPodFunc</code> ，至此回到对应的 Pop来做消费。</p>
<p>schedulerOne是为一个Pod做调度的流程。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">sched</span> <span class="o">*</span><span class="nx">Scheduler</span><span class="p">)</span> <span class="nf">scheduleOne</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">podInfo</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nf">NextPod</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// pod could be nil when schedulerQueue is closed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">podInfo</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">podInfo</span><span class="p">.</span><span class="nx">Pod</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pod</span> <span class="o">:=</span> <span class="nx">podInfo</span><span class="p">.</span><span class="nx">Pod</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fwk</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nf">frameworkForPod</span><span class="p">(</span><span class="nx">pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// This shouldn&#39;t happen, because we only accept for scheduling the pods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// which specify a scheduler name that matches one of the profiles.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Error occurred&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">sched</span><span class="p">.</span><span class="nf">skipPodSchedule</span><span class="p">(</span><span class="nx">fwk</span><span class="p">,</span> <span class="nx">pod</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="调度上下文">调度上下文</h2>
<p>当了解了scheduler结构后，下面分析下调度上下文的过程。看看扩展点是怎么工作的。这个时候又需要提到官网的调度上下文的图。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/scheduling-framework-extensions.png" alt="img"  /></p>
<center class="podsc">图1：Pod的调度上下文</center>
<center><em>Source：</em>https://kubernetes.io/docs/concepts/scheduling-eviction/scheduling-framework</center>
<p>而 <em>scheduler</em> 对于调度上下文来就是这个 <code>scheduleOne </code> ，下面就是看这个调度上下文</p>
<h3 id="sort">Sort</h3>
<p><code>Sort</code> 插件提供了排序功能，用于对在调度队列中待处理 Pod 进行排序。一次只能启用一个队列排序。</p>
<p>在进入 <code>scheduleOne</code> 后，<code>NextPod</code> 从 <code>activeQ</code> 中队列中得到一个Pod，然后的 <code>frameworkForPod</code> 会做打分的动作就是调度上下文的第一个扩展点 <code>sort</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">sched</span> <span class="o">*</span><span class="nx">Scheduler</span><span class="p">)</span> <span class="nf">scheduleOne</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">podInfo</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nf">NextPod</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// pod could be nil when schedulerQueue is closed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">podInfo</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">podInfo</span><span class="p">.</span><span class="nx">Pod</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pod</span> <span class="o">:=</span> <span class="nx">podInfo</span><span class="p">.</span><span class="nx">Pod</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fwk</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nf">frameworkForPod</span><span class="p">(</span><span class="nx">pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">sched</span> <span class="o">*</span><span class="nx">Scheduler</span><span class="p">)</span> <span class="nf">frameworkForPod</span><span class="p">(</span><span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Framework</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 获取指定的profile
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fwk</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">Profiles</span><span class="p">[</span><span class="nx">pod</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">SchedulerName</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;profile not found for scheduler name %q&#34;</span><span class="p">,</span> <span class="nx">pod</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">SchedulerName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">fwk</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>回顾，因为在New scheduler时会初始化这个 sort 函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">podQueue</span> <span class="o">:=</span> <span class="nx">internalqueue</span><span class="p">.</span><span class="nf">NewSchedulingQueue</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nx">profiles</span><span class="p">[</span><span class="nx">options</span><span class="p">.</span><span class="nx">profiles</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">SchedulerName</span><span class="p">].</span><span class="nf">QueueSortFunc</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">informerFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">internalqueue</span><span class="p">.</span><span class="nf">WithPodInitialBackoffDuration</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">podInitialBackoffSeconds</span><span class="p">)</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">internalqueue</span><span class="p">.</span><span class="nf">WithPodMaxBackoffDuration</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">podMaxBackoffSeconds</span><span class="p">)</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">internalqueue</span><span class="p">.</span><span class="nf">WithPodNominator</span><span class="p">(</span><span class="nx">nominator</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">internalqueue</span><span class="p">.</span><span class="nf">WithClusterEventMap</span><span class="p">(</span><span class="nx">clusterEventMap</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">internalqueue</span><span class="p">.</span><span class="nf">WithPodMaxInUnschedulablePodsDuration</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">podMaxInUnschedulablePodsDuration</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="prefilter">preFilter</h3>
<p>preFilter作为第一个扩展点，是用于在过滤之前预处理或检查 Pod 或集群的相关信息。这里会终止调度</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">sched</span> <span class="o">*</span><span class="nx">Scheduler</span><span class="p">)</span> <span class="nf">scheduleOne</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">podInfo</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nf">NextPod</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// pod could be nil when schedulerQueue is closed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">podInfo</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">||</span> <span class="nx">podInfo</span><span class="p">.</span><span class="nx">Pod</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pod</span> <span class="o">:=</span> <span class="nx">podInfo</span><span class="p">.</span><span class="nx">Pod</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fwk</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nf">frameworkForPod</span><span class="p">(</span><span class="nx">pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// This shouldn&#39;t happen, because we only accept for scheduling the pods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// which specify a scheduler name that matches one of the profiles.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Error occurred&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">sched</span><span class="p">.</span><span class="nf">skipPodSchedule</span><span class="p">(</span><span class="nx">fwk</span><span class="p">,</span> <span class="nx">pod</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Attempting to schedule pod&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Synchronously attempt to find a fit for the pod.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">start</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">state</span> <span class="o">:=</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">NewCycleState</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">state</span><span class="p">.</span><span class="nf">SetRecordPluginMetrics</span><span class="p">(</span><span class="nx">rand</span><span class="p">.</span><span class="nf">Intn</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">&lt;</span> <span class="nx">pluginMetricsSamplePercent</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Initialize an empty podsToActivate struct, which will be filled up by plugins or stay empty.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">podsToActivate</span> <span class="o">:=</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">NewPodsToActivate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">state</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">PodsToActivateKey</span><span class="p">,</span> <span class="nx">podsToActivate</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">schedulingCycleCtx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 这里将进入prefilter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">scheduleResult</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nf">SchedulePod</span><span class="p">(</span><span class="nx">schedulingCycleCtx</span><span class="p">,</span> <span class="nx">fwk</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/schedule_one.go#L311-L360">schedulePod</a> 尝试将给定的 pod 调度到节点列表中的节点之一。如果成功，它将返回节点的名称。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">sched</span> <span class="o">*</span><span class="nx">Scheduler</span><span class="p">)</span> <span class="nf">schedulePod</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">fwk</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">Framework</span><span class="p">,</span> <span class="nx">state</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="p">(</span><span class="nx">result</span> <span class="nx">ScheduleResult</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">trace</span> <span class="o">:=</span> <span class="nx">utiltrace</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;Scheduling&#34;</span><span class="p">,</span> <span class="nx">utiltrace</span><span class="p">.</span><span class="nx">Field</span><span class="p">{</span><span class="nx">Key</span><span class="p">:</span> <span class="s">&#34;namespace&#34;</span><span class="p">,</span> <span class="nx">Value</span><span class="p">:</span> <span class="nx">pod</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">},</span> <span class="nx">utiltrace</span><span class="p">.</span><span class="nx">Field</span><span class="p">{</span><span class="nx">Key</span><span class="p">:</span> <span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="nx">Value</span><span class="p">:</span> <span class="nx">pod</span><span class="p">.</span><span class="nx">Name</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">trace</span><span class="p">.</span><span class="nf">LogIfLong</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 用于将cache更新为当前内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">Cache</span><span class="p">.</span><span class="nf">UpdateSnapshot</span><span class="p">(</span><span class="nx">sched</span><span class="p">.</span><span class="nx">nodeInfoSnapshot</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">trace</span><span class="p">.</span><span class="nf">Step</span><span class="p">(</span><span class="s">&#34;Snapshotting scheduler cache and node infos done&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">nodeInfoSnapshot</span><span class="p">.</span><span class="nf">NumNodes</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">ErrNoNodesAvailable</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 找到一个合适的pod时，会执行扩展点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">feasibleNodes</span><span class="p">,</span> <span class="nx">diagnosis</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nf">findNodesThatFitPod</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">fwk</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/schedule_one.go#L364-L426">findNodesThatFitPod</a> 会执行对应的过滤插件来找到最适合的Node，包括备注，以及方法名都可以看到，这里运行的插件😁😁，后面会分析算法内容，只对workflow学习。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">sched</span> <span class="o">*</span><span class="nx">Scheduler</span><span class="p">)</span> <span class="nf">findNodesThatFitPod</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">fwk</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">Framework</span><span class="p">,</span> <span class="nx">state</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="p">([]</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Node</span><span class="p">,</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">Diagnosis</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">diagnosis</span> <span class="o">:=</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">Diagnosis</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">NodeToStatusMap</span><span class="p">:</span>      <span class="nb">make</span><span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">NodeToStatusMap</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">UnschedulablePlugins</span><span class="p">:</span> <span class="nx">sets</span><span class="p">.</span><span class="nf">NewString</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Run &#34;prefilter&#34; plugins.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">preRes</span><span class="p">,</span> <span class="nx">s</span> <span class="o">:=</span> <span class="nx">fwk</span><span class="p">.</span><span class="nf">RunPreFilterPlugins</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">allNodes</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">nodeInfoSnapshot</span><span class="p">.</span><span class="nf">NodeInfos</span><span class="p">().</span><span class="nf">List</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">diagnosis</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">s</span><span class="p">.</span><span class="nf">IsSuccess</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">s</span><span class="p">.</span><span class="nf">IsUnschedulable</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">diagnosis</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nf">AsError</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// All nodes will have the same status. Some non trivial refactoring is
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// needed to avoid this copy.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">n</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">allNodes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">diagnosis</span><span class="p">.</span><span class="nx">NodeToStatusMap</span><span class="p">[</span><span class="nx">n</span><span class="p">.</span><span class="nf">Node</span><span class="p">().</span><span class="nx">Name</span><span class="p">]</span> <span class="p">=</span> <span class="nx">s</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Status satisfying IsUnschedulable() gets injected into diagnosis.UnschedulablePlugins.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">s</span><span class="p">.</span><span class="nf">FailedPlugin</span><span class="p">()</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">diagnosis</span><span class="p">.</span><span class="nx">UnschedulablePlugins</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nf">FailedPlugin</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">diagnosis</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// &#34;NominatedNodeName&#34; can potentially be set in a previous scheduling cycle as a result of preemption.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// This node is likely the only candidate that will fit the pod, and hence we try it first before iterating over all nodes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">pod</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">NominatedNodeName</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">feasibleNodes</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nf">evaluateNominatedNode</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">pod</span><span class="p">,</span> <span class="nx">fwk</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">diagnosis</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Evaluation failed on nominated node&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">),</span> <span class="s">&#34;node&#34;</span><span class="p">,</span> <span class="nx">pod</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">NominatedNodeName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Nominated node passes all the filters, scheduler is good to assign this node to the pod.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">feasibleNodes</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">feasibleNodes</span><span class="p">,</span> <span class="nx">diagnosis</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">nodes</span> <span class="o">:=</span> <span class="nx">allNodes</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">preRes</span><span class="p">.</span><span class="nf">AllNodes</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">nodes</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">NodeInfo</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">preRes</span><span class="p">.</span><span class="nx">NodeNames</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">n</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">preRes</span><span class="p">.</span><span class="nx">NodeNames</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">nInfo</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">nodeInfoSnapshot</span><span class="p">.</span><span class="nf">NodeInfos</span><span class="p">().</span><span class="nf">Get</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">diagnosis</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">nodes</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">nodes</span><span class="p">,</span> <span class="nx">nInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">feasibleNodes</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nf">findNodesThatPassFilters</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">fwk</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">,</span> <span class="nx">diagnosis</span><span class="p">,</span> <span class="nx">nodes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">diagnosis</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">feasibleNodes</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nf">findNodesThatPassExtenders</span><span class="p">(</span><span class="nx">sched</span><span class="p">.</span><span class="nx">Extenders</span><span class="p">,</span> <span class="nx">pod</span><span class="p">,</span> <span class="nx">feasibleNodes</span><span class="p">,</span> <span class="nx">diagnosis</span><span class="p">.</span><span class="nx">NodeToStatusMap</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">diagnosis</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">feasibleNodes</span><span class="p">,</span> <span class="nx">diagnosis</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="filter">filter</h3>
<p>filter插件相当于<em>调度上下文</em>中的 <code>Predicates</code>，用于排除不能运行 Pod 的节点。Filter 会按配置的顺序进行调用。如果有一个filter将节点标记位不可用，则将 Pod 标记为不可调度（即不会向下执行）。</p>
<p>对于代码中来讲，filter还是处于 <a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/schedule_one.go#L364-L426">findNodesThatFitPod</a> 函数中，<code>findNodesThatPassFilters</code> 就是获取到 FN，即可行节点，而这个过程就是 <em>filter</em> 扩展点</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">sched</span> <span class="o">*</span><span class="nx">Scheduler</span><span class="p">)</span> <span class="nf">findNodesThatFitPod</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">fwk</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">Framework</span><span class="p">,</span> <span class="nx">state</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="p">([]</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Node</span><span class="p">,</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">Diagnosis</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">	<span class="nx">feasibleNodes</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nf">findNodesThatPassFilters</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">fwk</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">,</span> <span class="nx">diagnosis</span><span class="p">,</span> <span class="nx">nodes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">diagnosis</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">feasibleNodes</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nf">findNodesThatPassExtenders</span><span class="p">(</span><span class="nx">sched</span><span class="p">.</span><span class="nx">Extenders</span><span class="p">,</span> <span class="nx">pod</span><span class="p">,</span> <span class="nx">feasibleNodes</span><span class="p">,</span> <span class="nx">diagnosis</span><span class="p">.</span><span class="nx">NodeToStatusMap</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">diagnosis</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">feasibleNodes</span><span class="p">,</span> <span class="nx">diagnosis</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="postfilter">Postfilter</h3>
<p>当没有为 pod 找到<em>FN</em>时，该插件会按照配置的顺序进行调用。如果任何<code>postFilter</code>插件将 Pod 标记为<em>schedulable</em>，则不会调用其余插件。即 <code>filter</code> 成功后不会进行这步骤，那我们来验证下这里把😊</p>
<p>还是在 scheduleOne 中，当我们运行的 SchedulePod 完成后（成功或失败），这时会返回一个err，而 <code>postfilter</code> 会根据这个 err进行选择执行或不执行，符合官方给出的说法。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">scheduleResult</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nf">SchedulePod</span><span class="p">(</span><span class="nx">schedulingCycleCtx</span><span class="p">,</span> <span class="nx">fwk</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// SchedulePod() may have failed because the pod would not fit on any host, so we try to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// preempt, with the expectation that the next time the pod is tried for scheduling it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// will fit due to the preemption. It is also possible that a different pod will schedule
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// into the resources that were preempted, but this is harmless.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="kd">var</span> <span class="nx">nominatingInfo</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">NominatingInfo</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">fitError</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">err</span><span class="p">.(</span><span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">FitError</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">fwk</span><span class="p">.</span><span class="nf">HasPostFilterPlugins</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;No PostFilter plugins are registered, so no preemption will be performed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// Run PostFilter plugins to try to make the pod schedulable in a future scheduling cycle.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">result</span><span class="p">,</span> <span class="nx">status</span> <span class="o">:=</span> <span class="nx">fwk</span><span class="p">.</span><span class="nf">RunPostFilterPlugins</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">,</span> <span class="nx">fitError</span><span class="p">.</span><span class="nx">Diagnosis</span><span class="p">.</span><span class="nx">NodeToStatusMap</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">status</span><span class="p">.</span><span class="nf">Code</span><span class="p">()</span> <span class="o">==</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">Error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;Status after running PostFilter plugins for pod&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">),</span> <span class="s">&#34;status&#34;</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">fitError</span><span class="p">.</span><span class="nx">Diagnosis</span><span class="p">.</span><span class="nx">PostFilterMsg</span> <span class="p">=</span> <span class="nx">status</span><span class="p">.</span><span class="nf">Message</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">					<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Status after running PostFilter plugins for pod&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">),</span> <span class="s">&#34;status&#34;</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">result</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">nominatingInfo</span> <span class="p">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">NominatingInfo</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Pod did not fit anywhere, so it is counted as a failure. If preemption
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// succeeds, the pod should get counted as a success the next time we try to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// schedule it. (hopefully)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">metrics</span><span class="p">.</span><span class="nf">PodUnschedulable</span><span class="p">(</span><span class="nx">fwk</span><span class="p">.</span><span class="nf">ProfileName</span><span class="p">(),</span> <span class="nx">metrics</span><span class="p">.</span><span class="nf">SinceInSeconds</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">ErrNoNodesAvailable</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">nominatingInfo</span> <span class="p">=</span> <span class="nx">clearNominatedNode</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// No nodes available is counted as unschedulable rather than an error.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">metrics</span><span class="p">.</span><span class="nf">PodUnschedulable</span><span class="p">(</span><span class="nx">fwk</span><span class="p">.</span><span class="nf">ProfileName</span><span class="p">(),</span> <span class="nx">metrics</span><span class="p">.</span><span class="nf">SinceInSeconds</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">nominatingInfo</span> <span class="p">=</span> <span class="nx">clearNominatedNode</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Error selecting node for pod&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="nx">metrics</span><span class="p">.</span><span class="nf">PodScheduleError</span><span class="p">(</span><span class="nx">fwk</span><span class="p">.</span><span class="nf">ProfileName</span><span class="p">(),</span> <span class="nx">metrics</span><span class="p">.</span><span class="nf">SinceInSeconds</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">sched</span><span class="p">.</span><span class="nf">handleSchedulingFailure</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">fwk</span><span class="p">,</span> <span class="nx">podInfo</span><span class="p">,</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">PodReasonUnschedulable</span><span class="p">,</span> <span class="nx">nominatingInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="prescorescore">PreScore,Score</h3>
<p>可用于进行预Score工作，作为通知性的扩展点，会在在filter完之后直接会关联 preScore 插件进行继续工作，而不是返回，如果配置的这些插件有任何一个返回失败，则Pod将被拒绝。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">sched</span> <span class="o">*</span><span class="nx">Scheduler</span><span class="p">)</span> <span class="nf">schedulePod</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">fwk</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">Framework</span><span class="p">,</span> <span class="nx">state</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span> <span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="p">(</span><span class="nx">result</span> <span class="nx">ScheduleResult</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">trace</span> <span class="o">:=</span> <span class="nx">utiltrace</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;Scheduling&#34;</span><span class="p">,</span> <span class="nx">utiltrace</span><span class="p">.</span><span class="nx">Field</span><span class="p">{</span><span class="nx">Key</span><span class="p">:</span> <span class="s">&#34;namespace&#34;</span><span class="p">,</span> <span class="nx">Value</span><span class="p">:</span> <span class="nx">pod</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">},</span> <span class="nx">utiltrace</span><span class="p">.</span><span class="nx">Field</span><span class="p">{</span><span class="nx">Key</span><span class="p">:</span> <span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="nx">Value</span><span class="p">:</span> <span class="nx">pod</span><span class="p">.</span><span class="nx">Name</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">trace</span><span class="p">.</span><span class="nf">LogIfLong</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">Cache</span><span class="p">.</span><span class="nf">UpdateSnapshot</span><span class="p">(</span><span class="nx">sched</span><span class="p">.</span><span class="nx">nodeInfoSnapshot</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">trace</span><span class="p">.</span><span class="nf">Step</span><span class="p">(</span><span class="s">&#34;Snapshotting scheduler cache and node infos done&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">nodeInfoSnapshot</span><span class="p">.</span><span class="nf">NumNodes</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">ErrNoNodesAvailable</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">feasibleNodes</span><span class="p">,</span> <span class="nx">diagnosis</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nf">findNodesThatFitPod</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">fwk</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">trace</span><span class="p">.</span><span class="nf">Step</span><span class="p">(</span><span class="s">&#34;Computing predicates done&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">feasibleNodes</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">framework</span><span class="p">.</span><span class="nx">FitError</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Pod</span><span class="p">:</span>         <span class="nx">pod</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">NumAllNodes</span><span class="p">:</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">nodeInfoSnapshot</span><span class="p">.</span><span class="nf">NumNodes</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Diagnosis</span><span class="p">:</span>   <span class="nx">diagnosis</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// When only one node after predicate, just use it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">feasibleNodes</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">ScheduleResult</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">SuggestedHost</span><span class="p">:</span>  <span class="nx">feasibleNodes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">EvaluatedNodes</span><span class="p">:</span> <span class="mi">1</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="nx">diagnosis</span><span class="p">.</span><span class="nx">NodeToStatusMap</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">FeasibleNodes</span><span class="p">:</span>  <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 这里会完成prescore，score
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">priorityList</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">prioritizeNodes</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">Extenders</span><span class="p">,</span> <span class="nx">fwk</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">,</span> <span class="nx">feasibleNodes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">host</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">selectHost</span><span class="p">(</span><span class="nx">priorityList</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">trace</span><span class="p">.</span><span class="nf">Step</span><span class="p">(</span><span class="s">&#34;Prioritizing done&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">ScheduleResult</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">SuggestedHost</span><span class="p">:</span>  <span class="nx">host</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">EvaluatedNodes</span><span class="p">:</span> <span class="nb">len</span><span class="p">(</span><span class="nx">feasibleNodes</span><span class="p">)</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="nx">diagnosis</span><span class="p">.</span><span class="nx">NodeToStatusMap</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">FeasibleNodes</span><span class="p">:</span>  <span class="nb">len</span><span class="p">(</span><span class="nx">feasibleNodes</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/schedule_one.go#L605-L705">priorityNodes</a> 会通过配置的插件给Node打分，并返回每个Node的分数，将每个插件打分结果计算总和获得Node的分数，最后获得节点的加权总分数。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">prioritizeNodes</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">extenders</span> <span class="p">[]</span><span class="nx">framework</span><span class="p">.</span><span class="nx">Extender</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fwk</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">Framework</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">state</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">CycleState</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">nodes</span> <span class="p">[]</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Node</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">NodeScoreList</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// If no priority configs are provided, then all nodes will have a score of one.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// This is required to generate the priority list in the required format
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">extenders</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">!</span><span class="nx">fwk</span><span class="p">.</span><span class="nf">HasScorePlugins</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">result</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">NodeScoreList</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">nodes</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nodes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">result</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">NodeScore</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Name</span><span class="p">:</span>  <span class="nx">nodes</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Score</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="p">})</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Run PreScore plugins.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">preScoreStatus</span> <span class="o">:=</span> <span class="nx">fwk</span><span class="p">.</span><span class="nf">RunPreScorePlugins</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">,</span> <span class="nx">nodes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">preScoreStatus</span><span class="p">.</span><span class="nf">IsSuccess</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">preScoreStatus</span><span class="p">.</span><span class="nf">AsError</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Run the Score plugins.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">scoresMap</span><span class="p">,</span> <span class="nx">scoreStatus</span> <span class="o">:=</span> <span class="nx">fwk</span><span class="p">.</span><span class="nf">RunScorePlugins</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">,</span> <span class="nx">nodes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">scoreStatus</span><span class="p">.</span><span class="nf">IsSuccess</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">scoreStatus</span><span class="p">.</span><span class="nf">AsError</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Additional details logged at level 10 if enabled.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">klogV</span> <span class="o">:=</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">klogV</span><span class="p">.</span><span class="nf">Enabled</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">plugin</span><span class="p">,</span> <span class="nx">nodeScoreList</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">scoresMap</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">nodeScore</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nodeScoreList</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klogV</span><span class="p">.</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Plugin scored node for pod&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">),</span> <span class="s">&#34;plugin&#34;</span><span class="p">,</span> <span class="nx">plugin</span><span class="p">,</span> <span class="s">&#34;node&#34;</span><span class="p">,</span> <span class="nx">nodeScore</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="s">&#34;score&#34;</span><span class="p">,</span> <span class="nx">nodeScore</span><span class="p">.</span><span class="nx">Score</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Summarize all scores.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">result</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">NodeScoreList</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">nodes</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nodes</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">result</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">NodeScore</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="nx">nodes</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">Score</span><span class="p">:</span> <span class="mi">0</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">scoresMap</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">result</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Score</span> <span class="o">+=</span> <span class="nx">scoresMap</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="nx">i</span><span class="p">].</span><span class="nx">Score</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">extenders</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">nodes</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">mu</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span></span><span class="line"><span class="cl">		<span class="nx">combinedScores</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">int64</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">nodes</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">extenders</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">extenders</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nf">IsInterested</span><span class="p">(</span><span class="nx">pod</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">extIndex</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">metrics</span><span class="p">.</span><span class="nx">SchedulerGoroutines</span><span class="p">.</span><span class="nf">WithLabelValues</span><span class="p">(</span><span class="nx">metrics</span><span class="p">.</span><span class="nx">PrioritizingExtender</span><span class="p">).</span><span class="nf">Inc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">				<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">metrics</span><span class="p">.</span><span class="nx">SchedulerGoroutines</span><span class="p">.</span><span class="nf">WithLabelValues</span><span class="p">(</span><span class="nx">metrics</span><span class="p">.</span><span class="nx">PrioritizingExtender</span><span class="p">).</span><span class="nf">Dec</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">					<span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">				<span class="p">}()</span>
</span></span><span class="line"><span class="cl">				<span class="nx">prioritizedList</span><span class="p">,</span> <span class="nx">weight</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">extenders</span><span class="p">[</span><span class="nx">extIndex</span><span class="p">].</span><span class="nf">Prioritize</span><span class="p">(</span><span class="nx">pod</span><span class="p">,</span> <span class="nx">nodes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// Prioritization errors from extender can be ignored, let k8s/other extenders determine the priorities
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Failed to run extender&#39;s priority function. No score given by this extender.&#34;</span><span class="p">,</span> <span class="s">&#34;error&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">),</span> <span class="s">&#34;extender&#34;</span><span class="p">,</span> <span class="nx">extenders</span><span class="p">[</span><span class="nx">extIndex</span><span class="p">].</span><span class="nf">Name</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">				<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="o">*</span><span class="nx">prioritizedList</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">host</span><span class="p">,</span> <span class="nx">score</span> <span class="o">:=</span> <span class="p">(</span><span class="o">*</span><span class="nx">prioritizedList</span><span class="p">)[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Host</span><span class="p">,</span> <span class="p">(</span><span class="o">*</span><span class="nx">prioritizedList</span><span class="p">)[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Score</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="nx">klogV</span><span class="p">.</span><span class="nf">Enabled</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">klogV</span><span class="p">.</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Extender scored node for pod&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">),</span> <span class="s">&#34;extender&#34;</span><span class="p">,</span> <span class="nx">extenders</span><span class="p">[</span><span class="nx">extIndex</span><span class="p">].</span><span class="nf">Name</span><span class="p">(),</span> <span class="s">&#34;node&#34;</span><span class="p">,</span> <span class="nx">host</span><span class="p">,</span> <span class="s">&#34;score&#34;</span><span class="p">,</span> <span class="nx">score</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="nx">combinedScores</span><span class="p">[</span><span class="nx">host</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">score</span> <span class="o">*</span> <span class="nx">weight</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="p">}(</span><span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// wait for all go routines to finish
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">result</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// MaxExtenderPriority may diverge from the max priority used in the scheduler and defined by MaxNodeScore,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// therefore we need to scale the score returned by extenders to the score range used by the scheduler.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">result</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Score</span> <span class="o">+=</span> <span class="nx">combinedScores</span><span class="p">[</span><span class="nx">result</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Name</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="nx">framework</span><span class="p">.</span><span class="nx">MaxNodeScore</span> <span class="o">/</span> <span class="nx">extenderv1</span><span class="p">.</span><span class="nx">MaxExtenderPriority</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">klogV</span><span class="p">.</span><span class="nf">Enabled</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">result</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klogV</span><span class="p">.</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Calculated node&#39;s final score for pod&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">),</span> <span class="s">&#34;node&#34;</span><span class="p">,</span> <span class="nx">result</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Name</span><span class="p">,</span> <span class="s">&#34;score&#34;</span><span class="p">,</span> <span class="nx">result</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">Score</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">result</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="reserve">Reserve</h3>
<p><a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/schedule_one.go#L153-L163">Reserve</a> 因为绑定事件时异步发生的，该插件是为了避免Pod在绑定到节点前时，调度到新的Pod，使节点使用资源超过可用资源情况。如果后续阶段发生错误或失败，将触发 <code>UnReserve</code> 回滚（通知性扩展点）。这也是作为调度周期中最后一个状态，要么成功到 <code>postBind</code> ，要么失败触发 <code>UnReserve</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Run the Reserve method of reserve plugins.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="nx">sts</span> <span class="o">:=</span> <span class="nx">fwk</span><span class="p">.</span><span class="nf">RunReservePluginsReserve</span><span class="p">(</span><span class="nx">schedulingCycleCtx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">assumedPod</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">SuggestedHost</span><span class="p">);</span> <span class="p">!</span><span class="nx">sts</span><span class="p">.</span><span class="nf">IsSuccess</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// 当处理不成功时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">metrics</span><span class="p">.</span><span class="nf">PodScheduleError</span><span class="p">(</span><span class="nx">fwk</span><span class="p">.</span><span class="nf">ProfileName</span><span class="p">(),</span> <span class="nx">metrics</span><span class="p">.</span><span class="nf">SinceInSeconds</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 触发 un-reserve 来清理相关Pod的状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">fwk</span><span class="p">.</span><span class="nf">RunReservePluginsUnreserve</span><span class="p">(</span><span class="nx">schedulingCycleCtx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">assumedPod</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">SuggestedHost</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">forgetErr</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">Cache</span><span class="p">.</span><span class="nf">ForgetPod</span><span class="p">(</span><span class="nx">assumedPod</span><span class="p">);</span> <span class="nx">forgetErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="nx">forgetErr</span><span class="p">,</span> <span class="s">&#34;Scheduler cache ForgetPod failed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sched</span><span class="p">.</span><span class="nf">handleSchedulingFailure</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">fwk</span><span class="p">,</span> <span class="nx">assumedPodInfo</span><span class="p">,</span> <span class="nx">sts</span><span class="p">.</span><span class="nf">AsError</span><span class="p">(),</span> <span class="nx">SchedulerError</span><span class="p">,</span> <span class="nx">clearNominatedNode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="permit">permit</h3>
<p><a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/schedule_one.go#L165-L183">Permit</a> 插件可以阻止或延迟 Pod 的绑定</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">	<span class="c1">// Run &#34;permit&#34; plugins.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">runPermitStatus</span> <span class="o">:=</span> <span class="nx">fwk</span><span class="p">.</span><span class="nf">RunPermitPlugins</span><span class="p">(</span><span class="nx">schedulingCycleCtx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">assumedPod</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">SuggestedHost</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">runPermitStatus</span><span class="p">.</span><span class="nf">IsWait</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="p">!</span><span class="nx">runPermitStatus</span><span class="p">.</span><span class="nf">IsSuccess</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">reason</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">runPermitStatus</span><span class="p">.</span><span class="nf">IsUnschedulable</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">metrics</span><span class="p">.</span><span class="nf">PodUnschedulable</span><span class="p">(</span><span class="nx">fwk</span><span class="p">.</span><span class="nf">ProfileName</span><span class="p">(),</span> <span class="nx">metrics</span><span class="p">.</span><span class="nf">SinceInSeconds</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="nx">reason</span> <span class="p">=</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">PodReasonUnschedulable</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">metrics</span><span class="p">.</span><span class="nf">PodScheduleError</span><span class="p">(</span><span class="nx">fwk</span><span class="p">.</span><span class="nf">ProfileName</span><span class="p">(),</span> <span class="nx">metrics</span><span class="p">.</span><span class="nf">SinceInSeconds</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="nx">reason</span> <span class="p">=</span> <span class="nx">SchedulerError</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 只要其中一个插件返回的状态不是 success 或者 wait
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">fwk</span><span class="p">.</span><span class="nf">RunReservePluginsUnreserve</span><span class="p">(</span><span class="nx">schedulingCycleCtx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">assumedPod</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">SuggestedHost</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 从cache中忘掉pod
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">forgetErr</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">Cache</span><span class="p">.</span><span class="nf">ForgetPod</span><span class="p">(</span><span class="nx">assumedPod</span><span class="p">);</span> <span class="nx">forgetErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="nx">forgetErr</span><span class="p">,</span> <span class="s">&#34;Scheduler cache ForgetPod failed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">sched</span><span class="p">.</span><span class="nf">handleSchedulingFailure</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">fwk</span><span class="p">,</span> <span class="nx">assumedPodInfo</span><span class="p">,</span> <span class="nx">runPermitStatus</span><span class="p">.</span><span class="nf">AsError</span><span class="p">(),</span> <span class="nx">reason</span><span class="p">,</span> <span class="nx">clearNominatedNode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="binding-cycle">Binding Cycle</h3>
<p>在选择好 <em>FN</em> 后则做一个假设绑定，并更新到cache中，接下来回去执行真正的bind操作，也就是 <code>binding cycle</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">sched</span> <span class="o">*</span><span class="nx">Scheduler</span><span class="p">)</span> <span class="nf">scheduleOne</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// binding cycle 是一个异步的操作，这里表现就是go协程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">bindingCycleCtx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">metrics</span><span class="p">.</span><span class="nx">SchedulerGoroutines</span><span class="p">.</span><span class="nf">WithLabelValues</span><span class="p">(</span><span class="nx">metrics</span><span class="p">.</span><span class="nx">Binding</span><span class="p">).</span><span class="nf">Inc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">metrics</span><span class="p">.</span><span class="nx">SchedulerGoroutines</span><span class="p">.</span><span class="nf">WithLabelValues</span><span class="p">(</span><span class="nx">metrics</span><span class="p">.</span><span class="nx">Binding</span><span class="p">).</span><span class="nf">Dec</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 运行WaitOnPermit插件，如果失败则，unReserve回滚
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">waitOnPermitStatus</span> <span class="o">:=</span> <span class="nx">fwk</span><span class="p">.</span><span class="nf">WaitOnPermit</span><span class="p">(</span><span class="nx">bindingCycleCtx</span><span class="p">,</span> <span class="nx">assumedPod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">waitOnPermitStatus</span><span class="p">.</span><span class="nf">IsSuccess</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="kd">var</span> <span class="nx">reason</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">waitOnPermitStatus</span><span class="p">.</span><span class="nf">IsUnschedulable</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">metrics</span><span class="p">.</span><span class="nf">PodUnschedulable</span><span class="p">(</span><span class="nx">fwk</span><span class="p">.</span><span class="nf">ProfileName</span><span class="p">(),</span> <span class="nx">metrics</span><span class="p">.</span><span class="nf">SinceInSeconds</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">				<span class="nx">reason</span> <span class="p">=</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">PodReasonUnschedulable</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">metrics</span><span class="p">.</span><span class="nf">PodScheduleError</span><span class="p">(</span><span class="nx">fwk</span><span class="p">.</span><span class="nf">ProfileName</span><span class="p">(),</span> <span class="nx">metrics</span><span class="p">.</span><span class="nf">SinceInSeconds</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">				<span class="nx">reason</span> <span class="p">=</span> <span class="nx">SchedulerError</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// trigger un-reserve plugins to clean up state associated with the reserved Pod
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">fwk</span><span class="p">.</span><span class="nf">RunReservePluginsUnreserve</span><span class="p">(</span><span class="nx">bindingCycleCtx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">assumedPod</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">SuggestedHost</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">forgetErr</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">Cache</span><span class="p">.</span><span class="nf">ForgetPod</span><span class="p">(</span><span class="nx">assumedPod</span><span class="p">);</span> <span class="nx">forgetErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="nx">forgetErr</span><span class="p">,</span> <span class="s">&#34;scheduler cache ForgetPod failed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// &#34;Forget&#34;ing an assumed Pod in binding cycle should be treated as a PodDelete event,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// as the assumed Pod had occupied a certain amount of resources in scheduler cache.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// TODO(#103853): de-duplicate the logic.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// Avoid moving the assumed Pod itself as it&#39;s always Unschedulable.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// It&#39;s intentional to &#34;defer&#34; this operation; otherwise MoveAllToActiveOrBackoffQueue() would
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// update `q.moveRequest` and thus move the assumed pod to backoffQ anyways.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">defer</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">SchedulingQueue</span><span class="p">.</span><span class="nf">MoveAllToActiveOrBackoffQueue</span><span class="p">(</span><span class="nx">internalqueue</span><span class="p">.</span><span class="nx">AssignedPodDelete</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">pod</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="nx">assumedPod</span><span class="p">.</span><span class="nx">UID</span> <span class="o">!=</span> <span class="nx">pod</span><span class="p">.</span><span class="nx">UID</span>
</span></span><span class="line"><span class="cl">				<span class="p">})</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">sched</span><span class="p">.</span><span class="nf">handleSchedulingFailure</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">fwk</span><span class="p">,</span> <span class="nx">assumedPodInfo</span><span class="p">,</span> <span class="nx">waitOnPermitStatus</span><span class="p">.</span><span class="nf">AsError</span><span class="p">(),</span> <span class="nx">reason</span><span class="p">,</span> <span class="nx">clearNominatedNode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 运行Prebind 插件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">preBindStatus</span> <span class="o">:=</span> <span class="nx">fwk</span><span class="p">.</span><span class="nf">RunPreBindPlugins</span><span class="p">(</span><span class="nx">bindingCycleCtx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">assumedPod</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">SuggestedHost</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">preBindStatus</span><span class="p">.</span><span class="nf">IsSuccess</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">metrics</span><span class="p">.</span><span class="nf">PodScheduleError</span><span class="p">(</span><span class="nx">fwk</span><span class="p">.</span><span class="nf">ProfileName</span><span class="p">(),</span> <span class="nx">metrics</span><span class="p">.</span><span class="nf">SinceInSeconds</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// trigger un-reserve plugins to clean up state associated with the reserved Pod
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">fwk</span><span class="p">.</span><span class="nf">RunReservePluginsUnreserve</span><span class="p">(</span><span class="nx">bindingCycleCtx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">assumedPod</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">SuggestedHost</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">forgetErr</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">Cache</span><span class="p">.</span><span class="nf">ForgetPod</span><span class="p">(</span><span class="nx">assumedPod</span><span class="p">);</span> <span class="nx">forgetErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="nx">forgetErr</span><span class="p">,</span> <span class="s">&#34;scheduler cache ForgetPod failed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// &#34;Forget&#34;ing an assumed Pod in binding cycle should be treated as a PodDelete event,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// as the assumed Pod had occupied a certain amount of resources in scheduler cache.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// TODO(#103853): de-duplicate the logic.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">sched</span><span class="p">.</span><span class="nx">SchedulingQueue</span><span class="p">.</span><span class="nf">MoveAllToActiveOrBackoffQueue</span><span class="p">(</span><span class="nx">internalqueue</span><span class="p">.</span><span class="nx">AssignedPodDelete</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">sched</span><span class="p">.</span><span class="nf">handleSchedulingFailure</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">fwk</span><span class="p">,</span> <span class="nx">assumedPodInfo</span><span class="p">,</span> <span class="nx">preBindStatus</span><span class="p">.</span><span class="nf">AsError</span><span class="p">(),</span> <span class="nx">SchedulerError</span><span class="p">,</span> <span class="nx">clearNominatedNode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// bind是真正的绑定操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="nx">bindingCycleCtx</span><span class="p">,</span> <span class="nx">fwk</span><span class="p">,</span> <span class="nx">assumedPod</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">SuggestedHost</span><span class="p">,</span> <span class="nx">state</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">metrics</span><span class="p">.</span><span class="nf">PodScheduleError</span><span class="p">(</span><span class="nx">fwk</span><span class="p">.</span><span class="nf">ProfileName</span><span class="p">(),</span> <span class="nx">metrics</span><span class="p">.</span><span class="nf">SinceInSeconds</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 如果失败了就触发 un-reserve plugins 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">fwk</span><span class="p">.</span><span class="nf">RunReservePluginsUnreserve</span><span class="p">(</span><span class="nx">bindingCycleCtx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">assumedPod</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">SuggestedHost</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">Cache</span><span class="p">.</span><span class="nf">ForgetPod</span><span class="p">(</span><span class="nx">assumedPod</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;scheduler cache ForgetPod failed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// &#34;Forget&#34;ing an assumed Pod in binding cycle should be treated as a PodDelete event,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// as the assumed Pod had occupied a certain amount of resources in scheduler cache.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// TODO(#103853): de-duplicate the logic.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">sched</span><span class="p">.</span><span class="nx">SchedulingQueue</span><span class="p">.</span><span class="nf">MoveAllToActiveOrBackoffQueue</span><span class="p">(</span><span class="nx">internalqueue</span><span class="p">.</span><span class="nx">AssignedPodDelete</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">sched</span><span class="p">.</span><span class="nf">handleSchedulingFailure</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">fwk</span><span class="p">,</span> <span class="nx">assumedPodInfo</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;binding rejected: %w&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">),</span> <span class="nx">SchedulerError</span><span class="p">,</span> <span class="nx">clearNominatedNode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Calculating nodeResourceString can be heavy. Avoid it if klog verbosity is below 2.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Successfully bound pod to node&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">),</span> <span class="s">&#34;node&#34;</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">SuggestedHost</span><span class="p">,</span> <span class="s">&#34;evaluatedNodes&#34;</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">EvaluatedNodes</span><span class="p">,</span> <span class="s">&#34;feasibleNodes&#34;</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">FeasibleNodes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">metrics</span><span class="p">.</span><span class="nf">PodScheduled</span><span class="p">(</span><span class="nx">fwk</span><span class="p">.</span><span class="nf">ProfileName</span><span class="p">(),</span> <span class="nx">metrics</span><span class="p">.</span><span class="nf">SinceInSeconds</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">metrics</span><span class="p">.</span><span class="nx">PodSchedulingAttempts</span><span class="p">.</span><span class="nf">Observe</span><span class="p">(</span><span class="nb">float64</span><span class="p">(</span><span class="nx">podInfo</span><span class="p">.</span><span class="nx">Attempts</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">metrics</span><span class="p">.</span><span class="nx">PodSchedulingDuration</span><span class="p">.</span><span class="nf">WithLabelValues</span><span class="p">(</span><span class="nf">getAttemptsLabel</span><span class="p">(</span><span class="nx">podInfo</span><span class="p">)).</span><span class="nf">Observe</span><span class="p">(</span><span class="nx">metrics</span><span class="p">.</span><span class="nf">SinceInSeconds</span><span class="p">(</span><span class="nx">podInfo</span><span class="p">.</span><span class="nx">InitialAttemptTimestamp</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 运行 &#34;postbind&#34; 插件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 是通知性的扩展点，该插件在绑定 Pod 后调用，可用于清理相关资源（）。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">fwk</span><span class="p">.</span><span class="nf">RunPostBindPlugins</span><span class="p">(</span><span class="nx">bindingCycleCtx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">assumedPod</span><span class="p">,</span> <span class="nx">scheduleResult</span><span class="p">.</span><span class="nx">SuggestedHost</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// At the end of a successful binding cycle, move up Pods if needed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">podsToActivate</span><span class="p">.</span><span class="nx">Map</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">sched</span><span class="p">.</span><span class="nx">SchedulingQueue</span><span class="p">.</span><span class="nf">Activate</span><span class="p">(</span><span class="nx">podsToActivate</span><span class="p">.</span><span class="nx">Map</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Unlike the logic in scheduling cycle, we don&#39;t bother deleting the entries
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// as `podsToActivate.Map` is no longer consumed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="调度上下文中的失败流程">调度上下文中的失败流程</h2>
<p>上面说到的都是正常的请求，下面会对失败的请求是如何重试的进行分析，而 <em>scheduler</em> 中关于失败处理方面相关的属性会涉及到上面 <em>scheduler</em> 结构中的  <code>backoffQ</code> 与 <code>unschedulablePods </code></p>
<ul>
<li><code>backoffQ</code>：也是一个 <em>heap</em> 类型的优先级队列，存放的是不可调度的Pod</li>
<li><code>unschedulablePods </code>：保存确定不可被调度的Pod，一个map类型</li>
</ul>
<p>backoffQ 与  unschedulablePods 会在初始化 <em>scheduler</em> 时初始化，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewPriorityQueue</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lessFn</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">LessFunc</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">informerFactory</span> <span class="nx">informers</span><span class="p">.</span><span class="nx">SharedInformerFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">opts</span> <span class="o">...</span><span class="nx">Option</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="o">*</span><span class="nx">PriorityQueue</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">options</span> <span class="o">:=</span> <span class="nx">defaultPriorityQueueOptions</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">opt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">opts</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">opt</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">comp</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">podInfo1</span><span class="p">,</span> <span class="nx">podInfo2</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">pInfo1</span> <span class="o">:=</span> <span class="nx">podInfo1</span><span class="p">.(</span><span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">pInfo2</span> <span class="o">:=</span> <span class="nx">podInfo2</span><span class="p">.(</span><span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nf">lessFn</span><span class="p">(</span><span class="nx">pInfo1</span><span class="p">,</span> <span class="nx">pInfo2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">podNominator</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">options</span><span class="p">.</span><span class="nx">podNominator</span> <span class="p">=</span> <span class="nf">NewPodNominator</span><span class="p">(</span><span class="nx">informerFactory</span><span class="p">.</span><span class="nf">Core</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">Pods</span><span class="p">().</span><span class="nf">Lister</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">pq</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">PriorityQueue</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">PodNominator</span><span class="p">:</span>                      <span class="nx">options</span><span class="p">.</span><span class="nx">podNominator</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clock</span><span class="p">:</span>                             <span class="nx">options</span><span class="p">.</span><span class="nx">clock</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">stop</span><span class="p">:</span>                              <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">podInitialBackoffDuration</span><span class="p">:</span>         <span class="nx">options</span><span class="p">.</span><span class="nx">podInitialBackoffDuration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">podMaxBackoffDuration</span><span class="p">:</span>             <span class="nx">options</span><span class="p">.</span><span class="nx">podMaxBackoffDuration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">podMaxInUnschedulablePodsDuration</span><span class="p">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">podMaxInUnschedulablePodsDuration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">activeQ</span><span class="p">:</span>                           <span class="nx">heap</span><span class="p">.</span><span class="nf">NewWithRecorder</span><span class="p">(</span><span class="nx">podInfoKeyFunc</span><span class="p">,</span> <span class="nx">comp</span><span class="p">,</span> <span class="nx">metrics</span><span class="p">.</span><span class="nf">NewActivePodsRecorder</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">unschedulablePods</span><span class="p">:</span>                 <span class="nf">newUnschedulablePods</span><span class="p">(</span><span class="nx">metrics</span><span class="p">.</span><span class="nf">NewUnschedulablePodsRecorder</span><span class="p">()),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">moveRequestCycle</span><span class="p">:</span>                  <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clusterEventMap</span><span class="p">:</span>                   <span class="nx">options</span><span class="p">.</span><span class="nx">clusterEventMap</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pq</span><span class="p">.</span><span class="nx">cond</span><span class="p">.</span><span class="nx">L</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">pq</span><span class="p">.</span><span class="nx">lock</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 初始化backoffQ
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// NewWithRecorder作为一个可选的 metricRecorder 的 Heap 对象。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// podInfoKeyFunc是一个函数，返回错误与字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// pq.podsCompareBackoffCompleted 比较两个pod的回退时间，如果第一个在第二个之前为true，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 反之 false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">pq</span><span class="p">.</span><span class="nx">podBackoffQ</span> <span class="p">=</span> <span class="nx">heap</span><span class="p">.</span><span class="nf">NewWithRecorder</span><span class="p">(</span><span class="nx">podInfoKeyFunc</span><span class="p">,</span> <span class="nx">pq</span><span class="p">.</span><span class="nx">podsCompareBackoffCompleted</span><span class="p">,</span> <span class="nx">metrics</span><span class="p">.</span><span class="nf">NewBackoffPodsRecorder</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pq</span><span class="p">.</span><span class="nx">nsLister</span> <span class="p">=</span> <span class="nx">informerFactory</span><span class="p">.</span><span class="nf">Core</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">Namespaces</span><span class="p">().</span><span class="nf">Lister</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">pq</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于初始化 backoffQ 会产生的两个函数，<a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/internal/queue/scheduling_queue.go#L757-L761">getBackoffTime</a> 与 <a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/internal/queue/scheduling_queue.go#L765-L775">calculateBackoffDuration</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// getBackoffTime returns the time that podInfo completes backoff
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">PriorityQueue</span><span class="p">)</span> <span class="nf">getBackoffTime</span><span class="p">(</span><span class="nx">podInfo</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span><span class="p">)</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">duration</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nf">calculateBackoffDuration</span><span class="p">(</span><span class="nx">podInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">backoffTime</span> <span class="o">:=</span> <span class="nx">podInfo</span><span class="p">.</span><span class="nx">Timestamp</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">duration</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">backoffTime</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// calculateBackoffDuration is a helper function for calculating the backoffDuration
</span></span></span><span class="line"><span class="cl"><span class="c1">// based on the number of attempts the pod has made.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">PriorityQueue</span><span class="p">)</span> <span class="nf">calculateBackoffDuration</span><span class="p">(</span><span class="nx">podInfo</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span><span class="p">)</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">duration</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">podInitialBackoffDuration</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">podInfo</span><span class="p">.</span><span class="nx">Attempts</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Use subtraction instead of addition or multiplication to avoid overflow.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">duration</span> <span class="p">&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">podMaxBackoffDuration</span><span class="o">-</span><span class="nx">duration</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nx">podMaxBackoffDuration</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">duration</span> <span class="o">+=</span> <span class="nx">duration</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">duration</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于整个故障错误会按照如下流程进行，在初始化 <em>scheduler</em> 会注册一个 Error 函数，这个函数用作对不可调度Pod进行处理，实际上被注册的函数是 MakeDefaultErrorFunc。这个函数将作为 Error 函数被调用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">sched</span> <span class="o">:=</span> <span class="nf">newScheduler</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nx">schedulerCache</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">extenders</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">internalqueue</span><span class="p">.</span><span class="nf">MakeNextPodFunc</span><span class="p">(</span><span class="nx">podQueue</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nf">MakeDefaultErrorFunc</span><span class="p">(</span><span class="nx">client</span><span class="p">,</span> <span class="nx">podLister</span><span class="p">,</span> <span class="nx">podQueue</span><span class="p">,</span> <span class="nx">schedulerCache</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">stopEverything</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">podQueue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">profiles</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">snapshot</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">options</span><span class="p">.</span><span class="nx">percentageOfNodesToScore</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而在 调度周期中，也就是 <a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/schedule_one.go#L66-L132">scheduleOne</a> 可以看到，每个扩展点操作失败后都会调用 <a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/schedule_one.go#L812-L834">handleSchedulingFailure</a> 而该函数，使用了注册的 <em>Error</em> 函数来处理Pod</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">sched</span> <span class="o">*</span><span class="nx">Scheduler</span><span class="p">)</span> <span class="nf">scheduleOne</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">...</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">scheduleResult</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sched</span><span class="p">.</span><span class="nf">SchedulePod</span><span class="p">(</span><span class="nx">schedulingCycleCtx</span><span class="p">,</span> <span class="nx">fwk</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">nominatingInfo</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">NominatingInfo</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">fitError</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">err</span><span class="p">.(</span><span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">FitError</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">fwk</span><span class="p">.</span><span class="nf">HasPostFilterPlugins</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;No PostFilter plugins are registered, so no preemption will be performed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			
</span></span><span class="line"><span class="cl">				<span class="nx">result</span><span class="p">,</span> <span class="nx">status</span> <span class="o">:=</span> <span class="nx">fwk</span><span class="p">.</span><span class="nf">RunPostFilterPlugins</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">state</span><span class="p">,</span> <span class="nx">pod</span><span class="p">,</span> <span class="nx">fitError</span><span class="p">.</span><span class="nx">Diagnosis</span><span class="p">.</span><span class="nx">NodeToStatusMap</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">status</span><span class="p">.</span><span class="nf">Code</span><span class="p">()</span> <span class="o">==</span> <span class="nx">framework</span><span class="p">.</span><span class="nx">Error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;Status after running PostFilter plugins for pod&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">),</span> <span class="s">&#34;status&#34;</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">fitError</span><span class="p">.</span><span class="nx">Diagnosis</span><span class="p">.</span><span class="nx">PostFilterMsg</span> <span class="p">=</span> <span class="nx">status</span><span class="p">.</span><span class="nf">Message</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">					<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Status after running PostFilter plugins for pod&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">),</span> <span class="s">&#34;status&#34;</span><span class="p">,</span> <span class="nx">status</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">result</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">nominatingInfo</span> <span class="p">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">NominatingInfo</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">			<span class="nx">metrics</span><span class="p">.</span><span class="nf">PodUnschedulable</span><span class="p">(</span><span class="nx">fwk</span><span class="p">.</span><span class="nf">ProfileName</span><span class="p">(),</span> <span class="nx">metrics</span><span class="p">.</span><span class="nf">SinceInSeconds</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">ErrNoNodesAvailable</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">nominatingInfo</span> <span class="p">=</span> <span class="nx">clearNominatedNode</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// No nodes available is counted as unschedulable rather than an error.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">metrics</span><span class="p">.</span><span class="nf">PodUnschedulable</span><span class="p">(</span><span class="nx">fwk</span><span class="p">.</span><span class="nf">ProfileName</span><span class="p">(),</span> <span class="nx">metrics</span><span class="p">.</span><span class="nf">SinceInSeconds</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">nominatingInfo</span> <span class="p">=</span> <span class="nx">clearNominatedNode</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Error selecting node for pod&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="nx">metrics</span><span class="p">.</span><span class="nf">PodScheduleError</span><span class="p">(</span><span class="nx">fwk</span><span class="p">.</span><span class="nf">ProfileName</span><span class="p">(),</span> <span class="nx">metrics</span><span class="p">.</span><span class="nf">SinceInSeconds</span><span class="p">(</span><span class="nx">start</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 处理不可调度Pod
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">sched</span><span class="p">.</span><span class="nf">handleSchedulingFailure</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">fwk</span><span class="p">,</span> <span class="nx">podInfo</span><span class="p">,</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">PodReasonUnschedulable</span><span class="p">,</span> <span class="nx">nominatingInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>来到了注册的 <em>Error</em> 函数 <code>MakeDefaultErrorFunc</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">MakeDefaultErrorFunc</span><span class="p">(</span><span class="nx">client</span> <span class="nx">clientset</span><span class="p">.</span><span class="nx">Interface</span><span class="p">,</span> <span class="nx">podLister</span> <span class="nx">corelisters</span><span class="p">.</span><span class="nx">PodLister</span><span class="p">,</span> <span class="nx">podQueue</span> <span class="nx">internalqueue</span><span class="p">.</span><span class="nx">SchedulingQueue</span><span class="p">,</span> <span class="nx">schedulerCache</span> <span class="nx">internalcache</span><span class="p">.</span><span class="nx">Cache</span><span class="p">)</span> <span class="kd">func</span><span class="p">(</span><span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kd">func</span><span class="p">(</span><span class="nx">podInfo</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">pod</span> <span class="o">:=</span> <span class="nx">podInfo</span><span class="p">.</span><span class="nx">Pod</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">ErrNoNodesAvailable</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Unable to schedule pod; no nodes are registered to the cluster; waiting&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">fitError</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">err</span><span class="p">.(</span><span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">FitError</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Inject UnschedulablePlugins to PodInfo, which will be used later for moving Pods between queues efficiently.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">podInfo</span><span class="p">.</span><span class="nx">UnschedulablePlugins</span> <span class="p">=</span> <span class="nx">fitError</span><span class="p">.</span><span class="nx">Diagnosis</span><span class="p">.</span><span class="nx">UnschedulablePlugins</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Unable to schedule pod; no fit; waiting&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">),</span> <span class="s">&#34;err&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">apierrors</span><span class="p">.</span><span class="nf">IsNotFound</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Unable to schedule pod, possibly due to node not found; waiting&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">),</span> <span class="s">&#34;err&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">errStatus</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">err</span><span class="p">.(</span><span class="nx">apierrors</span><span class="p">.</span><span class="nx">APIStatus</span><span class="p">);</span> <span class="nx">ok</span> <span class="o">&amp;&amp;</span> <span class="nx">errStatus</span><span class="p">.</span><span class="nf">Status</span><span class="p">().</span><span class="nx">Details</span><span class="p">.</span><span class="nx">Kind</span> <span class="o">==</span> <span class="s">&#34;node&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">nodeName</span> <span class="o">:=</span> <span class="nx">errStatus</span><span class="p">.</span><span class="nf">Status</span><span class="p">().</span><span class="nx">Details</span><span class="p">.</span><span class="nx">Name</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// when node is not found, We do not remove the node right away. Trying again to get
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// the node and if the node is still not found, then remove it from the scheduler cache.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">CoreV1</span><span class="p">().</span><span class="nf">Nodes</span><span class="p">().</span><span class="nf">Get</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">nodeName</span><span class="p">,</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">GetOptions</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">apierrors</span><span class="p">.</span><span class="nf">IsNotFound</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">node</span> <span class="o">:=</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">Node</span><span class="p">{</span><span class="nx">ObjectMeta</span><span class="p">:</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMeta</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="nx">nodeName</span><span class="p">}}</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">schedulerCache</span><span class="p">.</span><span class="nf">RemoveNode</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">node</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Node is not found; failed to remove it from the cache&#34;</span><span class="p">,</span> <span class="s">&#34;node&#34;</span><span class="p">,</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Error scheduling pod; retrying&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Check if the Pod exists in informer cache.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">cachedPod</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">podLister</span><span class="p">.</span><span class="nf">Pods</span><span class="p">(</span><span class="nx">pod</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">).</span><span class="nf">Get</span><span class="p">(</span><span class="nx">pod</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Pod doesn&#39;t exist in informer cache&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">),</span> <span class="s">&#34;err&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// In the case of extender, the pod may have been bound successfully, but timed out returning its response to the scheduler.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// It could result in the live version to carry .spec.nodeName, and that&#39;s inconsistent with the internal-queued version.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">cachedPod</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">NodeName</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Pod has been assigned to node. Abort adding it back to queue.&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">),</span> <span class="s">&#34;node&#34;</span><span class="p">,</span> <span class="nx">cachedPod</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">NodeName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// As &lt;cachedPod&gt; is from SharedInformer, we need to do a DeepCopy() here.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">podInfo</span><span class="p">.</span><span class="nx">PodInfo</span> <span class="p">=</span> <span class="nx">framework</span><span class="p">.</span><span class="nf">NewPodInfo</span><span class="p">(</span><span class="nx">cachedPod</span><span class="p">.</span><span class="nf">DeepCopy</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 添加到unschedulable队列中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">podQueue</span><span class="p">.</span><span class="nf">AddUnschedulableIfNotPresent</span><span class="p">(</span><span class="nx">podInfo</span><span class="p">,</span> <span class="nx">podQueue</span><span class="p">.</span><span class="nf">SchedulingCycle</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Error occurred&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>下面来到 <code>AddUnschedulableIfNotPresent</code> ，这个也是操作 <code>backoffQ</code> 和 <code>unschedulablePods </code> 的真正的动作</p>
<p><code>AddUnschedulableIfNotPresent</code> 函数会吧无法调度的 pod 插入队列，除非它已经在队列中。通常情况下，<code>PriorityQueue</code> 将不可调度的 Pod 放在 <code>unschedulablePods</code> 中。但如果最近有 move request，则将 pod 放入 <code>podBackoffQ</code> 中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">PriorityQueue</span><span class="p">)</span> <span class="nf">AddUnschedulableIfNotPresent</span><span class="p">(</span><span class="nx">pInfo</span> <span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span><span class="p">,</span> <span class="nx">podSchedulingCycle</span> <span class="kt">int64</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p</span><span class="p">.</span><span class="nx">lock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">p</span><span class="p">.</span><span class="nx">lock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pod</span> <span class="o">:=</span> <span class="nx">pInfo</span><span class="p">.</span><span class="nx">Pod</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果已经存在则不添加
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">p</span><span class="p">.</span><span class="nx">unschedulablePods</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">pod</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Pod %v is already present in unschedulable queue&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 检查是否在activeQ中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">exists</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">activeQ</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">pInfo</span><span class="p">);</span> <span class="nx">exists</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Pod %v is already present in the active queue&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 检查是否在podBackoffQ中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">exists</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">podBackoffQ</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">pInfo</span><span class="p">);</span> <span class="nx">exists</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Pod %v is already present in the backoff queue&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 在重新添加时，会刷新 Pod时间为最新操作的时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">pInfo</span><span class="p">.</span><span class="nx">Timestamp</span> <span class="p">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">clock</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">plugin</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">pInfo</span><span class="p">.</span><span class="nx">UnschedulablePlugins</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">metrics</span><span class="p">.</span><span class="nf">UnschedulableReason</span><span class="p">(</span><span class="nx">plugin</span><span class="p">,</span> <span class="nx">pInfo</span><span class="p">.</span><span class="nx">Pod</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nx">SchedulerName</span><span class="p">).</span><span class="nf">Inc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 如果接受到move request那么则放入BackoffQ
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">p</span><span class="p">.</span><span class="nx">moveRequestCycle</span> <span class="o">&gt;=</span> <span class="nx">podSchedulingCycle</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">podBackoffQ</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">pInfo</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;error adding pod %v to the backoff queue: %v&#34;</span><span class="p">,</span> <span class="nx">pod</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">metrics</span><span class="p">.</span><span class="nx">SchedulerQueueIncomingPods</span><span class="p">.</span><span class="nf">WithLabelValues</span><span class="p">(</span><span class="s">&#34;backoff&#34;</span><span class="p">,</span> <span class="nx">ScheduleAttemptFailure</span><span class="p">).</span><span class="nf">Inc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 否则将放入到 unschedulablePods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">p</span><span class="p">.</span><span class="nx">unschedulablePods</span><span class="p">.</span><span class="nf">addOrUpdate</span><span class="p">(</span><span class="nx">pInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">metrics</span><span class="p">.</span><span class="nx">SchedulerQueueIncomingPods</span><span class="p">.</span><span class="nf">WithLabelValues</span><span class="p">(</span><span class="s">&#34;unschedulable&#34;</span><span class="p">,</span> <span class="nx">ScheduleAttemptFailure</span><span class="p">).</span><span class="nf">Inc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">p</span><span class="p">.</span><span class="nx">PodNominator</span><span class="p">.</span><span class="nf">AddNominatedPod</span><span class="p">(</span><span class="nx">pInfo</span><span class="p">.</span><span class="nx">PodInfo</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在启动 <em>scheduler</em> 时，会将这两个队列异步启用两个loop来操作队列。表现在 <a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/internal/queue/scheduling_queue.go#L292-L295">Run()</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">PriorityQueue</span><span class="p">)</span> <span class="nf">Run</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nx">wait</span><span class="p">.</span><span class="nf">Until</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">flushBackoffQCompleted</span><span class="p">,</span> <span class="mf">1.0</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">stop</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nx">wait</span><span class="p">.</span><span class="nf">Until</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">flushUnschedulablePodsLeftover</span><span class="p">,</span> <span class="mi">30</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">stop</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到 <a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/internal/queue/scheduling_queue.go#L431-L458">flushBackoffQCompleted</a> 作为 <code>BackoffQ</code> 实现；而 <a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/pkg/scheduler/internal/queue/scheduling_queue.go#L462-L478">flushUnschedulablePodsLeftover</a> 作为 <code>UnschedulablePods</code> 实现。</p>
<p><code>flushBackoffQCompleted</code> 是用于将所有已完成回退的 pod 从 <code>backoffQ</code> 移到 <code>activeQ</code> 中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">PriorityQueue</span><span class="p">)</span> <span class="nf">flushBackoffQCompleted</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p</span><span class="p">.</span><span class="nx">lock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">p</span><span class="p">.</span><span class="nx">lock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">broadcast</span> <span class="o">:=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span> <span class="c1">// 这就是heap实现的方法，窥视下，但不弹出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">rawPodInfo</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">podBackoffQ</span><span class="p">.</span><span class="nf">Peek</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">rawPodInfo</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">pod</span> <span class="o">:=</span> <span class="nx">rawPodInfo</span><span class="p">.(</span><span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span><span class="p">).</span><span class="nx">Pod</span>
</span></span><span class="line"><span class="cl">		<span class="nx">boTime</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nf">getBackoffTime</span><span class="p">(</span><span class="nx">rawPodInfo</span><span class="p">.(</span><span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">boTime</span><span class="p">.</span><span class="nf">After</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">clock</span><span class="p">.</span><span class="nf">Now</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">podBackoffQ</span><span class="p">.</span><span class="nf">Pop</span><span class="p">()</span> <span class="c1">// 弹出一个
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Unable to pop pod from backoff queue despite backoff completion&#34;</span><span class="p">,</span> <span class="s">&#34;pod&#34;</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KObj</span><span class="p">(</span><span class="nx">pod</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">p</span><span class="p">.</span><span class="nx">activeQ</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">rawPodInfo</span><span class="p">)</span> <span class="c1">// 放入到活动队列中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">metrics</span><span class="p">.</span><span class="nx">SchedulerQueueIncomingPods</span><span class="p">.</span><span class="nf">WithLabelValues</span><span class="p">(</span><span class="s">&#34;active&#34;</span><span class="p">,</span> <span class="nx">BackoffComplete</span><span class="p">).</span><span class="nf">Inc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">broadcast</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">broadcast</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">p</span><span class="p">.</span><span class="nx">cond</span><span class="p">.</span><span class="nf">Broadcast</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>flushUnschedulablePodsLeftover </code> 函数用于将在 <code>unschedulablePods</code> 中的存放时间超过 <code>podMaxInUnschedulablePodsDuration</code> 值的 pod 移动到 <code>backoffQ</code> 或 <code>activeQ</code> 中。</p>
<p><code>podMaxInUnschedulablePodsDuration</code> 会根据配置传入，当没有传入，也就是使用了 <em><a href="https://github.com/kubernetes/kubernetes/blob/32c483ea6ee90a3a81f382563c91034470af8a4a/cmd/kube-scheduler/app/options/options.go#L77-L84">Deprecated</a></em> 那么会为5分钟。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewOptions</span><span class="p">()</span> <span class="o">*</span><span class="nx">Options</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">o</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Options</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">SecureServing</span><span class="p">:</span>  <span class="nx">apiserveroptions</span><span class="p">.</span><span class="nf">NewSecureServingOptions</span><span class="p">().</span><span class="nf">WithLoopback</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Authentication</span><span class="p">:</span> <span class="nx">apiserveroptions</span><span class="p">.</span><span class="nf">NewDelegatingAuthenticationOptions</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Authorization</span><span class="p">:</span>  <span class="nx">apiserveroptions</span><span class="p">.</span><span class="nf">NewDelegatingAuthorizationOptions</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Deprecated</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">DeprecatedOptions</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">PodMaxInUnschedulablePodsDuration</span><span class="p">:</span> <span class="mi">5</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Minute</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于 <code>flushUnschedulablePodsLeftover </code> 就是做一个时间对比，然后添加到对应的队列中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">PriorityQueue</span><span class="p">)</span> <span class="nf">flushUnschedulablePodsLeftover</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p</span><span class="p">.</span><span class="nx">lock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">p</span><span class="p">.</span><span class="nx">lock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">podsToMove</span> <span class="p">[]</span><span class="o">*</span><span class="nx">framework</span><span class="p">.</span><span class="nx">QueuedPodInfo</span>
</span></span><span class="line"><span class="cl">	<span class="nx">currentTime</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">clock</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">pInfo</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">p</span><span class="p">.</span><span class="nx">unschedulablePods</span><span class="p">.</span><span class="nx">podInfoMap</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lastScheduleTime</span> <span class="o">:=</span> <span class="nx">pInfo</span><span class="p">.</span><span class="nx">Timestamp</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">currentTime</span><span class="p">.</span><span class="nf">Sub</span><span class="p">(</span><span class="nx">lastScheduleTime</span><span class="p">)</span> <span class="p">&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">podMaxInUnschedulablePodsDuration</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">podsToMove</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">podsToMove</span><span class="p">,</span> <span class="nx">pInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">podsToMove</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">p</span><span class="p">.</span><span class="nf">movePodsToActiveOrBackoffQueue</span><span class="p">(</span><span class="nx">podsToMove</span><span class="p">,</span> <span class="nx">UnschedulableTimeout</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="总结调度上下文流程">总结调度上下文流程</h2>
<ul>
<li>在构建一个 <em>scheduler</em> 时经历如下步骤：
<ul>
<li>准备cache，informer，queue，错误处理函数等</li>
<li>添加事件函数，会监听资源（如Pod），当有变动则触发对应事件函数，这是入站 <code>activeQ</code></li>
</ul>
</li>
<li>构建完成后会 run，run时会run一个 <code>SchedulingQueue</code>，这个是作为不可调度队列
<ul>
<li><code>BackoffQ</code></li>
<li><code>UnschedulablePods</code></li>
<li>不可调度队列会根据注册时定期消费队列中Pod将其添加到 <code>activeQ</code> 中</li>
</ul>
</li>
<li>启动一个 <code>scheduleOne</code> 的loop，这个是调度上下文中所有的扩展点的执行，也是 <code>activeQ</code> 的消费端
<ul>
<li><code>scheduleOne</code> 获取 pod</li>
<li>执行各个扩展点，如果出错则 <em>Error</em> 函数 <code>MakeDefaultErrorFunc</code> 将其添加到不可调度队列中</li>
<li>回到不可调度队列中消费部分</li>
</ul>
</li>
</ul>
<h2 id="reference">Reference</h2>
<blockquote>
<p><sup id="1">[1]</sup> <a href="https://www.sobyte.net/post/2022-02/kubernetes-scheduling-framework-and-extender/">kubernetes scheduler extender</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>kubernetes的决策组件 - kube-scheduler原理分析</title>
      <link>https://www.oomkill.com/2022/07/ch16-scheduler/</link>
      <pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/07/ch16-scheduler/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="overview-supa-href11asup">Overview <sup><a href="#1">[1]</a></sup></h2>
<p>kubernetes集群中的调度程序 <code>kube-scheduler</code> 会 <code>watch</code> 未分配节点的新创建的Pod，并未该Pod找到可运行的最佳（特定）节点。那么这些动作或者说这些原理是怎么实现的呢，让我们往下剖析下。</p>
<p>对于新创建的 pod 或其他未调度的 pod来讲，kube-scheduler 选择一个最佳节点供它们运行。但是，Pod 中的每个容器对资源的要求都不同，每个 Pod 也有不同的要求。因此，需要根据具体的调度要求对现有节点进行过滤。</p>
<p>在Kubernetes集群中，满足 Pod 调度要求的节点称为可行节点 （<code> feasible nodes</code> <em>FN</em>） 。如果没有合适的节点，则 pod 将保持未调度状态，直到调度程序能够放置它。也就是说，当我们创建Pod时，如果长期处于 <code>Pending</code> 状态，这个时候应该看你的集群调度器是否因为某些问题没有合适的节点了</p>
<p>调度器为 Pod 找到 FN 后，然后运行一组函数对 FN 进行评分，并在 FN 中找到得分最高的节点来运行 Pod。</p>
<p>调度策略在决策时需要考虑的因素包括个人和集体资源需求、硬件/软件/策略约束 （<code>constraints</code>）、亲和性 (<code>affinity</code>) 和反亲和性（ <code>anti-affinity</code> ）规范、数据局部性、工作负载间干扰等。</p>
<h3 id="如何为pod选择节点">如何为pod选择节点？</h3>
<p><code>kube-scheduler</code> 为pod选择节点会分位两部：</p>
<ul>
<li>过滤 (<code>Filtering</code>)</li>
<li>打分 (<code>Scoring</code>)</li>
</ul>
<p>过滤也被称为预选 （<code>Predicates</code>），该步骤会找到可调度的节点集，然后通过是否满足特定资源的请求，例如通过 <code>PodFitsResources</code> 过滤器检查候选节点是否有足够的资源来满足 Pod 资源的请求。这个步骤完成后会得到一个包含合适的节点的列表（通常为多个），如果列表为空，则Pod不可调度。</p>
<p>打分也被称为优选（<code>Priorities</code>），在该步骤中，会对上一个步骤的输出进行打分，Scheduer 通过打分的规则为每个通过 <code>Filtering</code> 步骤的节点计算出一个分数。</p>
<p>完成上述两个步骤之后，<code>kube-scheduler</code> 会将Pod分配给分数最高的 Node，如果存在多个相同分数的节点，会随机选择一个。</p>
<h2 id="kubernetes的调度策略">kubernetes的调度策略</h2>
<p>Kubernetes 1.21之前版本可以在代码 <a href="https://github.com/kubernetes/kubernetes/blob/release-1.21/pkg/scheduler/algorithmprovider/registry.go">kubernetes\pkg\scheduler\algorithmprovider\registry.go</a> 中看到对应的注册模式，在1.22 scheduler 更换了其路径，对于registry文件更换到了<a href="https://github.com/kubernetes/kubernetes/blob/release-1.24/pkg/scheduler/framework/plugins/registry.go">kubernetes\pkg\scheduler\framework\plugins\registry.go</a> ；对于kubernetes官方说法为，<em>调度策略是用于“预选” (<code>Predicates </code>)或 过滤（<code>filtering </code>） 和 用于 优选（<code>Priorities</code>）或 评分 (<code>scoring</code>)的</em></p>
<blockquote>
<p>注：kubernetes官方没有找到预选和优选的概念，而Predicates和filtering 是处于预选阶段的动词，而Priorities和scoring是优选阶段的动词。后面用PF和PS代替这个两个词。</p>
</blockquote>
<h3 id="为pod预选节点-supa-href22asup">为Pod预选节点 <sup><a href="#2">[2]</a></sup></h3>
<p>上面也提到了，<code>filtering</code> 的目的是为了排除（过滤）掉不满足 Pod 要求的节点。例如，某个节点上的闲置资源小于 Pod 所需资源，则该节点不会被考虑在内，即被过滤掉。在 <em>“Predicates”</em> 阶段实现的 <em>filtering</em> 策略，包括：</p>
<ul>
<li><code>NoDiskConflict</code> ：评估是否有合适Pod请求的卷</li>
<li><code>NoVolumeZoneConflict</code>：在给定zone限制情况下，评估Pod请求所需的卷在Node上是否可用</li>
<li><code>PodFitsResources</code>：检查空闲资源（CPU、内存）是否满足Pod请求</li>
<li><code>PodFitsHostPorts</code>：检查Pod所需端口在Node上是否被占用</li>
<li><code>HostName</code>： 过滤除去，<code>PodSpec</code> 中 <code>NodeName</code> 字段中指定的Node之外的所有Node。</li>
<li><code>MatchNodeSelector</code>：检查Node的 <em>label</em> 是否与 <em>Pod</em> 配置中 <code>nodeSelector</code>字段中指定的 <em>label</em> 匹配，并且从 Kubernetes v1.2 开始， 如果存在 <code>nodeAffinity</code> 也会匹配。</li>
<li><code>CheckNodeMemoryPressure</code>：检查是否可以在已出现内存压力情况节点上调度 Pod。</li>
<li><code>CheckNodeDiskPressure</code>：检查是否可以在报告磁盘压力情况的节点上调度 Pod</li>
</ul>
<p>具体对应得策略可以在 kubernetes\pkg\scheduler\framework\plugins\registry.go 看到</p>
<h3 id="对预选节点打分-supa-href22asup">对预选节点打分 <sup><a href="#2">[2]</a></sup></h3>
<p>通过上面步骤过滤过得列表则是适合托管的Pod，这个结果通常来说是一个列表，如何选择最优Node进行调度，则是接下来打分的步骤步骤。</p>
<p>例如：Kubernetes对剩余节点进行优先级排序，优先级由一组函数计算；优先级函数将为剩余节点给出从<code>0~10</code> 的分数，10 表示最优，0 表示最差。每个优先级函数由一个正数加权组成，每个Node的得分是通过将所有加权得分相加来计算的。设有两个优先级函数，<code>priorityFunc1</code> 和 <code>priorityFunc2</code> 加上权重因子 <code>weight1</code> 和<code>weight2</code>，那么这个Node的最终得分为：$finalScore = (w1 \times priorityFunc1) + (w2 \times priorityFunc2)$。计算完分数后，选择最高分数的Node做为Pod的宿主机，存在多个相同分数Node情况下会随机选择一个Node。</p>
<p>目前kubernetes提供了一些在打分 <em>Scoring</em> 阶段算法：</p>
<ul>
<li><code>LeastRequestedPriority</code>：Node的优先级基于Node的空闲部分$\frac{capacity\ -\  Node上所有存在的Pod\ -\ 正在调度的Pod请求}{capacity}$，通过计算具有最高分数的Node是FN</li>
<li><code>BalancedResourceAllocation</code> ：该算法会将 Pod 放在一个Node上，使得在Pod 部署后 CPU 和内存的使用率为平衡的</li>
<li><code>SelectorSpreadPriority</code>：通过最小化资源方式，将属于同一种服务、控制器或同一Node上的Replica的 Pod的数量来分布Pod。如果节点上存在Zone，则会调整优先级，以便 pod可以分布在Zone之上。</li>
<li><code>CalculateAntiAffinityPriority</code>：根据label来分布，按照相同service上相同label值的pod进行分配</li>
<li><code>ImageLocalityPriority</code> ：根据Node上镜像进行打分，Node上存在Pod请求所需的镜像优先级较高。</li>
</ul>
<h3 id="在代码中查看上述的代码">在代码中查看上述的代码</h3>
<p>以 <code>PodFitsHostPorts</code> 算法为例，因为是Node类算法，在<a href="https://github.com/kubernetes/kubernetes/tree/release-1.23/pkg/scheduler/framework/plugins/nodeports">kubernetes\pkg\scheduler\framework\plugins\nodeports</a></p>
<h2 id="调度框架-supa-href33asup">调度框架 <sup><a href="#3">[3]</a></sup></h2>
<p>调度框架 (<code>scheduling framework</code> <em>SF</em> ) 是kubernetes为 scheduler设计的一个pluggable的架构。SF 将scheduler设计为 <em>Plugin</em> 式的 API，API将上一章中提到的一些列调度策略实现为 <code>Plugin</code>。</p>
<p>在 <em>SF</em> 中，定义了一些扩展点 （<code>extension points</code> <em>EP</em> ），而被实现为Plugin的调度程序将被注册在一个或多个 <em>EP</em> 中，换句话来说，在这些 <em>EP</em> 的执行过程中如果注册在多个 <em>EP</em> 中，将会在多个 <em>EP</em> 被调用。</p>
<p>每次调度都分为两个阶段，调度周期（<code>Scheduling Cycel</code>）与绑定周期（<code>Binding Cycle</code>）。</p>
<ul>
<li><em>SC</em> 表示为，为Pod选择一个节点；<em>SC</em> 是串行运行的。</li>
<li><em>BC</em> 表示为，将 <em>SC</em> 决策结果应用于集群中；<em>BC</em> 可以同时运行。</li>
</ul>
<p>调度周期与绑定周期结合一起，被称为<strong>调度上下文</strong> （<code>Scheduling Context</code>）,下图则是调度上下文的工作流</p>
<blockquote>
<p>注：如果决策结果为Pod的调度结果无可用节点，或存在内部错误，则中止 <em>SC</em> 或 <em>BC</em>。Pod将重入队列重试</p>
</blockquote>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/scheduling-framework-extensions.png" alt="img"  /></p>
<center class="podsc">图1：Pod的调度上下文</center>
<center><em>Source：</em>https://kubernetes.io/docs/concepts/scheduling-eviction/scheduling-framework</center>
<h3 id="扩展点-supa-href44asup">扩展点 <sup><a href="#4">[4]</a></sup></h3>
<p>扩展点（<code>Extension points</code>）是指在<em>调度上下文</em>中的每个可扩展API，通过图提现为<a href="#podsc">[图1]</a>。其中 <code>Filter</code> 相当于 <code>Predicate</code> 而 <code>Scoring</code> 相当于 <code>Priority</code>。</p>
<p>对于调度阶段会通过以下扩展点：</p>
<ul>
<li>
<p><code>Sort</code>：该插件提供了排序功能，用于对在调度队列中待处理 Pod 进行排序。一次只能启用一个队列排序。</p>
</li>
<li>
<p><code>preFilter</code>：该插件用于在过滤之前预处理或检查 Pod 或集群的相关信息。这里会终止调度</p>
</li>
<li>
<p><code>filter</code>：该插件相当于<em>调度上下文</em>中的 <code>Predicates</code>，用于排除不能运行 Pod 的节点。Filter 会按配置的顺序进行调用。如果有一个filter将节点标记位不可用，则将 Pod 标记为不可调度（即不会向下执行）。</p>
</li>
<li>
<p><code>postFilter</code>：当没有为 pod 找到<em>FN</em>时，该插件会按照配置的顺序进行调用。如果任何<code>postFilter</code>插件将 Pod 标记为<em>schedulable</em>，则不会调用其余插件。即 <code>filter</code> 成功后不会进行这步骤</p>
</li>
<li>
<p><code>preScore</code>：可用于进行预Score工作（通知性的扩展点）。</p>
</li>
<li>
<p><code>score</code>：该插件为每个通过 <code>filter</code> 阶段的Node提供打分服务。然后Scheduler将选择具有最高加权分数总和的Node。</p>
</li>
<li>
<p><code>reserve</code>：因为绑定事件时异步发生的，该插件是为了避免Pod在绑定到节点前时，调度到新的Pod，使节点使用资源超过可用资源情况。如果后续阶段发生错误或失败，将触发 <code>UnReserve</code> 回滚（通知性扩展点）。这也是作为调度周期中最后一个状态，要么成功到 <code>postBind</code> ，要么失败触发 <code>UnReserve</code>。</p>
</li>
<li>
<p><code>permit</code>：该插件可以阻止或延迟 Pod 的绑定，一般情况下这步骤会做三件事：</p>
<ul>
<li><code>appove</code> ：调度器继续绑定过程</li>
<li><code>Deny</code>：如果任何一个Premit拒绝了Pod与节点的绑定，那么将触发 <code>UnReserve</code> ，并重入队列</li>
<li><code>Wait</code>： 如果 Permit 插件返回 <code>Wait</code>，该 Pod 将保留在内部 <code>Wait</code> Pod 列表中，直到被 <code>Appove</code>。如果发生超时，<code>wait</code> 变为 <code>deny</code> ，将Pod放回至调度队列中，并触发 <code>Unreserve</code> 回滚 。</li>
</ul>
</li>
<li>
<p><code>preBind</code>：该插件用于在 bind Pod 之前执行所需的前置工作。如，<code>preBind</code> 可能会提供一个网络卷并将其挂载到目标节点上。如果在该步骤中的任意插件返回错误，则Pod 将被 <code>deny</code> 并放置到调度队列中。</p>
</li>
<li>
<p><code>bind</code>：在所有的 <code>preBind</code> 完成后，该插件将用于将Pod绑定到Node，并按顺序调用绑定该步骤的插件。如果有一个插件处理了这个事件，那么则忽略其余所有插件。</p>
</li>
<li>
<p><code>postBind</code>：该插件在绑定 Pod 后调用，可用于清理相关资源（通知性的扩展点）。</p>
</li>
<li>
<p><code>multiPoint</code>：这是一个仅配置字段，允许同时为所有适用的扩展点启用或禁用插件。</p>
</li>
</ul>
<h2 id="kube-scheduler工作流分析">kube-scheduler工作流分析</h2>
<p>对于 <code>kube-scheduler</code> 组件的分析，包含 <code>kube-scheduler</code> 启动流程，以及scheduler调度流程。这里会主要针对启动流程分析，后面算法及二次开发部分会切入调度分析。</p>
<p>对于我们部署时使用的 <code>kube-scheduler</code> 位于 <a href="https://github.com/kubernetes/kubernetes/tree/release-1.24/cmd/kube-scheduler">cmd/kube-scheduler</a> ，在 <em>Alpha (1.16)</em> 版本提供了调度框架的模式，到 <em>Stable (1.19)</em> ，从代码结构上是相似的；直到1.22后改变了代码风格。</p>
<p>首先看到的是 <code>kube-scheduler</code> 的入口 <a href="https://github.com/kubernetes/kubernetes/blob/release-1.24/cmd/kube-scheduler/scheduler.go">cmd/kube-scheduler</a> ，这里主要作为两部分，构建参数与启动<code>server</code> ,这里严格来讲 <code>kube-scheduer</code> 是作为一个server，而调度框架等部分是另外的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">command</span> <span class="o">:=</span> <span class="nx">app</span><span class="p">.</span><span class="nf">NewSchedulerCommand</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">code</span> <span class="o">:=</span> <span class="nx">cli</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">command</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="nx">code</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>cli.Run</code> 提供了cobra构成的命令行cli，日志将输出为标准输出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 这里是main中执行的Run
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">cmd</span> <span class="o">*</span><span class="nx">cobra</span><span class="p">.</span><span class="nx">Command</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">logsInitialized</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">run</span><span class="p">(</span><span class="nx">cmd</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">logsInitialized</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintf</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stderr</span><span class="p">,</span> <span class="s">&#34;Error: %v\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;command failed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 这个run作为
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">run</span><span class="p">(</span><span class="nx">cmd</span> <span class="o">*</span><span class="nx">cobra</span><span class="p">.</span><span class="nx">Command</span><span class="p">)</span> <span class="p">(</span><span class="nx">logsInitialized</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rand</span><span class="p">.</span><span class="nf">Seed</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">UnixNano</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">logs</span><span class="p">.</span><span class="nf">FlushLogs</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">cmd</span><span class="p">.</span><span class="nf">SetGlobalNormalizationFunc</span><span class="p">(</span><span class="nx">cliflag</span><span class="p">.</span><span class="nx">WordSepNormalizeFunc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">cmd</span><span class="p">.</span><span class="nx">SilenceUsage</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cmd</span><span class="p">.</span><span class="nx">SilenceUsage</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cmd</span><span class="p">.</span><span class="nf">SetFlagErrorFunc</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">cobra</span><span class="p">.</span><span class="nx">Command</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Re-enable usage printing.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">c</span><span class="p">.</span><span class="nx">SilenceUsage</span> <span class="p">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// In all cases error printing is done below.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cmd</span><span class="p">.</span><span class="nx">SilenceErrors</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// This is idempotent.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">logs</span><span class="p">.</span><span class="nf">AddFlags</span><span class="p">(</span><span class="nx">cmd</span><span class="p">.</span><span class="nf">PersistentFlags</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Inject logs.InitLogs after command line parsing into one of the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// PersistentPre* functions.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">switch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">cmd</span><span class="p">.</span><span class="nx">PersistentPreRun</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">pre</span> <span class="o">:=</span> <span class="nx">cmd</span><span class="p">.</span><span class="nx">PersistentPreRun</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cmd</span><span class="p">.</span><span class="nx">PersistentPreRun</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">cmd</span> <span class="o">*</span><span class="nx">cobra</span><span class="p">.</span><span class="nx">Command</span><span class="p">,</span> <span class="nx">args</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">logs</span><span class="p">.</span><span class="nf">InitLogs</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nx">logsInitialized</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">			<span class="nf">pre</span><span class="p">(</span><span class="nx">cmd</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">cmd</span><span class="p">.</span><span class="nx">PersistentPreRunE</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">pre</span> <span class="o">:=</span> <span class="nx">cmd</span><span class="p">.</span><span class="nx">PersistentPreRunE</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cmd</span><span class="p">.</span><span class="nx">PersistentPreRunE</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">cmd</span> <span class="o">*</span><span class="nx">cobra</span><span class="p">.</span><span class="nx">Command</span><span class="p">,</span> <span class="nx">args</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">logs</span><span class="p">.</span><span class="nf">InitLogs</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nx">logsInitialized</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nf">pre</span><span class="p">(</span><span class="nx">cmd</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cmd</span><span class="p">.</span><span class="nx">PersistentPreRun</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">cmd</span> <span class="o">*</span><span class="nx">cobra</span><span class="p">.</span><span class="nx">Command</span><span class="p">,</span> <span class="nx">args</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">logs</span><span class="p">.</span><span class="nf">InitLogs</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nx">logsInitialized</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="p">=</span> <span class="nx">cmd</span><span class="p">.</span><span class="nf">Execute</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到最终是调用 <code>command.Execute() </code> 执行，这个是执行本身构建的命令，而真正被执行的则是上面的 <code>app.NewSchedulerCommand()</code> ,那么来看看这个是什么</p>
<p><a href="https://github.com/kubernetes/kubernetes/blob/140c27533044e9e00f800d3ad0517540e3e4ecad/cmd/kube-scheduler/app/server.go#L72-L114">app.NewSchedulerCommand()</a> 构建了一个cobra.Commond对象， <a href="https://github.com/kubernetes/kubernetes/blob/140c27533044e9e00f800d3ad0517540e3e4ecad/cmd/kube-scheduler/app/server.go#L117-L142">runCommand()</a> 被封装在内，这个是作为启动scheduler的函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewSchedulerCommand</span><span class="p">(</span><span class="nx">registryOptions</span> <span class="o">...</span><span class="nx">Option</span><span class="p">)</span> <span class="o">*</span><span class="nx">cobra</span><span class="p">.</span><span class="nx">Command</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">opts</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nf">NewOptions</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">cmd</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">cobra</span><span class="p">.</span><span class="nx">Command</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Use</span><span class="p">:</span> <span class="s">&#34;kube-scheduler&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Long</span><span class="p">:</span> <span class="s">`The Kubernetes scheduler is a control plane process which assigns
</span></span></span><span class="line"><span class="cl"><span class="s">Pods to Nodes. The scheduler determines which Nodes are valid placements for
</span></span></span><span class="line"><span class="cl"><span class="s">each Pod in the scheduling queue according to constraints and available
</span></span></span><span class="line"><span class="cl"><span class="s">resources. The scheduler then ranks each valid Node and binds the Pod to a
</span></span></span><span class="line"><span class="cl"><span class="s">suitable Node. Multiple different schedulers may be used within a cluster;
</span></span></span><span class="line"><span class="cl"><span class="s">kube-scheduler is the reference implementation.
</span></span></span><span class="line"><span class="cl"><span class="s">See [scheduling](https://kubernetes.io/docs/concepts/scheduling-eviction/)
</span></span></span><span class="line"><span class="cl"><span class="s">for more information about scheduling and the kube-scheduler component.`</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">RunE</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">cmd</span> <span class="o">*</span><span class="nx">cobra</span><span class="p">.</span><span class="nx">Command</span><span class="p">,</span> <span class="nx">args</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nf">runCommand</span><span class="p">(</span><span class="nx">cmd</span><span class="p">,</span> <span class="nx">opts</span><span class="p">,</span> <span class="nx">registryOptions</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Args</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">cmd</span> <span class="o">*</span><span class="nx">cobra</span><span class="p">.</span><span class="nx">Command</span><span class="p">,</span> <span class="nx">args</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">arg</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">args</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">arg</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;%q does not take any arguments, got %q&#34;</span><span class="p">,</span> <span class="nx">cmd</span><span class="p">.</span><span class="nf">CommandPath</span><span class="p">(),</span> <span class="nx">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">nfs</span> <span class="o">:=</span> <span class="nx">opts</span><span class="p">.</span><span class="nx">Flags</span>
</span></span><span class="line"><span class="cl">	<span class="nx">verflag</span><span class="p">.</span><span class="nf">AddFlags</span><span class="p">(</span><span class="nx">nfs</span><span class="p">.</span><span class="nf">FlagSet</span><span class="p">(</span><span class="s">&#34;global&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">globalflag</span><span class="p">.</span><span class="nf">AddGlobalFlags</span><span class="p">(</span><span class="nx">nfs</span><span class="p">.</span><span class="nf">FlagSet</span><span class="p">(</span><span class="s">&#34;global&#34;</span><span class="p">),</span> <span class="nx">cmd</span><span class="p">.</span><span class="nf">Name</span><span class="p">(),</span> <span class="nx">logs</span><span class="p">.</span><span class="nf">SkipLoggingConfigurationFlags</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fs</span> <span class="o">:=</span> <span class="nx">cmd</span><span class="p">.</span><span class="nf">Flags</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">f</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nfs</span><span class="p">.</span><span class="nx">FlagSets</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fs</span><span class="p">.</span><span class="nf">AddFlagSet</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">cols</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">term</span><span class="p">.</span><span class="nf">TerminalSize</span><span class="p">(</span><span class="nx">cmd</span><span class="p">.</span><span class="nf">OutOrStdout</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cliflag</span><span class="p">.</span><span class="nf">SetUsageAndHelpFunc</span><span class="p">(</span><span class="nx">cmd</span><span class="p">,</span> <span class="o">*</span><span class="nx">nfs</span><span class="p">,</span> <span class="nx">cols</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cmd</span><span class="p">.</span><span class="nf">MarkFlagFilename</span><span class="p">(</span><span class="s">&#34;config&#34;</span><span class="p">,</span> <span class="s">&#34;yaml&#34;</span><span class="p">,</span> <span class="s">&#34;yml&#34;</span><span class="p">,</span> <span class="s">&#34;json&#34;</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Failed to mark flag filename&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">cmd</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>下面来看下 <a href="https://github.com/kubernetes/kubernetes/blob/140c27533044e9e00f800d3ad0517540e3e4ecad/cmd/kube-scheduler/app/server.go#L117-L142">runCommand()</a> 在启动 <em>scheduler</em> 时提供了什么功能。</p>
<p>在新版中已经没有 <code>algorithmprovider</code> 的概念，所以在 <code>runCommand</code> 中做的也就是仅仅启动这个 <code>scheduler</code> ，而 scheduler 作为kubernetes组件，也是会watch等操作，自然少不了informer。其次作为和 <code>controller-manager</code> 相同的工作特性，<code>kube-scheduler</code> 也是 基于Leader选举的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">cc</span> <span class="o">*</span><span class="nx">schedulerserverconfig</span><span class="p">.</span><span class="nx">CompletedConfig</span><span class="p">,</span> <span class="nx">sched</span> <span class="o">*</span><span class="nx">scheduler</span><span class="p">.</span><span class="nx">Scheduler</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// To help debugging, immediately log version
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">klog</span><span class="p">.</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Starting Kubernetes Scheduler&#34;</span><span class="p">,</span> <span class="s">&#34;version&#34;</span><span class="p">,</span> <span class="nx">version</span><span class="p">.</span><span class="nf">Get</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Golang settings&#34;</span><span class="p">,</span> <span class="s">&#34;GOGC&#34;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;GOGC&#34;</span><span class="p">),</span> <span class="s">&#34;GOMAXPROCS&#34;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;GOMAXPROCS&#34;</span><span class="p">),</span> <span class="s">&#34;GOTRACEBACK&#34;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;GOTRACEBACK&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Configz registration.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">cz</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">configz</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;componentconfig&#34;</span><span class="p">);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cz</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;unable to register configz: %s&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Start events processing pipeline.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cc</span><span class="p">.</span><span class="nx">EventBroadcaster</span><span class="p">.</span><span class="nf">StartRecordingToSink</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">EventBroadcaster</span><span class="p">.</span><span class="nf">Shutdown</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Setup healthz checks.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">checks</span> <span class="p">[]</span><span class="nx">healthz</span><span class="p">.</span><span class="nx">HealthChecker</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">.</span><span class="nx">LeaderElection</span><span class="p">.</span><span class="nx">LeaderElect</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">checks</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">checks</span><span class="p">,</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">LeaderElection</span><span class="p">.</span><span class="nx">WatchDog</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">waitingForLeader</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">isLeader</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">waitingForLeader</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// if channel is closed, we are leading
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">return</span> <span class="p">!</span><span class="nx">ok</span>
</span></span><span class="line"><span class="cl">		<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// channel is open, we are waiting for a leader
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Start up the healthz server.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">SecureServing</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">handler</span> <span class="o">:=</span> <span class="nf">buildHandlerChain</span><span class="p">(</span><span class="nf">newHealthzAndMetricsHandler</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">,</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">InformerFactory</span><span class="p">,</span> <span class="nx">isLeader</span><span class="p">,</span> <span class="nx">checks</span><span class="o">...</span><span class="p">),</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">Authentication</span><span class="p">.</span><span class="nx">Authenticator</span><span class="p">,</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">Authorization</span><span class="p">.</span><span class="nx">Authorizer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// TODO: handle stoppedCh and listenerStoppedCh returned by c.SecureServing.Serve
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">SecureServing</span><span class="p">.</span><span class="nf">Serve</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// fail early for secure handlers, removing the old error loop from above
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to start secure server: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Start all informers.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cc</span><span class="p">.</span><span class="nx">InformerFactory</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// DynInformerFactory can be nil in tests.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">DynInformerFactory</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cc</span><span class="p">.</span><span class="nx">DynInformerFactory</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Wait for all caches to sync before scheduling.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cc</span><span class="p">.</span><span class="nx">InformerFactory</span><span class="p">.</span><span class="nf">WaitForCacheSync</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// DynInformerFactory can be nil in tests.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">DynInformerFactory</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cc</span><span class="p">.</span><span class="nx">DynInformerFactory</span><span class="p">.</span><span class="nf">WaitForCacheSync</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If leader election is enabled, runCommand via LeaderElector until done and exit.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">LeaderElection</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cc</span><span class="p">.</span><span class="nx">LeaderElection</span><span class="p">.</span><span class="nx">Callbacks</span> <span class="p">=</span> <span class="nx">leaderelection</span><span class="p">.</span><span class="nx">LeaderCallbacks</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">OnStartedLeading</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nb">close</span><span class="p">(</span><span class="nx">waitingForLeader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">sched</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">			<span class="nx">OnStoppedLeading</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// We were asked to terminate. Exit 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">klog</span><span class="p">.</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Requested to terminate, exiting&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// We lost the lock.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;Leaderelection lost&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">klog</span><span class="p">.</span><span class="nf">FlushAndExit</span><span class="p">(</span><span class="nx">klog</span><span class="p">.</span><span class="nx">ExitFlushTimeout</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">leaderElector</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">leaderelection</span><span class="p">.</span><span class="nf">NewLeaderElector</span><span class="p">(</span><span class="o">*</span><span class="nx">cc</span><span class="p">.</span><span class="nx">LeaderElection</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;couldn&#39;t create leader elector: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">leaderElector</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;lost lease&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Leader election is disabled, so runCommand inline until done.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nb">close</span><span class="p">(</span><span class="nx">waitingForLeader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sched</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;finished without leader elect&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面看到了 <code>runCommend</code> 是作为启动 <em>scheduler</em> 的工作，那么通过参数构建一个 <em>scheduler</em> 则是在 <a href="https://github.com/kubernetes/kubernetes/blob/140c27533044e9e00f800d3ad0517540e3e4ecad/cmd/kube-scheduler/app/server.go#L298-L355">Setup</a> 中完成的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Setup creates a completed config and a scheduler based on the command args and options
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">Setup</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">opts</span> <span class="o">*</span><span class="nx">options</span><span class="p">.</span><span class="nx">Options</span><span class="p">,</span> <span class="nx">outOfTreeRegistryOptions</span> <span class="o">...</span><span class="nx">Option</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">schedulerserverconfig</span><span class="p">.</span><span class="nx">CompletedConfig</span><span class="p">,</span> <span class="o">*</span><span class="nx">scheduler</span><span class="p">.</span><span class="nx">Scheduler</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">cfg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">latest</span><span class="p">.</span><span class="nf">Default</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">opts</span><span class="p">.</span><span class="nx">ComponentConfig</span> <span class="p">=</span> <span class="nx">cfg</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 验证参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">errs</span> <span class="o">:=</span> <span class="nx">opts</span><span class="p">.</span><span class="nf">Validate</span><span class="p">();</span> <span class="nb">len</span><span class="p">(</span><span class="nx">errs</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">utilerrors</span><span class="p">.</span><span class="nf">NewAggregate</span><span class="p">(</span><span class="nx">errs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 构建一个config对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">opts</span><span class="p">.</span><span class="nf">Config</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 返回一个config对象，包含了scheduler所需的配置，如informer，leader selection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cc</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Complete</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">outOfTreeRegistry</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Registry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">option</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">outOfTreeRegistryOptions</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">option</span><span class="p">(</span><span class="nx">outOfTreeRegistry</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">recorderFactory</span> <span class="o">:=</span> <span class="nf">getRecorderFactory</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">cc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">completedProfiles</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="nx">kubeschedulerconfig</span><span class="p">.</span><span class="nx">KubeSchedulerProfile</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 创建出来的scheduler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">sched</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">scheduler</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">Client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cc</span><span class="p">.</span><span class="nx">InformerFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cc</span><span class="p">.</span><span class="nx">DynInformerFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">recorderFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithComponentConfigVersion</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">.</span><span class="nx">TypeMeta</span><span class="p">.</span><span class="nx">APIVersion</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithKubeConfig</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">KubeConfig</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithProfiles</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">.</span><span class="nx">Profiles</span><span class="o">...</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithPercentageOfNodesToScore</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">.</span><span class="nx">PercentageOfNodesToScore</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithFrameworkOutOfTreeRegistry</span><span class="p">(</span><span class="nx">outOfTreeRegistry</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithPodMaxBackoffSeconds</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">.</span><span class="nx">PodMaxBackoffSeconds</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithPodInitialBackoffSeconds</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">.</span><span class="nx">PodInitialBackoffSeconds</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithPodMaxInUnschedulablePodsDuration</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">PodMaxInUnschedulablePodsDuration</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithExtenders</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">.</span><span class="nx">Extenders</span><span class="o">...</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithParallelism</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">.</span><span class="nx">Parallelism</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WithBuildFrameworkCapturer</span><span class="p">(</span><span class="kd">func</span><span class="p">(</span><span class="nx">profile</span> <span class="nx">kubeschedulerconfig</span><span class="p">.</span><span class="nx">KubeSchedulerProfile</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Profiles are processed during Framework instantiation to set default plugins and configurations. Capturing them for logging
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">completedProfiles</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">completedProfiles</span><span class="p">,</span> <span class="nx">profile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}),</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">options</span><span class="p">.</span><span class="nf">LogOrWriteConfig</span><span class="p">(</span><span class="nx">opts</span><span class="p">.</span><span class="nx">WriteConfigTo</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">,</span> <span class="nx">completedProfiles</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">cc</span><span class="p">,</span> <span class="nx">sched</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面了解到了 <em>scheduler</em> 是如何被构建出来的，下面就看看 构建时参数是如何传递进来的，而对象 option就是对应需要的配置结构，而 <a href="https://github.com/kubernetes/kubernetes/blob/140c27533044e9e00f800d3ad0517540e3e4ecad/cmd/kube-scheduler/app/options/options.go#L203-L243">ApplyTo</a> 则是将启动时传入的参数转化为构建 <em>scheduler</em> 所需的配置。</p>
<blockquote>
<p>对于Deprecated flags可以参考官方对于kube-scheduler启动参数的说明 <sup><a href="#5">[5]</a></sup></p>
<p>对于如何编写一个scheduler config请参考 <a href="#6">[6]</a> 与 <a href="#7">[7]</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">o</span> <span class="o">*</span><span class="nx">Options</span><span class="p">)</span> <span class="nf">ApplyTo</span><span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">schedulerappconfig</span><span class="p">.</span><span class="nx">Config</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">ConfigFile</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 在没有指定 --config时会找到 Deprecated flags:参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 通过kube-scheduler --help可以看到这些被弃用的参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">o</span><span class="p">.</span><span class="nf">ApplyDeprecated</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">o</span><span class="p">.</span><span class="nf">ApplyLeaderElectionTo</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">ComponentConfig</span> <span class="p">=</span> <span class="o">*</span><span class="nx">o</span><span class="p">.</span><span class="nx">ComponentConfig</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 这里就是指定了--config
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">cfg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">loadConfigFromFile</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">ConfigFile</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 这里会将leader选举的参数附加到配置中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">o</span><span class="p">.</span><span class="nf">ApplyLeaderElectionTo</span><span class="p">(</span><span class="nx">cfg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">validation</span><span class="p">.</span><span class="nf">ValidateKubeSchedulerConfiguration</span><span class="p">(</span><span class="nx">cfg</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">ComponentConfig</span> <span class="p">=</span> <span class="o">*</span><span class="nx">cfg</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">o</span><span class="p">.</span><span class="nx">SecureServing</span><span class="p">.</span><span class="nf">ApplyTo</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">SecureServing</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">LoopbackClientConfig</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">o</span><span class="p">.</span><span class="nx">SecureServing</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">SecureServing</span><span class="p">.</span><span class="nx">BindPort</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">o</span><span class="p">.</span><span class="nx">SecureServing</span><span class="p">.</span><span class="nx">Listener</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">o</span><span class="p">.</span><span class="nx">Authentication</span><span class="p">.</span><span class="nf">ApplyTo</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">Authentication</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">SecureServing</span><span class="p">,</span> <span class="kc">nil</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">o</span><span class="p">.</span><span class="nx">Authorization</span><span class="p">.</span><span class="nf">ApplyTo</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">Authorization</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">o</span><span class="p">.</span><span class="nx">Metrics</span><span class="p">.</span><span class="nf">Apply</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Apply value independently instead of using ApplyDeprecated() because it can&#39;t be configured via ComponentConfig.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">o</span><span class="p">.</span><span class="nx">Deprecated</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">PodMaxInUnschedulablePodsDuration</span> <span class="p">=</span> <span class="nx">o</span><span class="p">.</span><span class="nx">Deprecated</span><span class="p">.</span><span class="nx">PodMaxInUnschedulablePodsDuration</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>Setup</code> 后会new一个 <code>schedueler</code> , <a href="https://github.com/kubernetes/kubernetes/blob/140c27533044e9e00f800d3ad0517540e3e4ecad/pkg/scheduler/scheduler.go#L234-L333">New</a> 则是这个动作，在里面可以看出，会初始化一些informer与 Pod的list等操作。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">New</span><span class="p">(</span><span class="nx">client</span> <span class="nx">clientset</span><span class="p">.</span><span class="nx">Interface</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">informerFactory</span> <span class="nx">informers</span><span class="p">.</span><span class="nx">SharedInformerFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dynInformerFactory</span> <span class="nx">dynamicinformer</span><span class="p">.</span><span class="nx">DynamicSharedInformerFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">recorderFactory</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">RecorderFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">	<span class="nx">opts</span> <span class="o">...</span><span class="nx">Option</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">Scheduler</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">stopEverything</span> <span class="o">:=</span> <span class="nx">stopCh</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">stopEverything</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">stopEverything</span> <span class="p">=</span> <span class="nx">wait</span><span class="p">.</span><span class="nx">NeverStop</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">options</span> <span class="o">:=</span> <span class="nx">defaultSchedulerOptions</span> <span class="c1">// 默认调度策略，如percentageOfNodesToScore
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">opt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">opts</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nf">opt</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">options</span><span class="p">)</span> <span class="c1">// opt 是传入的函数，会返回一个schedulerOptions即相应的一些配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">options</span><span class="p">.</span><span class="nx">applyDefaultProfile</span> <span class="p">{</span> <span class="c1">// 这个是个bool类型，默认scheduler会到这里
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// Profile包含了调度器的名称与调度器在两个过程中使用的插件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="kd">var</span> <span class="nx">versionedCfg</span> <span class="nx">v1beta3</span><span class="p">.</span><span class="nx">KubeSchedulerConfiguration</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scheme</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">.</span><span class="nf">Default</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">versionedCfg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cfg</span> <span class="o">:=</span> <span class="nx">schedulerapi</span><span class="p">.</span><span class="nx">KubeSchedulerConfiguration</span><span class="p">{}</span> <span class="c1">// 初始化一个配置，这个是--config传入的类型。因为默认的调度策略会初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// convert 会将in转为out即versionedCfg转换为cfg
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">scheme</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">.</span><span class="nf">Convert</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">versionedCfg</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">cfg</span><span class="p">,</span> <span class="kc">nil</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">options</span><span class="p">.</span><span class="nx">profiles</span> <span class="p">=</span> <span class="nx">cfg</span><span class="p">.</span><span class="nx">Profiles</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">registry</span> <span class="o">:=</span> <span class="nx">frameworkplugins</span><span class="p">.</span><span class="nf">NewInTreeRegistry</span><span class="p">()</span> <span class="c1">// 调度框架的注册
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">registry</span><span class="p">.</span><span class="nf">Merge</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">frameworkOutOfTreeRegistry</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">metrics</span><span class="p">.</span><span class="nf">Register</span><span class="p">()</span> <span class="c1">// 指标类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">extenders</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">buildExtenders</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">extenders</span><span class="p">,</span> <span class="nx">options</span><span class="p">.</span><span class="nx">profiles</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;couldn&#39;t build extenders: %w&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">podLister</span> <span class="o">:=</span> <span class="nx">informerFactory</span><span class="p">.</span><span class="nf">Core</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">Pods</span><span class="p">().</span><span class="nf">Lister</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">nodeLister</span> <span class="o">:=</span> <span class="nx">informerFactory</span><span class="p">.</span><span class="nf">Core</span><span class="p">().</span><span class="nf">V1</span><span class="p">().</span><span class="nf">Nodes</span><span class="p">().</span><span class="nf">Lister</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// The nominator will be passed all the way to framework instantiation.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">nominator</span> <span class="o">:=</span> <span class="nx">internalqueue</span><span class="p">.</span><span class="nf">NewPodNominator</span><span class="p">(</span><span class="nx">podLister</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">snapshot</span> <span class="o">:=</span> <span class="nx">internalcache</span><span class="p">.</span><span class="nf">NewEmptySnapshot</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">clusterEventMap</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">framework</span><span class="p">.</span><span class="nx">ClusterEvent</span><span class="p">]</span><span class="nx">sets</span><span class="p">.</span><span class="nx">String</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">profiles</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">profile</span><span class="p">.</span><span class="nf">NewMap</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">profiles</span><span class="p">,</span> <span class="nx">registry</span><span class="p">,</span> <span class="nx">recorderFactory</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithComponentConfigVersion</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">componentConfigVersion</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithClientSet</span><span class="p">(</span><span class="nx">client</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithKubeConfig</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">kubeConfig</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithInformerFactory</span><span class="p">(</span><span class="nx">informerFactory</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithSnapshotSharedLister</span><span class="p">(</span><span class="nx">snapshot</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithPodNominator</span><span class="p">(</span><span class="nx">nominator</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithCaptureProfile</span><span class="p">(</span><span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">CaptureProfile</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">frameworkCapturer</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithClusterEventMap</span><span class="p">(</span><span class="nx">clusterEventMap</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithParallelism</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">parallelism</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">frameworkruntime</span><span class="p">.</span><span class="nf">WithExtenders</span><span class="p">(</span><span class="nx">extenders</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;initializing profiles: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">profiles</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;at least one profile is required&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">podQueue</span> <span class="o">:=</span> <span class="nx">internalqueue</span><span class="p">.</span><span class="nf">NewSchedulingQueue</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nx">profiles</span><span class="p">[</span><span class="nx">options</span><span class="p">.</span><span class="nx">profiles</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">SchedulerName</span><span class="p">].</span><span class="nf">QueueSortFunc</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">informerFactory</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">internalqueue</span><span class="p">.</span><span class="nf">WithPodInitialBackoffDuration</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">podInitialBackoffSeconds</span><span class="p">)</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">internalqueue</span><span class="p">.</span><span class="nf">WithPodMaxBackoffDuration</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">podMaxBackoffSeconds</span><span class="p">)</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">internalqueue</span><span class="p">.</span><span class="nf">WithPodNominator</span><span class="p">(</span><span class="nx">nominator</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">internalqueue</span><span class="p">.</span><span class="nf">WithClusterEventMap</span><span class="p">(</span><span class="nx">clusterEventMap</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">internalqueue</span><span class="p">.</span><span class="nf">WithPodMaxInUnschedulablePodsDuration</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">podMaxInUnschedulablePodsDuration</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">schedulerCache</span> <span class="o">:=</span> <span class="nx">internalcache</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">durationToExpireAssumedPod</span><span class="p">,</span> <span class="nx">stopEverything</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Setup cache debugger.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">debugger</span> <span class="o">:=</span> <span class="nx">cachedebugger</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">nodeLister</span><span class="p">,</span> <span class="nx">podLister</span><span class="p">,</span> <span class="nx">schedulerCache</span><span class="p">,</span> <span class="nx">podQueue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">debugger</span><span class="p">.</span><span class="nf">ListenForSignal</span><span class="p">(</span><span class="nx">stopEverything</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">sched</span> <span class="o">:=</span> <span class="nf">newScheduler</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nx">schedulerCache</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">extenders</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">internalqueue</span><span class="p">.</span><span class="nf">MakeNextPodFunc</span><span class="p">(</span><span class="nx">podQueue</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nf">MakeDefaultErrorFunc</span><span class="p">(</span><span class="nx">client</span><span class="p">,</span> <span class="nx">podLister</span><span class="p">,</span> <span class="nx">podQueue</span><span class="p">,</span> <span class="nx">schedulerCache</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">stopEverything</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">podQueue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">profiles</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">snapshot</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">options</span><span class="p">.</span><span class="nx">percentageOfNodesToScore</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 这个就是controller中onAdd等那三个必须的事件函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">addAllEventHandlers</span><span class="p">(</span><span class="nx">sched</span><span class="p">,</span> <span class="nx">informerFactory</span><span class="p">,</span> <span class="nx">dynInformerFactory</span><span class="p">,</span> <span class="nf">unionedGVKs</span><span class="p">(</span><span class="nx">clusterEventMap</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">sched</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来会启动这个 <em>scheduler</em>， 在上面我们看到 <a href="https://github.com/kubernetes/kubernetes/blob/140c27533044e9e00f800d3ad0517540e3e4ecad/cmd/kube-scheduler/app/server.go#L72-L114">NewSchedulerCommand</a> 构建了一个cobra.Commond对象， <a href="https://github.com/kubernetes/kubernetes/blob/140c27533044e9e00f800d3ad0517540e3e4ecad/cmd/kube-scheduler/app/server.go#L117-L142">runCommand()</a> 最终会返回个 Run，而这个Run就是启动这个 <em>sche</em> 的。</p>
<p>下面这个 <a href="https://github.com/kubernetes/kubernetes/blob/140c27533044e9e00f800d3ad0517540e3e4ecad/pkg/scheduler/scheduler.go#L336-L340">run</a> 是 <em>sche</em> 的运行，他运行并watch资源，直到上下文完成。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">sched</span> <span class="o">*</span><span class="nx">Scheduler</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sched</span><span class="p">.</span><span class="nx">SchedulingQueue</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// We need to start scheduleOne loop in a dedicated goroutine,
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// because scheduleOne function hangs on getting the next item
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// from the SchedulingQueue.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// If there are no new pods to schedule, it will be hanging there
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// and if done in this goroutine it will be blocking closing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// SchedulingQueue, in effect causing a deadlock on shutdown.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="nx">wait</span><span class="p">.</span><span class="nf">UntilWithContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">sched</span><span class="p">.</span><span class="nx">scheduleOne</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sched</span><span class="p">.</span><span class="nx">SchedulingQueue</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而调用这个 <em>Run</em> 的部分则是作为server的 <em>kube-scheduler</em> 中的 <a href="https://github.com/kubernetes/kubernetes/blob/140c27533044e9e00f800d3ad0517540e3e4ecad/cmd/kube-scheduler/app/server.go#L145-L237">run</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span><span class="lnt">95
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Run executes the scheduler based on the given configuration. It only returns on error or when context is done.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">cc</span> <span class="o">*</span><span class="nx">schedulerserverconfig</span><span class="p">.</span><span class="nx">CompletedConfig</span><span class="p">,</span> <span class="nx">sched</span> <span class="o">*</span><span class="nx">scheduler</span><span class="p">.</span><span class="nx">Scheduler</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// To help debugging, immediately log version
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">klog</span><span class="p">.</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Starting Kubernetes Scheduler&#34;</span><span class="p">,</span> <span class="s">&#34;version&#34;</span><span class="p">,</span> <span class="nx">version</span><span class="p">.</span><span class="nf">Get</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Golang settings&#34;</span><span class="p">,</span> <span class="s">&#34;GOGC&#34;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;GOGC&#34;</span><span class="p">),</span> <span class="s">&#34;GOMAXPROCS&#34;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;GOMAXPROCS&#34;</span><span class="p">),</span> <span class="s">&#34;GOTRACEBACK&#34;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;GOTRACEBACK&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Configz registration.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">cz</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">configz</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;componentconfig&#34;</span><span class="p">);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cz</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;unable to register configz: %s&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Start events processing pipeline.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cc</span><span class="p">.</span><span class="nx">EventBroadcaster</span><span class="p">.</span><span class="nf">StartRecordingToSink</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">EventBroadcaster</span><span class="p">.</span><span class="nf">Shutdown</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Setup healthz checks.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">checks</span> <span class="p">[]</span><span class="nx">healthz</span><span class="p">.</span><span class="nx">HealthChecker</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">.</span><span class="nx">LeaderElection</span><span class="p">.</span><span class="nx">LeaderElect</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">checks</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">checks</span><span class="p">,</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">LeaderElection</span><span class="p">.</span><span class="nx">WatchDog</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">waitingForLeader</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">isLeader</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">waitingForLeader</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// if channel is closed, we are leading
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">return</span> <span class="p">!</span><span class="nx">ok</span>
</span></span><span class="line"><span class="cl">		<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// channel is open, we are waiting for a leader
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Start up the healthz server.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">SecureServing</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">handler</span> <span class="o">:=</span> <span class="nf">buildHandlerChain</span><span class="p">(</span><span class="nf">newHealthzAndMetricsHandler</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">cc</span><span class="p">.</span><span class="nx">ComponentConfig</span><span class="p">,</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">InformerFactory</span><span class="p">,</span> <span class="nx">isLeader</span><span class="p">,</span> <span class="nx">checks</span><span class="o">...</span><span class="p">),</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">Authentication</span><span class="p">.</span><span class="nx">Authenticator</span><span class="p">,</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">Authorization</span><span class="p">.</span><span class="nx">Authorizer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// TODO: handle stoppedCh and listenerStoppedCh returned by c.SecureServing.Serve
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">SecureServing</span><span class="p">.</span><span class="nf">Serve</span><span class="p">(</span><span class="nx">handler</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// fail early for secure handlers, removing the old error loop from above
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to start secure server: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Start all informers.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cc</span><span class="p">.</span><span class="nx">InformerFactory</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// DynInformerFactory can be nil in tests.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">DynInformerFactory</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cc</span><span class="p">.</span><span class="nx">DynInformerFactory</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Wait for all caches to sync before scheduling.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cc</span><span class="p">.</span><span class="nx">InformerFactory</span><span class="p">.</span><span class="nf">WaitForCacheSync</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// DynInformerFactory can be nil in tests.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">DynInformerFactory</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cc</span><span class="p">.</span><span class="nx">DynInformerFactory</span><span class="p">.</span><span class="nf">WaitForCacheSync</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// If leader election is enabled, runCommand via LeaderElector until done and exit.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">cc</span><span class="p">.</span><span class="nx">LeaderElection</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cc</span><span class="p">.</span><span class="nx">LeaderElection</span><span class="p">.</span><span class="nx">Callbacks</span> <span class="p">=</span> <span class="nx">leaderelection</span><span class="p">.</span><span class="nx">LeaderCallbacks</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">OnStartedLeading</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nb">close</span><span class="p">(</span><span class="nx">waitingForLeader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">sched</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">			<span class="nx">OnStoppedLeading</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// We were asked to terminate. Exit 0.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">klog</span><span class="p">.</span><span class="nf">InfoS</span><span class="p">(</span><span class="s">&#34;Requested to terminate, exiting&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// We lost the lock.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">klog</span><span class="p">.</span><span class="nf">ErrorS</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;Leaderelection lost&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">klog</span><span class="p">.</span><span class="nf">FlushAndExit</span><span class="p">(</span><span class="nx">klog</span><span class="p">.</span><span class="nx">ExitFlushTimeout</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">leaderElector</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">leaderelection</span><span class="p">.</span><span class="nf">NewLeaderElector</span><span class="p">(</span><span class="o">*</span><span class="nx">cc</span><span class="p">.</span><span class="nx">LeaderElection</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;couldn&#39;t create leader elector: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">leaderElector</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;lost lease&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Leader election is disabled, so runCommand inline until done.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nb">close</span><span class="p">(</span><span class="nx">waitingForLeader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sched</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;finished without leader elect&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而上面的 <em>server.Run</em> 会被 <code>runCommand</code> 也就是在 <code>NewSchedulerCommand</code> 时被返回，在 <code>kube-scheduler</code> 的入口文件中被执行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">cc</span><span class="p">,</span> <span class="nx">sched</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">Setup</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">opts</span><span class="p">,</span> <span class="nx">registryOptions</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">cc</span><span class="p">,</span> <span class="nx">sched</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>至此，整个 <code>kube-scheduler</code> 启动流就分析完了，这个的流程可以用下图表示</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220718174104043.png" alt="image-20220718174104043"  /></p>
<center class="podsc">图2：scheduler server运行流程</center>
<blockquote>
<p>Reference</p>
<p><sup id="1">[1]</sup> <a href="https://kubernetes.io/docs/concepts/scheduling-eviction/kube-scheduler/">kube scheduler</a></p>
<p><sup id="2">[2]</sup> <a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-scheduling/scheduler_algorithm.md#filtering-the-nodes">Scheduler Algorithm in Kubernetes</a></p>
<p><sup id="3">[3]</sup> <a href="https://kubernetes.io/docs/concepts/scheduling-eviction/scheduling-framework/">scheduling framework</a></p>
<p><sup id="4">[4]</sup> <a href="https://kubernetes.io/docs/concepts/scheduling-eviction/scheduling-framework/#permit">permit</a></p>
<p><sup id="5">[5]</sup> <a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-scheduler/">kube-scheduler parmater</a></p>
<p><sup id="6">[6]</sup> <a href="https://kubernetes.io/docs/reference/config-api/kube-scheduler-config.v1beta3/">kube-scheduler config.v1beta3/</a></p>
<p><sup id="7">[7]</sup> <a href="https://kubernetes.io/docs/reference/scheduling/config/">kube-scheduler config</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>深入理解Kubernetes 4A - Admission Control源码解析</title>
      <link>https://www.oomkill.com/2022/07/ch33-admission-webhook/</link>
      <pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/07/ch33-admission-webhook/</guid>
      <description></description>
      <content:encoded><![CDATA[<blockquote>
<p>本文是关于Kubernetes 4A解析的第三章</p>
<ul>
<li><a href="https://cylonchau.github.io/kubernetes-authentication.html">深入理解Kubernetes 4A - Authentication源码解析</a></li>
<li><a href="https://cylonchau.github.io/kubernetes-authorization.html">深入理解Kubernetes 4A - Authorization源码解析</a></li>
<li>深入理解Kubernetes 4A - Admission Control源码解析</li>
<li><a href="https://cylonchau.github.io/kubernetes-auditing.html">深入理解Kubernetes 4A - Audit源码解析</a></li>
</ul>
<p>所有关于Kubernetes 4A部分代码上传至仓库 github.com/cylonchau/hello-k8s-4A</p>
</blockquote>
<p>如有错别字或理解错误地方请多多担待，代码是以1.24进行整理，实验是以1.19环境进行，差别不大</p>
<h2 id="background">BACKGROUND</h2>
<p><strong>admission controllers的特点</strong>：</p>
<ul>
<li>可定制性：准入功能可针对不同的场景进行调整。</li>
<li>可预防性：审计则是为了检测问题，而准入控制器可以预防问题发生</li>
<li>可扩展性：在kubernetes自有的验证机制外，增加了另外的防线，弥补了RBAC仅能对资源提供安全保证。</li>
</ul>
<p>下图，显示了用户操作资源的流程，可以看出 <em>admission controllers</em> 作用是在通过身份验证资源持久化之前起到拦截作用。在准入控制器的加入会使kubernetes增加了更高级的安全功能。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/admission-controller-phases.png" alt="准入控制器阶段"  /></p>
<center>图：Kubernetes API 请求的请求处理步骤图</center>
<center><em>Source：</em>https://kubernetes.io/blog/2019/03/21/a-guide-to-kubernetes-admission-controllers/</center>
<p>这里找到一个大佬博客画的图，通过两张图可以很清晰的了解到admission webhook流程，与官方给出的不一样的地方在于，这里清楚地定位了kubernetes admission webhook 处于准入控制中，RBAC之后，push 之前。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/vhesGDFN3dLdzXwS7vzPdXkI3aglQYZgGhjc-Cx_boaV6URKFFoe8mFRZZUuJyGHywa_bOkeUlIkm-nJkCVMHPk9dr2dXFwNzAQJKzft2phsTcEDjdObjmugBcYtpdPLpLIYuIGzeFYvtsR2Lw.jpeg" alt="img"  /></p>
<center>图：Kubernetes API 请求的请求处理步骤图（详细）</center>
<center><em>Source：</em>https://www.armosec.io/blog/kubernetes-admission-controller/</center>
<h3 id="两种控制器有什么区别">两种控制器有什么区别？</h3>
<p>根据官方提供的说法是</p>
<blockquote>
<p>Mutating controllers may modify related objects to the requests they admit; validating controllers may not</p>
</blockquote>
<p>从结构图中也可以看出，<code>validating </code> 是在持久化之前，而 <code>Mutating </code> 是在结构验证前，根据这些特性我们可以使用 <code>Mutating</code> 修改这个资源对象内容（如增加验证的信息），在 <code>validating</code> 中验证是否合法。</p>
<h3 id="composition-of-admission-controllers">composition of admission controllers</h3>
<p>kubernetes中的  <em>admission controllers</em> 由两部分组成：</p>
<ul>
<li>内置在APIServer中的准入控制器 <a href="https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#what-does-each-admission-controller-do">build-in li.st</a></li>
<li>特殊的控制器；也是内置在APIServer中，但提供一些自定义的功能
<ul>
<li>MutatingAdmission</li>
<li>ValidatingAdmission</li>
</ul>
</li>
</ul>
<p>Mutating 控制器可以修改他们处理的资源对象，Validating 控制器不会。当在任何一个阶段中的任何控制器拒绝这个了请求，则会立即拒绝整个请求，并将错误返回。</p>
<h3 id="admission-webhook">admission webhook</h3>
<p>由于准入控制器是内置在 <code>kube-apiserver</code> 中的，这种情况下就限制了admission controller的可扩展性。在这种背景下，kubernetes提供了一种可扩展的准入控制器 <code>extensible admission controllers</code>，这种行为叫做动态准入控制 <code>Dynamic Admission Control</code>，而提供这个功能的就是 <code>admission webhook</code> 。</p>
<p><code>admission webhook</code>  通俗来讲就是 HTTP 回调，通过定义一个http server，接收准入请求并处理。用户可以通过kubernetes提供的两种类型的 <code>admission webhook</code>，<em>validating admission webhook</em> 和 <em>mutating admission webhook</em>。来完成自定义的准入策略的处理。</p>
<p>webhook 就是</p>
<blockquote>
<p>注：从上面的流程图也可以看出，admission webhook 也是有顺序的。首先调用mutating webhook，然后会调用validating webhook。</p>
</blockquote>
<h2 id="如何使用准入控制器">如何使用准入控制器</h2>
<p><strong>使用条件</strong>：kubernetes v1.16 使用 <code>admissionregistration.k8s.io/v1</code> ；kubernetes v1.9 使用 <code>admissionregistration.k8s.io/v1beta1</code>。</p>
<p><strong>如何在集群中开启准入控制器?</strong> ：查看kube-apiserver 的启动参数 <code>--enable-admission-plugins</code> ；通过该参数来配置要启动的准入控制器，如 <code>--enable-admission-plugins=NodeRestriction</code> 多个准入控制器以 <code>,</code> 分割，顺序无关紧要。 反之使用 <code>--disable-admission-plugins</code> 参数可以关闭相应的准入控制器（Refer to <a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/#options">apiserver opts</a>）。</p>
<p>通过 <code>kubectl</code> 命令可以看到，当前kubernetes集群所支持准入控制器的版本</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl api-versions <span class="p">|</span> grep admissionregistration.k8s.io/v1
</span></span><span class="line"><span class="cl">admissionregistration.k8s.io/v1
</span></span><span class="line"><span class="cl">admissionregistration.k8s.io/v1beta1
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="webhook工作原理">webhook工作原理</h2>
<p>通过上面的学习，已经了解到了两种webhook的工作原理如下所示：</p>
<blockquote>
<p>mutating webhook，会在持久化前拦截在 MutatingWebhookConfiguration 中定义的规则匹配的请求。MutatingAdmissionWebhook 通过向 mutating webhook 服务器发送准入请求来执行验证。</p>
<p>validaing webhook，会在持久化前拦截在 <code>ValidatingWebhookConfiguration</code> 中定义的规则匹配的请求。ValidatingAdmissionWebhook 通过将准入请求发送到 validating webhook server来执行验证。</p>
</blockquote>
<p>那么接下来将从源码中看这个在这个工作流程中，究竟做了些什么？</p>
<h3 id="资源类型">资源类型</h3>
<p>对于 1.9 版本之后，也就是 <code>v1</code> 版本 ，admission 被定义在 <a href="https://github.com/kubernetes/kubernetes/blob/v1.18.20/staging/src/k8s.io/api/admissionregistration/v1/types.go">k8s.io\api\admissionregistration\v1\types.go</a> ，大同小异，因为本地只有1.18集群，所以以这个讲解。</p>
<p>对于 <code>Validating Webhook</code> 来讲实现主要都在webhook中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ValidatingWebhookConfiguration</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 每个api必须包含下列的metadata，这个是kubernetes规范，可以在注释中的url看到相关文档
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">metav1</span><span class="p">.</span><span class="nx">TypeMeta</span> <span class="s">`json:&#34;,inline&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMeta</span> <span class="s">`json:&#34;metadata,omitempty&#34; protobuf:&#34;bytes,1,opt,name=metadata&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Webhooks在这里被表示为[]ValidatingWebhook，表示我们可以注册多个
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +patchMergeKey=name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +patchStrategy=merge
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Webhooks</span> <span class="p">[]</span><span class="nx">ValidatingWebhook</span> <span class="s">`json:&#34;webhooks,omitempty&#34; patchStrategy:&#34;merge&#34; patchMergeKey:&#34;name&#34; protobuf:&#34;bytes,2,rep,name=Webhooks&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>webhook，则是对这种类型的webhook提供的操作、资源等。对于这部分不做过多的注释了，因为这里本身为kubernetes API资源，官网有很详细的例子与说明。这里更多字段的意思的可以参考官方 <a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/extensible-admission-controllers/#webhook-configuration">doc</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ValidatingWebhook</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//  admission webhook的名词，Required
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:&#34;name&#34; protobuf:&#34;bytes,1,opt,name=name&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// ClientConfig 定义了与webhook通讯的方式 Required
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ClientConfig</span> <span class="nx">WebhookClientConfig</span> <span class="s">`json:&#34;clientConfig&#34; protobuf:&#34;bytes,2,opt,name=clientConfig&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// rule表示了webhook对于哪些资源及子资源的操作进行关注
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Rules</span> <span class="p">[]</span><span class="nx">RuleWithOperations</span> <span class="s">`json:&#34;rules,omitempty&#34; protobuf:&#34;bytes,3,rep,name=rules&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// FailurePolicy 对于无法识别的value将如何处理，allowed/Ignore optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">FailurePolicy</span> <span class="o">*</span><span class="nx">FailurePolicyType</span> <span class="s">`json:&#34;failurePolicy,omitempty&#34; protobuf:&#34;bytes,4,opt,name=failurePolicy,casttype=FailurePolicyType&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// matchPolicy 定义了如何使用“rules”列表来匹配传入的请求。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">MatchPolicy</span> <span class="o">*</span><span class="nx">MatchPolicyType</span> <span class="s">`json:&#34;matchPolicy,omitempty&#34; protobuf:&#34;bytes,9,opt,name=matchPolicy,casttype=MatchPolicyType&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">NamespaceSelector</span> <span class="o">*</span><span class="nx">metav1</span><span class="p">.</span><span class="nx">LabelSelector</span> <span class="s">`json:&#34;namespaceSelector,omitempty&#34; protobuf:&#34;bytes,5,opt,name=namespaceSelector&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">SideEffects</span> <span class="o">*</span><span class="nx">SideEffectClass</span> <span class="s">`json:&#34;sideEffects&#34; protobuf:&#34;bytes,6,opt,name=sideEffects,casttype=SideEffectClass&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">AdmissionReviewVersions</span> <span class="p">[]</span><span class="kt">string</span> <span class="s">`json:&#34;admissionReviewVersions&#34; protobuf:&#34;bytes,8,rep,name=admissionReviewVersions&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>到这里了解了一个webhook资源的定义，那么这个如何使用呢？通过 <code>Find Usages</code> 找到一个 <a href="https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/accessors.go">k8s.io/apiserver/pkg/admission/plugin/webhook/accessors.go</a> 在使用它。这里没有注释，但在结构上可以看出，包含客户端与一系列选择器组成</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">mutatingWebhookAccessor</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">MutatingWebhook</span>
</span></span><span class="line"><span class="cl">	<span class="nx">uid</span>               <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">configurationName</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">initObjectSelector</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Once</span>
</span></span><span class="line"><span class="cl">	<span class="nx">objectSelector</span>     <span class="nx">labels</span><span class="p">.</span><span class="nx">Selector</span>
</span></span><span class="line"><span class="cl">	<span class="nx">objectSelectorErr</span>  <span class="kt">error</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">initNamespaceSelector</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Once</span>
</span></span><span class="line"><span class="cl">	<span class="nx">namespaceSelector</span>     <span class="nx">labels</span><span class="p">.</span><span class="nx">Selector</span>
</span></span><span class="line"><span class="cl">	<span class="nx">namespaceSelectorErr</span>  <span class="kt">error</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">initClient</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Once</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span>     <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">RESTClient</span>
</span></span><span class="line"><span class="cl">	<span class="nx">clientErr</span>  <span class="kt">error</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>accessor</code> 因为包含了整个webhookconfig定义的一些动作（这里个人这么觉得）。</p>
<p><code>accessor.go</code> 下面 有一个 <code>GetRESTClient</code> 方法 ，通过这里可以看出，这里做的就是使用根据 <code>accessor</code> 构造一个客户端。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">mutatingWebhookAccessor</span><span class="p">)</span> <span class="nf">GetRESTClient</span><span class="p">(</span><span class="nx">clientManager</span> <span class="o">*</span><span class="nx">webhookutil</span><span class="p">.</span><span class="nx">ClientManager</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">RESTClient</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">m</span><span class="p">.</span><span class="nx">initClient</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">m</span><span class="p">.</span><span class="nx">client</span><span class="p">,</span> <span class="nx">m</span><span class="p">.</span><span class="nx">clientErr</span> <span class="p">=</span> <span class="nx">clientManager</span><span class="p">.</span><span class="nf">HookClient</span><span class="p">(</span><span class="nf">hookClientConfigForWebhook</span><span class="p">(</span><span class="nx">m</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">m</span><span class="p">.</span><span class="nx">client</span><span class="p">,</span> <span class="nx">m</span><span class="p">.</span><span class="nx">clientErr</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>到这步骤已经没必要往下看了，因已经知道这里是请求webhook前的步骤了，下面就是何时请求了。</p>
<p><a href="https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/validating/dispatcher.go">k8s.io\apiserver\pkg\admission\plugin\webhook\validating\dispatcher.go</a> 下面有两个方法，Dispatch去请求我们自己定义的webhook</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">validatingDispatcher</span><span class="p">)</span> <span class="nf">Dispatch</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">attr</span> <span class="nx">admission</span><span class="p">.</span><span class="nx">Attributes</span><span class="p">,</span> <span class="nx">o</span> <span class="nx">admission</span><span class="p">.</span><span class="nx">ObjectInterfaces</span><span class="p">,</span> <span class="nx">hooks</span> <span class="p">[]</span><span class="nx">webhook</span><span class="p">.</span><span class="nx">WebhookAccessor</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">relevantHooks</span> <span class="p">[]</span><span class="o">*</span><span class="nx">generic</span><span class="p">.</span><span class="nx">WebhookInvocation</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Construct all the versions we need to call our webhooks
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">versionedAttrs</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionKind</span><span class="p">]</span><span class="o">*</span><span class="nx">generic</span><span class="p">.</span><span class="nx">VersionedAttributes</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">hook</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">hooks</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">invocation</span><span class="p">,</span> <span class="nx">statusError</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nx">plugin</span><span class="p">.</span><span class="nf">ShouldCallHook</span><span class="p">(</span><span class="nx">hook</span><span class="p">,</span> <span class="nx">attr</span><span class="p">,</span> <span class="nx">o</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">statusError</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">statusError</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">invocation</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">relevantHooks</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">relevantHooks</span><span class="p">,</span> <span class="nx">invocation</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// If we already have this version, continue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">versionedAttrs</span><span class="p">[</span><span class="nx">invocation</span><span class="p">.</span><span class="nx">Kind</span><span class="p">];</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">versionedAttr</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">generic</span><span class="p">.</span><span class="nf">NewVersionedAttributes</span><span class="p">(</span><span class="nx">attr</span><span class="p">,</span> <span class="nx">invocation</span><span class="p">.</span><span class="nx">Kind</span><span class="p">,</span> <span class="nx">o</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">apierrors</span><span class="p">.</span><span class="nf">NewInternalError</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">versionedAttrs</span><span class="p">[</span><span class="nx">invocation</span><span class="p">.</span><span class="nx">Kind</span><span class="p">]</span> <span class="p">=</span> <span class="nx">versionedAttr</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">relevantHooks</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// no matching hooks
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Check if the request has already timed out before spawning remote calls
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// parent context is canceled or timed out, no point in continuing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="nx">apierrors</span><span class="p">.</span><span class="nf">NewTimeoutError</span><span class="p">(</span><span class="s">&#34;request did not complete within requested timeout&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span> <span class="o">:=</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">errCh</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">error</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">relevantHooks</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">relevantHooks</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 循环所有相关的注册的hook
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">relevantHooks</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">invocation</span> <span class="o">*</span><span class="nx">generic</span><span class="p">.</span><span class="nx">WebhookInvocation</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// invacation 中有一个 Accessor,Accessor注册了一个相关的webhookconfig
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// 也就是我们 kubectl -f 注册进来的那个webhook的相关配置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">hook</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">invocation</span><span class="p">.</span><span class="nx">Webhook</span><span class="p">.</span><span class="nf">GetValidatingWebhook</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleError</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;validating webhook dispatch requires v1.ValidatingWebhook, but got %T&#34;</span><span class="p">,</span> <span class="nx">hook</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">versionedAttr</span> <span class="o">:=</span> <span class="nx">versionedAttrs</span><span class="p">[</span><span class="nx">invocation</span><span class="p">.</span><span class="nx">Kind</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">			<span class="nx">t</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 调用了callHook去请求我们自定义的webhook
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">err</span> <span class="o">:=</span> <span class="nx">d</span><span class="p">.</span><span class="nf">callHook</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">hook</span><span class="p">,</span> <span class="nx">invocation</span><span class="p">,</span> <span class="nx">versionedAttr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ignoreClientCallFailures</span> <span class="o">:=</span> <span class="nx">hook</span><span class="p">.</span><span class="nx">FailurePolicy</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="nx">hook</span><span class="p">.</span><span class="nx">FailurePolicy</span> <span class="o">==</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">Ignore</span>
</span></span><span class="line"><span class="cl">			<span class="nx">rejected</span> <span class="o">:=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">switch</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">err</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="o">*</span><span class="nx">webhookutil</span><span class="p">.</span><span class="nx">ErrCallingWebhook</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="p">!</span><span class="nx">ignoreClientCallFailures</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">rejected</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">						<span class="nx">admissionmetrics</span><span class="p">.</span><span class="nx">Metrics</span><span class="p">.</span><span class="nf">ObserveWebhookRejection</span><span class="p">(</span><span class="nx">hook</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="s">&#34;validating&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">versionedAttr</span><span class="p">.</span><span class="nx">Attributes</span><span class="p">.</span><span class="nf">GetOperation</span><span class="p">()),</span> <span class="nx">admissionmetrics</span><span class="p">.</span><span class="nx">WebhookRejectionCallingWebhookError</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="o">*</span><span class="nx">webhookutil</span><span class="p">.</span><span class="nx">ErrWebhookRejection</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="nx">rejected</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">					<span class="nx">admissionmetrics</span><span class="p">.</span><span class="nx">Metrics</span><span class="p">.</span><span class="nf">ObserveWebhookRejection</span><span class="p">(</span><span class="nx">hook</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="s">&#34;validating&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">versionedAttr</span><span class="p">.</span><span class="nx">Attributes</span><span class="p">.</span><span class="nf">GetOperation</span><span class="p">()),</span> <span class="nx">admissionmetrics</span><span class="p">.</span><span class="nx">WebhookRejectionNoError</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nx">ErrStatus</span><span class="p">.</span><span class="nx">Code</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">				<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="nx">rejected</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">					<span class="nx">admissionmetrics</span><span class="p">.</span><span class="nx">Metrics</span><span class="p">.</span><span class="nf">ObserveWebhookRejection</span><span class="p">(</span><span class="nx">hook</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="s">&#34;validating&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">versionedAttr</span><span class="p">.</span><span class="nx">Attributes</span><span class="p">.</span><span class="nf">GetOperation</span><span class="p">()),</span> <span class="nx">admissionmetrics</span><span class="p">.</span><span class="nx">WebhookRejectionAPIServerInternalError</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">admissionmetrics</span><span class="p">.</span><span class="nx">Metrics</span><span class="p">.</span><span class="nf">ObserveWebhook</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Since</span><span class="p">(</span><span class="nx">t</span><span class="p">),</span> <span class="nx">rejected</span><span class="p">,</span> <span class="nx">versionedAttr</span><span class="p">.</span><span class="nx">Attributes</span><span class="p">,</span> <span class="s">&#34;validating&#34;</span><span class="p">,</span> <span class="nx">hook</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">callErr</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">err</span><span class="p">.(</span><span class="o">*</span><span class="nx">webhookutil</span><span class="p">.</span><span class="nx">ErrCallingWebhook</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">ignoreClientCallFailures</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">klog</span><span class="p">.</span><span class="nf">Warningf</span><span class="p">(</span><span class="s">&#34;Failed calling webhook, failing open %v: %v&#34;</span><span class="p">,</span> <span class="nx">hook</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">callErr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleError</span><span class="p">(</span><span class="nx">callErr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Warningf</span><span class="p">(</span><span class="s">&#34;Failed calling webhook, failing closed %v: %v&#34;</span><span class="p">,</span> <span class="nx">hook</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">errCh</span> <span class="o">&lt;-</span> <span class="nx">apierrors</span><span class="p">.</span><span class="nf">NewInternalError</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">rejectionErr</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">err</span><span class="p">.(</span><span class="o">*</span><span class="nx">webhookutil</span><span class="p">.</span><span class="nx">ErrWebhookRejection</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">err</span> <span class="p">=</span> <span class="nx">rejectionErr</span><span class="p">.</span><span class="nx">Status</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Warningf</span><span class="p">(</span><span class="s">&#34;rejected by webhook %q: %#v&#34;</span><span class="p">,</span> <span class="nx">hook</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">errCh</span> <span class="o">&lt;-</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}(</span><span class="nx">relevantHooks</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nb">close</span><span class="p">(</span><span class="nx">errCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">errs</span> <span class="p">[]</span><span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">e</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">errCh</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">errs</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">errs</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">errs</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">errs</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">errs</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// TODO: merge status errors; until then, just return the first one.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleError</span><span class="p">(</span><span class="nx">errs</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">errs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/kubernetes/kubernetes/blob/6adee9d4fb7a0cf3eec148448792e2ab091e1720/staging/src/k8s.io/apiserver/pkg/admission/plugin/webhook/validating/dispatcher.go#L216-L301">callHook</a> 可以理解为真正去请求我们自定义的webhook服务的动作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">validatingDispatcher</span><span class="p">)</span> <span class="nf">callHook</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">h</span> <span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">ValidatingWebhook</span><span class="p">,</span> <span class="nx">invocation</span> <span class="o">*</span><span class="nx">generic</span><span class="p">.</span><span class="nx">WebhookInvocation</span><span class="p">,</span> <span class="nx">attr</span> <span class="o">*</span><span class="nx">generic</span><span class="p">.</span><span class="nx">VersionedAttributes</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nx">attr</span><span class="p">.</span><span class="nx">Attributes</span><span class="p">.</span><span class="nf">IsDryRun</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="nx">h</span><span class="p">.</span><span class="nx">SideEffects</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="o">&amp;</span><span class="nx">webhookutil</span><span class="p">.</span><span class="nx">ErrCallingWebhook</span><span class="p">{</span><span class="nx">WebhookName</span><span class="p">:</span> <span class="nx">h</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">Reason</span><span class="p">:</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Webhook SideEffects is nil&#34;</span><span class="p">)}</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">!(</span><span class="o">*</span><span class="nx">h</span><span class="p">.</span><span class="nx">SideEffects</span> <span class="o">==</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">SideEffectClassNone</span> <span class="o">||</span> <span class="o">*</span><span class="nx">h</span><span class="p">.</span><span class="nx">SideEffects</span> <span class="o">==</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">SideEffectClassNoneOnDryRun</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="nx">webhookerrors</span><span class="p">.</span><span class="nf">NewDryRunUnsupportedErr</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nx">uid</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="nx">response</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">webhookrequest</span><span class="p">.</span><span class="nf">CreateAdmissionObjects</span><span class="p">(</span><span class="nx">attr</span><span class="p">,</span> <span class="nx">invocation</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="o">&amp;</span><span class="nx">webhookutil</span><span class="p">.</span><span class="nx">ErrCallingWebhook</span><span class="p">{</span><span class="nx">WebhookName</span><span class="p">:</span> <span class="nx">h</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">Reason</span><span class="p">:</span> <span class="nx">err</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="c1">// 发生请求，可以看到，这里从上面的讲到的地方获取了一个客户端
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="nx">client</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">invocation</span><span class="p">.</span><span class="nx">Webhook</span><span class="p">.</span><span class="nf">GetRESTClient</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">cm</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="o">&amp;</span><span class="nx">webhookutil</span><span class="p">.</span><span class="nx">ErrCallingWebhook</span><span class="p">{</span><span class="nx">WebhookName</span><span class="p">:</span> <span class="nx">h</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">Reason</span><span class="p">:</span> <span class="nx">err</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="nx">trace</span> <span class="o">:=</span> <span class="nx">utiltrace</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;Call validating webhook&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nx">utiltrace</span><span class="p">.</span><span class="nx">Field</span><span class="p">{</span><span class="s">&#34;configuration&#34;</span><span class="p">,</span> <span class="nx">invocation</span><span class="p">.</span><span class="nx">Webhook</span><span class="p">.</span><span class="nf">GetConfigurationName</span><span class="p">()},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">utiltrace</span><span class="p">.</span><span class="nx">Field</span><span class="p">{</span><span class="s">&#34;webhook&#34;</span><span class="p">,</span> <span class="nx">h</span><span class="p">.</span><span class="nx">Name</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">utiltrace</span><span class="p">.</span><span class="nx">Field</span><span class="p">{</span><span class="s">&#34;resource&#34;</span><span class="p">,</span> <span class="nx">attr</span><span class="p">.</span><span class="nf">GetResource</span><span class="p">()},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">utiltrace</span><span class="p">.</span><span class="nx">Field</span><span class="p">{</span><span class="s">&#34;subresource&#34;</span><span class="p">,</span> <span class="nx">attr</span><span class="p">.</span><span class="nf">GetSubresource</span><span class="p">()},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">utiltrace</span><span class="p">.</span><span class="nx">Field</span><span class="p">{</span><span class="s">&#34;operation&#34;</span><span class="p">,</span> <span class="nx">attr</span><span class="p">.</span><span class="nf">GetOperation</span><span class="p">()},</span>
</span></span><span class="line"><span class="cl">      <span class="nx">utiltrace</span><span class="p">.</span><span class="nx">Field</span><span class="p">{</span><span class="s">&#34;UID&#34;</span><span class="p">,</span> <span class="nx">uid</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">   <span class="k">defer</span> <span class="nx">trace</span><span class="p">.</span><span class="nf">LogIfLong</span><span class="p">(</span><span class="mi">500</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="c1">// 这里设置超时，超时时长就是在yaml资源清单中设置的那个值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="k">if</span> <span class="nx">h</span><span class="p">.</span><span class="nx">TimeoutSeconds</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="kd">var</span> <span class="nx">cancel</span> <span class="nx">context</span><span class="p">.</span><span class="nx">CancelFunc</span>
</span></span><span class="line"><span class="cl">      <span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="p">=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithTimeout</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="o">*</span><span class="nx">h</span><span class="p">.</span><span class="nx">TimeoutSeconds</span><span class="p">)</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="c1">// 直接用post请求我们自己定义的webhook接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="nx">r</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Post</span><span class="p">().</span><span class="nf">Body</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="c1">// if the context has a deadline, set it as a parameter to inform the backend
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="k">if</span> <span class="nx">deadline</span><span class="p">,</span> <span class="nx">hasDeadline</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">Deadline</span><span class="p">();</span> <span class="nx">hasDeadline</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1">// compute the timeout
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span> <span class="nx">timeout</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Until</span><span class="p">(</span><span class="nx">deadline</span><span class="p">);</span> <span class="nx">timeout</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="c1">// if it&#39;s not an even number of seconds, round up to the nearest second
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>         <span class="k">if</span> <span class="nx">truncated</span> <span class="o">:=</span> <span class="nx">timeout</span><span class="p">.</span><span class="nf">Truncate</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">);</span> <span class="nx">truncated</span> <span class="o">!=</span> <span class="nx">timeout</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">timeout</span> <span class="p">=</span> <span class="nx">truncated</span> <span class="o">+</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span>
</span></span><span class="line"><span class="cl">         <span class="p">}</span>
</span></span><span class="line"><span class="cl">         <span class="c1">// set the timeout
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>         <span class="nx">r</span><span class="p">.</span><span class="nf">Timeout</span><span class="p">(</span><span class="nx">timeout</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="nx">ctx</span><span class="p">).</span><span class="nf">Into</span><span class="p">(</span><span class="nx">response</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="o">&amp;</span><span class="nx">webhookutil</span><span class="p">.</span><span class="nx">ErrCallingWebhook</span><span class="p">{</span><span class="nx">WebhookName</span><span class="p">:</span> <span class="nx">h</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">Reason</span><span class="p">:</span> <span class="nx">err</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="nx">trace</span><span class="p">.</span><span class="nf">Step</span><span class="p">(</span><span class="s">&#34;Request completed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nx">result</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">webhookrequest</span><span class="p">.</span><span class="nf">VerifyAdmissionResponse</span><span class="p">(</span><span class="nx">uid</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="o">&amp;</span><span class="nx">webhookutil</span><span class="p">.</span><span class="nx">ErrCallingWebhook</span><span class="p">{</span><span class="nx">WebhookName</span><span class="p">:</span> <span class="nx">h</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">Reason</span><span class="p">:</span> <span class="nx">err</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">result</span><span class="p">.</span><span class="nx">AuditAnnotations</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">key</span> <span class="o">:=</span> <span class="nx">h</span><span class="p">.</span><span class="nx">Name</span> <span class="o">+</span> <span class="s">&#34;/&#34;</span> <span class="o">+</span> <span class="nx">k</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">attr</span><span class="p">.</span><span class="nx">Attributes</span><span class="p">.</span><span class="nf">AddAnnotation</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">v</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="nx">klog</span><span class="p">.</span><span class="nf">Warningf</span><span class="p">(</span><span class="s">&#34;Failed to set admission audit annotation %s to %s for validating webhook %s: %v&#34;</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">v</span><span class="p">,</span> <span class="nx">h</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nx">result</span><span class="p">.</span><span class="nx">Allowed</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="o">&amp;</span><span class="nx">webhookutil</span><span class="p">.</span><span class="nx">ErrWebhookRejection</span><span class="p">{</span><span class="nx">Status</span><span class="p">:</span> <span class="nx">webhookerrors</span><span class="p">.</span><span class="nf">ToStatusErr</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">Result</span><span class="p">)}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>走到这里基本上对 <code>admission webhook</code> 有了大致的了解，可以知道这个操作是由 apiserver 完成的。下面就实际操作下自定义一个webhook。</p>
<p>这里还有两个概念，就是请求参数 <a href="https://github.com/kubernetes/kubernetes/blob/6adee9d4fb7a0cf3eec148448792e2ab091e1720/staging/src/k8s.io/api/admission/v1/types.go#L40-L113">AdmissionRequest</a> 和相应参数 <a href="https://github.com/kubernetes/kubernetes/blob/6adee9d4fb7a0cf3eec148448792e2ab091e1720/staging/src/k8s.io/api/admission/v1/types.go#L116-L150">AdmissionResponse</a>，这些可以在 <code>callHook</code> 中看到，这两个参数被定义在 <a href="https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/api/admission/v1/types.go#L29-L37">k8s.io\api\admission\v1\types.go</a> ；这两个参数也就是我们在自定义 webhook 时需要处理接收到的body的结构，以及我们响应内容数据结构。</p>
<h2 id="如何编写一个自定义的admission-webhook">如何编写一个自定义的admission webhook</h2>
<p>通过上面的学习了解到了，自定义的webhook就是做为kubernetes提供给用户两种admission controller来验证自定义业务的一个中间件 admission webhook。本质上他是一个HTTP Server，用户可以使用任何语言来完成这部分功能。当然，如果涉及到需要对kubernetes集群资源操作的话，还是建议使用kubernetes官方提供了SDK的编程语言来完成自定义的webhook。</p>
<p>那么完成一个自定义admission webhook需要两个步骤：</p>
<ul>
<li>将相关的webhook config注册给kubernetes，也就是让kubernetes知道你的webhook</li>
<li>准备一个http server来处理 apiserver发过来验证的信息</li>
</ul>
<blockquote>
<p>注：这里使用go net/http包，本身不区分方法处理HTTP的何种请求，如果用其他框架实现的，如django，需要指定对应方法需要为POST</p>
</blockquote>
<h3 id="向kubernetes注册webhook对象">向kubernetes注册webhook对象</h3>
<p>kubernetes提供的两种类型可自定义的准入控制器，和其他资源一样，可以利用资源清单，动态配置那些资源要被adminssion webhook处理。 kubernetes将这种形式抽象为两种资源：</p>
<ul>
<li>
<p>ValidatingWebhookConfiguration</p>
</li>
<li>
<p>MutatingWebhookConfiguration</p>
</li>
</ul>
<h4 id="validatingadmission">ValidatingAdmission</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">admissionregistration.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ValidatingWebhookConfiguration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;pod-policy.example.com&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">webhooks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;pod-policy.example.com&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w">   </span><span class="p">[</span><span class="s2">&#34;&#34;</span><span class="p">]</span><span class="w"> </span><span class="c"># 拦截资源的Group &#34;&#34; 表示 core。&#34;*&#34; 表示所有。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">apiVersions</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;v1&#34;</span><span class="p">]</span><span class="w"> </span><span class="c"># 拦截资源的版本</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">operations</span><span class="p">:</span><span class="w">  </span><span class="p">[</span><span class="s2">&#34;CREATE&#34;</span><span class="p">]</span><span class="w"> </span><span class="c"># 什么请求下拦截</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resources</span><span class="p">:</span><span class="w">   </span><span class="p">[</span><span class="s2">&#34;pods&#34;</span><span class="p">]</span><span class="w">  </span><span class="c"># 拦截什么资源</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">scope</span><span class="p">:</span><span class="w">       </span><span class="s2">&#34;Namespaced&#34;</span><span class="w"> </span><span class="c"># 生效的范围，cluster还是namespace &#34;*&#34;表示没有范围限制。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">clientConfig</span><span class="p">:</span><span class="w"> </span><span class="c"># 我们部署的webhook服务，</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">service</span><span class="p">:</span><span class="w"> </span><span class="c"># service是在cluster-in模式下</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;example-namespace&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;example-service&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">443</span><span class="w"> </span><span class="c"># 服务的端口</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/validate&#34;</span><span class="w"> </span><span class="c"># path是对应用于验证的接口</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># caBundle是提供给 admission webhook CA证书  </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">caBundle</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Ci0tLS0tQk...&lt;base64-encoded PEM bundle containing the CA that signed the webhook&#39;s serving certificate&gt;...tLS0K&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">admissionReviewVersions</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;v1&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;v1beta1&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">sideEffects</span><span class="p">:</span><span class="w"> </span><span class="l">None</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">timeoutSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w"> </span><span class="c"># 1-30s直接，表示请求api的超时时间</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="mutatingadmission">MutatingAdmission</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">admissionregistration.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ValidatingWebhookConfiguration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;valipod-policy.example.com&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">webhooks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;valipod-policy.example.com&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w">   </span><span class="p">[</span><span class="s2">&#34;apps&#34;</span><span class="p">]</span><span class="w"> </span><span class="c"># 拦截资源的Group &#34;&#34; 表示 core。&#34;*&#34; 表示所有。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">apiVersions</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;v1&#34;</span><span class="p">]</span><span class="w"> </span><span class="c"># 拦截资源的版本</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">operations</span><span class="p">:</span><span class="w">  </span><span class="p">[</span><span class="s2">&#34;CREATE&#34;</span><span class="p">]</span><span class="w"> </span><span class="c"># 什么请求下拦截</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">resources</span><span class="p">:</span><span class="w">   </span><span class="p">[</span><span class="s2">&#34;deployments&#34;</span><span class="p">]</span><span class="w">  </span><span class="c"># 拦截什么资源</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">scope</span><span class="p">:</span><span class="w">       </span><span class="s2">&#34;Namespaced&#34;</span><span class="w"> </span><span class="c"># 生效的范围，cluster还是namespace &#34;*&#34;表示没有范围限制。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">clientConfig</span><span class="p">:</span><span class="w"> </span><span class="c"># 我们部署的webhook服务，</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://10.0.0.1:81/validate&#34;</span><span class="w"> </span><span class="c"># 这里是外部模式</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#      service: # service是在cluster-in模式下</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#        namespace: &#34;default&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#        name: &#34;admission-webhook&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#        port: 81 # 服务的端口</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#        path: &#34;/mutate&#34; # path是对应用于验证的接口</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># caBundle是提供给 admission webhook CA证书</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">caBundle</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Ci0tLS0tQk...&lt;base64-encoded PEM bundle containing the CA that signed the webhook&#39;s serving certificate&gt;...tLS0K&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">admissionReviewVersions</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;v1&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">sideEffects</span><span class="p">:</span><span class="w"> </span><span class="l">None</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">timeoutSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w"> </span><span class="c"># 1-30s直接，表示请求api的超时时间</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注：对于webhook，也可以引入外部的服务，并非必须部署到集群内部</p>
</blockquote>
<p>对于外部服务来讲，需要 <code>clientConfig</code> 中的 <code>service</code> , 更换为 <code>url</code> ; 通过 <code>url</code> 参数可以将一个外部的服务引入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">admissionregistration.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">MutatingWebhookConfiguration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">webhooks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-webhook.example.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">clientConfig</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://my-webhook.example.com:9443/my-webhook-path&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="l">...</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注：这里的url规则必须准守下列形式：</p>
<ul>
<li><code>scheme://host:port/path</code></li>
<li>使用了url 时，这里不应填写集群内的服务</li>
<li><code>scheme</code> 必须是 https，不能为http，这就意味着，引入外部时也需要</li>
<li>配置时使用了，<code>?xx=xx</code> 的参数也是不被允许的（官方说法是这样的，通过源码学习了解到因为会发送特定的请求体，所以无需管参数）</li>
</ul>
</blockquote>
<p>更多的配置可以参考kubernetes官方提供的 <a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/extensible-admission-controllers/#webhook-configuration">doc</a></p>
<h3 id="准备一个webhook">准备一个webhook</h3>
<p>让我们编写我们的 webhook  server。将创建两个钩子，<code>/mutate</code> 与 <code>/validate</code>；</p>
<ul>
<li><code>/mutate</code> 将在创建deployment资源时，基于版本，给资源加上注释 <code>webhook.example.com/allow: true</code></li>
<li><code>/validate</code> 将对 <code>/mutate</code>  增加的 <code>allow:true</code> 那么则继续，否则拒绝。</li>
</ul>
<p>这里为了方便，全部写在一起了，实际上不符合软件的设计。在kubernetes代码库中也提供了一个<a href="https://github.com/kubernetes/kubernetes/blob/release-1.21/test/images/agnhost/webhook/main.go">webhook server</a>，可以参考他这个webhook server来学习具体要做什么</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;context&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;crypto/tls&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;encoding/json&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;io/ioutil&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net/http&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;os/signal&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;strings&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;syscall&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">v1admission</span> <span class="s">&#34;k8s.io/api/admission/v1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/apimachinery/pkg/runtime&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/apimachinery/pkg/runtime/serializer&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">appv1</span> <span class="s">&#34;k8s.io/api/apps/v1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span> <span class="s">&#34;k8s.io/apimachinery/pkg/apis/meta/v1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/klog&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">patch</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Op</span>    <span class="kt">string</span>            <span class="s">`json:&#34;op&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Path</span>  <span class="kt">string</span>            <span class="s">`json:&#34;path&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Value</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span> <span class="s">`json:&#34;value&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">serve</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">body</span> <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">Body</span><span class="p">);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">body</span> <span class="p">=</span> <span class="nx">data</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;receive request: %v....&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">body</span><span class="p">)[:</span><span class="mi">130</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">body</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;admission request body is empty&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">http</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;admission request body is empty&#34;</span><span class="p">).</span><span class="nf">Error</span><span class="p">(),</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">admission</span> <span class="nx">v1admission</span><span class="p">.</span><span class="nx">AdmissionReview</span>
</span></span><span class="line"><span class="cl">	<span class="nx">codefc</span> <span class="o">:=</span> <span class="nx">serializer</span><span class="p">.</span><span class="nf">NewCodecFactory</span><span class="p">(</span><span class="nx">runtime</span><span class="p">.</span><span class="nf">NewScheme</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">decoder</span> <span class="o">:=</span> <span class="nx">codefc</span><span class="p">.</span><span class="nf">UniversalDeserializer</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">decoder</span><span class="p">.</span><span class="nf">Decode</span><span class="p">(</span><span class="nx">body</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">admission</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">msg</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;Request could not be decoded: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">http</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">msg</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">admission</span><span class="p">.</span><span class="nx">Request</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;admission review can&#39;t be used: Request field is nil&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">http</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;admission review can&#39;t be used: Request field is nil&#34;</span><span class="p">).</span><span class="nf">Error</span><span class="p">(),</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">switch</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">RequestURI</span><span class="p">,</span> <span class="s">&#34;?&#34;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="s">&#34;/mutate&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">req</span> <span class="o">:=</span> <span class="nx">admission</span><span class="p">.</span><span class="nx">Request</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">admissionResp</span> <span class="nx">v1admission</span><span class="p">.</span><span class="nx">AdmissionReview</span>
</span></span><span class="line"><span class="cl">		<span class="nx">admissionResp</span><span class="p">.</span><span class="nx">APIVersion</span> <span class="p">=</span> <span class="nx">admission</span><span class="p">.</span><span class="nx">APIVersion</span>
</span></span><span class="line"><span class="cl">		<span class="nx">admissionResp</span><span class="p">.</span><span class="nx">Kind</span> <span class="p">=</span> <span class="nx">admission</span><span class="p">.</span><span class="nx">Kind</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;AdmissionReview for Kind=%v, Namespace=%v Name=%v UID=%v Operation=%v&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">req</span><span class="p">.</span><span class="nx">Kind</span><span class="p">.</span><span class="nx">Kind</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">UID</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Operation</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">switch</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Kind</span><span class="p">.</span><span class="nx">Kind</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="s">&#34;Deployment&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">				<span class="nx">respstr</span> <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">				<span class="nx">err</span>     <span class="kt">error</span>
</span></span><span class="line"><span class="cl">				<span class="nx">deploy</span>  <span class="nx">appv1</span><span class="p">.</span><span class="nx">Deployment</span>
</span></span><span class="line"><span class="cl">			<span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">Object</span><span class="p">.</span><span class="nx">Raw</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">deploy</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">respStructure</span> <span class="o">:=</span> <span class="nx">v1admission</span><span class="p">.</span><span class="nx">AdmissionResponse</span><span class="p">{</span><span class="nx">Result</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">metav1</span><span class="p">.</span><span class="nx">Status</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Message</span><span class="p">:</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;could not unmarshal resouces review request: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Code</span><span class="p">:</span>    <span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="p">}}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;could not unmarshal resouces review request: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">respstr</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">respStructure</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">klog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;could not unmarshal resouces review response: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">					<span class="nx">http</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;could not unmarshal resouces review response: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">).</span><span class="nf">Error</span><span class="p">(),</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">http</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">respstr</span><span class="p">),</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nx">current_annotations</span> <span class="o">:=</span> <span class="nx">deploy</span><span class="p">.</span><span class="nf">GetAnnotations</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="nx">pl</span> <span class="o">:=</span> <span class="p">[]</span><span class="nx">patch</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">k</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">current_annotations</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">pl</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">pl</span><span class="p">,</span> <span class="nx">patch</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Op</span><span class="p">:</span>   <span class="s">&#34;add&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Path</span><span class="p">:</span> <span class="s">&#34;/metadata/annotations&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Value</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">k</span><span class="p">:</span> <span class="nx">v</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">					<span class="p">},</span>
</span></span><span class="line"><span class="cl">				<span class="p">})</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">pl</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">pl</span><span class="p">,</span> <span class="nx">patch</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Op</span><span class="p">:</span>   <span class="s">&#34;add&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Path</span><span class="p">:</span> <span class="s">&#34;/metadata/annotations&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Value</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">deploy</span><span class="p">.</span><span class="nx">Name</span> <span class="o">+</span> <span class="s">&#34;/Allow&#34;</span><span class="p">:</span> <span class="s">&#34;true&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">			<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nx">annotationbyte</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">pl</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">http</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">(),</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">respStructure</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">v1admission</span><span class="p">.</span><span class="nx">AdmissionResponse</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">UID</span><span class="p">:</span>     <span class="nx">req</span><span class="p">.</span><span class="nx">UID</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Allowed</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Patch</span><span class="p">:</span>   <span class="nx">annotationbyte</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">PatchType</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="o">*</span><span class="nx">v1admission</span><span class="p">.</span><span class="nx">PatchType</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">t</span> <span class="o">:=</span> <span class="nx">v1admission</span><span class="p">.</span><span class="nx">PatchTypeJSONPatch</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="o">&amp;</span><span class="nx">t</span>
</span></span><span class="line"><span class="cl">				<span class="p">}(),</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Result</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">metav1</span><span class="p">.</span><span class="nx">Status</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Message</span><span class="p">:</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;could not unmarshal resouces review request: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Code</span><span class="p">:</span>    <span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="p">},</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">admissionResp</span><span class="p">.</span><span class="nx">Response</span> <span class="p">=</span> <span class="nx">respStructure</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;sending response: %s....&#34;</span><span class="p">,</span> <span class="nx">admissionResp</span><span class="p">.</span><span class="nx">Response</span><span class="p">.</span><span class="nf">String</span><span class="p">()[:</span><span class="mi">130</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">			<span class="nx">respByte</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">admissionResp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Can&#39;t encode response messages: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">http</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">(),</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;prepare to write response...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">w</span><span class="p">.</span><span class="nf">Header</span><span class="p">().</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;Content-Type&#34;</span><span class="p">,</span> <span class="s">&#34;application/json&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">respByte</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Can&#39;t write response: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">http</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;could not write response: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">),</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;unsupport resouces review request type&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="nx">http</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&#34;unsupport resouces review request type&#34;</span><span class="p">,</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="s">&#34;/validate&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">req</span> <span class="o">:=</span> <span class="nx">admission</span><span class="p">.</span><span class="nx">Request</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">admissionResp</span> <span class="nx">v1admission</span><span class="p">.</span><span class="nx">AdmissionReview</span>
</span></span><span class="line"><span class="cl">		<span class="nx">admissionResp</span><span class="p">.</span><span class="nx">APIVersion</span> <span class="p">=</span> <span class="nx">admission</span><span class="p">.</span><span class="nx">APIVersion</span>
</span></span><span class="line"><span class="cl">		<span class="nx">admissionResp</span><span class="p">.</span><span class="nx">Kind</span> <span class="p">=</span> <span class="nx">admission</span><span class="p">.</span><span class="nx">Kind</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;AdmissionReview for Kind=%v, Namespace=%v Name=%v UID=%v Operation=%v&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">req</span><span class="p">.</span><span class="nx">Kind</span><span class="p">.</span><span class="nx">Kind</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">UID</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Operation</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">			<span class="nx">deploy</span>  <span class="nx">appv1</span><span class="p">.</span><span class="nx">Deployment</span>
</span></span><span class="line"><span class="cl">			<span class="nx">respstr</span> <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">		<span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">switch</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Kind</span><span class="p">.</span><span class="nx">Kind</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="s">&#34;Deployment&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">Object</span><span class="p">.</span><span class="nx">Raw</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">deploy</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">respStructure</span> <span class="o">:=</span> <span class="nx">v1admission</span><span class="p">.</span><span class="nx">AdmissionResponse</span><span class="p">{</span><span class="nx">Result</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">metav1</span><span class="p">.</span><span class="nx">Status</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Message</span><span class="p">:</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;could not unmarshal resouces review request: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">					<span class="nx">Code</span><span class="p">:</span>    <span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="p">}}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;could not unmarshal resouces review request: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">respstr</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">respStructure</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">klog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;could not unmarshal resouces review response: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">					<span class="nx">http</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;could not unmarshal resouces review response: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">).</span><span class="nf">Error</span><span class="p">(),</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">http</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">respstr</span><span class="p">),</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusBadRequest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">al</span> <span class="o">:=</span> <span class="nx">deploy</span><span class="p">.</span><span class="nf">GetAnnotations</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">respStructure</span> <span class="o">:=</span> <span class="nx">v1admission</span><span class="p">.</span><span class="nx">AdmissionResponse</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">UID</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">UID</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">al</span><span class="p">[</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s/Allow&#34;</span><span class="p">,</span> <span class="nx">deploy</span><span class="p">.</span><span class="nx">Name</span><span class="p">)]</span> <span class="o">==</span> <span class="s">&#34;true&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">respStructure</span><span class="p">.</span><span class="nx">Allowed</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">			<span class="nx">respStructure</span><span class="p">.</span><span class="nx">Result</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">metav1</span><span class="p">.</span><span class="nx">Status</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Code</span><span class="p">:</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusOK</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">respStructure</span><span class="p">.</span><span class="nx">Allowed</span> <span class="p">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">			<span class="nx">respStructure</span><span class="p">.</span><span class="nx">Result</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">metav1</span><span class="p">.</span><span class="nx">Status</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Code</span><span class="p">:</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusForbidden</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Reason</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">StatusReason</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">StatusReasonForbidden</span>
</span></span><span class="line"><span class="cl">				<span class="p">}(),</span>
</span></span><span class="line"><span class="cl">				<span class="nx">Message</span><span class="p">:</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;the resource %s couldn&#39;t to allow entry.&#34;</span><span class="p">,</span> <span class="nx">deploy</span><span class="p">.</span><span class="nx">Kind</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">admissionResp</span><span class="p">.</span><span class="nx">Response</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">respStructure</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;sending response: %s....&#34;</span><span class="p">,</span> <span class="nx">admissionResp</span><span class="p">.</span><span class="nx">Response</span><span class="p">.</span><span class="nf">String</span><span class="p">()[:</span><span class="mi">130</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">		<span class="nx">respByte</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">admissionResp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Can&#39;t encode response messages: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">http</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">(),</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;prepare to write response...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">w</span><span class="p">.</span><span class="nf">Header</span><span class="p">().</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;Content-Type&#34;</span><span class="p">,</span> <span class="s">&#34;application/json&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">respByte</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Can&#39;t write response: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">http</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;could not write response: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">),</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusInternalServerError</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cert</span><span class="p">,</span> <span class="nx">key</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">cert</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;TLS_CERT&#34;</span><span class="p">);</span> <span class="nb">len</span><span class="p">(</span><span class="nx">cert</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cert</span> <span class="p">=</span> <span class="s">&#34;./tls/tls.crt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">key</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getenv</span><span class="p">(</span><span class="s">&#34;TLS_KEY&#34;</span><span class="p">);</span> <span class="nb">len</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">key</span> <span class="p">=</span> <span class="s">&#34;./tls/tls.key&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ca</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">tls</span><span class="p">.</span><span class="nf">LoadX509KeyPair</span><span class="p">(</span><span class="nx">cert</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">server</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Addr</span><span class="p">:</span> <span class="s">&#34;:81&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">TLSConfig</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">tls</span><span class="p">.</span><span class="nx">Config</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Certificates</span><span class="p">:</span> <span class="p">[]</span><span class="nx">tls</span><span class="p">.</span><span class="nx">Certificate</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">ca</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">httpserver</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">NewServeMux</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">httpserver</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/validate&#34;</span><span class="p">,</span> <span class="nx">serve</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">httpserver</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/mutate&#34;</span><span class="p">,</span> <span class="nx">serve</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">httpserver</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/ping&#34;</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s %s&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">RequestURI</span><span class="p">,</span> <span class="s">&#34;pong&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprint</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&#34;pong&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">server</span><span class="p">.</span><span class="nx">Handler</span> <span class="p">=</span> <span class="nx">httpserver</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">server</span><span class="p">.</span><span class="nf">ListenAndServeTLS</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to listen and serve webhook server: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;starting serve.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">signalChan</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">signal</span><span class="p">.</span><span class="nf">Notify</span><span class="p">(</span><span class="nx">signalChan</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGINT</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="o">&lt;-</span><span class="nx">signalChan</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Got shut signal, shutting...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">server</span><span class="p">.</span><span class="nf">Shutdown</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;HTTP server Shutdown: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对应的Dockerfile</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-docker" data-lang="docker"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> golang:alpine AS builder</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">MAINTAINER</span><span class="s"> cylon</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /admission</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> ./ /admission<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> GOPROXY https://goproxy.cn,direct<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    sed -i <span class="s1">&#39;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#39;</span> /etc/apk/repositories <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    apk add upx  <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="nv">GOOS</span><span class="o">=</span>linux <span class="nv">GOARCH</span><span class="o">=</span>amd64 <span class="nv">CGO_ENABLED</span><span class="o">=</span><span class="m">0</span> go build -ldflags <span class="s2">&#34;-s -w&#34;</span> -o webhook main.go <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    upx -1 webhook <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    chmod +x webhook<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> alpine AS runner</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /go/admission</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>builder /admission/webhook .<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">VOLUME</span> <span class="p">[</span><span class="s2">&#34;/admission&#34;</span><span class="p">]</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>集群内部部署所需的资源清单</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">admission-webhook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">admission-webhook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">81</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">81</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">simple-webhook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">simple-webhook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">simple-webhook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">simple-webhook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">simple-webhook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">cylonchau/simple-webhook:v0.0.2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">webhook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;./webhook&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;TLS_CERT&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;./tls/tls.crt&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;TLS_KEY&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;./tls/tls.key&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">NS_NAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">fieldRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">fieldPath</span><span class="p">:</span><span class="w"> </span><span class="l">metadata.namespace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">81</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">tlsdir</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/go/admission/tls</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">readOnly</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">tlsdir</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">secret</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">webhook</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">admissionregistration.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">MutatingWebhookConfiguration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;pod-policy.example.com&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">webhooks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;pod-policy.example.com&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w">   </span><span class="p">[</span><span class="s2">&#34;apps&#34;</span><span class="p">]</span><span class="w"> </span><span class="c"># 拦截资源的Group &#34;&#34; 表示 core。&#34;*&#34; 表示所有。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">apiVersions</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;v1&#34;</span><span class="p">]</span><span class="w"> </span><span class="c"># 拦截资源的版本</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">operations</span><span class="p">:</span><span class="w">  </span><span class="p">[</span><span class="s2">&#34;CREATE&#34;</span><span class="p">]</span><span class="w"> </span><span class="c"># 什么请求下拦截</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">resources</span><span class="p">:</span><span class="w">   </span><span class="p">[</span><span class="s2">&#34;deployments&#34;</span><span class="p">]</span><span class="w">  </span><span class="c"># 拦截什么资源</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">scope</span><span class="p">:</span><span class="w">       </span><span class="s2">&#34;Namespaced&#34;</span><span class="w"> </span><span class="c"># 生效的范围，cluster还是namespace &#34;*&#34;表示没有范围限制。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">clientConfig</span><span class="p">:</span><span class="w"> </span><span class="c"># 我们部署的webhook服务，</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">url</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://10.0.0.1:81/mutate&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#      service: # service是在cluster-in模式下</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#        namespace: &#34;default&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#        name: &#34;admission-webhook&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#        port: 81 # 服务的端口</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#        path: &#34;/mutate&#34; # path是对应用于验证的接口</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># caBundle是提供给 admission webhook CA证书</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">caBundle</span><span class="p">:</span><span class="w"> </span><span class="l">Put you CA (base64 encode) in here</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">admissionReviewVersions</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;v1&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">sideEffects</span><span class="p">:</span><span class="w"> </span><span class="l">None</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">timeoutSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w"> </span><span class="c"># 1-30s直接，表示请求api的超时时间</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">admissionregistration.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ValidatingWebhookConfiguration</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;valipod-policy.example.com&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">webhooks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;valipod-policy.example.com&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w">   </span><span class="p">[</span><span class="s2">&#34;apps&#34;</span><span class="p">]</span><span class="w"> </span><span class="c"># 拦截资源的Group &#34;&#34; 表示 core。&#34;*&#34; 表示所有。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">apiVersions</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;v1&#34;</span><span class="p">]</span><span class="w"> </span><span class="c"># 拦截资源的版本</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">operations</span><span class="p">:</span><span class="w">  </span><span class="p">[</span><span class="s2">&#34;CREATE&#34;</span><span class="p">]</span><span class="w"> </span><span class="c"># 什么请求下拦截</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">resources</span><span class="p">:</span><span class="w">   </span><span class="p">[</span><span class="s2">&#34;deployments&#34;</span><span class="p">]</span><span class="w">  </span><span class="c"># 拦截什么资源</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">scope</span><span class="p">:</span><span class="w">       </span><span class="s2">&#34;Namespaced&#34;</span><span class="w"> </span><span class="c"># 生效的范围，cluster还是namespace &#34;*&#34;表示没有范围限制。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">clientConfig</span><span class="p">:</span><span class="w"> </span><span class="c"># 我们部署的webhook服务，</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#      service: # service是在cluster-in模式下</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#        namespace: &#34;default&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#        name: &#34;admission-webhook&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#        port: 81 # 服务的端口</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#        path: &#34;/mutate&#34; # path是对应用于验证的接口</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># caBundle是提供给 admission webhook CA证书</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">caBundle</span><span class="p">:</span><span class="w"> </span><span class="l">Put you CA (base64 encode) in here</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">admissionReviewVersions</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;v1&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">sideEffects</span><span class="p">:</span><span class="w"> </span><span class="l">None</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">timeoutSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w"> </span><span class="c"># 1-30s直接，表示请求api的超时时间</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="这里需要主义的问题">这里需要主义的问题</h4>
<p><strong>证书问题</strong></p>
<p>如果需要 <code>cluster-in</code> ，那么则需要对对应webhookconfig资源配置 <code>service</code> ；如果使用的是外部部署，则需要配置对应访问地址，如：<em>&ldquo;https://xxxx:port/method&rdquo;</em></p>
<p>这两种方式的证书均需要对应的 <code>subjectAltName</code> ，<code>cluster-in</code> 模式 需要对应service名称，如，至少包含<code>serviceName.NS.svc</code> 这一个域名。</p>
<p>下面就是证书类问题的错误</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Failed calling webhook, failing closed pod-policy.example.com: failed calling webhook &#34;pod-policy.example.com&#34;: Post https://admission-webhook.default.svc:81/mutate?timeout=5s: x509: certificate signed by unknown authority (possibly because of &#34;crypto/rsa: verification error&#34; while trying to verify candidate authority certificate &#34;admission-webhook-ca&#34;)
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>相应信息问题</strong></p>
<p>上面我们了解到的APIServer是去发出 <code>v1admission.AdmissionReview</code> 也就是 Request 和 Response类型的，所以，为了更清晰的表示出问题所在，需要对响应格式中的 <code>Reason</code> 与 <code>Message</code>  配置，这也就是我们在客户端看到的报错信息。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="o">&amp;</span><span class="nx">metav1</span><span class="p">.</span><span class="nx">Status</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Code</span><span class="p">:</span> <span class="nx">http</span><span class="p">.</span><span class="nx">StatusForbidden</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Reason</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">StatusReason</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">StatusReasonForbidden</span>
</span></span><span class="line"><span class="cl">    <span class="p">}(),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Message</span><span class="p">:</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;the resource %s couldn&#39;t to allow entry.&#34;</span><span class="p">,</span> <span class="nx">deploy</span><span class="p">.</span><span class="nx">Kind</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过上面的设置用户可以看到下列错误</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl apply -f nginx.yaml 
</span></span><span class="line"><span class="cl">Error from server <span class="o">(</span>Forbidden<span class="o">)</span>: error when creating <span class="s2">&#34;nginx.yaml&#34;</span>: admission webhook <span class="s2">&#34;valipod-policy.example.com&#34;</span> denied the request: the resource Deployment couldn<span class="err">&#39;</span>t to allow entry.
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注：必须的参数还包含，UID，allowed，这两个是必须的，上面阐述的只是对用户友好的提示信息</p>
</blockquote>
<p>下面的报错就是对相应格式设置错误</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">Error</span> <span class="nx">from</span> <span class="nf">server</span> <span class="p">(</span><span class="nx">InternalError</span><span class="p">):</span> <span class="kt">error</span> <span class="nx">when</span> <span class="nx">creating</span> <span class="s">&#34;nginx.yaml&#34;</span><span class="p">:</span> <span class="nx">Internal</span> <span class="kt">error</span> <span class="nx">occurred</span><span class="p">:</span> <span class="nx">failed</span> <span class="nx">calling</span> <span class="nx">webhook</span> <span class="s">&#34;pod-policy.example.com&#34;</span><span class="p">:</span> <span class="nx">the</span> <span class="nx">server</span> <span class="nx">rejected</span> <span class="nx">our</span> <span class="nx">request</span> <span class="k">for</span> <span class="nx">an</span> <span class="nx">unknown</span> <span class="nx">reason</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>相应信息版本问题</strong></p>
<p>相应信息也需要指定一个版本，这个与请求来的结构中拿即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">admissionResp</span><span class="p">.</span><span class="nx">APIVersion</span> <span class="p">=</span> <span class="nx">admission</span><span class="p">.</span><span class="nx">APIVersion</span>
</span></span><span class="line"><span class="cl"><span class="nx">admissionResp</span><span class="p">.</span><span class="nx">Kind</span> <span class="p">=</span> <span class="nx">admission</span><span class="p">.</span><span class="nx">Kind</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>下面是没有为对应相应信息配置对应KV的值出现的报错</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Error from server (InternalError): error when creating &#34;nginx.yaml&#34;: Internal error occurred: failed calling webhook &#34;pod-policy.example.com&#34;: expected webhook response of admission.k8s.io/v1, Kind=AdmissionReview, got /, Kind=
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>关于patch</strong></p>
<p>kubernetes中patch使用的是特定的规范，如 <code>jsonpatch</code></p>
<blockquote>
<p>kubernetes当前唯一支持的 <code>patchType</code> 是 <code>JSONPatch</code>。 有关更多详细信息，请参见 <a href="https://jsonpatch.com/">JSON patch</a></p>
<p>对于 <code>jsonpatch</code> 是一个固定的类型，在go中必须定义其结构体</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nt">&#34;op&#34;</span><span class="p">:</span> <span class="s2">&#34;add&#34;</span><span class="p">,</span> <span class="c1">// 做什么操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nt">&#34;path&#34;</span><span class="p">:</span> <span class="s2">&#34;/spec/replicas&#34;</span><span class="p">,</span> <span class="c1">// 操作的路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nt">&#34;value&#34;</span><span class="p">:</span> <span class="mi">3</span> <span class="c1">// 对应添加的key value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></blockquote>
<p>下面就是字符串类型设置为布尔型产生的报错</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Error from server <span class="o">(</span>InternalError<span class="o">)</span>: error when creating <span class="s2">&#34;nginx.yaml&#34;</span>: Internal error occurred: v1.Deployment.ObjectMeta: v1.ObjectMeta.Annotations: ReadString: expects <span class="s2">&#34; or n, but found t, error found in #10 byte of ...|t/Allow&#34;</span>:true<span class="o">}</span>,<span class="s2">&#34;crea|..., bigger context ...|tadata&#34;</span>:<span class="o">{</span><span class="s2">&#34;annotations&#34;</span>:<span class="o">{</span><span class="s2">&#34;nginx-deployment/Allow&#34;</span>:true<span class="o">}</span>,<span class="s2">&#34;creationTimestamp&#34;</span>:null,<span class="s2">&#34;managedFields&#34;</span>:<span class="o">[{</span><span class="s2">&#34;m|..
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="准备证书">准备证书</h3>
<p>Ubuntu</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">touch ./demoCAindex.txt
</span></span><span class="line"><span class="cl">touch ./demoCA/serial 
</span></span><span class="line"><span class="cl">touch ./demoCA/crlnumber
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="m">01</span> &gt; ./demoCA/serial
</span></span><span class="line"><span class="cl">mkdir ./demoCA/newcerts
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">openssl genrsa -out cakey.pem <span class="m">2048</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">openssl req -new <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-x509 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-key cakey.pem <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-out cacert.pem <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-days <span class="m">3650</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-subj <span class="s2">&#34;/CN=admission webhook ca&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">openssl genrsa -out tls.key <span class="m">2048</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">openssl req -new <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-key tls.key <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-subj <span class="s2">&#34;/CN=admission webhook client&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-reqexts webhook <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-config &lt;<span class="o">(</span>cat /etc/ssl/openssl.cnf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	&lt;<span class="o">(</span><span class="nb">printf</span> <span class="s2">&#34;[webhook]\nsubjectAltName=DNS: admission-webhook, DNS: admission-webhook.default.svc, DNS: admission-webhook.default.svc.cluster.local, IP:10.0.0.1,  IP:10.0.0.4&#34;</span><span class="o">))</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-out tls.csr
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sed -i <span class="s1">&#39;s/= match/= optional/g&#39;</span> /etc/ssl/openssl.cnf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">openssl ca <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-in tls.csr <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-cert cacert.pem <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-keyfile cakey.pem <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-out tls.crt <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-days <span class="m">300</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-extensions webhook <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-extfile &lt;<span class="o">(</span>cat /etc/ssl/openssl.cnf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    &lt;<span class="o">(</span><span class="nb">printf</span> <span class="s2">&#34;[webhook]\nsubjectAltName=DNS: admission-webhook, DNS: admission-webhook.default.svc, DNS: admission-webhook.default.svc.cluster.local, IP:10.0.0.1,  IP:10.0.0.4&#34;</span><span class="o">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>CentOS</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">touch /etc/pki/CA/index.txt
</span></span><span class="line"><span class="cl">touch /etc/pki/CA/serial <span class="c1"># 下一个要颁发的编号 16进制</span>
</span></span><span class="line"><span class="cl">touch /etc/pki/CA/crlnumber
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="m">01</span> &gt; /etc/pki/CA/serial
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">openssl req -new <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-x509 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-key cakey.pem <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-out cacert.pem <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-days <span class="m">3650</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-subj <span class="s2">&#34;/CN=admission webhook ca&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">openssl genrsa -out tls.key <span class="m">2048</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">openssl req -new <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-key tls.key <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-subj <span class="s2">&#34;/CN=admission webhook client&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-reqexts webhook <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-config &lt;<span class="o">(</span>cat /etc/pki/tls/openssl.cnf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	&lt;<span class="o">(</span><span class="nb">printf</span> <span class="s2">&#34;[webhook]\nsubjectAltName=DNS: admission-webhook, DNS: admission-webhook.default.svc, DNS: admission-webhook.default.svc.cluster.local, IP:10.0.0.1,  IP:10.0.0.4&#34;</span><span class="o">))</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-out tls.csr
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sed -i <span class="s1">&#39;s/= match/= optional/g&#39;</span> /etc/ssl/openssl.cnf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">openssl ca <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-in tls.csr <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-cert cacert.pem <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-keyfile cakey.pem <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-out tls.crt <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-days <span class="m">300</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-extensions webhook <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	-extfile &lt;<span class="o">(</span>cat /etc/pki/tls/openssl.cnf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    &lt;<span class="o">(</span><span class="nb">printf</span> <span class="s2">&#34;[webhook]\nsubjectAltName=DNS: admission-webhook, DNS: admission-webhook.default.svc, DNS: admission-webhook.default.svc.cluster.local, IP:10.0.0.1,  IP:10.0.0.4&#34;</span><span class="o">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="通过部署测试结果">通过部署测试结果</h3>
<p>可以看到我们自己注入的 annotation <code>nginx-deployment/Allow: true</code>，在该示例中，仅为演示过程，而不是真的策略，实际环境中可以根据情况进行定制自己的策略。</p>
<p>结果可以看出，当在 <code>mutating</code> 中不通过，即缺少对应的 annotation 标签 , 则 <code>validating</code> 会不允许准入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl describe deploy nginx-deployment
</span></span><span class="line"><span class="cl">Name:                   nginx-deployment
</span></span><span class="line"><span class="cl">Namespace:              default
</span></span><span class="line"><span class="cl">CreationTimestamp:      Mon, <span class="m">11</span> Jul <span class="m">2022</span> 20:25:16 +0800
</span></span><span class="line"><span class="cl">Labels:                 &lt;none&gt;
</span></span><span class="line"><span class="cl">Annotations:            deployment.kubernetes.io/revision: <span class="m">1</span>
</span></span><span class="line"><span class="cl">                        nginx-deployment/Allow: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">Selector:               <span class="nv">app</span><span class="o">=</span>nginx
</span></span><span class="line"><span class="cl">Replicas:               <span class="m">1</span> desired <span class="p">|</span> <span class="m">1</span> updated <span class="p">|</span> <span class="m">1</span> total <span class="p">|</span> <span class="m">1</span> available <span class="p">|</span> <span class="m">0</span> unavailable
</span></span><span class="line"><span class="cl">StrategyType:           RollingUpdate
</span></span><span class="line"><span class="cl">MinReadySeconds:        <span class="m">0</span>
</span></span><span class="line"><span class="cl">RollingUpdateStrategy:  25% max unavailable, 25% max surge
</span></span><span class="line"><span class="cl">Pod Template:
</span></span><span class="line"><span class="cl">  Labels:  <span class="nv">app</span><span class="o">=</span>nginx
</span></span><span class="line"><span class="cl">  Containers:
</span></span><span class="line"><span class="cl">   nginx:
</span></span><span class="line"><span class="cl">    Image:        nginx:1.14.2
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Reference</p>
<p><a href="https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/">extensible admission controllers</a></p>
<p><a href="https://developer.aliyun.com/article/703438">K8S client-go Patch example</a></p>
<p><a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/extensible-admission-controllers/#response">admission controllers response</a></p>
<p><a href="https://kubernetes.io/blog/2019/03/21/a-guide-to-kubernetes-admission-controllers/">a guide to kubernetes admission controllers</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>利用kubernetes中的leader选举机制自定义HA应用</title>
      <link>https://www.oomkill.com/2022/06/ch28-leader-election-eg/</link>
      <pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/06/ch28-leader-election-eg/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="backgroud">Backgroud</h2>
<p>前一章中，对kubernetes的选举原理进行了深度剖析，下面就通过一个example来实现一个，利用kubernetes提供的选举机制完成的高可用应用。</p>
<p>对于此章需要提前对一些概念有所了解后才可以继续看下去</p>
<ul>
<li>leader election mechanism</li>
<li>RBCA</li>
<li>Pod runtime mechanism</li>
</ul>
<h2 id="implementation">Implementation</h2>
<h3 id="代码实现">代码实现</h3>
<p>如果仅仅是使用Kubernetes中的锁，实现的代码也只有几行而已。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;context&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;flag&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;os/signal&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;syscall&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span> <span class="s">&#34;k8s.io/apimachinery/pkg/apis/meta/v1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">clientset</span> <span class="s">&#34;k8s.io/client-go/kubernetes&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/client-go/rest&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/client-go/tools/clientcmd&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/client-go/tools/leaderelection&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/client-go/tools/leaderelection/resourcelock&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/klog/v2&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">buildConfig</span><span class="p">(</span><span class="nx">kubeconfig</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">kubeconfig</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cfg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">clientcmd</span><span class="p">.</span><span class="nf">BuildConfigFromFlags</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">kubeconfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">cfg</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">cfg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rest</span><span class="p">.</span><span class="nf">InClusterConfig</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">cfg</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">InitFlags</span><span class="p">(</span><span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">kubeconfig</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">leaseLockName</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">leaseLockNamespace</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">id</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化客户端的部分
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">flag</span><span class="p">.</span><span class="nf">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">kubeconfig</span><span class="p">,</span> <span class="s">&#34;kubeconfig&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="s">&#34;absolute path to the kubeconfig file&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">flag</span><span class="p">.</span><span class="nf">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">id</span><span class="p">,</span> <span class="s">&#34;id&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="s">&#34;the holder identity name&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">flag</span><span class="p">.</span><span class="nf">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">leaseLockName</span><span class="p">,</span> <span class="s">&#34;lease-lock-name&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="s">&#34;the lease lock resource name&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">flag</span><span class="p">.</span><span class="nf">StringVar</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">leaseLockNamespace</span><span class="p">,</span> <span class="s">&#34;lease-lock-namespace&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="s">&#34;the lease lock resource namespace&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">flag</span><span class="p">.</span><span class="nf">Parse</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">leaseLockName</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;unable to get lease lock resource name (missing lease-lock-name flag).&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">leaseLockNamespace</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="s">&#34;unable to get lease lock resource namespace (missing lease-lock-namespace flag).&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">config</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">buildConfig</span><span class="p">(</span><span class="nx">kubeconfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">clientset</span><span class="p">.</span><span class="nf">NewForConfigOrDie</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">run</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 实现的业务逻辑，这里仅仅为实验，就直接打印了
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">klog</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Controller loop...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;I am leader, I was working.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// use a Go context so we can tell the leaderelection code when we
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// want to step down
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 监听系统中断
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">signal</span><span class="p">.</span><span class="nf">Notify</span><span class="p">(</span><span class="nx">ch</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Interrupt</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="o">&lt;-</span><span class="nx">ch</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Received termination, signaling shutdown&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 创建一个资源锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">lock</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">resourcelock</span><span class="p">.</span><span class="nx">LeaseLock</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LeaseMeta</span><span class="p">:</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMeta</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Name</span><span class="p">:</span>      <span class="nx">leaseLockName</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Namespace</span><span class="p">:</span> <span class="nx">leaseLockNamespace</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Client</span><span class="p">:</span> <span class="nx">client</span><span class="p">.</span><span class="nf">CoordinationV1</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LockConfig</span><span class="p">:</span> <span class="nx">resourcelock</span><span class="p">.</span><span class="nx">ResourceLockConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Identity</span><span class="p">:</span> <span class="nx">id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 开启一个选举的循环
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">leaderelection</span><span class="p">.</span><span class="nf">RunOrDie</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">leaderelection</span><span class="p">.</span><span class="nx">LeaderElectionConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Lock</span><span class="p">:</span>            <span class="nx">lock</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ReleaseOnCancel</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">LeaseDuration</span><span class="p">:</span>   <span class="mi">60</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">RenewDeadline</span><span class="p">:</span>   <span class="mi">15</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">RetryPeriod</span><span class="p">:</span>     <span class="mi">5</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Callbacks</span><span class="p">:</span> <span class="nx">leaderelection</span><span class="p">.</span><span class="nx">LeaderCallbacks</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">OnStartedLeading</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// 当选举为leader后所运行的业务逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nf">run</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">			<span class="nx">OnStoppedLeading</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// we can do cleanup here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;leader lost: %s&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">			<span class="nx">OnNewLeader</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">identity</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 申请一个选举时的动作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">if</span> <span class="nx">identity</span> <span class="o">==</span> <span class="nx">id</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;new leader elected: %s&#34;</span><span class="p">,</span> <span class="nx">identity</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注：这种lease锁只能在in-cluster模式下运行，如果需要类似二进制部署的程序，可以选择endpoint类型的资源锁。</p>
</blockquote>
<h3 id="生成镜像">生成镜像</h3>
<p>这里已经制作好了镜像并上传到dockerhub（<code>cylonchau/leaderelection:v0.0.2</code>）上了，如果只要学习运行原理，则忽略此步骤</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-docker" data-lang="docker"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> golang:alpine AS builder</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">MAINTAINER</span><span class="s"> cylon</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /election</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> . /election<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> GOPROXY https://goproxy.cn,direct<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> <span class="nv">GOOS</span><span class="o">=</span>linux <span class="nv">GOARCH</span><span class="o">=</span>amd64 <span class="nv">CGO_ENABLED</span><span class="o">=</span><span class="m">0</span> go build -o elector main.go<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">FROM</span><span class="s"> alpine AS runner</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /go/elector</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>builder /election/elector .<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">VOLUME</span> <span class="p">[</span><span class="s2">&#34;/election&#34;</span><span class="p">]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENTRYPOINT</span> <span class="p">[</span><span class="s2">&#34;./elector&#34;</span><span class="p">]</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="准备资源清单">准备资源清单</h3>
<p>默认情况下，Kubernetes运行的pod在请求Kubernetes集群内资源时，默认的账户是没有权限的，默认服务帐户无权访问协调 API，因此我们需要创建另一个serviceaccount并相应地设置 对应的RBAC权限绑定；在清单中配置上这个sa，此时所有的pod就会有协调锁的权限了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">sa-leaderelection</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Role</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">leaderelection</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">coordination.k8s.io</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">leases</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">verbs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s1">&#39;*&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">RoleBinding</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">leaderelection</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">roleRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apiGroup</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Role</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">leaderelection</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">subjects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">sa-leaderelection</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">leaderelection</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">leaderelection</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">leaderelection</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">leaderelection</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">cylonchau/leaderelection:v0.0.2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;./elector&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">args</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="s2">&#34;-id=$(POD_NAME)&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="s2">&#34;-lease-lock-name=test&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="s2">&#34;-lease-lock-namespace=default&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">POD_NAME</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">valueFrom</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">fieldRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">fieldPath</span><span class="p">:</span><span class="w"> </span><span class="l">metadata.name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">elector</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">serviceAccountName</span><span class="p">:</span><span class="w"> </span><span class="l">sa-leaderelection</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="集群中运行">集群中运行</h3>
<p>执行完清单后，当pod启动后，可以看到会创建出一个 lease</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl get lease
</span></span><span class="line"><span class="cl">NAME   HOLDER                            AGE
</span></span><span class="line"><span class="cl"><span class="nb">test</span>   leaderelection-5644c5f84f-frs5n   1s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ kubectl describe lease
</span></span><span class="line"><span class="cl">Name:         <span class="nb">test</span>
</span></span><span class="line"><span class="cl">Namespace:    default
</span></span><span class="line"><span class="cl">Labels:       &lt;none&gt;
</span></span><span class="line"><span class="cl">Annotations:  &lt;none&gt;
</span></span><span class="line"><span class="cl">API Version:  coordination.k8s.io/v1
</span></span><span class="line"><span class="cl">Kind:         Lease
</span></span><span class="line"><span class="cl">Metadata:
</span></span><span class="line"><span class="cl">  Creation Timestamp:  2022-06-28T16:39:45Z
</span></span><span class="line"><span class="cl">  Managed Fields:
</span></span><span class="line"><span class="cl">    API Version:  coordination.k8s.io/v1
</span></span><span class="line"><span class="cl">    Fields Type:  FieldsV1
</span></span><span class="line"><span class="cl">    fieldsV1:
</span></span><span class="line"><span class="cl">      f:spec:
</span></span><span class="line"><span class="cl">        f:acquireTime:
</span></span><span class="line"><span class="cl">        f:holderIdentity:
</span></span><span class="line"><span class="cl">        f:leaseDurationSeconds:
</span></span><span class="line"><span class="cl">        f:leaseTransitions:
</span></span><span class="line"><span class="cl">        f:renewTime:
</span></span><span class="line"><span class="cl">    Manager:         elector
</span></span><span class="line"><span class="cl">    Operation:       Update
</span></span><span class="line"><span class="cl">    Time:            2022-06-28T16:39:45Z
</span></span><span class="line"><span class="cl">  Resource Version:  <span class="m">131693</span>
</span></span><span class="line"><span class="cl">  Self Link:         /apis/coordination.k8s.io/v1/namespaces/default/leases/test
</span></span><span class="line"><span class="cl">  UID:               bef2b164-a117-44bd-bad3-3e651c94c97b
</span></span><span class="line"><span class="cl">Spec:
</span></span><span class="line"><span class="cl">  Acquire Time:            2022-06-28T16:39:45.931873Z
</span></span><span class="line"><span class="cl">  Holder Identity:         leaderelection-5644c5f84f-frs5n
</span></span><span class="line"><span class="cl">  Lease Duration Seconds:  <span class="m">60</span>
</span></span><span class="line"><span class="cl">  Lease Transitions:       <span class="m">0</span>
</span></span><span class="line"><span class="cl">  Renew Time:              2022-06-28T16:39:55.963537Z
</span></span><span class="line"><span class="cl">Events:                    &lt;none&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过其持有者的信息查看对应pod（因为程序中对holder Identity设置的是pod的名称），实际上是工作的pod。</p>
<p>如上实例所述，这是利用Kubernetes集群完成的leader选举的方案，虽然这不是最完美解决方案，但这是一种简单的方法，因为可以无需在集群上部署更多东西或者进行大量的代码工作就可以利用Kubernetes集群来完成一个高可用的HA应用。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>源码分析Kubernetes HA机制 - leader election</title>
      <link>https://www.oomkill.com/2022/06/ch27-leader-election/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/06/ch27-leader-election/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>在 Kubernetes的 <code>kube-controller-manager</code> , <code>kube-scheduler</code>, 以及使用 <code>Operator</code> 的底层实现 <code>controller-rumtime</code> 都支持高可用系统中的leader选举，本文将以理解 <code>controller-rumtime</code> （底层的实现是 <code>client-go</code>） 中的leader选举以在kubernetes controller中是如何实现的。</p>
<h2 id="background">Background</h2>
<p>在运行 <code>kube-controller-manager</code> 时，是有一些参数提供给cm进行leader选举使用的，可以参考官方文档提供的 <a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kube-controller-manager/">参数</a> 来了解相关参数。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">--leader-elect                               Default: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">--leader-elect-renew-deadline duration       Default: 10s
</span></span><span class="line"><span class="cl">--leader-elect-resource-lock string          Default: <span class="s2">&#34;leases&#34;</span>
</span></span><span class="line"><span class="cl">--leader-elect-resource-name string     	 Default: <span class="s2">&#34;kube-controller-manager&#34;</span>
</span></span><span class="line"><span class="cl">--leader-elect-resource-namespace string     Default: <span class="s2">&#34;kube-system&#34;</span>
</span></span><span class="line"><span class="cl">--leader-elect-retry-period duration         Default: 2s
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></td></tr></table>
</div>
</div><p>本身以为这些组件的选举动作时通过etcd进行的，但是后面对 <code>controller-runtime</code> 学习时，发现并没有配置其相关的etcd相关参数，这就引起了对选举机制的好奇。怀着这种好奇心搜索了下有关于 kubernetes的选举，发现官网是这么介绍的，下面是对官方的说明进行一个通俗总结。<a href="https://kubernetes.io/blog/2016/01/simple-leader-election-with-kubernetes/">simple leader election with kubernetes</a></p>
<blockquote>
<p>通过阅读文章得知，kubernetes API 提供了一中选举机制，只要运行在集群内的容器，都是可以实现选举功能的。</p>
<p>Kubernetes API通过提供了两个属性来完成选举动作的</p>
<ul>
<li>ResourceVersions：每个API对象唯一一个ResourceVersion</li>
<li>Annotations：每个API对象都可以对这些key进行注释</li>
</ul>
<p>注：这种选举会增加APIServer的压力。也就对etcd会产生影响</p>
</blockquote>
<p>那么有了这些信息之后，我们来看一下，在Kubernetes集群中，谁是cm的leader（我们提供的集群只有一个节点，所以本节点就是leader）</p>
<p>在Kubernetes中所有启用了leader选举的服务都会生成一个 <code>EndPoint</code> ，在这个 <code>EndPoint</code> 中会有上面提到的label（<em>Annotations</em>）来标识谁是leader。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl get ep -n kube-system
</span></span><span class="line"><span class="cl">NAME                      ENDPOINTS   AGE
</span></span><span class="line"><span class="cl">kube-controller-manager   &lt;none&gt;      3d4h
</span></span><span class="line"><span class="cl">kube-dns                              3d4h
</span></span><span class="line"><span class="cl">kube-scheduler            &lt;none&gt;      3d4h
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里以 <code>kube-controller-manager</code> 为例，来看下这个 <code>EndPoint</code> 有什么信息</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl describe ep kube-controller-manager -n kube-system
</span></span><span class="line"><span class="cl">Name:         kube-controller-manager
</span></span><span class="line"><span class="cl">Namespace:    kube-system
</span></span><span class="line"><span class="cl">Labels:       &lt;none&gt;
</span></span><span class="line"><span class="cl">Annotations:  control-plane.alpha.kubernetes.io/leader:
</span></span><span class="line"><span class="cl">                <span class="o">{</span><span class="s2">&#34;holderIdentity&#34;</span>:<span class="s2">&#34;master-machine_06730140-a503-487d-850b-1fe1619f1fe1&#34;</span>,<span class="s2">&#34;leaseDurationSeconds&#34;</span>:15,<span class="s2">&#34;acquireTime&#34;</span>:<span class="s2">&#34;2022-06-27T15:30:46Z&#34;</span>,<span class="s2">&#34;re...
</span></span></span><span class="line"><span class="cl"><span class="s2">Subsets:
</span></span></span><span class="line"><span class="cl"><span class="s2">Events:
</span></span></span><span class="line"><span class="cl"><span class="s2">  Type    Reason          Age    From                     Message
</span></span></span><span class="line"><span class="cl"><span class="s2">  ----    ------          ----   ----                     -------
</span></span></span><span class="line"><span class="cl"><span class="s2">  Normal  LeaderElection  2d22h  kube-controller-manager  master-machine_76aabcb5-49ff-45ff-bd18-4afa61fbc5af became leader
</span></span></span><span class="line"><span class="cl"><span class="s2">  Normal  LeaderElection  9m     kube-controller-manager  master-machine_06730140-a503-487d-850b-1fe1619f1fe1 became leader
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>可以看出 <code>Annotations:  control-plane.alpha.kubernetes.io/leader:</code> 标出了哪个node是leader。</p>
<h2 id="election-in-controller-runtime">election in controller-runtime</h2>
<p><code>controller-runtime</code> 有关leader选举的部分在 <a href="https://github.com/kubernetes-sigs/controller-runtime/tree/master/pkg/leaderelection">pkg/leaderelection</a> 下面，总共100行代码，我们来看下做了些什么？</p>
<p>可以看到，这里只提供了创建资源锁的一些选项</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Options</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 在manager启动时，决定是否进行选举
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">LeaderElection</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 使用那种资源锁 默认为租用 lease
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">LeaderElectionResourceLock</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 选举发生的名称空间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">LeaderElectionNamespace</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 该属性将决定持有leader锁资源的名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">LeaderElectionID</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过 <code>NewResourceLock</code> 可以看到，这里是走的 <a href="https://github.com/kubernetes/client-go/tree/v0.24.0/tools/leaderelection">client-go/tools/leaderelection</a>下面，而这个leaderelection也有一个 <a href="https://github.com/kubernetes/client-go/blob/v0.24.0/examples/leader-election/main.go">example</a> 来学习如何使用它。</p>
<p>通过 example 可以看到，进入选举的入口是一个 RunOrDie() 的函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 这里使用了一个lease锁，注释中说愿意为集群中存在lease的监听较少
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">lock</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">resourcelock</span><span class="p">.</span><span class="nx">LeaseLock</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">LeaseMeta</span><span class="p">:</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMeta</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">Name</span><span class="p">:</span>      <span class="nx">leaseLockName</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">Namespace</span><span class="p">:</span> <span class="nx">leaseLockNamespace</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Client</span><span class="p">:</span> <span class="nx">client</span><span class="p">.</span><span class="nf">CoordinationV1</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="nx">LockConfig</span><span class="p">:</span> <span class="nx">resourcelock</span><span class="p">.</span><span class="nx">ResourceLockConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">Identity</span><span class="p">:</span> <span class="nx">id</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 开启选举循环
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">leaderelection</span><span class="p">.</span><span class="nf">RunOrDie</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">leaderelection</span><span class="p">.</span><span class="nx">LeaderElectionConfig</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Lock</span><span class="p">:</span> <span class="nx">lock</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 这里必须保证拥有的租约在调用cancel()前终止，否则会仍有一个loop在运行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">ReleaseOnCancel</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">LeaseDuration</span><span class="p">:</span>   <span class="mi">60</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">RenewDeadline</span><span class="p">:</span>   <span class="mi">15</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">RetryPeriod</span><span class="p">:</span>     <span class="mi">5</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Callbacks</span><span class="p">:</span> <span class="nx">leaderelection</span><span class="p">.</span><span class="nx">LeaderCallbacks</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">OnStartedLeading</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 这里填写你的代码，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// usually put your code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nf">run</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">OnStoppedLeading</span><span class="p">:</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 这里清理你的lease
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;leader lost: %s&#34;</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="nx">OnNewLeader</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">identity</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// we&#39;re notified when new leader elected
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="nx">identity</span> <span class="o">==</span> <span class="nx">id</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// I just got the lock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">return</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;new leader elected: %s&#34;</span><span class="p">,</span> <span class="nx">identity</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>到这里，我们了解了锁的概念和如何启动一个锁，下面看下，client-go都提供了那些锁。</p>
<p>在代码 <a href="tools/leaderelection/resourcelock/interface.go">tools/leaderelection/resourcelock/interface.go</a> 定义了一个锁抽象，interface提供了一个通用接口，用于锁定leader选举中使用的资源。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Interface</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Get 返回选举记录
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">LeaderElectionRecord</span><span class="p">,</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Create 创建一个LeaderElectionRecord
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Create</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">ler</span> <span class="nx">LeaderElectionRecord</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Update will update and existing LeaderElectionRecord
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Update</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">ler</span> <span class="nx">LeaderElectionRecord</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// RecordEvent is used to record events
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">RecordEvent</span><span class="p">(</span><span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Identity 返回锁的标识
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Identity</span><span class="p">()</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Describe is used to convert details on current resource lock into a string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Describe</span><span class="p">()</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>那么实现这个抽象接口的就是，实现的资源锁，我们可以看到，client-go提供了四种资源锁</p>
<ul>
<li>leaselock</li>
<li>configmaplock</li>
<li>multilock</li>
<li>endpointlock</li>
</ul>
<h3 id="leaselock">leaselock</h3>
<p>Lease是kubernetes控制平面中的通过ETCD来实现的一个Leases的资源，主要为了提供分布式租约的一种控制机制。相关对这个API的描述可以参考于：<a href="https://kubernetes.io/docs/reference/kubernetes-api/cluster-resources/lease-v1/">Lease</a> 。</p>
<p>在Kubernetes集群中，我们可以使用如下命令来查看对应的lease</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl get leases -A
</span></span><span class="line"><span class="cl">NAMESPACE         NAME                      HOLDER                                                AGE
</span></span><span class="line"><span class="cl">kube-node-lease   master-machine            master-machine                                        3d19h
</span></span><span class="line"><span class="cl">kube-system       kube-controller-manager   master-machine_06730140-a503-487d-850b-1fe1619f1fe1   3d19h
</span></span><span class="line"><span class="cl">kube-system       kube-scheduler            master-machine_1724e2d9-c19c-48d7-ae47-ee4217b27073   3d19h
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ kubectl describe leases kube-controller-manager -n kube-system
</span></span><span class="line"><span class="cl">Name:         kube-controller-manager
</span></span><span class="line"><span class="cl">Namespace:    kube-system
</span></span><span class="line"><span class="cl">Labels:       &lt;none&gt;
</span></span><span class="line"><span class="cl">Annotations:  &lt;none&gt;
</span></span><span class="line"><span class="cl">API Version:  coordination.k8s.io/v1
</span></span><span class="line"><span class="cl">Kind:         Lease
</span></span><span class="line"><span class="cl">Metadata:
</span></span><span class="line"><span class="cl">  Creation Timestamp:  2022-06-24T11:01:51Z
</span></span><span class="line"><span class="cl">  Managed Fields:
</span></span><span class="line"><span class="cl">    API Version:  coordination.k8s.io/v1
</span></span><span class="line"><span class="cl">    Fields Type:  FieldsV1
</span></span><span class="line"><span class="cl">    fieldsV1:
</span></span><span class="line"><span class="cl">      f:spec:
</span></span><span class="line"><span class="cl">        f:acquireTime:
</span></span><span class="line"><span class="cl">        f:holderIdentity:
</span></span><span class="line"><span class="cl">        f:leaseDurationSeconds:
</span></span><span class="line"><span class="cl">        f:leaseTransitions:
</span></span><span class="line"><span class="cl">        f:renewTime:
</span></span><span class="line"><span class="cl">    Manager:         kube-controller-manager
</span></span><span class="line"><span class="cl">    Operation:       Update
</span></span><span class="line"><span class="cl">    Time:            2022-06-24T11:01:51Z
</span></span><span class="line"><span class="cl">  Resource Version:  <span class="m">56012</span>
</span></span><span class="line"><span class="cl">  Self Link:         /apis/coordination.k8s.io/v1/namespaces/kube-system/leases/kube-controller-manager
</span></span><span class="line"><span class="cl">  UID:               851a32d2-25dc-49b6-a3f7-7a76f152f071
</span></span><span class="line"><span class="cl">Spec:
</span></span><span class="line"><span class="cl">  Acquire Time:            2022-06-27T15:30:46.000000Z
</span></span><span class="line"><span class="cl">  Holder Identity:         master-machine_06730140-a503-487d-850b-1fe1619f1fe1
</span></span><span class="line"><span class="cl">  Lease Duration Seconds:  <span class="m">15</span>
</span></span><span class="line"><span class="cl">  Lease Transitions:       <span class="m">2</span>
</span></span><span class="line"><span class="cl">  Renew Time:              2022-06-28T06:09:26.837773Z
</span></span><span class="line"><span class="cl">Events:                    &lt;none&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>下面来看下leaselock的实现，leaselock会实现了作为资源锁的抽象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">LeaseLock</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// LeaseMeta 就是类似于其他资源类型的属性，包含name ns 以及其他关于lease的属性
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">LeaseMeta</span>  <span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMeta</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Client</span>     <span class="nx">coordinationv1client</span><span class="p">.</span><span class="nx">LeasesGetter</span> <span class="c1">// Client 就是提供了informer中的功能
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// lockconfig包含上面通过 describe 看到的 Identity与recoder用于记录资源锁的更改
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">LockConfig</span> <span class="nx">ResourceLockConfig</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// lease 就是 API中的Lease资源，可以参考下上面给出的这个API的使用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">lease</span>      <span class="o">*</span><span class="nx">coordinationv1</span><span class="p">.</span><span class="nx">Lease</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>下面来看下leaselock实现了那些方法？</p>
<h4 id="get">Get</h4>
<p><a href="https://github.com/kubernetes/client-go/blob/cab7ba1d4a523956b6395dcbe38620159ac43fef/tools/leaderelection/resourcelock/leaselock.go#L41-L53">Get</a> 是从spec中返回选举的记录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">ll</span> <span class="o">*</span><span class="nx">LeaseLock</span><span class="p">)</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">LeaderElectionRecord</span><span class="p">,</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ll</span><span class="p">.</span><span class="nx">lease</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">ll</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Leases</span><span class="p">(</span><span class="nx">ll</span><span class="p">.</span><span class="nx">LeaseMeta</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">).</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">ll</span><span class="p">.</span><span class="nx">LeaseMeta</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">GetOptions</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">record</span> <span class="o">:=</span> <span class="nf">LeaseSpecToLeaderElectionRecord</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ll</span><span class="p">.</span><span class="nx">lease</span><span class="p">.</span><span class="nx">Spec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">recordByte</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="o">*</span><span class="nx">record</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">record</span><span class="p">,</span> <span class="nx">recordByte</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 可以看出是返回这个资源spec里面填充的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">LeaseSpecToLeaderElectionRecord</span><span class="p">(</span><span class="nx">spec</span> <span class="o">*</span><span class="nx">coordinationv1</span><span class="p">.</span><span class="nx">LeaseSpec</span><span class="p">)</span> <span class="o">*</span><span class="nx">LeaderElectionRecord</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">r</span> <span class="nx">LeaderElectionRecord</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">spec</span><span class="p">.</span><span class="nx">HolderIdentity</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">r</span><span class="p">.</span><span class="nx">HolderIdentity</span> <span class="p">=</span> <span class="o">*</span><span class="nx">spec</span><span class="p">.</span><span class="nx">HolderIdentity</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">spec</span><span class="p">.</span><span class="nx">LeaseDurationSeconds</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">r</span><span class="p">.</span><span class="nx">LeaseDurationSeconds</span> <span class="p">=</span> <span class="nb">int</span><span class="p">(</span><span class="o">*</span><span class="nx">spec</span><span class="p">.</span><span class="nx">LeaseDurationSeconds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">spec</span><span class="p">.</span><span class="nx">LeaseTransitions</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">r</span><span class="p">.</span><span class="nx">LeaderTransitions</span> <span class="p">=</span> <span class="nb">int</span><span class="p">(</span><span class="o">*</span><span class="nx">spec</span><span class="p">.</span><span class="nx">LeaseTransitions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">spec</span><span class="p">.</span><span class="nx">AcquireTime</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">r</span><span class="p">.</span><span class="nx">AcquireTime</span> <span class="p">=</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">Time</span><span class="p">{</span><span class="nx">spec</span><span class="p">.</span><span class="nx">AcquireTime</span><span class="p">.</span><span class="nx">Time</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">spec</span><span class="p">.</span><span class="nx">RenewTime</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">r</span><span class="p">.</span><span class="nx">RenewTime</span> <span class="p">=</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">Time</span><span class="p">{</span><span class="nx">spec</span><span class="p">.</span><span class="nx">RenewTime</span><span class="p">.</span><span class="nx">Time</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">r</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="create">Create</h4>
<p><a href="https://github.com/kubernetes/client-go/blob/cab7ba1d4a523956b6395dcbe38620159ac43fef/tools/leaderelection/resourcelock/leaselock.go#L56-L66">Create</a> 是在kubernetes集群中尝试去创建一个租约，可以看到，Client就是API提供的对应资源的REST客户端，结果会在Kubernetes集群中创建这个Lease</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">ll</span> <span class="o">*</span><span class="nx">LeaseLock</span><span class="p">)</span> <span class="nf">Create</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">ler</span> <span class="nx">LeaderElectionRecord</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ll</span><span class="p">.</span><span class="nx">lease</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">ll</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Leases</span><span class="p">(</span><span class="nx">ll</span><span class="p">.</span><span class="nx">LeaseMeta</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">).</span><span class="nf">Create</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">coordinationv1</span><span class="p">.</span><span class="nx">Lease</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ObjectMeta</span><span class="p">:</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMeta</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Name</span><span class="p">:</span>      <span class="nx">ll</span><span class="p">.</span><span class="nx">LeaseMeta</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Namespace</span><span class="p">:</span> <span class="nx">ll</span><span class="p">.</span><span class="nx">LeaseMeta</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Spec</span><span class="p">:</span> <span class="nf">LeaderElectionRecordToLeaseSpec</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ler</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">CreateOptions</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="update">Update</h4>
<p><a href="https://github.com/kubernetes/client-go/blob/cab7ba1d4a523956b6395dcbe38620159ac43fef/tools/leaderelection/resourcelock/leaselock.go#L69-L82">Update</a> 是更新Lease的spec</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">ll</span> <span class="o">*</span><span class="nx">LeaseLock</span><span class="p">)</span> <span class="nf">Update</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">ler</span> <span class="nx">LeaderElectionRecord</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">ll</span><span class="p">.</span><span class="nx">lease</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;lease not initialized, call get or create first&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ll</span><span class="p">.</span><span class="nx">lease</span><span class="p">.</span><span class="nx">Spec</span> <span class="p">=</span> <span class="nf">LeaderElectionRecordToLeaseSpec</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">ler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">lease</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ll</span><span class="p">.</span><span class="nx">Client</span><span class="p">.</span><span class="nf">Leases</span><span class="p">(</span><span class="nx">ll</span><span class="p">.</span><span class="nx">LeaseMeta</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">).</span><span class="nf">Update</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">ll</span><span class="p">.</span><span class="nx">lease</span><span class="p">,</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">UpdateOptions</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ll</span><span class="p">.</span><span class="nx">lease</span> <span class="p">=</span> <span class="nx">lease</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="recordevent">RecordEvent</h4>
<p><a href="https://github.com/kubernetes/client-go/blob/cab7ba1d4a523956b6395dcbe38620159ac43fef/tools/leaderelection/resourcelock/leaselock.go#L85-L95">RecordEvent</a> 是记录选举时出现的事件，这时候我们回到上部分 在kubernetes集群中查看 ep 的信息时可以看到的event中存在 <code>became leader</code> 的事件，这里就是将产生的这个event添加到 <code>meta-data</code> 中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">func (ll *LeaseLock) RecordEvent(s string) {
</span></span><span class="line"><span class="cl">   if ll.LockConfig.EventRecorder == nil {
</span></span><span class="line"><span class="cl">      return
</span></span><span class="line"><span class="cl">   }
</span></span><span class="line"><span class="cl">   events := fmt.Sprintf(&#34;%v %v&#34;, ll.LockConfig.Identity, s)
</span></span><span class="line"><span class="cl">   subject := &amp;coordinationv1.Lease{ObjectMeta: ll.lease.ObjectMeta}
</span></span><span class="line"><span class="cl">   // Populate the type meta, so we don&#39;t have to get it from the schema
</span></span><span class="line"><span class="cl">   subject.Kind = &#34;Lease&#34;
</span></span><span class="line"><span class="cl">   subject.APIVersion = coordinationv1.SchemeGroupVersion.String()
</span></span><span class="line"><span class="cl">   ll.LockConfig.EventRecorder.Eventf(subject, corev1.EventTypeNormal, &#34;LeaderElection&#34;, events)
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>到这里大致上了解了资源锁究竟是什么了，其他种类的资源锁也是相同的实现的方式，这里就不过多阐述了；下面的我们来看看选举的过程。</p>
<h3 id="election-workflow">election workflow</h3>
<p>选举的代码入口是在 <a href="https://github.com/kubernetes/client-go/blob/v0.24.0/tools/leaderelection/leaderelection.go">leaderelection.go</a> ，这里会继续上面的 example 向下分析整个选举的过程。</p>
<p>前面我们看到了进入选举的入口是一个 <a href="https://github.com/kubernetes/client-go/blob/cab7ba1d4a523956b6395dcbe38620159ac43fef/examples/leader-election/main.go#L122">RunOrDie()</a> 的函数，那么就继续从这里开始来了解。进入 RunOrDie，看到其实只有几行而已，大致上了解到了RunOrDie会使用提供的配置来启动选举的客户端，之后会阻塞，直到 ctx 退出，或停止持有leader的租约。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">RunOrDie</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">lec</span> <span class="nx">LeaderElectionConfig</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">le</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">NewLeaderElector</span><span class="p">(</span><span class="nx">lec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">lec</span><span class="p">.</span><span class="nx">WatchDog</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lec</span><span class="p">.</span><span class="nx">WatchDog</span><span class="p">.</span><span class="nf">SetLeaderElection</span><span class="p">(</span><span class="nx">le</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">le</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>下面看下 <a href="https://github.com/kubernetes/client-go/blob/cab7ba1d4a523956b6395dcbe38620159ac43fef/tools/leaderelection/leaderelection.go#L77-L110">NewLeaderElector</a> 做了些什么？可以看到，LeaderElector是一个结构体，这里只是创建他，这个结构体提供了我们选举中所需要的一切（LeaderElector就是RunOrDie创建的选举客户端）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewLeaderElector</span><span class="p">(</span><span class="nx">lec</span> <span class="nx">LeaderElectionConfig</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">LeaderElector</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">lec</span><span class="p">.</span><span class="nx">LeaseDuration</span> <span class="o">&lt;=</span> <span class="nx">lec</span><span class="p">.</span><span class="nx">RenewDeadline</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;leaseDuration must be greater than renewDeadline&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">lec</span><span class="p">.</span><span class="nx">RenewDeadline</span> <span class="o">&lt;=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="nx">JitterFactor</span><span class="o">*</span><span class="nb">float64</span><span class="p">(</span><span class="nx">lec</span><span class="p">.</span><span class="nx">RetryPeriod</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;renewDeadline must be greater than retryPeriod*JitterFactor&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">lec</span><span class="p">.</span><span class="nx">LeaseDuration</span> <span class="p">&lt;</span> <span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;leaseDuration must be greater than zero&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">lec</span><span class="p">.</span><span class="nx">RenewDeadline</span> <span class="p">&lt;</span> <span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;renewDeadline must be greater than zero&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">lec</span><span class="p">.</span><span class="nx">RetryPeriod</span> <span class="p">&lt;</span> <span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;retryPeriod must be greater than zero&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">lec</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnStartedLeading</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;OnStartedLeading callback must not be nil&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">lec</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nx">OnStoppedLeading</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;OnStoppedLeading callback must not be nil&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">lec</span><span class="p">.</span><span class="nx">Lock</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Lock must not be nil.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">le</span> <span class="o">:=</span> <span class="nx">LeaderElector</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">config</span><span class="p">:</span>  <span class="nx">lec</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">clock</span><span class="p">:</span>   <span class="nx">clock</span><span class="p">.</span><span class="nx">RealClock</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">metrics</span><span class="p">:</span> <span class="nx">globalMetricsFactory</span><span class="p">.</span><span class="nf">newLeaderMetrics</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">le</span><span class="p">.</span><span class="nx">metrics</span><span class="p">.</span><span class="nf">leaderOff</span><span class="p">(</span><span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">le</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/kubernetes/client-go/blob/cab7ba1d4a523956b6395dcbe38620159ac43fef/tools/leaderelection/leaderelection.go#L177-L195">LeaderElector</a> 是建立的选举客户端，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">LeaderElector</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">config</span> <span class="nx">LeaderElectionConfig</span> <span class="c1">// 这个的配置，包含一些时间参数，健康检查
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// recoder相关属性
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">observedRecord</span>    <span class="nx">rl</span><span class="p">.</span><span class="nx">LeaderElectionRecord</span>
</span></span><span class="line"><span class="cl">	<span class="nx">observedRawRecord</span> <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">	<span class="nx">observedTime</span>      <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// used to implement OnNewLeader(), may lag slightly from the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// value observedRecord.HolderIdentity if the transition has
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// not yet been reported.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">reportedLeader</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// clock is wrapper around time to allow for less flaky testing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">clock</span> <span class="nx">clock</span><span class="p">.</span><span class="nx">Clock</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 锁定 observedRecord
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">observedRecordLock</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metrics</span> <span class="nx">leaderMetricsAdapter</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到 Run 实现的选举逻辑就是在初始化客户端时传入的 三个 callback</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">le</span> <span class="o">*</span><span class="nx">LeaderElector</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">runtime</span><span class="p">.</span><span class="nf">HandleCrash</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// 退出时执行callbacke的OnStoppedLeading
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnStoppedLeading</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">le</span><span class="p">.</span><span class="nf">acquire</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Callbacks</span><span class="p">.</span><span class="nf">OnStartedLeading</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span> <span class="c1">// 选举时，执行 OnStartedLeading
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">le</span><span class="p">.</span><span class="nf">renew</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在 Run 中调用了 acquire，这个是 通过一个loop去调用 tryAcquireOrRenew，直到ctx传递过来结束信号</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">le</span> <span class="o">*</span><span class="nx">LeaderElector</span><span class="p">)</span> <span class="nf">acquire</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">succeeded</span> <span class="o">:=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="nx">desc</span> <span class="o">:=</span> <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Lock</span><span class="p">.</span><span class="nf">Describe</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;attempting to acquire leader lease %v...&#34;</span><span class="p">,</span> <span class="nx">desc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// jitterUntil是执行定时的函数 func() 是定时任务的逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// RetryPeriod是周期间隔
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// JitterFactor 是重试系数，类似于延迟队列中的系数 （duration + maxFactor * duration）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// sliding 逻辑是否计算在时间内
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 上下文传递
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">wait</span><span class="p">.</span><span class="nf">JitterUntil</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">succeeded</span> <span class="p">=</span> <span class="nx">le</span><span class="p">.</span><span class="nf">tryAcquireOrRenew</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">le</span><span class="p">.</span><span class="nf">maybeReportTransition</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">succeeded</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;failed to acquire lease %v&#34;</span><span class="p">,</span> <span class="nx">desc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Lock</span><span class="p">.</span><span class="nf">RecordEvent</span><span class="p">(</span><span class="s">&#34;became leader&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">le</span><span class="p">.</span><span class="nx">metrics</span><span class="p">.</span><span class="nf">leaderOn</span><span class="p">(</span><span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;successfully acquired lease %v&#34;</span><span class="p">,</span> <span class="nx">desc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">RetryPeriod</span><span class="p">,</span> <span class="nx">JitterFactor</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">succeeded</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里实际上选举动作在 tryAcquireOrRenew 中，下面来看下tryAcquireOrRenew；tryAcquireOrRenew 是尝试获得一个leader租约，如果已经获得到了，则更新租约；否则可以得到租约则为true，反之false</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">le</span> <span class="o">*</span><span class="nx">LeaderElector</span><span class="p">)</span> <span class="nf">tryAcquireOrRenew</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">now</span> <span class="o">:=</span> <span class="nx">metav1</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span> <span class="c1">// 时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">leaderElectionRecord</span> <span class="o">:=</span> <span class="nx">rl</span><span class="p">.</span><span class="nx">LeaderElectionRecord</span><span class="p">{</span> <span class="c1">// 构建一个选举record
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">HolderIdentity</span><span class="p">:</span>       <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Lock</span><span class="p">.</span><span class="nf">Identity</span><span class="p">(),</span> <span class="c1">// 选举人的身份特征，ep与主机名有关
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">LeaseDurationSeconds</span><span class="p">:</span> <span class="nb">int</span><span class="p">(</span><span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">LeaseDuration</span> <span class="o">/</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">),</span> <span class="c1">// 默认15s
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">RenewTime</span><span class="p">:</span>            <span class="nx">now</span><span class="p">,</span> <span class="c1">// 重新获取时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">AcquireTime</span><span class="p">:</span>          <span class="nx">now</span><span class="p">,</span> <span class="c1">// 获得时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 1. 从API获取或创建一个recode，如果可以拿到则已经有租约，反之创建新租约
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">oldLeaderElectionRecord</span><span class="p">,</span> <span class="nx">oldLeaderElectionRawRecord</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Lock</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">errors</span><span class="p">.</span><span class="nf">IsNotFound</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;error retrieving resource lock %v: %v&#34;</span><span class="p">,</span> <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Lock</span><span class="p">.</span><span class="nf">Describe</span><span class="p">(),</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 创建租约的动作就是新建一个对应的resource，这个lock就是leaderelection提供的四种锁，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// 看你在runOrDie中初始化传入了什么锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Lock</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">leaderElectionRecord</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;error initially creating leader election record: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 到了这里就已经拿到或者创建了租约，然后记录其一些属性，LeaderElectionRecord
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">le</span><span class="p">.</span><span class="nf">setObservedRecord</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">leaderElectionRecord</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 2. 获取记录检查身份和时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">!</span><span class="nx">bytes</span><span class="p">.</span><span class="nf">Equal</span><span class="p">(</span><span class="nx">le</span><span class="p">.</span><span class="nx">observedRawRecord</span><span class="p">,</span> <span class="nx">oldLeaderElectionRawRecord</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">le</span><span class="p">.</span><span class="nf">setObservedRecord</span><span class="p">(</span><span class="nx">oldLeaderElectionRecord</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">le</span><span class="p">.</span><span class="nx">observedRawRecord</span> <span class="p">=</span> <span class="nx">oldLeaderElectionRawRecord</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">oldLeaderElectionRecord</span><span class="p">.</span><span class="nx">HolderIdentity</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">		<span class="nx">le</span><span class="p">.</span><span class="nx">observedTime</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">LeaseDuration</span><span class="p">).</span><span class="nf">After</span><span class="p">(</span><span class="nx">now</span><span class="p">.</span><span class="nx">Time</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">		<span class="p">!</span><span class="nx">le</span><span class="p">.</span><span class="nf">IsLeader</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// 不是leader，进行HolderIdentity比较，再加上时间，这个时候没有到竞选其，跳出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;lock is held by %v and has not yet expired&#34;</span><span class="p">,</span> <span class="nx">oldLeaderElectionRecord</span><span class="p">.</span><span class="nx">HolderIdentity</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 3.我们将尝试更新。 在这里leaderElectionRecord设置为默认值。让我们在更新之前更正它。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">le</span><span class="p">.</span><span class="nf">IsLeader</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// 到这就说明是leader，修正他的时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">leaderElectionRecord</span><span class="p">.</span><span class="nx">AcquireTime</span> <span class="p">=</span> <span class="nx">oldLeaderElectionRecord</span><span class="p">.</span><span class="nx">AcquireTime</span>
</span></span><span class="line"><span class="cl">		<span class="nx">leaderElectionRecord</span><span class="p">.</span><span class="nx">LeaderTransitions</span> <span class="p">=</span> <span class="nx">oldLeaderElectionRecord</span><span class="p">.</span><span class="nx">LeaderTransitions</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="c1">// LeaderTransitions 就是指leader调整（转变为其他）了几次，如果是，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// 则为发生转变，保持原有值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// 反之，则+1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">leaderElectionRecord</span><span class="p">.</span><span class="nx">LeaderTransitions</span> <span class="p">=</span> <span class="nx">oldLeaderElectionRecord</span><span class="p">.</span><span class="nx">LeaderTransitions</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 完事之后更新APIServer中的锁资源，也就是更新对应的资源的属性信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">le</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Lock</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">leaderElectionRecord</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;Failed to update lock: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// setObservedRecord 是通过一个新的record来更新这个锁中的record
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 操作是安全的，会上锁保证临界区仅可以被一个线程/进程操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">le</span><span class="p">.</span><span class="nf">setObservedRecord</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">leaderElectionRecord</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="summary">summary</h2>
<p>到这里，已经完整知道利用kubernetes进行选举的流程都是什么了；下面简单回顾下，上述leader选举所有的步骤：</p>
<ul>
<li>首选创建的服务就是该服务的leader，锁可以为 <code>lease</code> , <code>endpoint</code> 等资源进行上锁</li>
<li>已经是leader的实例会不断续租，租约的默认值是15秒 （<code>leaseDuration</code>）；leader在租约满时更新租约时间（<code>renewTime</code>）。</li>
<li>其他的follower，会不断检查对应资源锁的存在，如果已经有leader，那么则检查 <code>renewTime</code>，如果超过了租用时间（），则表明leader存在问题需要重新启动选举，直到有follower提升为leader。</li>
<li>而为了避免资源被抢占，Kubernetes API使用了 <code>ResourceVersion</code> 来避免被重复修改（如果版本号与请求版本号不一致，则表示已经被修改了，那么APIServer将返回错误）</li>
</ul>
<blockquote>
<p>Reference</p>
<p><a href="https://juejin.cn/post/6844903709336420360">Kubernetes 并发控制与数据一致性的实现原理</a></p>
<p><a href="http://liubin.org/blog/2018/04/28/how-to-build-controller-manager-high-available/">Controller manager 的高可用实现方式</a></p>
<p><a href="https://medium.com/michaelbi-22303/deep-dive-into-kubernetes-simple-leader-election-3712a8be3a99">deep dive into kubernetes simple leader election</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>源码分析Kubernetes controller组件 - controller-runtime</title>
      <link>https://www.oomkill.com/2022/06/ch15-controller-runtime/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/06/ch15-controller-runtime/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p><a href="https://github.com/kubernetes-sigs/controller-runtime">controller-runtime</a> 是 Kubernetes 社区提供可供快速搭建一套  实现了controller 功能的工具，无需自行实现Controller的功能了；在 <code>Kubebuilder</code>  与  <code>Operator SDK</code> 也是使用 <code>controller-runtime</code> 。本文将对 <code>controller-runtime</code> 的工作原理以及在不同场景下的使用方式进行简要的总结和介绍。</p>
<h2 id="controller-runtime-structure">controller-runtime structure</h2>
<p><code>controller-runtime</code> 主要组成是需要用户创建的 <code>Manager</code> 和 <code>Reconciler</code> 以及 <code>Controller Runtime</code> 自己启动的 <code>Cache</code> 和 <code>Controller </code>。</p>
<ul>
<li><strong>Manager</strong>：是用户在初始化时创建的，用于启动 <code>Controller Runtime</code> 组件</li>
<li><strong>Reconciler</strong>：是用户需要提供来处理自己的业务逻辑的组件（即在通过 <code>code-generator</code> 生成的api-like而实现的controller中的业务处理部分）。</li>
<li><strong>Cache</strong>：一个缓存，用来建立 <code>Informer</code> 到 <code>ApiServer </code>的连接来监听资源并将被监听的对象推送到queue中。</li>
<li><strong>Controller</strong>： 一方面向 Informer 注册 <code>eventHandler</code>，另一方面从队列中获取数据。controller 将从队列中获取数据并执行用户自定义的 <code>Reconciler</code> 功能。</li>
</ul>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220625221632675.png" alt="image-20220625221632675"  /></p>
<center>图：controller-runtime structure</center>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220625221548958.png" alt="image-20220625221548958"  /></p>
<center>图：controller-runtime flowchart</center>
<p>由图可知，Controller会向 Informer 注册一些列eventHandler；然后Cache启动Informer（informer属于cache包中），与ApiServer建立监听；当Informer检测到资源变化时，将对象加入queue，Controller 将元素取出并在用户端执行 Reconciler。</p>
<h2 id="controller引入">Controller引入</h2>
<p>我们从 controller-rumtime项目的 <a href="https://github.com/kubernetes-sigs/controller-runtime/blob/master/examples/crd/main.go">example</a> 进行引入看下，整个架构都是如何实现的。</p>
<p>可以看到 example 下的实际上实现了一个 <code>reconciler </code> 的结构体，实现了 <code>Reconciler</code> 抽象和 <code>Client</code> 结构体</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">reconciler</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span><span class="p">.</span><span class="nx">Client</span>
</span></span><span class="line"><span class="cl">	<span class="nx">scheme</span> <span class="o">*</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Scheme</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>那么来看下 抽象的 Reconciler 是什么，可以看到就是抽象了 <code>Reconcile </code>方法，这个是具体处理的逻辑过程</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Reconciler</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Reconcile</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">Request</span><span class="p">)</span> <span class="p">(</span><span class="nx">Result</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>下面在看下谁来实现了这个 Reconciler 抽象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Controller</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">reconcile</span><span class="p">.</span><span class="nx">Reconciler</span> <span class="c1">// 协调的具体步骤，通过ns/name\
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 通过predicates来评估来源数据，并加入queue中（放入队列的是reconcile.Requests）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Watch</span><span class="p">(</span><span class="nx">src</span> <span class="nx">source</span><span class="p">.</span><span class="nx">Source</span><span class="p">,</span> <span class="nx">eventhandler</span> <span class="nx">handler</span><span class="p">.</span><span class="nx">EventHandler</span><span class="p">,</span> <span class="nx">predicates</span> <span class="o">...</span><span class="nx">predicate</span><span class="p">.</span><span class="nx">Predicate</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 启动controller，类似于自定义的Run()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Start</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="nf">GetLogger</span><span class="p">()</span> <span class="nx">logr</span><span class="p">.</span><span class="nx">Logger</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="controller-structure">controller structure</h3>
<p>在 <a href="https://github.com/kubernetes-sigs/controller-runtime/blob/ffd9ec8768b7d2e82aee6b0c76d481a5bdda4075/pkg/internal/controller/controller.go#L42">controller-runtime\pkg\internal\controller\controller.go</a> 中实现了这个 <a href="https://github.com/kubernetes-sigs/controller-runtime/blob/ffd9ec8768b7d2e82aee6b0c76d481a5bdda4075/pkg/controller/controller.go#L66">Controller</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Controller</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span> <span class="kt">string</span> <span class="c1">// controller的标识
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">	<span class="nx">MaxConcurrentReconciles</span> <span class="kt">int</span> <span class="c1">// 并发运行Reconciler的数量，默认1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 实现了reconcile.Reconciler的调节器， 默认DefaultReconcileFunc
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Do</span> <span class="nx">reconcile</span><span class="p">.</span><span class="nx">Reconciler</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// makeQueue会构建一个对应的队列，就是返回一个限速队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">MakeQueue</span> <span class="kd">func</span><span class="p">()</span> <span class="nx">workqueue</span><span class="p">.</span><span class="nx">RateLimitingInterface</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// MakeQueue创造出来的，在出入队列就是操作的这个
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Queue</span> <span class="nx">workqueue</span><span class="p">.</span><span class="nx">RateLimitingInterface</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 用于注入其他内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 已弃用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">SetFields</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">mu</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 标识开始的状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Started</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 在启动时传递的上下文，用于停止控制器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 等待缓存同步的时间 默认2分钟
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">CacheSyncTimeout</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 维护了eventHandler predicates，在控制器启动时启动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">startWatches</span> <span class="p">[]</span><span class="nx">watchDescription</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 日志构建器，输出入日志
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">LogConstructor</span> <span class="kd">func</span><span class="p">(</span><span class="nx">request</span> <span class="o">*</span><span class="nx">reconcile</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="nx">logr</span><span class="p">.</span><span class="nx">Logger</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// RecoverPanic为是否对reconcile引起的panic恢复
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">RecoverPanic</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>看完了controller的structure，接下来看看controller是如何使用的</p>
<h3 id="injection">injection</h3>
<p><a href="https://github.com/kubernetes-sigs/controller-runtime/blob/ffd9ec8768b7d2e82aee6b0c76d481a5bdda4075/pkg/internal/controller/controller.go#L125-L152">Controller.Watch</a> 实现了注入的动作，可以看到 <code>watch()</code> 通过参数将 对应的事件函数传入到内部</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">Watch</span><span class="p">(</span><span class="nx">src</span> <span class="nx">source</span><span class="p">.</span><span class="nx">Source</span><span class="p">,</span> <span class="nx">evthdler</span> <span class="nx">handler</span><span class="p">.</span><span class="nx">EventHandler</span><span class="p">,</span> <span class="nx">prct</span> <span class="o">...</span><span class="nx">predicate</span><span class="p">.</span><span class="nx">Predicate</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">c</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 使用SetFields来完成注入操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">SetFields</span><span class="p">(</span><span class="nx">src</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">SetFields</span><span class="p">(</span><span class="nx">evthdler</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">pr</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">prct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">SetFields</span><span class="p">(</span><span class="nx">pr</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 如果Controller还未启动，那么将这些动作缓存到本地
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">Started</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">startWatches</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">startWatches</span><span class="p">,</span> <span class="nx">watchDescription</span><span class="p">{</span><span class="nx">src</span><span class="p">:</span> <span class="nx">src</span><span class="p">,</span> <span class="nx">handler</span><span class="p">:</span> <span class="nx">evthdler</span><span class="p">,</span> <span class="nx">predicates</span><span class="p">:</span> <span class="nx">prct</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nf">LogConstructor</span><span class="p">(</span><span class="kc">nil</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Starting EventSource&#34;</span><span class="p">,</span> <span class="s">&#34;source&#34;</span><span class="p">,</span> <span class="nx">src</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">src</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">evthdler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span><span class="p">,</span> <span class="nx">prct</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>启动操作实际上为informer注入事件函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Source</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// start 是Controller 调用，用以向 Informer 注册 EventHandler， 将 reconcile.Requests（一个入队列的动作） 排入队列。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Start</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">handler</span><span class="p">.</span><span class="nx">EventHandler</span><span class="p">,</span> <span class="nx">workqueue</span><span class="p">.</span><span class="nx">RateLimitingInterface</span><span class="p">,</span> <span class="o">...</span><span class="nx">predicate</span><span class="p">.</span><span class="nx">Predicate</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">is</span> <span class="o">*</span><span class="nx">Informer</span><span class="p">)</span> <span class="nf">Start</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">handler</span> <span class="nx">handler</span><span class="p">.</span><span class="nx">EventHandler</span><span class="p">,</span> <span class="nx">queue</span> <span class="nx">workqueue</span><span class="p">.</span><span class="nx">RateLimitingInterface</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">prct</span> <span class="o">...</span><span class="nx">predicate</span><span class="p">.</span><span class="nx">Predicate</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Informer should have been specified by the user.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">is</span><span class="p">.</span><span class="nx">Informer</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;must specify Informer.Informer&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">is</span><span class="p">.</span><span class="nx">Informer</span><span class="p">.</span><span class="nf">AddEventHandler</span><span class="p">(</span><span class="nx">internal</span><span class="p">.</span><span class="nx">EventHandler</span><span class="p">{</span><span class="nx">Queue</span><span class="p">:</span> <span class="nx">queue</span><span class="p">,</span> <span class="nx">EventHandler</span><span class="p">:</span> <span class="nx">handler</span><span class="p">,</span> <span class="nx">Predicates</span><span class="p">:</span> <span class="nx">prct</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们知道对于 eventHandler，实际上应该是一个 <code>onAdd</code>，<code>onUpdate</code> 这种类型的函数，queue则是workqueue，那么 <code>Predicates</code> 是什么呢？</p>
<p>通过追踪可以看到定义了 Predicate 抽象，可以看出Predicate 是Watch到的事件时什么类型的，当对于每个类型的事件，对应的函数就为 true，在 <a href="https://github.com/kubernetes-sigs/controller-runtime/blob/ffd9ec8768b7d2e82aee6b0c76d481a5bdda4075/pkg/source/internal/eventsource.go#L87-L91">eventHandler</a> 中，这些被用作，事件的过滤。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Predicate filters events before enqueuing the keys.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Predicate</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Create returns true if the Create event should be processed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Create</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">CreateEvent</span><span class="p">)</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Delete returns true if the Delete event should be processed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Delete</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">DeleteEvent</span><span class="p">)</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Update returns true if the Update event should be processed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Update</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">UpdateEvent</span><span class="p">)</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Generic returns true if the Generic event should be processed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Generic</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">GenericEvent</span><span class="p">)</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在对应的动作中，可以看到这里作为过滤操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="nx">EventHandler</span><span class="p">)</span> <span class="nf">OnAdd</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span> <span class="o">:=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">CreateEvent</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Pull Object out of the object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">o</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">obj</span><span class="p">.(</span><span class="nx">client</span><span class="p">.</span><span class="nx">Object</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">Object</span> <span class="p">=</span> <span class="nx">o</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;OnAdd missing Object&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="s">&#34;object&#34;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">,</span> <span class="s">&#34;type&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%T&#34;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">p</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Predicates</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">p</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Invoke create handler
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">e</span><span class="p">.</span><span class="nx">EventHandler</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Queue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面就看到了，对应是 <code>EventHandler.Create</code> 进行添加的，那么这些动作具体是在做什么呢？</p>
<p>在代码 <a href="https://github.com/kubernetes-sigs/controller-runtime/tree/master/pkg/handler">pkg/handler</a> ,可以看到这些操作，类似于create，这里将ns/name放入到队列中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">e</span> <span class="o">*</span><span class="nx">EnqueueRequestForObject</span><span class="p">)</span> <span class="nf">Create</span><span class="p">(</span><span class="nx">evt</span> <span class="nx">event</span><span class="p">.</span><span class="nx">CreateEvent</span><span class="p">,</span> <span class="nx">q</span> <span class="nx">workqueue</span><span class="p">.</span><span class="nx">RateLimitingInterface</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">evt</span><span class="p">.</span><span class="nx">Object</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">enqueueLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;CreateEvent received with no metadata&#34;</span><span class="p">,</span> <span class="s">&#34;event&#34;</span><span class="p">,</span> <span class="nx">evt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">q</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">reconcile</span><span class="p">.</span><span class="nx">Request</span><span class="p">{</span><span class="nx">NamespacedName</span><span class="p">:</span> <span class="nx">types</span><span class="p">.</span><span class="nx">NamespacedName</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Name</span><span class="p">:</span>      <span class="nx">evt</span><span class="p">.</span><span class="nx">Object</span><span class="p">.</span><span class="nf">GetName</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Namespace</span><span class="p">:</span> <span class="nx">evt</span><span class="p">.</span><span class="nx">Object</span><span class="p">.</span><span class="nf">GetNamespace</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="unqueue">unqueue</h3>
<p>上面看到了，入队的动作实际上都是将 <code>ns/name</code> 加入到队列中，那么出队列时又做了些什么呢？</p>
<p>通过 <code>controller.Start()</code>  可以看到controller在启动后都做了些什么动作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">Start</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Started</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;controller was started more than once. This is likely to be caused by being added to a manager multiple times&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nf">initMetrics</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Set the internal context.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span><span class="p">.</span><span class="nx">ctx</span> <span class="p">=</span> <span class="nx">ctx</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">MakeQueue</span><span class="p">()</span> <span class="c1">// 初始化queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// 退出时，让queue关闭
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span><span class="p">.</span><span class="nf">ShutDown</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">c</span><span class="p">.</span><span class="nx">mu</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleCrash</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 启动informer前，将之前准备好的 evnetHandle predictates source注册
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">watch</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">c</span><span class="p">.</span><span class="nx">startWatches</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">c</span><span class="p">.</span><span class="nf">LogConstructor</span><span class="p">(</span><span class="kc">nil</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Starting EventSource&#34;</span><span class="p">,</span> <span class="s">&#34;source&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s&#34;</span><span class="p">,</span> <span class="nx">watch</span><span class="p">.</span><span class="nx">src</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// 上面我们看过了，start就是真正的注册动作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">watch</span><span class="p">.</span><span class="nx">src</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">watch</span><span class="p">.</span><span class="nx">handler</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span><span class="p">,</span> <span class="nx">watch</span><span class="p">.</span><span class="nx">predicates</span><span class="o">...</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Start the SharedIndexInformer factories to begin populating the SharedIndexInformer caches
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">c</span><span class="p">.</span><span class="nf">LogConstructor</span><span class="p">(</span><span class="kc">nil</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Starting Controller&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		 <span class="c1">// startWatches上面我们也看到了，是evnetHandle predictates source被缓存到里面，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 这里是拿出来将其启动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">watch</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">c</span><span class="p">.</span><span class="nx">startWatches</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">syncingSource</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">watch</span><span class="p">.</span><span class="nx">src</span><span class="p">.(</span><span class="nx">source</span><span class="p">.</span><span class="nx">SyncingSource</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// use a context with timeout for launching sources and syncing caches.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">sourceStartCtx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithTimeout</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">CacheSyncTimeout</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="c1">// WaitForSync waits for a definitive timeout, and returns if there
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// is an error or a timeout
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">syncingSource</span><span class="p">.</span><span class="nf">WaitForSync</span><span class="p">(</span><span class="nx">sourceStartCtx</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">err</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to wait for %s caches to sync: %w&#34;</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">c</span><span class="p">.</span><span class="nf">LogConstructor</span><span class="p">(</span><span class="kc">nil</span><span class="p">).</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Could not wait for Cache to sync&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">			<span class="p">}();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// which won&#39;t be garbage collected if we hold a reference to it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">c</span><span class="p">.</span><span class="nx">startWatches</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// Launch workers to process resources
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">c</span><span class="p">.</span><span class="nf">LogConstructor</span><span class="p">(</span><span class="kc">nil</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Starting workers&#34;</span><span class="p">,</span> <span class="s">&#34;worker count&#34;</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">MaxConcurrentReconciles</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">MaxConcurrentReconciles</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 启动controller消费端的线程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">MaxConcurrentReconciles</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">				<span class="k">for</span> <span class="nx">c</span><span class="p">.</span><span class="nf">processNextWorkItem</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">Started</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span> <span class="c1">// 阻塞，直到上下文关闭
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span><span class="p">.</span><span class="nf">LogConstructor</span><span class="p">(</span><span class="kc">nil</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Shutdown signal received, waiting for all workers to finish&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span> <span class="c1">// 等待所有线程都关闭
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span><span class="p">.</span><span class="nf">LogConstructor</span><span class="p">(</span><span class="kc">nil</span><span class="p">).</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;All workers finished&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过上面的分析，可以看到，每个消费的worker线程，实际上调用的是 <a href="https://github.com/kubernetes-sigs/controller-runtime/blob/ffd9ec8768b7d2e82aee6b0c76d481a5bdda4075/pkg/internal/controller/controller.go#L255-L275">processNextWorkItem</a> 下面就来看看他究竟做了些什么？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">processNextWorkItem</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">obj</span><span class="p">,</span> <span class="nx">shutdown</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span><span class="p">.</span><span class="nf">Get</span><span class="p">()</span> <span class="c1">// 从队列中拿取数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">shutdown</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span><span class="p">.</span><span class="nf">Done</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 下面应该是prometheus指标的一些东西
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ctrlmetrics</span><span class="p">.</span><span class="nx">ActiveWorkers</span><span class="p">.</span><span class="nf">WithLabelValues</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Name</span><span class="p">).</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">ctrlmetrics</span><span class="p">.</span><span class="nx">ActiveWorkers</span><span class="p">.</span><span class="nf">WithLabelValues</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Name</span><span class="p">).</span><span class="nf">Add</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 获得的对象通过reconcileHandler处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span><span class="p">.</span><span class="nf">reconcileHandler</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>那么下面看看 reconcileHandler 做了些什么</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">reconcileHandler</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Update metrics after processing each item
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">reconcileStartTS</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nf">updateMetrics</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Since</span><span class="p">(</span><span class="nx">reconcileStartTS</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 检查下取出的数据是否为reconcile.Request，在之前enqueue时了解到是插入的这个类型的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">req</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">obj</span><span class="p">.(</span><span class="nx">reconcile</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 如果错了就忘记
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span><span class="p">.</span><span class="nf">Forget</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nf">LogConstructor</span><span class="p">(</span><span class="kc">nil</span><span class="p">).</span><span class="nf">Error</span><span class="p">(</span><span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;Queue item was not a Request&#34;</span><span class="p">,</span> <span class="s">&#34;type&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%T&#34;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">),</span> <span class="s">&#34;value&#34;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">log</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">LogConstructor</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">req</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">log</span> <span class="p">=</span> <span class="nx">log</span><span class="p">.</span><span class="nf">WithValues</span><span class="p">(</span><span class="s">&#34;reconcileID&#34;</span><span class="p">,</span> <span class="nx">uuid</span><span class="p">.</span><span class="nf">NewUUID</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span> <span class="p">=</span> <span class="nx">logf</span><span class="p">.</span><span class="nf">IntoContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">log</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 这里调用了自己在实现controller实现的Reconcile的动作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">result</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Reconcile</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">req</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">switch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span><span class="p">.</span><span class="nf">AddRateLimited</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctrlmetrics</span><span class="p">.</span><span class="nx">ReconcileErrors</span><span class="p">.</span><span class="nf">WithLabelValues</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Name</span><span class="p">).</span><span class="nf">Inc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctrlmetrics</span><span class="p">.</span><span class="nx">ReconcileTotal</span><span class="p">.</span><span class="nf">WithLabelValues</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">labelError</span><span class="p">).</span><span class="nf">Inc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Reconciler error&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">result</span><span class="p">.</span><span class="nx">RequeueAfter</span> <span class="p">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span><span class="p">.</span><span class="nf">Forget</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span><span class="p">.</span><span class="nf">AddAfter</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">RequeueAfter</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctrlmetrics</span><span class="p">.</span><span class="nx">ReconcileTotal</span><span class="p">.</span><span class="nf">WithLabelValues</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">labelRequeueAfter</span><span class="p">).</span><span class="nf">Inc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">result</span><span class="p">.</span><span class="nx">Requeue</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span><span class="p">.</span><span class="nf">AddRateLimited</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctrlmetrics</span><span class="p">.</span><span class="nx">ReconcileTotal</span><span class="p">.</span><span class="nf">WithLabelValues</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">labelRequeue</span><span class="p">).</span><span class="nf">Inc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">Queue</span><span class="p">.</span><span class="nf">Forget</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctrlmetrics</span><span class="p">.</span><span class="nx">ReconcileTotal</span><span class="p">.</span><span class="nf">WithLabelValues</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">labelSuccess</span><span class="p">).</span><span class="nf">Inc</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过对example中的 <em>Reconcile</em> 查找其使用，可以看到，调用他的就是上面我们说道的 <code>reconcileHandler</code> ，到这里我们就知道了，controller 的运行流为 <code>Controller.Start()</code> &gt; <code>Controller.processNextWorkItem</code> &gt; <code>Controller.reconcileHandler</code> &gt; <code>Controller.Reconcile</code> 最终到达了我们自定义的业务逻辑处理 Reconcile</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220626231657599.png" alt="image-20220626231657599"  /></p>
<h2 id="manager">Manager</h2>
<p>在上面学习 <code>controller-runtime</code> 时了解到，有一个 <code>Manager</code> 的组件，这个组件是做什么呢？我们来分析下。</p>
<p><code>Manager</code> 是用来创建与启动 <code>controller</code> 的（允许多个 <code>controller</code> 与 一个 <code>manager</code> 关联），Manager会启动分配给他的所有controller，以及其他可启动的对象。</p>
<p>在 <a href="https://github.com/kubernetes-sigs/controller-runtime/blob/ffd9ec8768b7d2e82aee6b0c76d481a5bdda4075/examples/crd/main.go#L104-L145">example</a> 看到，会初始化一个 <code>ctrl.NewManager</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="nx">ctrl</span><span class="p">.</span><span class="nf">SetLogger</span><span class="p">(</span><span class="nx">zap</span><span class="p">.</span><span class="nf">New</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nx">mgr</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nf">NewManager</span><span class="p">(</span><span class="nx">ctrl</span><span class="p">.</span><span class="nf">GetConfigOrDie</span><span class="p">(),</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nx">Options</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">setupLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;unable to start manager&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="c1">// in a real controller, we&#39;d create a new scheme for this
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="nx">err</span> <span class="p">=</span> <span class="nx">api</span><span class="p">.</span><span class="nf">AddToScheme</span><span class="p">(</span><span class="nx">mgr</span><span class="p">.</span><span class="nf">GetScheme</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">setupLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;unable to add scheme&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nx">err</span> <span class="p">=</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nf">NewControllerManagedBy</span><span class="p">(</span><span class="nx">mgr</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">      <span class="nf">For</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">api</span><span class="p">.</span><span class="nx">ChaosPod</span><span class="p">{}).</span>
</span></span><span class="line"><span class="cl">      <span class="nf">Owns</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">corev1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">{}).</span>
</span></span><span class="line"><span class="cl">      <span class="nf">Complete</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">reconciler</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="nx">Client</span><span class="p">:</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">GetClient</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">         <span class="nx">scheme</span><span class="p">:</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">GetScheme</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">setupLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;unable to create controller&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nx">err</span> <span class="p">=</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nf">NewWebhookManagedBy</span><span class="p">(</span><span class="nx">mgr</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">      <span class="nf">For</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">api</span><span class="p">.</span><span class="nx">ChaosPod</span><span class="p">{}).</span>
</span></span><span class="line"><span class="cl">      <span class="nf">Complete</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">setupLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;unable to create webhook&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nx">setupLog</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;starting manager&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">ctrl</span><span class="p">.</span><span class="nf">SetupSignalHandler</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">setupLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;problem running manager&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个 <code>manager</code> 就是  <a href="https://github.com/kubernetes-sigs/controller-runtime/blob/ffd9ec8768b7d2e82aee6b0c76d481a5bdda4075/pkg/manager/manager.go#L52-L97">controller-runtime\pkg\manager\manager.go</a> 下的 <code>Manager</code>， Manager 通过初始化 Caches 和 Clients 等共享依赖，并将它们提供给 Runnables。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Manager</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 提供了与APIServer交互的方式，如incluster，indexer，cache等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cluster</span><span class="p">.</span><span class="nx">Cluster</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Runnable 是任意可允许的cm中的组件，如 webhook，controller，Caches，在new中调用时，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 可以看到是传入的是一个controller，这里可以启动的是带有Start()方法的，通过调用Start()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 来启动组件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">Add</span><span class="p">(</span><span class="nx">Runnable</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// 实现选举方法。当elected关闭，则选举为leader
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Elected</span><span class="p">()</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 这为一些列健康检查和指标的方法，和我们关注的没有太大关系
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">AddMetricsExtraHandler</span><span class="p">(</span><span class="nx">path</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">handler</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="nf">AddHealthzCheck</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">check</span> <span class="nx">healthz</span><span class="p">.</span><span class="nx">Checker</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="nf">AddReadyzCheck</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">check</span> <span class="nx">healthz</span><span class="p">.</span><span class="nx">Checker</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Start将启动所有注册进来的控制器，直到ctx取消。如果有任意controller报错，则立即退出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果使用了 LeaderElection，则必须在此返回后立即退出二进制文件，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Start</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// GetWebhookServer returns a webhook.Server
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">GetWebhookServer</span><span class="p">()</span> <span class="o">*</span><span class="nx">webhook</span><span class="p">.</span><span class="nx">Server</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// GetLogger returns this manager&#39;s logger.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">GetLogger</span><span class="p">()</span> <span class="nx">logr</span><span class="p">.</span><span class="nx">Logger</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// GetControllerOptions returns controller global configuration options.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">GetControllerOptions</span><span class="p">()</span> <span class="nx">v1alpha1</span><span class="p">.</span><span class="nx">ControllerConfigurationSpec</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="controller-manager">controller-manager</h3>
<p><a href="https://github.com/kubernetes-sigs/controller-runtime/blob/ffd9ec8768b7d2e82aee6b0c76d481a5bdda4075/pkg/manager/internal.go#L66-L173">controllerManager</a> 则实现了这个manager的抽象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">controllerManager</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span></span><span class="line"><span class="cl">	<span class="nx">started</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">stopProcedureEngaged</span> <span class="o">*</span><span class="kt">int64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">errChan</span>              <span class="kd">chan</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="nx">runnables</span>            <span class="o">*</span><span class="nx">runnables</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="nx">cluster</span> <span class="nx">cluster</span><span class="p">.</span><span class="nx">Cluster</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// recorderProvider 用于记录eventhandler source predictate
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">recorderProvider</span> <span class="o">*</span><span class="nx">intrec</span><span class="p">.</span><span class="nx">Provider</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// resourceLock forms the basis for leader election
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">resourceLock</span> <span class="nx">resourcelock</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 在退出时是否关闭选举租约
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">leaderElectionReleaseOnCancel</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 一些指标性的，暂时不需要关注
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">metricsListener</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listener</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metricsExtraHandlers</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">http</span><span class="p">.</span><span class="nx">Handler</span>
</span></span><span class="line"><span class="cl">	<span class="nx">healthProbeListener</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Listener</span>
</span></span><span class="line"><span class="cl">	<span class="nx">readinessEndpointName</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">livenessEndpointName</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">readyzHandler</span> <span class="o">*</span><span class="nx">healthz</span><span class="p">.</span><span class="nx">Handler</span>
</span></span><span class="line"><span class="cl">	<span class="nx">healthzHandler</span> <span class="o">*</span><span class="nx">healthz</span><span class="p">.</span><span class="nx">Handler</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 有关controller全局参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">controllerOptions</span> <span class="nx">v1alpha1</span><span class="p">.</span><span class="nx">ControllerConfigurationSpec</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">logger</span> <span class="nx">logr</span><span class="p">.</span><span class="nx">Logger</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 用于关闭 LeaderElection.Run(...) 的信号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">leaderElectionStopped</span> <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 取消选举，在失去选举后，必须延迟到gracefulShutdown之后os.exit()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">leaderElectionCancel</span> <span class="nx">context</span><span class="p">.</span><span class="nx">CancelFunc</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// leader取消选举
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">elected</span> <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">port</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nx">host</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">certDir</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">webhookServer</span> <span class="o">*</span><span class="nx">webhook</span><span class="p">.</span><span class="nx">Server</span>
</span></span><span class="line"><span class="cl">	<span class="nx">webhookServerOnce</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Once</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 非leader节点强制leader的等待时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">leaseDuration</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// renewDeadline is the duration that the acting controlplane will retry
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// refreshing leadership before giving up.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">renewDeadline</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// LeaderElector重新操作的时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">retryPeriod</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// gracefulShutdownTimeout 是在manager停止之前让runnables停止的持续时间。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">gracefulShutdownTimeout</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// onStoppedLeading is callled when the leader election lease is lost.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// It can be overridden for tests.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">onStoppedLeading</span> <span class="kd">func</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">shutdownCtx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span>
</span></span><span class="line"><span class="cl">	<span class="nx">internalCtx</span>    <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span>
</span></span><span class="line"><span class="cl">	<span class="nx">internalCancel</span> <span class="nx">context</span><span class="p">.</span><span class="nx">CancelFunc</span>
</span></span><span class="line"><span class="cl">	<span class="nx">internalProceduresStop</span> <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="workflow">workflow</h3>
<p>了解完ControllerManager之后，我们通过 example 来看看 ControllerManager 的workflow</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="nx">ctrl</span><span class="p">.</span><span class="nf">SetLogger</span><span class="p">(</span><span class="nx">zap</span><span class="p">.</span><span class="nf">New</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">   <span class="c1">// New一个manager
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="nx">mgr</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nf">NewManager</span><span class="p">(</span><span class="nx">ctrl</span><span class="p">.</span><span class="nf">GetConfigOrDie</span><span class="p">(),</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nx">Options</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">setupLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;unable to start manager&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="c1">// in a real controller, we&#39;d create a new scheme for this
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="nx">err</span> <span class="p">=</span> <span class="nx">api</span><span class="p">.</span><span class="nf">AddToScheme</span><span class="p">(</span><span class="nx">mgr</span><span class="p">.</span><span class="nf">GetScheme</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">setupLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;unable to add scheme&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nx">err</span> <span class="p">=</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nf">NewControllerManagedBy</span><span class="p">(</span><span class="nx">mgr</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">      <span class="nf">For</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">api</span><span class="p">.</span><span class="nx">ChaosPod</span><span class="p">{}).</span>
</span></span><span class="line"><span class="cl">      <span class="nf">Owns</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">corev1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">{}).</span>
</span></span><span class="line"><span class="cl">      <span class="nf">Complete</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">reconciler</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">         <span class="nx">Client</span><span class="p">:</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">GetClient</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">         <span class="nx">scheme</span><span class="p">:</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">GetScheme</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">      <span class="p">})</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">setupLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;unable to create controller&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nx">err</span> <span class="p">=</span> <span class="nx">ctrl</span><span class="p">.</span><span class="nf">NewWebhookManagedBy</span><span class="p">(</span><span class="nx">mgr</span><span class="p">).</span>
</span></span><span class="line"><span class="cl">      <span class="nf">For</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">api</span><span class="p">.</span><span class="nx">ChaosPod</span><span class="p">{}).</span>
</span></span><span class="line"><span class="cl">      <span class="nf">Complete</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">setupLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;unable to create webhook&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nx">setupLog</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;starting manager&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">mgr</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">ctrl</span><span class="p">.</span><span class="nf">SetupSignalHandler</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nx">setupLog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;problem running manager&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>通过  <code>manager.New()</code> 初始化一个manager，这里面会初始化一些列的manager的参数</li>
<li>通过 <code>ctrl.NewControllerManagedBy</code> 注册 controller 到manager中
<ul>
<li><code>ctrl.NewControllerManagedBy</code>  是 builder的一个别名，构建出一个builder类型的controller</li>
<li><code>builder</code> 中的 <code>ctrl</code> 就是 controller</li>
</ul>
</li>
<li>启动manager</li>
</ul>
<h3 id="builder">builder</h3>
<p>下面看来看下builder在构建时做了什么</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Builder builds a Controller.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Builder</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">forInput</span>         <span class="nx">ForInput</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ownsInput</span>        <span class="p">[]</span><span class="nx">OwnsInput</span>
</span></span><span class="line"><span class="cl">	<span class="nx">watchesInput</span>     <span class="p">[]</span><span class="nx">WatchesInput</span>
</span></span><span class="line"><span class="cl">	<span class="nx">mgr</span>              <span class="nx">manager</span><span class="p">.</span><span class="nx">Manager</span>
</span></span><span class="line"><span class="cl">	<span class="nx">globalPredicates</span> <span class="p">[]</span><span class="nx">predicate</span><span class="p">.</span><span class="nx">Predicate</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctrl</span>             <span class="nx">controller</span><span class="p">.</span><span class="nx">Controller</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctrlOptions</span>      <span class="nx">controller</span><span class="p">.</span><span class="nx">Options</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span>             <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们看到 example 中是调用了 <code>For()</code> 动作，那么这个   <code>For()</code> 是什么呢？</p>
<p>通过注释，我们可以看到 <a href="https://github.com/kubernetes-sigs/controller-runtime/blob/ffd9ec8768b7d2e82aee6b0c76d481a5bdda4075/pkg/builder/controller.go#L82-L94">For()</a> 提供了 调解对象类型，ControllerManagedBy 通过  <em>reconciling object</em> 来相应对应<code>create/delete/update</code> 事件。调用 <code>For()</code> 相当于调用了 <code>Watches(&amp;source.Kind{Type: apiType}, &amp;handler.EnqueueRequestForObject{})</code> 。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">blder</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">For</span><span class="p">(</span><span class="nx">object</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Object</span><span class="p">,</span> <span class="nx">opts</span> <span class="o">...</span><span class="nx">ForOption</span><span class="p">)</span> <span class="o">*</span><span class="nx">Builder</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">object</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">err</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;For(...) should only be called once, could not assign multiple objects for reconciliation&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">blder</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">input</span> <span class="o">:=</span> <span class="nx">ForInput</span><span class="p">{</span><span class="nx">object</span><span class="p">:</span> <span class="nx">object</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">opt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">opts</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">opt</span><span class="p">.</span><span class="nf">ApplyToFor</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">input</span><span class="p">)</span> <span class="c1">//最终把我们要监听的对象每个 opts注册进去
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span> <span class="p">=</span> <span class="nx">input</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">blder</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来是调用的 <a href="https://github.com/kubernetes-sigs/controller-runtime/blob/ffd9ec8768b7d2e82aee6b0c76d481a5bdda4075/pkg/builder/controller.go#L106-L114">Owns()</a> ，<code>Owns()</code> 看起来和  <code>For()</code> 功能是类似的。只是说属于不同，是通过Owns方法设置的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">blder</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">Owns</span><span class="p">(</span><span class="nx">object</span> <span class="nx">client</span><span class="p">.</span><span class="nx">Object</span><span class="p">,</span> <span class="nx">opts</span> <span class="o">...</span><span class="nx">OwnsOption</span><span class="p">)</span> <span class="o">*</span><span class="nx">Builder</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">input</span> <span class="o">:=</span> <span class="nx">OwnsInput</span><span class="p">{</span><span class="nx">object</span><span class="p">:</span> <span class="nx">object</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">opt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">opts</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">opt</span><span class="p">.</span><span class="nf">ApplyToOwns</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">input</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">blder</span><span class="p">.</span><span class="nx">ownsInput</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">blder</span><span class="p">.</span><span class="nx">ownsInput</span><span class="p">,</span> <span class="nx">input</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">blder</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后到了 Complete()，<code>Complete</code> 是完成这个controller的构建</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Complete builds the Application Controller.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">blder</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">Complete</span><span class="p">(</span><span class="nx">r</span> <span class="nx">reconcile</span><span class="p">.</span><span class="nx">Reconciler</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">Build</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Build 创建控制器并返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">blder</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">Build</span><span class="p">(</span><span class="nx">r</span> <span class="nx">reconcile</span><span class="p">.</span><span class="nx">Reconciler</span><span class="p">)</span> <span class="p">(</span><span class="nx">controller</span><span class="p">.</span><span class="nx">Controller</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">r</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;must provide a non-nil Reconciler&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">mgr</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;must provide a non-nil Manager&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Checking the reconcile type exist or not
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">object</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;must provide an object for reconciliation&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Set the ControllerManagedBy
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">doController</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Set the Watch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">doWatch</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">ctrl</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里面可以看到，会完成 doController 和 doWatch</p>
<p>doController会初始化好这个controller并返回</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">blder</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">doController</span><span class="p">(</span><span class="nx">r</span> <span class="nx">reconcile</span><span class="p">.</span><span class="nx">Reconciler</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">globalOpts</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">mgr</span><span class="p">.</span><span class="nf">GetControllerOptions</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ctrlOptions</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">ctrlOptions</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">Reconciler</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">Reconciler</span> <span class="p">=</span> <span class="nx">r</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 通过检索GVK获得默认的名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">gvk</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">getGvk</span><span class="p">(</span><span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">mgr</span><span class="p">.</span><span class="nf">GetScheme</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 设置并发，如果最大并发为0则找到一个
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 追踪下去看似是对于没有设置时，例如会根据 app group中的 ReplicaSet设定
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 就是在For()传递的一个类型的数量来确定并发的数量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">MaxConcurrentReconciles</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">groupKind</span> <span class="o">:=</span> <span class="nx">gvk</span><span class="p">.</span><span class="nf">GroupKind</span><span class="p">().</span><span class="nf">String</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">concurrency</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">globalOpts</span><span class="p">.</span><span class="nx">GroupKindConcurrency</span><span class="p">[</span><span class="nx">groupKind</span><span class="p">];</span> <span class="nx">ok</span> <span class="o">&amp;&amp;</span> <span class="nx">concurrency</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">MaxConcurrentReconciles</span> <span class="p">=</span> <span class="nx">concurrency</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Setup cache sync timeout.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">CacheSyncTimeout</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nx">globalOpts</span><span class="p">.</span><span class="nx">CacheSyncTimeout</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">CacheSyncTimeout</span> <span class="p">=</span> <span class="o">*</span><span class="nx">globalOpts</span><span class="p">.</span><span class="nx">CacheSyncTimeout</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 给controller一个name，如果没有初始化传递，则使用Kind做名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">controllerName</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">getControllerName</span><span class="p">(</span><span class="nx">gvk</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Setup the logger.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">LogConstructor</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">mgr</span><span class="p">.</span><span class="nf">GetLogger</span><span class="p">().</span><span class="nf">WithValues</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">			<span class="s">&#34;controller&#34;</span><span class="p">,</span> <span class="nx">controllerName</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="s">&#34;controllerGroup&#34;</span><span class="p">,</span> <span class="nx">gvk</span><span class="p">.</span><span class="nx">Group</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="s">&#34;controllerKind&#34;</span><span class="p">,</span> <span class="nx">gvk</span><span class="p">.</span><span class="nx">Kind</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">lowerCamelCaseKind</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">ToLower</span><span class="p">(</span><span class="nx">gvk</span><span class="p">.</span><span class="nx">Kind</span><span class="p">[:</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span> <span class="nx">gvk</span><span class="p">.</span><span class="nx">Kind</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">ctrlOptions</span><span class="p">.</span><span class="nx">LogConstructor</span> <span class="p">=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">req</span> <span class="o">*</span><span class="nx">reconcile</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="nx">logr</span><span class="p">.</span><span class="nx">Logger</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span> <span class="o">:=</span> <span class="nx">log</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">req</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">log</span> <span class="p">=</span> <span class="nx">log</span><span class="p">.</span><span class="nf">WithValues</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">					<span class="nx">lowerCamelCaseKind</span><span class="p">,</span> <span class="nx">klog</span><span class="p">.</span><span class="nf">KRef</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Name</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">					<span class="s">&#34;namespace&#34;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Namespace</span><span class="p">,</span> <span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="nx">req</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">				<span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">log</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 这里就是构建一个新的控制器了，也就是前面说到的  manager.New()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">blder</span><span class="p">.</span><span class="nx">ctrl</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nf">newController</span><span class="p">(</span><span class="nx">controllerName</span><span class="p">,</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">mgr</span><span class="p">,</span> <span class="nx">ctrlOptions</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/kubernetes-sigs/controller-runtime/blob/ffd9ec8768b7d2e82aee6b0c76d481a5bdda4075/pkg/manager/manager.go#L336-L436">manager.New()</a></p>
<h3 id="start-manager">start Manager</h3>
<p>接下来是manager的启动，也就是对应的 <code>start()</code> 与 <a href="https://github.com/kubernetes-sigs/controller-runtime/blob/ffd9ec8768b7d2e82aee6b0c76d481a5bdda4075/pkg/builder/controller.go#L220-L270">doWatch()</a></p>
<p>通过下述代码我们可以看出来，对于 <code>doWatch()</code> 就是把 <code>compete()</code> 前的一些资源的事件函数都注入到controller 中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">blder</span> <span class="o">*</span><span class="nx">Builder</span><span class="p">)</span> <span class="nf">doWatch</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 调解类型，这也也就是对于For的obj来说，我们需要的是什么结构的，如非结构化数据或metadata-only
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// metadata-only就是配置成一个GVK schema.GroupVersionKind
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">typeForSrc</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">project</span><span class="p">(</span><span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">objectProjection</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="o">&amp;</span><span class="nx">source</span><span class="p">.</span><span class="nx">Kind</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 一些准备工作，将对象封装为&amp;source.Kind{}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">src</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">source</span><span class="p">.</span><span class="nx">Kind</span><span class="p">{</span><span class="nx">Type</span><span class="p">:</span> <span class="nx">typeForSrc</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">hdler</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">handler</span><span class="p">.</span><span class="nx">EnqueueRequestForObject</span><span class="p">{}</span> <span class="c1">// 就是包含obj的一个事件队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">allPredicates</span> <span class="o">:=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">blder</span><span class="p">.</span><span class="nx">globalPredicates</span><span class="p">,</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">predicates</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 这里又到之前说过的controller watch了
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 将一系列的准备动作注入到cache 如 source eventHandler predicate
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">ctrl</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">src</span><span class="p">,</span> <span class="nx">hdler</span><span class="p">,</span> <span class="nx">allPredicates</span><span class="o">...</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 再重复 ownsInput 动作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">own</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">ownsInput</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">typeForSrc</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">project</span><span class="p">(</span><span class="nx">own</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span> <span class="nx">own</span><span class="p">.</span><span class="nx">objectProjection</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">src</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">source</span><span class="p">.</span><span class="nx">Kind</span><span class="p">{</span><span class="nx">Type</span><span class="p">:</span> <span class="nx">typeForSrc</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">hdler</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">handler</span><span class="p">.</span><span class="nx">EnqueueRequestForOwner</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">OwnerType</span><span class="p">:</span>    <span class="nx">blder</span><span class="p">.</span><span class="nx">forInput</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">IsController</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">allPredicates</span> <span class="o">:=</span> <span class="nb">append</span><span class="p">([]</span><span class="nx">predicate</span><span class="p">.</span><span class="nf">Predicate</span><span class="p">(</span><span class="kc">nil</span><span class="p">),</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">globalPredicates</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">allPredicates</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">allPredicates</span><span class="p">,</span> <span class="nx">own</span><span class="p">.</span><span class="nx">predicates</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">ctrl</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">src</span><span class="p">,</span> <span class="nx">hdler</span><span class="p">,</span> <span class="nx">allPredicates</span><span class="o">...</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 在对 ownsInput 进行重复的操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">w</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">watchesInput</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">allPredicates</span> <span class="o">:=</span> <span class="nb">append</span><span class="p">([]</span><span class="nx">predicate</span><span class="p">.</span><span class="nf">Predicate</span><span class="p">(</span><span class="kc">nil</span><span class="p">),</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">globalPredicates</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">allPredicates</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">allPredicates</span><span class="p">,</span> <span class="nx">w</span><span class="p">.</span><span class="nx">predicates</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// If the source of this watch is of type *source.Kind, project it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">srckind</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">src</span><span class="p">.(</span><span class="o">*</span><span class="nx">source</span><span class="p">.</span><span class="nx">Kind</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">typeForSrc</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nf">project</span><span class="p">(</span><span class="nx">srckind</span><span class="p">.</span><span class="nx">Type</span><span class="p">,</span> <span class="nx">w</span><span class="p">.</span><span class="nx">objectProjection</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">srckind</span><span class="p">.</span><span class="nx">Type</span> <span class="p">=</span> <span class="nx">typeForSrc</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">blder</span><span class="p">.</span><span class="nx">ctrl</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">src</span><span class="p">,</span> <span class="nx">w</span><span class="p">.</span><span class="nx">eventhandler</span><span class="p">,</span> <span class="nx">allPredicates</span><span class="o">...</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>由于前两部 <code>builder</code> 的操作将 mgr 指针传入到 builder中，并且操作了 <code>complete()</code> ，也就是操作了 <code>build()</code> ,这代表了对 <code>controller</code> 完成了初始化，和事件注入（<code>watch</code>）的操作，所以 Start()，就是将controller启动</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">cm</span> <span class="o">*</span><span class="nx">controllerManager</span><span class="p">)</span> <span class="nf">Start</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cm</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">started</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cm</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;manager already started&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">ready</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">ready</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">cm</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Initialize the internal context.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cm</span><span class="p">.</span><span class="nx">internalCtx</span><span class="p">,</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">internalCancel</span> <span class="p">=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 这个channel代表了controller的停止
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">stopComplete</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">stopComplete</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// This must be deferred after closing stopComplete, otherwise we deadlock.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">stopErr</span> <span class="o">:=</span> <span class="nx">cm</span><span class="p">.</span><span class="nf">engageStopProcedure</span><span class="p">(</span><span class="nx">stopComplete</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">stopErr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">err</span> <span class="p">=</span> <span class="nx">kerrors</span><span class="p">.</span><span class="nf">NewAggregate</span><span class="p">([]</span><span class="kt">error</span><span class="p">{</span><span class="nx">err</span><span class="p">,</span> <span class="nx">stopErr</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">err</span> <span class="p">=</span> <span class="nx">stopErr</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Add the cluster runnable.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cm</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nx">cm</span><span class="p">.</span><span class="nx">cluster</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;failed to add cluster to runnables: %w&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 指标类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">metricsListener</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cm</span><span class="p">.</span><span class="nf">serveMetrics</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">healthProbeListener</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cm</span><span class="p">.</span><span class="nf">serveHealthProbes</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">runnables</span><span class="p">.</span><span class="nx">Webhooks</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">cm</span><span class="p">.</span><span class="nx">internalCtx</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">errors</span><span class="p">.</span><span class="nf">Is</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">wait</span><span class="p">.</span><span class="nx">ErrWaitTimeout</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 等待informer同步完成
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">runnables</span><span class="p">.</span><span class="nx">Caches</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">cm</span><span class="p">.</span><span class="nx">internalCtx</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">errors</span><span class="p">.</span><span class="nf">Is</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">wait</span><span class="p">.</span><span class="nx">ErrWaitTimeout</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 非选举模式，runnable将在cache同步完成后启动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">runnables</span><span class="p">.</span><span class="nx">Others</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">cm</span><span class="p">.</span><span class="nx">internalCtx</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">errors</span><span class="p">.</span><span class="nf">Is</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">wait</span><span class="p">.</span><span class="nx">ErrWaitTimeout</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Start the leader election and all required runnables.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cm</span><span class="p">.</span><span class="nx">leaderElectionCancel</span> <span class="p">=</span> <span class="nx">cancel</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">cm</span><span class="p">.</span><span class="nx">resourceLock</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cm</span><span class="p">.</span><span class="nf">startLeaderElection</span><span class="p">(</span><span class="nx">ctx</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">cm</span><span class="p">.</span><span class="nx">errChan</span> <span class="o">&lt;-</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// Treat not having leader election enabled the same as being elected.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cm</span><span class="p">.</span><span class="nf">startLeaderElectionRunnables</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">cm</span><span class="p">.</span><span class="nx">errChan</span> <span class="o">&lt;-</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nb">close</span><span class="p">(</span><span class="nx">cm</span><span class="p">.</span><span class="nx">elected</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">ready</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cm</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// We are done
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">err</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">cm</span><span class="p">.</span><span class="nx">errChan</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Error starting or running a runnable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到上面启动了4种类型的runnable，实际上就是对这runnable进行启动，例如 controller，cache等。</p>
<p>回顾一下，我们之前在使用<code>code-generator</code> 生成，并自定义controller时，我们也是通过启动 <code>informer.Start()</code> ，否则会报错。</p>
<p>最后可以通过一张关系图来表示，client-go与controller-manager之间的关系</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/controller-runtime.svg" alt="svg"  /></p>
<blockquote>
<p>Reference</p>
<p><a href="https://vivilearns2code.github.io/k8s/2021/03/12/diving-into-controller-runtime.html#the-manager">diving controller runtime</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>扩展Kubernetes API的另一种方式 - APIServer aggregation</title>
      <link>https://www.oomkill.com/2022/06/ch04-apiserver-aggregation/</link>
      <pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/06/ch04-apiserver-aggregation/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<h3 id="what-is-kubernetes-aggregation">What is Kubernetes aggregation</h3>
<p><strong>Kubernetes apiserver aggregation</strong> <em>AA</em> 是Kubernetes提供的一种扩展API的方法，目前并没有GA</p>
<h3 id="difference-between--crd-and-aa">Difference between  CRD and AA</h3>
<p>众所周知，kubernetes扩展API的方法大概为三种：CRD、AA、手动扩展源码。根据<a href="https://www.youtube.com/c/cloudnativefdn">CNCF分享</a>中Min Kim说的AA更关注于实践，而用户无需了解底层的原理，这里使用过 <code>kubebuilder</code>， <code>code-generator</code> 的用户是很能体会到这点。官方也给出了CRD与AA的区别</p>
<blockquote>
<h3 id="api-access-control">API Access Control</h3>
<h5 id="authentication">Authentication</h5>
<ul>
<li><strong>CR</strong>: All strategies supported. Configured by root apiserver.</li>
<li><strong>AA</strong>: Supporting all root apiserver&rsquo;s authenticating strategies but it has to be done via <a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#webhook-token-authentication">authentication token review api</a> except for <a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/#authenticating-proxy">authentication proxy</a> which will cause an extra cost of network RTT.</li>
</ul>
<h5 id="authorization">Authorization</h5>
<ul>
<li><strong>CR</strong>: All strategies supported. Configured by root apiserver.</li>
<li><strong>AA</strong>: Delegating authorization requests to root apiserver via <a href="https://kubernetes.io/docs/reference/access-authn-authz/authorization/#checking-api-access">SubjectAccessReview api</a>. Note that this approach will also cost a network RTT.</li>
</ul>
<h5 id="admission-control">Admission Control</h5>
<ul>
<li><strong>CR</strong>: You could extend via dynamic admission control webhook (which is costing network RTT).</li>
<li><strong>AA</strong>: While You can develop and customize your own admission controller which is dedicated to your AA. While You can&rsquo;t reuse root-apiserver&rsquo;s built-in admission controllers nomore.</li>
</ul>
<h3 id="api-schema">API Schema</h3>
<p>Note: CR&rsquo;s integration with OpenAPI schema is being enhanced in the future releases and it will have a stronger integration with OpenAPI mechanism.</p>
<h5 id="validating">Validating</h5>
<ul>
<li><strong>CR</strong>: (landed in 1.12) Defined via OpenAPIv3 Schema grammar. <a href="https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#validation">more</a></li>
<li><strong>AA</strong>: You can customize any validating flow you want.</li>
</ul>
<h5 id="conversion">Conversion</h5>
<ul>
<li><strong>CR</strong>: (landed in 1.13) The CR conversioning (basically from storage version to requested version) could be done via conversioning webhook.</li>
<li><strong>AA</strong>: Develop any conversion you want.</li>
</ul>
<h5 id="subresource">SubResource</h5>
<ul>
<li><strong>CR</strong>: Currently only status and scale sub-resource supported.</li>
<li><strong>AA</strong>: You can customize any sub-resouce you want.</li>
</ul>
<h5 id="openapi-schema">OpenAPI Schema</h5>
<ul>
<li><strong>CR</strong>: (landed in 1.13) The corresponding CRD&rsquo;s OpenAPI schema will be automatically synced to root-apiserver&rsquo;s openapi doc api.</li>
<li><strong>AA</strong>: OpenAPI doc has to be manually generated by code-generating tools.</li>
</ul>
</blockquote>
<h2 id="authentication-1">Authentication</h2>
<p>要想很好的使用AA，就需要对kubernetes与 AA 之间认证机制进行有一定的了解，这里涉及到一些概念</p>
<ul>
<li>客户端证书认证</li>
<li>token认证</li>
<li>请求头认证</li>
</ul>
<p>在下面的说明中，所有出现的APIServer都是指Kubernetes集群组件APIServer也可以为 root APIServer；所有的AA都是指 extension apiserver，就是自行开发的 AA。</p>
<h3 id="客户端证书">客户端证书</h3>
<p>客户端证书就是CA签名的证书，由客户端指定CA证书，在客户端连接时进行身份验证，在Kubernetes APIserver也使用了相同的机制。</p>
<p>默认情况下，APIServer在启动时指定参数 <code>--client-ca-file</code> ，这时APIServer会创建一个名为 <code>extension-apiserver-authentication</code> ，命名空间为 <code>kube-system</code> 下的 configMap。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl get cm -A
</span></span><span class="line"><span class="cl">NAMESPACE     NAME                                 DATA   AGE
</span></span><span class="line"><span class="cl">kube-system   extension-apiserver-authentication   <span class="m">6</span>      21h
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">kubectl get cm extension-apiserver-authentication -n kube-system -o yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>由上面的命令可以看出这个configMap将被填充到客户端（AA Pod实例）中，使用此CA证书作为用于验证客户端身份的CA。这样客户端会读取这个configMap，与APIServer进行身份认证。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">I0622 14:24:00.509486       <span class="m">1</span> secure_serving.go:178<span class="o">]</span> Serving securely on <span class="o">[</span>::<span class="o">]</span>:443
</span></span><span class="line"><span class="cl">I0622 14:24:00.509556       <span class="m">1</span> configmap_cafile_content.go:202<span class="o">]</span> Starting client-ca::kube-system::extension-apiserver-authentication::requestheader-client-ca-file
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="token认证">token认证</h3>
<p>Token认证是指通过HTTP Header传入 <code>Authorization: Bearer $TOKEN</code> 的方式进行客户端认证，这也是Kubernetes集群内认证常用的方法。</p>
<p>在这种情况下，允许对APIServer进行认证也同样可以对AA进行认证。如果不想 AA 对同一集群进行身份验证，或AA在集群外部运行，可以将参数 <code>--authentication-kubeconfig</code> 以指定要使用的不同 Kubeconfig 认证。</p>
<p>下面实例是AA的启动参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./bin/apiserver -h<span class="p">|</span>grep authentication-kubeconfig
</span></span><span class="line"><span class="cl">      --authentication-kubeconfig string                        kubeconfig file pointing at the <span class="s1">&#39;core&#39;</span> kubernetes server with enough righ
</span></span><span class="line"><span class="cl">ts to create tokenreviews.authentication.k8s.io. This is optional. If empty, all token requests are considered to be anonymous and no cli
</span></span><span class="line"><span class="cl">ent CA is looked up in the cluster.
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="请求头认证">请求头认证</h3>
<p>RequestHeader 认证是指，APIServer对来自AA代理连接进行的身份认证。</p>
<p>默认情况下，AA 从 <code>extension-apiserver-authentication</code> 中提到的 ConfigMap 中 提取 requestheader 客户端 CA 证书与 CN。如果主 Kubernetes APIServer 配置了选项 <code>--requestheader-client-ca-file</code> ，则它会填充此内容。</p>
<p>跳过客户端认证 <code>--authentication-skip-lookup</code></p>
<h3 id="授权">授权</h3>
<p>默认情况下，AA  服务器会通过自动注入到 Kubernetes 集群上运行的 pod 的连接信息和凭据，来连接到主 Kubernetes API 服务器。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">E0622 11:20:12.375512       <span class="m">1</span> errors.go:77<span class="o">]</span> Post <span class="s2">&#34;https://192.168.0.1:443/apis/authorization.k8s.io/v1/subjectaccessreviews&#34;</span>: write tcp 192.168.0.36:39324-&gt;192.168.0.1:443: write: connection reset by peer
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果AA在集群外部部署，可以指定<code>--authorization-kubeconfig</code> 通过kubeconfig进行认证，这就类似于二进制部署中的信息。</p>
<p>默认情况下，Kubernetes 集群会启用RBAC，这就意味着AA 创建多个clusterrolebinding。</p>
<p>下面日志是 AA 对于集群中资源访问无权限的情况</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">E0622 09:01:26.750320       <span class="m">1</span> reflector.go:178<span class="o">]</span> pkg/mod/k8s.io/client-go@v0.18.10/tools/cache/reflector.go:125: Failed to list *v1.MutatingWebhookConfiguration: mutatingwebhookconfigurations.admissionregistration.k8s.io is forbidden: User <span class="s2">&#34;system:serviceaccount:default:default&#34;</span> cannot list resource <span class="s2">&#34;mutatingwebhookconfigurations&#34;</span> in API group <span class="s2">&#34;admissionregistration.k8s.io&#34;</span> at the cluster scope
</span></span><span class="line"><span class="cl">E0622 09:01:29.357897       <span class="m">1</span> reflector.go:178<span class="o">]</span> pkg/mod/k8s.io/client-go@v0.18.10/tools/cache/reflector.go:125: Failed to list *v1.Namespace: namespaces is forbidden: User <span class="s2">&#34;system:serviceaccount:default:default&#34;</span> cannot list resource <span class="s2">&#34;namespaces&#34;</span> in API group <span class="s2">&#34;&#34;</span> at the cluster scope
</span></span><span class="line"><span class="cl">E0622 09:01:39.998496       <span class="m">1</span> reflector.go:178<span class="o">]</span> pkg/mod/k8s.io/client-go@v0.18.10/tools/cache/reflector.go:125: Failed to list *v1.ValidatingWebhookConfiguration: validatingwebhookconfigurations.admissionregistration.k8s.io is forbidden: User <span class="s2">&#34;system:serviceaccount:default:default&#34;</span> cannot list resource <span class="s2">&#34;validatingwebhookconfigurations&#34;</span> in API group <span class="s2">&#34;admissionregistration.k8s.io&#34;</span> at the cluster scope
</span></span></code></pre></td></tr></table>
</div>
</div><p>需要手动在namespace <code>kube-system</code> 中创建rolebindding到 role  <code>extension-apiserver-authentication-reader</code> 。这样就可以访问到configMap了。</p>
<h2 id="apiserver-builder">apiserver-builder</h2>
<p><code>apiserver-builder</code> 项目就是创建AA的工具，可以参考 <a href="https://github.com/kubernetes-sigs/apiserver-builder-alpha/blob/v1.18.0/docs/installing.md">installing.md</a> 来安装</p>
<h3 id="初始化项目">初始化项目</h3>
<p>初始化命令</p>
<ul>
<li><code>&lt;your-domain&gt;</code> 这个是你的API资源的组，参考 <code>k8s.io/api</code>
<ul>
<li>如果组的名称是域名就设置为主域名，例如内置组
<ul>
<li><code>/apis/authentication.k8s.io</code></li>
<li><code>/apis/batch</code></li>
</ul>
</li>
</ul>
</li>
<li>生成的go mod 包名为你所在的目录的名称
<ul>
<li>例如，在firewalld目录下，go.mod 的名称为 firewalld</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">apiserver-boot init repo --domain &lt;your-domain&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">apiserver-boot init repo --domain fedoraproject.org
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注：这里&ndash;domain设置为主域名就可以了，后面生成的group会按照格式 <group>+<domain></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">apiserver</span><span class="o">-</span><span class="nx">boot</span> <span class="nx">must</span> <span class="nx">be</span> <span class="nx">run</span> <span class="nx">from</span> <span class="nx">the</span> <span class="nx">directory</span> <span class="nx">containing</span> <span class="nx">the</span> <span class="k">go</span> <span class="kn">package</span> <span class="nx">to</span> <span class="nx">bootstrap</span><span class="p">.</span> <span class="nx">This</span> <span class="nx">must</span>
</span></span><span class="line"><span class="cl"> <span class="nx">be</span> <span class="nx">under</span> <span class="err">$</span><span class="nx">GOPATH</span><span class="o">/</span><span class="nx">src</span><span class="o">/</span><span class="p">&lt;</span><span class="kn">package</span><span class="p">&gt;.</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>必须在 <code>$GOPATH/src</code> 下创建你的项目，我这里的为 <code>GOPATH=go/src</code> ，这时创建项目必须在目录 <code>go/src/src/{project}</code>  下创建</p>
<h3 id="创建一个gvk">创建一个GVK</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">apiserver-boot create group version resource <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	--group firewalld <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	--version v1 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	--kind PortRule
</span></span></code></pre></td></tr></table>
</div>
</div><p>在创建完成之后会生成 api-like的类型，我们只需要填充自己需要的就可以了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">PortRule</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span><span class="p">.</span><span class="nx">TypeMeta</span>   <span class="s">`json:&#34;,inline&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMeta</span> <span class="s">`json:&#34;metadata,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">Spec</span>   <span class="nx">PortRuleSpec</span>   <span class="s">`json:&#34;spec,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Status</span> <span class="nx">PortRuleStatus</span> <span class="s">`json:&#34;status,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// PortRuleSpec defines the desired state of PortRule
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">PortRuleSpec</span> <span class="kd">struct</span> <span class="p">{</span> <span class="c1">// 这里内容都为空的，自己添加即可
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Name</span>        <span class="kt">string</span> <span class="s">`json:&#34;name&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Host</span>        <span class="kt">string</span> <span class="s">`json:&#34;host&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Port</span>        <span class="kt">int</span>    <span class="s">`json:&#34;port&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">IsPremanent</span> <span class="kt">bool</span>   <span class="s">`json:&#34;isPremanent,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// PortRuleStatus defines the observed state of PortRule
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">PortRuleStatus</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="生成代码">生成代码</h3>
<p><code>apiserver-boot</code> 没有专门用来生成代码的命令，可以执行任意生成命令即可，这里使用生成二进制执行文件命令，这个过程相当长。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">apiserver-boot build executables
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果编译错误可以使用 <code>--generate=false</code> 跳过生成，这样就可以节省大量时间。</p>
<h3 id="运行方式">运行方式</h3>
<p>运行方式无非三种，本地运行，集群内运行，集群外运行</p>
<h4 id="running_locally">running_locally</h4>
<p>本地运行需要有一个etcd服务，不用配置ca证书，这里使用docker运行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker run -d --name Etcd-server <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --publish 2379:2379 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --publish 2380:2380 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --env <span class="nv">ALLOW_NONE_AUTHENTICATION</span><span class="o">=</span>yes <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    --env <span class="nv">ETCD_ADVERTISE_CLIENT_URLS</span><span class="o">=</span>http://etcd-server:2379 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    bitnami/etcd:latest
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后执行命令，执行成功后会弹出对应的访问地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">apiserver-boot build executables
</span></span><span class="line"><span class="cl">apiserver-boot run <span class="nb">local</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="running_in_cluster">running_in_cluster</h4>
<h5 id="构建镜像">构建镜像</h5>
<p>需要先构建容器镜像，<code>apiserver-boot build container --image &lt;image&gt;</code>  这将生成代码，构建 apiserver 和controller二进制文件，然后构建容器映像。构建完成后还需要将对应的镜像push到仓库（可选）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">apiserver-boot build config <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	--name &lt;servicename&gt; <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	--namespace &lt;namespace to run in&gt; <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	--image &lt;image to run&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注，这个操作需要在支持Linux内核的环境下构建，wsl不具备内核功能故会报错，需要替换为wsl2，而工具是下载的，如果需要wsl1+Docker Desktop构建，需要自己修改</p>
</blockquote>
<h5 id="构建配置">构建配置</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">apiserver-boot build config \
</span></span><span class="line"><span class="cl">	--name &lt;servicename&gt; \
</span></span><span class="line"><span class="cl">	--namespace &lt;namespace to run in&gt; \
</span></span><span class="line"><span class="cl">	--image &lt;image to run&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>构建配置的操作会执行以下几个步骤：</p>
<ul>
<li>在 <code>&lt;project/config/certificates</code> 目录下创建一个 CA证书</li>
<li>在目录 <code>&lt;project/config/*.yaml</code> 下生成kubernetes所需的资源清单。</li>
</ul>
<blockquote>
<p>注：</p>
<p>实际上这个清单并不能完美适配任何环境，需要手动修改一下配置</p>
<p>运行的Pod中包含apiserver与controller，如果使用kubebuilder创建的controller可以自行修改资源清单</p>
</blockquote>
<h5 id="修改apiserver的配置">修改apiserver的配置</h5>
<p>下面参数是有关于 AA 认证的参数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">--proxy-client-cert-file=/etc/kubernetes/pki/firewalld.crt \
</span></span><span class="line"><span class="cl">--proxy-client-key-file=/etc/kubernetes/pki/firewalld.key \
</span></span><span class="line"><span class="cl">--requestheader-allowed-names=kube-apiserver-kubelet-client,firewalld.default.svc,firewalld-certificate-authority \
</span></span><span class="line"><span class="cl">--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt \
</span></span><span class="line"><span class="cl">--requestheader-extra-headers-prefix=X-Remote-Extra- \
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>--requestheader-username-headers</code>：用于存储用户名的标头</li>
<li><code>--requestheader-group-headers</code>：用于存储组的标题</li>
<li><code>--requestheader-extra-headers-prefix</code>：附加到所有额外标头的前缀</li>
<li><code>--proxy-client-key-file</code> ：私钥文件</li>
<li><code>--proxy-client-cert-file</code>：客户端证书文件</li>
<li><code>--requestheader-client-ca-file</code>：签署客户端证书文件的 CA 的证书</li>
<li><code>--requestheader-allowed-names</code>：签名客户端证书中的CN)</li>
</ul>
<p>由以上信息得知，实际上 <code>apiserver-boot</code> 所生成的ca用不上，需要kubernetes自己的ca进行签署，这里简单提供两个命令，使用kubernetes集群证书进行颁发证书。这里kubernetes集群证书使用<a href="https://github.com/CylonChau/kubernetes-generator">kubernetes-generator</a> 生产的。这里根据这个ca再次生成用于 AA 认证的证书。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">openssl req -new \
</span></span><span class="line"><span class="cl">    -key firewalld.key \
</span></span><span class="line"><span class="cl">    -subj &#34;/CN=firewalld.default.svc&#34; \
</span></span><span class="line"><span class="cl">    -config &lt;(cat /etc/pki/tls/openssl.cnf &lt;(printf &#34;[aa]\nsubjectAltName=DNS:firewalld, DNS:firewalld.default.svc, DNS:firewalld-certificate-authority, DNS:kubernetes.default.svc&#34;)) \
</span></span><span class="line"><span class="cl">    -out firewalld.csr
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">openssl ca \
</span></span><span class="line"><span class="cl">	-in firewalld.csr \
</span></span><span class="line"><span class="cl">	-cert front-proxy-ca.crt \
</span></span><span class="line"><span class="cl">	-keyfile front-proxy-ca.key \
</span></span><span class="line"><span class="cl">	-out firewalld.crt \
</span></span><span class="line"><span class="cl">	-days 3650 \
</span></span><span class="line"><span class="cl">	-extensions aa \
</span></span><span class="line"><span class="cl">	-extfile &lt;(cat /etc/pki/tls/openssl.cnf  &lt;(printf &#34;[aa]\nsubjectAltName=DNS:firewalld, DNS:firewalld.default.svc, DNS:firewalld-certificate-authority, DNS:kubernetes.default.svc&#34;))
</span></span></code></pre></td></tr></table>
</div>
</div><p>完成后重新生成所需的yaml资源清单即可，通过资源清单来测试下扩展的API</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">firewalld.fedoraproject.org/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PortRule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">portrule-example</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;nginx&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;10.0.0.3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ kubectl apply -f http.yaml 
</span></span><span class="line"><span class="cl">portrule.firewalld.fedoraproject.org/portrule-example created
</span></span><span class="line"><span class="cl">$ kubectl get portrule
</span></span><span class="line"><span class="cl">NAME               CREATED AT
</span></span><span class="line"><span class="cl">portrule-example   2022-06-22T15:12:59Z
</span></span></code></pre></td></tr></table>
</div>
</div><p>更详细的说明建议阅读下Reference，都是官方提供的详细说明文档</p>
<h2 id="reference">Reference</h2>
<blockquote>
<p><a href="https://kubernetes.io/docs/tasks/extend-kubernetes/configure-aggregation-layer/">aggregation layer</a></p>
<p><a href="https://github.com/kubernetes-sigs/apiserver-builder-alpha/tree/master/docs">apiserver-builder doc</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>kubernetes代码生成器 - code-generator</title>
      <link>https://www.oomkill.com/2022/06/ch14-code-generator/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/06/ch14-code-generator/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>Kubernetes中提供了多种自定义控制器的方式：</p>
<ul>
<li><a href="https://github.com/kubernetes/code-generator">code-generator</a></li>
<li><a href="https://github.com/kubernetes-sigs/kubebuilder">kubebuilder</a></li>
<li><a href="https://github.com/operator-framework/operator-sdk">Operator</a></li>
</ul>
<p>Controller 作为CRD的核心，这里将解释如何使用 <code>code-generator</code> 来创建自定义的控制器，作为文章的案例，将完成一个 Firewalld Port 规则的控制器作为描述，通过 Kubernetes 规则来生成对应节点上的 iptables规则。</p>
<h3 id="prerequisites">Prerequisites</h3>
<h3 id="crd">CRD</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apiextensions.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">CustomResourceDefinition</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ports.firewalld.fedoraproject.org</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">group</span><span class="p">:</span><span class="w"> </span><span class="l">firewalld.fedoraproject.org</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">scope</span><span class="p">:</span><span class="w"> </span><span class="l">Namespaced</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">names</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">plural</span><span class="p">:</span><span class="w"> </span><span class="l">ports</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">singular</span><span class="p">:</span><span class="w"> </span><span class="l">port</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PortRule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">shortNames</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">fp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">versions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">served</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">storage</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">schema</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">openAPIV3Schema</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">object</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">object</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">name</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">port</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">integer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">host</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">isPermanent</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">boolean</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="code-generator">code-generator</h3>
<p>需要预先下载 <code>code-generator</code> 。因为这个工具不是必需要求的。</p>
<blockquote>
<p>注意，下载完成后需要将代码库的的分支更改为你目前使用的版本，版本的选择与client-go类似，如果使用master分支，会与当前的 Kubernetes 集群不兼容。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/kubernetes/code-generator
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> code-generator<span class="p">;</span> git checkout <span class="o">{</span>version<span class="o">}</span>  <span class="c1"># eg. v0.18.0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="编写代码模板">编写代码模板</h3>
<p>要想使用 <code>code-generator</code> 生成控制器，必须准备三个文件 <code>doc.go</code> , <code>register.go</code> , <code>types.go</code> 。</p>
<ul>
<li><code>doc.go</code> 中声明了这个包全局内，要使用生成器的tag</li>
<li><code>register.go</code> 类似于kubernetes API，是将声明的类型注册到schema中</li>
<li><code>type.go</code> 是需要具体声明对象类型</li>
</ul>
<h3 id="code-generator-tag说明">code-generator Tag说明</h3>
<p>在使用 <code>code-generator</code> 时，就需要对 <code>code-generator</code> 的tag进行了解。<code>code-generator</code> 的tag是根据几个固定格式进行定义的，tag是 <code>+k8s:</code> + <code>conversion</code> 的组合，在仓库中 <code>cmd</code> 中的 <code>*-gen*</code> 文件夹就代表了 <em>conversion</em> 的替换位置。</p>
<ul>
<li>对于 <code>client-gen</code>的tag 参数可以在 <a href="https://github.com/kubernetes/code-generator/blob/master/cmd/client-gen/generators/util/tags.go">code-generator\cmd\client-gen\generators\util\tags.go</a></li>
<li>对于其他类型的使用方法，例如 <a href="https://github.com/kubernetes/code-generator/blob/master/cmd/deepcopy-gen/main.go">deepcopy-gen</a> ,可以在包 main.go中看注释说明
<ul>
<li>+k8s:openapi-gen=true：启用一个生成器</li>
</ul>
</li>
</ul>
<blockquote>
<p>注：最终准备完成的文件（ <code>doc.go</code> , <code>register.go</code> , <code>types.go</code>）应该为：<code>apis/example.com/v1</code> 这种类型的</p>
<p>需要遵循的是，将这些文件放在 <code>&lt;version&gt;</code> 目录中，例如 <code>v1</code> 。这里 <code>v1</code>, <code>v1alpha1</code>, 根据自己需求定义。</p>
</blockquote>
<h2 id="开始填写文件内容">开始填写文件内容</h2>
<h4 id="typego">type.go</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">v1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span> <span class="s">&#34;k8s.io/apimachinery/pkg/apis/meta/v1&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// +genclient
</span></span></span><span class="line"><span class="cl"><span class="c1">// +genclient:noStatus
</span></span></span><span class="line"><span class="cl"><span class="c1">// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Port</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span><span class="p">.</span><span class="nx">TypeMeta</span> <span class="s">`json:&#34;,inline&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Standard object metadata.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMeta</span> <span class="s">`json:&#34;metadata,omitempty&#34; protobuf:&#34;bytes,1,opt,name=metadata&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Specification of the desired behavior of the Deployment.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Spec</span> <span class="nx">PortSpec</span> <span class="s">`json:&#34;spec,omitempty&#34; protobuf:&#34;bytes,2,opt,name=spec&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// +k8s:deepcopy-gen=false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">PortSpec</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span>        <span class="kt">string</span> <span class="s">`json:&#34;name&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Host</span>        <span class="kt">string</span> <span class="s">`json:&#34;host&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Port</span>        <span class="kt">int</span>    <span class="s">`json:&#34;port&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">IsPermanent</span> <span class="kt">bool</span>   <span class="s">`json:&#34;isPermanent&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">PortList</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span><span class="p">.</span><span class="nx">TypeMeta</span> <span class="s">`json:&#34;,inline&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">metav1</span><span class="p">.</span><span class="nx">ListMeta</span> <span class="s">`json:&#34;metadata,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">Items</span> <span class="p">[]</span><span class="nx">Port</span> <span class="s">`json:&#34;items&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="docgo">doc.go</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// +k8s:deepcopy-gen=package
</span></span></span><span class="line"><span class="cl"><span class="c1">// +k8s:protobuf-gen=package
</span></span></span><span class="line"><span class="cl"><span class="c1">// +k8s:openapi-gen=true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// +groupName=firewalld.fedoraproject.org
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">v1</span> <span class="c1">// import &#34;k8s.io/api/firewalld/v1&#34;
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="registergo">register.go</h4>
<p>这里是从 <a href="https://github.com/kubernetes/kubernetes/tree/master/staging/src/k8s.io/api">k8s.io/api</a> 里任意一个复制的，例如 <a href="https://github.com/kubernetes/kubernetes/blob/609db7ed0b1f2839e414c17d29fe4d76edc994bd/staging/src/k8s.io/api/core/v1/register.go#L1">k8s.io/api/core/v1/register.go</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">v1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span> <span class="s">&#34;k8s.io/apimachinery/pkg/apis/meta/v1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/apimachinery/pkg/runtime&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/apimachinery/pkg/runtime/schema&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// GroupName is the group name use in this package
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">const</span> <span class="nx">GroupName</span> <span class="p">=</span> <span class="s">&#34;firewalld.fedoraproject.org&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// SchemeGroupVersion is group version used to register these objects
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">SchemeGroupVersion</span> <span class="p">=</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersion</span><span class="p">{</span><span class="nx">Group</span><span class="p">:</span> <span class="nx">GroupName</span><span class="p">,</span> <span class="nx">Version</span><span class="p">:</span> <span class="s">&#34;v1&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Resource takes an unqualified resource and returns a Group qualified GroupResource
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">Resource</span><span class="p">(</span><span class="nx">resource</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">GroupResource</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">SchemeGroupVersion</span><span class="p">.</span><span class="nf">WithResource</span><span class="p">(</span><span class="nx">resource</span><span class="p">).</span><span class="nf">GroupResource</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// TODO: move SchemeBuilder with zz_generated.deepcopy.go to k8s.io/api.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// localSchemeBuilder and AddToScheme will stay in k8s.io/kubernetes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">SchemeBuilder</span>      <span class="p">=</span> <span class="nx">runtime</span><span class="p">.</span><span class="nf">NewSchemeBuilder</span><span class="p">(</span><span class="nx">addKnownTypes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">localSchemeBuilder</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">SchemeBuilder</span>
</span></span><span class="line"><span class="cl">	<span class="nx">AddToScheme</span>        <span class="p">=</span> <span class="nx">localSchemeBuilder</span><span class="p">.</span><span class="nx">AddToScheme</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Adds the list of known types to the given scheme.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">addKnownTypes</span><span class="p">(</span><span class="nx">scheme</span> <span class="o">*</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">scheme</span><span class="p">.</span><span class="nf">AddKnownTypes</span><span class="p">(</span><span class="nx">SchemeGroupVersion</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">Port</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">PortList</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span><span class="p">.</span><span class="nf">AddToGroupVersion</span><span class="p">(</span><span class="nx">scheme</span><span class="p">,</span> <span class="nx">SchemeGroupVersion</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="生成所需文件">生成所需文件</h4>
<p>使用 <code>code-generator</code> 时，实际上就是使用这个库中的脚本 <a href="https://github.com/kubernetes/code-generator/blob/master/generate-groups.sh">generate-groups.sh</a> ，该脚本又四个参数</p>
<ul>
<li>第一个参数：使用那些生成器，就是 <em>*.gen</em>，用逗号分割，all表示使用全部</li>
<li>第二个参数：client（client-go中informer, lister等）生成的文件存放到哪里</li>
<li>第三个参数：api（api结构，<code>k8s.io/api/</code>） 生成的文件存放到哪里，可以和定义的文件为一个目录</li>
<li>第四个参数：定义group:version</li>
<li>-output-base：输出包存放的根目录</li>
<li>-go-header-file：生成文件的头注释信息，这个是必要参数，除非生成失败</li>
</ul>
<blockquote>
<p>注：对于参数二，三，与-output-base，指定的路径，这里可以使用相对路径也可以使用go.mod中的定义的包名，对于使用相对路径而言，生成的文件中的import也将会为 &ldquo;../../&rdquo; 的格式</p>
</blockquote>
<p>一个完整的示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">../code-generator/generate-groups.sh all <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	../code-controller/client <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	../code-controller/apis  <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	firewalld:v1 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	--output-base ../code-controller/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	--go-header-file ../code-generator/hack/boilerplate.go.txt
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Reference</p>
<p><a href="https://insujang.github.io/2020-02-13/programming-kubernetes-crd/">CRD Programming</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>手写一个kubernetes controller</title>
      <link>https://www.oomkill.com/2022/06/ch12-controller/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/06/ch12-controller/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="overview">Overview</h2>
<p>根据Kuberneter文档对<a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-api-machinery/controllers.md">Controller</a>的描述，Controller在kubernetes中是负责协调的组件，根据设计模式可知，controller会不断的你的对象（如Pod）从当前状态与期望状态同步的一个过程。当然Controller会监听你的实际状态与期望状态。</p>
<h2 id="writing-controllers">Writing Controllers</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;flag&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">v1</span> <span class="s">&#34;k8s.io/api/core/v1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/apimachinery/pkg/fields&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">utilruntime</span> <span class="s">&#34;k8s.io/apimachinery/pkg/util/runtime&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/apimachinery/pkg/util/wait&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/client-go/kubernetes&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/client-go/rest&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/client-go/tools/cache&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/client-go/tools/clientcmd&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/client-go/util/homedir&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/client-go/util/workqueue&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/klog&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Controller</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lister</span>     <span class="nx">cache</span><span class="p">.</span><span class="nx">Indexer</span>
</span></span><span class="line"><span class="cl">	<span class="nx">controller</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">Controller</span>
</span></span><span class="line"><span class="cl">	<span class="nx">queue</span>      <span class="nx">workqueue</span><span class="p">.</span><span class="nx">RateLimitingInterface</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewController</span><span class="p">(</span><span class="nx">lister</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">Indexer</span><span class="p">,</span> <span class="nx">controller</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">Controller</span><span class="p">,</span> <span class="nx">queue</span> <span class="nx">workqueue</span><span class="p">.</span><span class="nx">RateLimitingInterface</span><span class="p">)</span> <span class="o">*</span><span class="nx">Controller</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">Controller</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">lister</span><span class="p">:</span>     <span class="nx">lister</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">controller</span><span class="p">:</span> <span class="nx">controller</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">queue</span><span class="p">:</span>      <span class="nx">queue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">processItem</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">item</span><span class="p">,</span> <span class="nx">quit</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nf">Get</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">quit</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">c</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nf">Done</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">processWrapper</span><span class="p">(</span><span class="nx">item</span><span class="p">.(</span><span class="kt">string</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nf">handleError</span><span class="p">(</span><span class="nx">item</span><span class="p">.(</span><span class="kt">string</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">handleError</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">c</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nf">NumRequeues</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">&lt;</span> <span class="mi">3</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nf">AddRateLimited</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nf">Forget</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Drop Object %s in queue&#34;</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">processWrapper</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">item</span><span class="p">,</span> <span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">lister</span><span class="p">.</span><span class="nf">GetByKey</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Error</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">exists</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">klog</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;item %v not exists in cache.\n&#34;</span><span class="p">,</span> <span class="nx">item</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">item</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nf">GetName</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">Controller</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">threadiness</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">stopCh</span> <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleCrash</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">c</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nf">ShutDown</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Starting custom controller&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nx">c</span><span class="p">.</span><span class="nx">controller</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">!</span><span class="nx">cache</span><span class="p">.</span><span class="nf">WaitForCacheSync</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">controller</span><span class="p">.</span><span class="nx">HasSynced</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleError</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;sync failed.&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">threadiness</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="nx">wait</span><span class="p">.</span><span class="nf">Until</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">c</span><span class="p">.</span><span class="nf">processItem</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">&lt;-</span><span class="nx">stopCh</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">Info</span><span class="p">(</span><span class="s">&#34;Stopping custom controller&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nx">k8sconfig</span>  <span class="o">*</span><span class="kt">string</span> <span class="c1">//使用kubeconfig配置文件进行集群权限认证
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">restConfig</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span>
</span></span><span class="line"><span class="cl">		<span class="nx">err</span>        <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">home</span> <span class="o">:=</span> <span class="nx">homedir</span><span class="p">.</span><span class="nf">HomeDir</span><span class="p">();</span> <span class="nx">home</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">k8sconfig</span> <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;kubeconfig&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s/.kube/config&#34;</span><span class="p">,</span> <span class="nx">home</span><span class="p">),</span> <span class="s">&#34;kubernetes auth config&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">k8sconfig</span> <span class="p">=</span> <span class="nx">k8sconfig</span>
</span></span><span class="line"><span class="cl">	<span class="nx">flag</span><span class="p">.</span><span class="nf">Parse</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Stat</span><span class="p">(</span><span class="o">*</span><span class="nx">k8sconfig</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">restConfig</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">rest</span><span class="p">.</span><span class="nf">InClusterConfig</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 这里是从masterUrl 或者 kubeconfig传入集群的信息，两者选一
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">restConfig</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">clientcmd</span><span class="p">.</span><span class="nf">BuildConfigFromFlags</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="o">*</span><span class="nx">k8sconfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">restset</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">kubernetes</span><span class="p">.</span><span class="nf">NewForConfig</span><span class="p">(</span><span class="nx">restConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lister</span> <span class="o">:=</span> <span class="nx">cache</span><span class="p">.</span><span class="nf">NewListWatchFromClient</span><span class="p">(</span><span class="nx">restset</span><span class="p">.</span><span class="nf">CoreV1</span><span class="p">().</span><span class="nf">RESTClient</span><span class="p">(),</span> <span class="s">&#34;pods&#34;</span><span class="p">,</span> <span class="s">&#34;default&#34;</span><span class="p">,</span> <span class="nx">fields</span><span class="p">.</span><span class="nf">Everything</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">queue</span> <span class="o">:=</span> <span class="nx">workqueue</span><span class="p">.</span><span class="nf">NewRateLimitingQueue</span><span class="p">(</span><span class="nx">workqueue</span><span class="p">.</span><span class="nf">DefaultControllerRateLimiter</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">indexer</span><span class="p">,</span> <span class="nx">controller</span> <span class="o">:=</span> <span class="nx">cache</span><span class="p">.</span><span class="nf">NewIndexerInformer</span><span class="p">(</span><span class="nx">lister</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">{},</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">ResourceEventHandlerFuncs</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">AddFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;add &#34;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nf">GetName</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="nx">key</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cache</span><span class="p">.</span><span class="nf">MetaNamespaceKeyFunc</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">queue</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">UpdateFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">oldObj</span><span class="p">,</span> <span class="nx">newObj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;update&#34;</span><span class="p">,</span> <span class="nx">newObj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nf">GetName</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">newObj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Conditions</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Status</span> <span class="o">==</span> <span class="s">&#34;True&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;update: the Initialized Status&#34;</span><span class="p">,</span> <span class="nx">newObj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Conditions</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Status</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;update: the Initialized Status &#34;</span><span class="p">,</span> <span class="nx">newObj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Conditions</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Status</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;update: the Initialized Reason &#34;</span><span class="p">,</span> <span class="nx">newObj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Conditions</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">Reason</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">newObj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Conditions</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">newObj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Conditions</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">Status</span> <span class="o">==</span> <span class="s">&#34;True&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;update: the Ready Status&#34;</span><span class="p">,</span> <span class="nx">newObj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Conditions</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">Status</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;update: the Ready Status &#34;</span><span class="p">,</span> <span class="nx">newObj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Conditions</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">Status</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;update: the Ready Reason &#34;</span><span class="p">,</span> <span class="nx">newObj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Conditions</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">Reason</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">newObj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Conditions</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">Status</span> <span class="o">==</span> <span class="s">&#34;True&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;update: the PodCondition Status&#34;</span><span class="p">,</span> <span class="nx">newObj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Conditions</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">Status</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;update: the PodCondition Status &#34;</span><span class="p">,</span> <span class="nx">newObj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Conditions</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">Status</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;update: the PodCondition Reason &#34;</span><span class="p">,</span> <span class="nx">newObj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Conditions</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">Reason</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">newObj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Conditions</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">Status</span> <span class="o">==</span> <span class="s">&#34;True&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;update: the PodScheduled Status&#34;</span><span class="p">,</span> <span class="nx">newObj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Conditions</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">Status</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;update: the PodScheduled Status &#34;</span><span class="p">,</span> <span class="nx">newObj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Conditions</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">Status</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;update: the PodScheduled Reason &#34;</span><span class="p">,</span> <span class="nx">newObj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Conditions</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">Reason</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DeleteFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;delete &#34;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nf">GetName</span><span class="p">(),</span> <span class="s">&#34;Status &#34;</span><span class="p">,</span> <span class="nx">obj</span><span class="p">.(</span><span class="o">*</span><span class="nx">v1</span><span class="p">.</span><span class="nx">Pod</span><span class="p">).</span><span class="nx">Status</span><span class="p">.</span><span class="nx">Phase</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 上面是事件函数的处理，下面是对workqueue的操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">key</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cache</span><span class="p">.</span><span class="nf">MetaNamespaceKeyFunc</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">queue</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">Indexers</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">c</span> <span class="o">:=</span> <span class="nf">NewController</span><span class="p">(</span><span class="nx">indexer</span><span class="p">,</span> <span class="nx">controller</span><span class="p">,</span> <span class="nx">queue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">stopCh</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">stopCh1</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="o">&lt;-</span><span class="nx">stopCh1</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过日志可以看出，Pod create后的步骤大概为4步：</p>
<ul>
<li>Initialized：初始化好后状态为Pending</li>
<li>PodScheduled：然后调度</li>
<li>PodCondition</li>
<li>Ready</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">add  netbox
</span></span><span class="line"><span class="cl">default/netbox
</span></span><span class="line"><span class="cl">netbox
</span></span><span class="line"><span class="cl">update netbox status Pending to Pending
</span></span><span class="line"><span class="cl">update: the Initialized Status True
</span></span><span class="line"><span class="cl">update netbox status Pending to Pending
</span></span><span class="line"><span class="cl">update: the Initialized Status True
</span></span><span class="line"><span class="cl">update: the Ready Status  False
</span></span><span class="line"><span class="cl">update: the Ready Reason  ContainersNotReady
</span></span><span class="line"><span class="cl">update: the PodCondition Status  False
</span></span><span class="line"><span class="cl">update: the PodCondition Reason  ContainersNotReady
</span></span><span class="line"><span class="cl">update: the PodScheduled Status True
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">update netbox status Pending to Running
</span></span><span class="line"><span class="cl">update: the Initialized Status True
</span></span><span class="line"><span class="cl">update: the Ready Status True
</span></span><span class="line"><span class="cl">update: the PodCondition Status True
</span></span><span class="line"><span class="cl">update: the PodScheduled Status True
</span></span></code></pre></td></tr></table>
</div>
</div><p>大致上与 <code>kubectl describe pod</code> 看到的内容页相似</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">default-scheduler  Successfully assigned default/netbox to master-machine
</span></span><span class="line"><span class="cl">  Normal  Pulling    85s   kubelet            Pulling image &#34;cylonchau/netbox&#34;
</span></span><span class="line"><span class="cl">  Normal  Pulled     30s   kubelet            Successfully pulled image &#34;cylonchau/netbox&#34;
</span></span><span class="line"><span class="cl">  Normal  Created    30s   kubelet            Created container netbox
</span></span><span class="line"><span class="cl">  Normal  Started    30s   kubelet            Started container netbox
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="reference">Reference</h2>
<blockquote>
<p><a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-api-machinery/controllers.md">controllers.md</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用CRD扩展Kubernetes API</title>
      <link>https://www.oomkill.com/2022/06/ch13-crd/</link>
      <pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/06/ch13-crd/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>Kubernetes的主节点或控制面板当中主要有三个组件，其中apiserver是整个系统的数据库，借助于Cluster Store（etcd）服务，来实现所有的包括用户所期望状态的定义，以及集群上资源当前状态的实时记录等。</p>
<p>etcd是分布式通用的K/V系统 <code>KV Store</code> ，可存储用户所定义的任何由KV Store所支持的可持久化的数据。它不仅仅被apiserver所使用，如flannel、calico二者也需要以etcd来保存当前应用程序对应的存储数据。 任何一个分布式应用程序几乎都会用到一个高可用的存储系统。</p>
<p>apiserver将etcd所提供的存储接口做了高度抽象，使用户通过apiserver来完成数据存取时，只能使用apiserver中所内建支持的数据范式。在某种情况之下，我们所期望管理的资源或存储对象在现有的Kubernetes资源无法满足需求时。</p>
<p>Operator本身是建构在StatefulSet以及本身的基本Kubernetes资源之上，由开发者自定义的更高级的、更抽象的自定义资源类型。他可借助于底层的Pod、Service功能，再次抽象出新资源类型。更重要的是，整个集群本身可抽象成一个单一资源。</p>
<p>为了实现更高级的资源管理，需要利用已有的基础资源类型，做一个更高级的抽象，来定义成更能符合用户所需要的、可单一管理的资源类型，而无需去分别管理每一个资源。</p>
<p>在Kubernetes之上自定义资源一般被称为扩展Kubernetes所支持的资源类型，</p>
<ul>
<li>自定义资源类型 CRD Custom Resource Definition</li>
<li>自定义apiserver</li>
<li>修改APIServer源代码，改动内部的资源类型定义</li>
</ul>
<p>CRD是kubernetes内建的资源类型，从而使得用户可以定义的不是具体的资源，而是资源类型，也是扩展Kubernetes最简单的方式。</p>
<h2 id="intorduction-crd">Intorduction CRD</h2>
<h3 id="什么是crd">什么是CRD</h3>
<p>在 Kubernetes API 中，resources 是存储 API 对象集合的endpoint。例如，内置 Pod resource 包含 Pod 对象的集合。当我们想扩展API，原生的Kubernetes就不能满足我们的需求了，这时 <strong>CRD</strong>  (<code>CustomResourceDefinition</code>) 就出现了。在 Kubernetes 中创建了 CRD 后，就可以像使用任何其他原生 Kubernetes 对象一样使用它，从而利用 Kubernetes 的所有功能、如安全性、API 服务、RBAC 等。</p>
<p>Kubernetes 1.7 之后增加了对 CRD 自定义资源二次开发能力来扩展 Kubernetes API，通过 CRD 我们可以向 Kubernetes API 中增加新资源类型，而不需要修改 Kubernetes 源码来创建自定义的 API server，该功能大大提高了 Kubernetes 的扩展能力。</p>
<h2 id="创建-crd">创建 CRD</h2>
<p><strong>前提条件</strong>： Kubernetes 服务器版本必须不低于版本 1.16</p>
<p>再创建新的 <code>CustomResourceDefinition</code>（CRD）时，Kubernetes API 服务器会为指定的每一个版本生成一个 <code>RESTful</code> 的资源路径。（即定义一个Restful API）。CRD 可以是<code>namespace</code>作用域的，也可以是<code>cluster</code>作用域的，取决于 CRD 的 <code>scope</code> 字段设置。和其他现有的内置对象一样，删除一个<code>namespace</code>时，该<code>namespace</code>下的所有定制对象也会被删除。CustomResourceDefinition 本身是不受名字空间限制的，对所有名字空间可用。</p>
<p>例如，编写一个firewall port 规则：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># 1.16版本后固定格式</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apiextensions.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 类型crd</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">CustomResourceDefinition</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 必须为name=spec.names.plural + spec.group</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ports.firewalld.fedoraproject.org</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># api中的group</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># /apis/&lt;group&gt;/&lt;version&gt;/&lt;plural&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">group</span><span class="p">:</span><span class="w"> </span><span class="l">firewalld.fedoraproject.org</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 此crd作用于 可选Namespaced|Cluster</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">scope</span><span class="p">:</span><span class="w"> </span><span class="l">Namespaced</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">names</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 名字的复数形式，用于api</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">plural</span><span class="p">:</span><span class="w"> </span><span class="l">ports</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 名称的单数形式。用于命令行</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">singular</span><span class="p">:</span><span class="w"> </span><span class="l">port</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 种类，资源清单类型</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PortRule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 名字简写，类似允许 CLI 上较短的字符串匹配的资源</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">shortNames</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">fp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">versions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 定义版本的类型</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 通过 served 标志来启用或禁止</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">served</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 其中一个且只有一个版本必需被标记为存储版本</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">storage</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 自定义资源的默认认证的模式</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">schema</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 使用的版本</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">openAPIV3Schema</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 定义一个参数为对象类型</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">object</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 这个参数的类型</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 参数属性spec</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># spec属性的类型为对象</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">object</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># 对象属性</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">properties</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># spec属性name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">name</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># 类型为string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">string</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">port</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">integer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">isPermanent</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">boolean</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>需要注意的是v1.16版本以后已经 <code>GA</code>了，使用的是<code>v1</code>版本，之前都是<code>vlbeta1</code>，定义规范有部分变化，所以要注意版本变化。</p>
<p>这个地方的定义和我们定义普通的资源对象比较类似，我们说我们可以随意定义一个自定义的资源对象，但是在创建资源的时候，肯定不是任由我们随意去编写<code>YAML</code>文件的，当我们把上面的<code>CRD</code>文件提交给Kubernetes之后，Kubernetes会对我们提交的声明文件进行校验，从定义可以看出CRD是基于 <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md">OpenAPIv3 schem</a> 进行规范的。当然这种校验只是<strong>对于字段的类型进行校验</strong>，比较初级，如果想要更加复杂的校验，这个时候就需要通过Kubernetes的admission webhook来实现了。关于校验的更多用法，可以前往官方文档查看。</p>
<p>创建一个crd类型资源</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;firewalld.fedoraproject.org/v1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PortRule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">http-port</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;nginx&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">isPermanent</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>查看创建的crd</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ kubectl get t
</span></span><span class="line"><span class="cl">NAME                                CREATED AT
</span></span><span class="line"><span class="cl">firewallds.port.fedoraproject.org   2022-06-19T09:27:09Z
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="reference">Reference</h2>
<blockquote>
<p><a href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/">CRD</a></p>
<p><a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#customresourcedefinition-v1-apiextensions-k8s-io">CRD Definition</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>源码分析client-go架构 - queue</title>
      <link>https://www.oomkill.com/2022/06/ch09-queue/</link>
      <pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/06/ch09-queue/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="通用队列">通用队列</h2>
<p>在kubernetes中，使用go的channel无法满足kubernetes的应用场景，如延迟、限速等；在kubernetes中存在三种队列通用队列 <code>common queue</code> ，延迟队列 <code>delaying queue</code>，和限速队列 <code>rate limiters queue</code></p>
<h3 id="inferface">Inferface</h3>
<p>Interface作为所有队列的一个抽象定义</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Interface</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Add</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Len</span><span class="p">()</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Get</span><span class="p">()</span> <span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">shutdown</span> <span class="kt">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Done</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nf">ShutDown</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nf">ShuttingDown</span><span class="p">()</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="implementation">Implementation</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Type</span> <span class="kd">struct</span> <span class="p">{</span> <span class="c1">// 一个work queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">queue</span> <span class="p">[]</span><span class="nx">t</span> <span class="c1">// queue用slice做存储
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">dirty</span> <span class="nx">set</span> <span class="c1">// 脏位，定义了需要处理的元素，类似于操作系统，表示已修改但为写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">processing</span> <span class="nx">set</span> <span class="c1">// 当前正在处理的元素集合
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cond</span> <span class="o">*</span><span class="nx">sync</span><span class="p">.</span><span class="nx">Cond</span>
</span></span><span class="line"><span class="cl">	<span class="nx">shuttingDown</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metrics</span> <span class="nx">queueMetrics</span>
</span></span><span class="line"><span class="cl">	<span class="nx">unfinishedWorkUpdatePeriod</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span></span><span class="line"><span class="cl">	<span class="nx">clock</span>                      <span class="nx">clock</span><span class="p">.</span><span class="nx">Clock</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">empty</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">t</span> <span class="kd">interface</span><span class="p">{}</span> <span class="c1">// t queue中的元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">set</span> <span class="kd">map</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="nx">empty</span> <span class="c1">// dirty 和 processing中的元素
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到其中核心属性就是 <code>queue</code> , <code>dirty</code> , <code>processing</code></p>
<h2 id="延迟队列">延迟队列</h2>
<p>在研究优先级队列前，需要对 <code> Heap</code> 有一定的了解，因为delay queue使用了 <code>heap</code> 做延迟队列</p>
<h3 id="heap">Heap</h3>
<p><code>Heap</code> 是基于树属性的特殊数据结构；heap是一种完全二叉树类型，具有两种类型：</p>
<ul>
<li>如：B 是 A 的子节点，则  $key(A) \geq key(B)$ 。这就意味着具有最大Key的元素始终位于根节点，这类Heap称为最大堆 <strong>MaxHeap</strong>。</li>
<li>父节点的值小于或等于其左右子节点的值叫做 <strong>MinHeap</strong></li>
</ul>
<p>二叉堆的存储规则：</p>
<ul>
<li>每个节点包含的元素大于或等于该节点子节点的元素。</li>
<li>树是完全二叉树。</li>
</ul>
<p>那么下列图片中，那个是堆</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/f.10.1.jpeg" alt="img"  /></p>
<p>heap的实现</p>
<h4 id="实例向左边添加一个值为42的元素的过程">实例：向左边添加一个值为42的元素的过程</h4>
<p><strong>步骤一</strong>：将新元素放入堆中的第一个可用位置。这将使结构保持为完整的二叉树，但它可能不再是堆，因为新元素可能具有比其父元素更大的值。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/reheap1.jpeg" alt="img"  /></p>
<p><strong>步骤二</strong>：如果新元素的值大于父元素，将新元素与父元素交换，直到达到新元素到根，或者新元素大于等于其父元素的值时将停止</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/reheap2.jpeg" alt="img"  /></p>
<p>这种过程被称为 <strong>向上调整</strong> （<code>reheapification upward</code>）</p>
<h4 id="实例移除根">实例：移除根</h4>
<p><strong>步骤一</strong>：将根元素复制到用于返回值的变量中，将最深层的最后一个元素复制到根，然后将最后一个节点从树中取出。该元素称为 <code>out-of-place</code> 。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/reheap3.jpeg" alt="img"  /></p>
<p><strong>步骤二</strong>：而将异位元素与其最大值的子元素交换，并返回在步骤1中保存的值。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/reheap4.jpeg" alt="img"  /></p>
<p>这个过程被称为<strong>向下调整</strong> （<code>reheapification downward</code>）</p>
<h3 id="优先级队列">优先级队列</h3>
<p>优先级队列的行为：</p>
<ul>
<li>元素被放置在队列中，然后被取出。</li>
<li>优先级队列中的每个元素都有一个关联的数字，称为优先级。</li>
<li>当元素离开优先级队列时，最高优先级的元素最先离开。</li>
</ul>
<p>如何实现的：</p>
<ul>
<li>
<p>在优先级队列中，heap的每个节点都包含一个元素以及元素的优先级，并且维护树以便它遵循使用元素的优先级来比较节点的堆存储规则：</p>
<ul>
<li>每个节点包含的元素的优先级大于或等于该节点子元素的优先级。</li>
<li>树是完全二叉树。</li>
</ul>
</li>
<li>
<p>实现的代码：<a href="https://pkg.go.dev/container/heap#example__priorityQueue">golang priorityQueue</a></p>
</li>
</ul>
<blockquote>
<p>Reference</p>
<p><a href="https://www.cpp.edu/~ftang/courses/CS241/notes/heap.htm">heap</a></p>
</blockquote>
<h3 id="client-go-的延迟队列">Client-go 的延迟队列</h3>
<p>在Kubernetes中对 <code>delaying queue</code> 的设计非常精美，通过使用 <code>heap</code> 实现的延迟队列，加上kubernetes中的通过队列，完成了延迟队列的功能。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 注释中给了一个hot-loop热循环，通过这个loop实现了delaying
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">DelayingInterface</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Interface</span> <span class="c1">// 继承了workqueue的功能
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">AddAfter</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">duration</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">)</span> <span class="c1">// 在time后将内容添加到工作队列中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>具体实现了 <code>DelayingInterface</code> 的实例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">delayingType</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Interface</span> <span class="c1">// 通用的queue 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">clock</span> <span class="nx">clock</span><span class="p">.</span><span class="nx">Clock</span> <span class="c1">// 对比的时间 ，包含一些定时器的功能
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    	<span class="kd">type</span> <span class="nx">Clock</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">PassiveClock</span>
</span></span><span class="line"><span class="cl">            		<span class="kd">type</span> <span class="nx">PassiveClock</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="nf">Now</span><span class="p">()</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
</span></span><span class="line"><span class="cl">                        <span class="nf">Since</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">)</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="nf">After</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">)</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
</span></span><span class="line"><span class="cl">            <span class="nf">NewTimer</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">)</span> <span class="nx">Timer</span>
</span></span><span class="line"><span class="cl">            <span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nf">NewTicker</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">)</span> <span class="nx">Ticker</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">stopCh</span> <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span> <span class="c1">// 停止loop
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">stopOnce</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Once</span> <span class="c1">// 保证退出只会触发一次
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">heartbeat</span> <span class="nx">clock</span><span class="p">.</span><span class="nx">Ticker</span> <span class="c1">// 一个定时器，保证了loop的最大空事件等待时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">waitingForAddCh</span> <span class="kd">chan</span> <span class="o">*</span><span class="nx">waitFor</span> <span class="c1">// 普通的chan，用来接收数据插入到延迟队列中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">metrics</span> <span class="nx">retryMetrics</span> <span class="c1">// 重试的指数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>那么延迟队列的整个数据结构如下图所示</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220527215559879.png" alt="image-20220527215559879"  /></p>
<p>而上面部分也说到了，这个延迟队列的核心就是一个优先级队列，而优先级队列又需要满足：</p>
<ul>
<li>优先级队列中的每个元素都有一个关联的数字，称为优先级。</li>
<li>当元素离开优先级队列时，最高优先级的元素最先离开。</li>
</ul>
<p>而 <code>waitFor</code> 就是这个优先级队列的数据结构</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">waitFor</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">data</span>    <span class="nx">t</span> <span class="c1">// 数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">readyAt</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="c1">// 加入工作队列的时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">index</span> <span class="kt">int</span> <span class="c1">// 优先级队列中的索引
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而 <code>waitForPriorityQueue</code> 是对 <code>container/heap/heap.go.Inferface</code> 的实现，其数据结构就是使最小 <code>readyAt</code> 位于Root 的一个 <code>MinHeap</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Interface</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sort</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Push</span><span class="p">(</span><span class="nx">x</span> <span class="kd">interface</span><span class="p">{})</span> <span class="c1">// add x as element Len()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Pop</span><span class="p">()</span> <span class="kd">interface</span><span class="p">{}</span>   <span class="c1">// remove and return element Len() - 1.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而这个的实现是 <code>waitForPriorityQueue</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">waitForPriorityQueue</span> <span class="p">[]</span><span class="o">*</span><span class="nx">waitFor</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">pq</span> <span class="nx">waitForPriorityQueue</span><span class="p">)</span> <span class="nf">Len</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="nx">pq</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 这个也是最重要的一个，就是哪个属性是排序的关键，也是heap.down和heap.up中使用的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">pq</span> <span class="nx">waitForPriorityQueue</span><span class="p">)</span> <span class="nf">Less</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">pq</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">readyAt</span><span class="p">.</span><span class="nf">Before</span><span class="p">(</span><span class="nx">pq</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">readyAt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">pq</span> <span class="nx">waitForPriorityQueue</span><span class="p">)</span> <span class="nf">Swap</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pq</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">pq</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">pq</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span> <span class="nx">pq</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pq</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">index</span> <span class="p">=</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">	<span class="nx">pq</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">index</span> <span class="p">=</span> <span class="nx">j</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// push 和pop 必须使用heap.push 和heap.pop
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">pq</span> <span class="o">*</span><span class="nx">waitForPriorityQueue</span><span class="p">)</span> <span class="nf">Push</span><span class="p">(</span><span class="nx">x</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">n</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="o">*</span><span class="nx">pq</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">item</span> <span class="o">:=</span> <span class="nx">x</span><span class="p">.(</span><span class="o">*</span><span class="nx">waitFor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">item</span><span class="p">.</span><span class="nx">index</span> <span class="p">=</span> <span class="nx">n</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="nx">pq</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="o">*</span><span class="nx">pq</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">pq</span> <span class="o">*</span><span class="nx">waitForPriorityQueue</span><span class="p">)</span> <span class="nf">Pop</span><span class="p">()</span> <span class="kd">interface</span><span class="p">{}</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">n</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="o">*</span><span class="nx">pq</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">item</span> <span class="o">:=</span> <span class="p">(</span><span class="o">*</span><span class="nx">pq</span><span class="p">)[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="nx">item</span><span class="p">.</span><span class="nx">index</span> <span class="p">=</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="nx">pq</span> <span class="p">=</span> <span class="p">(</span><span class="o">*</span><span class="nx">pq</span><span class="p">)[</span><span class="mi">0</span><span class="p">:(</span><span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">item</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Peek returns the item at the beginning of the queue, without removing the
</span></span></span><span class="line"><span class="cl"><span class="c1">// item or otherwise mutating the queue. It is safe to call directly.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">pq</span> <span class="nx">waitForPriorityQueue</span><span class="p">)</span> <span class="nf">Peek</span><span class="p">()</span> <span class="kd">interface</span><span class="p">{}</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">pq</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而整个延迟队列的核心就是 <code>waitingLoop</code>，作为了延迟队列的主要逻辑，检查 <code>waitingForAddCh</code> 有没有要延迟的内容，取出延迟的内容放置到 <code>Heap</code> 中；以及保证最大的阻塞周期</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">q</span> <span class="o">*</span><span class="nx">delayingType</span><span class="p">)</span> <span class="nf">waitingLoop</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleCrash</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">never</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="o">&lt;-</span><span class="kd">chan</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">)</span> <span class="c1">// 作为占位符
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">nextReadyAtTimer</span> <span class="nx">clock</span><span class="p">.</span><span class="nx">Timer</span> <span class="c1">// 最近一个任务要执行的定时器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">waitingForQueue</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">waitForPriorityQueue</span><span class="p">{}</span> <span class="c1">// 优先级队列，heap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">heap</span><span class="p">.</span><span class="nf">Init</span><span class="p">(</span><span class="nx">waitingForQueue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">waitingEntryByData</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">*</span><span class="nx">waitFor</span><span class="p">{}</span> <span class="c1">// 检查是否反复添加
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">q</span><span class="p">.</span><span class="nx">Interface</span><span class="p">.</span><span class="nf">ShuttingDown</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">now</span> <span class="o">:=</span> <span class="nx">q</span><span class="p">.</span><span class="nx">clock</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">waitingForQueue</span><span class="p">.</span><span class="nf">Len</span><span class="p">()</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">entry</span> <span class="o">:=</span> <span class="nx">waitingForQueue</span><span class="p">.</span><span class="nf">Peek</span><span class="p">().(</span><span class="o">*</span><span class="nx">waitFor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">entry</span><span class="p">.</span><span class="nx">readyAt</span><span class="p">.</span><span class="nf">After</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">break</span> <span class="c1">// 时间没到则不处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nx">entry</span> <span class="p">=</span> <span class="nx">heap</span><span class="p">.</span><span class="nf">Pop</span><span class="p">(</span><span class="nx">waitingForQueue</span><span class="p">).(</span><span class="o">*</span><span class="nx">waitFor</span><span class="p">)</span> <span class="c1">// 从优先级队列中取出一个
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">q</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span> <span class="c1">// 添加到延迟队列中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nb">delete</span><span class="p">(</span><span class="nx">waitingEntryByData</span><span class="p">,</span> <span class="nx">entry</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span> <span class="c1">// 删除map表中的数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="c1">// 如果存在数据则设置最近一个内容要执行的定时器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">nextReadyAt</span> <span class="o">:=</span> <span class="nx">never</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">waitingForQueue</span><span class="p">.</span><span class="nf">Len</span><span class="p">()</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">nextReadyAtTimer</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">nextReadyAtTimer</span><span class="p">.</span><span class="nf">Stop</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">entry</span> <span class="o">:=</span> <span class="nx">waitingForQueue</span><span class="p">.</span><span class="nf">Peek</span><span class="p">().(</span><span class="o">*</span><span class="nx">waitFor</span><span class="p">)</span> <span class="c1">// 窥视[0]和值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">nextReadyAtTimer</span> <span class="p">=</span> <span class="nx">q</span><span class="p">.</span><span class="nx">clock</span><span class="p">.</span><span class="nf">NewTimer</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">readyAt</span><span class="p">.</span><span class="nf">Sub</span><span class="p">(</span><span class="nx">now</span><span class="p">))</span> <span class="c1">// 创建一个定时器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">nextReadyAt</span> <span class="p">=</span> <span class="nx">nextReadyAtTimer</span><span class="p">.</span><span class="nf">C</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">q</span><span class="p">.</span><span class="nx">stopCh</span><span class="p">:</span> <span class="c1">// 退出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">q</span><span class="p">.</span><span class="nx">heartbeat</span><span class="p">.</span><span class="nf">C</span><span class="p">():</span> <span class="c1">// 多久没有任何动作时重新一次循环
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">nextReadyAt</span><span class="p">:</span> <span class="c1">// 如果有元素时间到了，则继续执行循环，处理上面添加的操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">case</span> <span class="nx">waitEntry</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">q</span><span class="p">.</span><span class="nx">waitingForAddCh</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">waitEntry</span><span class="p">.</span><span class="nx">readyAt</span><span class="p">.</span><span class="nf">After</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">clock</span><span class="p">.</span><span class="nf">Now</span><span class="p">())</span> <span class="p">{</span> <span class="c1">// 时间没到，是用readyAt和now对比time.Now
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// 添加到延迟队列中，有两个 waitingEntryByData waitingForQueue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nf">insert</span><span class="p">(</span><span class="nx">waitingForQueue</span><span class="p">,</span> <span class="nx">waitingEntryByData</span><span class="p">,</span> <span class="nx">waitEntry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">q</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">waitEntry</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nx">drained</span> <span class="o">:=</span> <span class="kc">false</span> <span class="c1">// 保证可以取完q.waitingForAddCh // addafter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">for</span> <span class="p">!</span><span class="nx">drained</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 这里是一个有buffer的队列，需要保障这个队列读完
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">case</span> <span class="nx">waitEntry</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">q</span><span class="p">.</span><span class="nx">waitingForAddCh</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="nx">waitEntry</span><span class="p">.</span><span class="nx">readyAt</span><span class="p">.</span><span class="nf">After</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">clock</span><span class="p">.</span><span class="nf">Now</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nf">insert</span><span class="p">(</span><span class="nx">waitingForQueue</span><span class="p">,</span> <span class="nx">waitingEntryByData</span><span class="p">,</span> <span class="nx">waitEntry</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="nx">q</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">waitEntry</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">default</span><span class="p">:</span> <span class="c1">// 保证可以退出，但限制于上一个分支的0~n的读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// 如果上一个分支阻塞，则为没有数据就是取尽了，走到这个分支
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// 如果上个分支不阻塞则读取到上个分支阻塞为止，代表阻塞，则走default退出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">drained</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="限速队列">限速队列</h2>
<p>限速队列 <code>RateLimiting</code> 是在优先级队列是在延迟队列的基础上进行扩展的一个队列</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">RateLimitingInterface</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">DelayingInterface</span> <span class="c1">// 继承延迟队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 在限速器准备完成后（即合规后）添加条目到队列中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">AddRateLimited</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// drop掉条目，无论成功或失败
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Forget</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 被重新放入队列中的次数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">NumRequeues</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到一个限速队列的抽象对应只要满足了 <code>AddRateLimited()</code> , <code>Forget()</code> , <code>NumRequeues()</code> 的延迟队列都是限速队列。看了解规则之后，需要对具体的实现进行分析。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">rateLimitingType</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">DelayingInterface</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rateLimiter</span> <span class="nx">RateLimiter</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">q</span> <span class="o">*</span><span class="nx">rateLimitingType</span><span class="p">)</span> <span class="nf">AddRateLimited</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">q</span><span class="p">.</span><span class="nx">DelayingInterface</span><span class="p">.</span><span class="nf">AddAfter</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">q</span><span class="p">.</span><span class="nx">rateLimiter</span><span class="p">.</span><span class="nf">When</span><span class="p">(</span><span class="nx">item</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">q</span> <span class="o">*</span><span class="nx">rateLimitingType</span><span class="p">)</span> <span class="nf">NumRequeues</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">q</span><span class="p">.</span><span class="nx">rateLimiter</span><span class="p">.</span><span class="nf">NumRequeues</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">q</span> <span class="o">*</span><span class="nx">rateLimitingType</span><span class="p">)</span> <span class="nf">Forget</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">q</span><span class="p">.</span><span class="nx">rateLimiter</span><span class="p">.</span><span class="nf">Forget</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>rateLimitingType</code> 则是对抽象规范 <code>RateLimitingInterface</code> 的实现，可以看出是在延迟队列的基础上增加了一个限速器 <code>RateLimiter</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">RateLimiter</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// when决定等待多长时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">When</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{})</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// drop掉item
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// or for success, we&#39;ll stop tracking it
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Forget</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 重新加入队列中的次数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">NumRequeues</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>抽象限速器的实现，有 <code>BucketRateLimiter</code> , <code>ItemBucketRateLimiter</code> , <code>ItemExponentialFailureRateLimiter</code> , <code>ItemFastSlowRateLimiter</code> ,  <code>MaxOfRateLimiter</code> ，下面对这些限速器进行分析</p>
<h3 id="bucketratelimiter">BucketRateLimiter</h3>
<p><code>BucketRateLimiter</code> 是实现 <code>rate.Limiter</code> 与 抽象 <code>RateLimiter</code> 的一个令牌桶，初始化时通过 <code>workqueue.DefaultControllerRateLimiter()</code> 进行初始化。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">DefaultControllerRateLimiter</span><span class="p">()</span> <span class="nx">RateLimiter</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nf">NewMaxOfRateLimiter</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nf">NewItemExponentialFailureRateLimiter</span><span class="p">(</span><span class="mi">5</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">,</span> <span class="mi">1000</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 10 qps, 100 bucket size.  This is only for retry speed and its only the overall factor (not per item)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="o">&amp;</span><span class="nx">BucketRateLimiter</span><span class="p">{</span><span class="nx">Limiter</span><span class="p">:</span> <span class="nx">rate</span><span class="p">.</span><span class="nf">NewLimiter</span><span class="p">(</span><span class="nx">rate</span><span class="p">.</span><span class="nf">Limit</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span> <span class="mi">100</span><span class="p">)},</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://www.cnblogs.com/Cylon/p/16379709.html">更多关于令牌桶算法可以参考这里</a></p>
<h3 id="itembucketratelimiter">ItemBucketRateLimiter</h3>
<p><code>ItemBucketRateLimiter</code> 是作为列表存储每个令牌桶的实现，每个key都是单独的限速器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ItemBucketRateLimiter</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">r</span>     <span class="nx">rate</span><span class="p">.</span><span class="nx">Limit</span>
</span></span><span class="line"><span class="cl">	<span class="nx">burst</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">limitersLock</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span></span><span class="line"><span class="cl">	<span class="nx">limiters</span>     <span class="kd">map</span><span class="p">[</span><span class="kd">interface</span><span class="p">{}]</span><span class="o">*</span><span class="nx">rate</span><span class="p">.</span><span class="nx">Limiter</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewItemBucketRateLimiter</span><span class="p">(</span><span class="nx">r</span> <span class="nx">rate</span><span class="p">.</span><span class="nx">Limit</span><span class="p">,</span> <span class="nx">burst</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="nx">ItemBucketRateLimiter</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">ItemBucketRateLimiter</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">r</span><span class="p">:</span>        <span class="nx">r</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">burst</span><span class="p">:</span>    <span class="nx">burst</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">limiters</span><span class="p">:</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kd">interface</span><span class="p">{}]</span><span class="o">*</span><span class="nx">rate</span><span class="p">.</span><span class="nx">Limiter</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="itemexponentialfailureratelimiter">ItemExponentialFailureRateLimiter</h3>
<p>如名所知 <code>ItemExponentialFailureRateLimiter</code> 限速器是一个错误指数限速器，根据错误的次数，将指数用于delay的时长，指数的计算公式为：$baseDelay\times2^{<num-failures>}$。 可以看出When绝定了流量整形的delay时间，根据错误次数为指数进行延长重试时间</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ItemExponentialFailureRateLimiter</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">failuresLock</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span></span><span class="line"><span class="cl">	<span class="nx">failures</span>     <span class="kd">map</span><span class="p">[</span><span class="kd">interface</span><span class="p">{}]</span><span class="kt">int</span> <span class="c1">// 失败的次数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">baseDelay</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span> <span class="c1">// 延迟基数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">maxDelay</span>  <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span> <span class="c1">// 最大延迟
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">ItemExponentialFailureRateLimiter</span><span class="p">)</span> <span class="nf">When</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{})</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">r</span><span class="p">.</span><span class="nx">failuresLock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">r</span><span class="p">.</span><span class="nx">failuresLock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">exp</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">failures</span><span class="p">[</span><span class="nx">item</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="nx">r</span><span class="p">.</span><span class="nx">failures</span><span class="p">[</span><span class="nx">item</span><span class="p">]</span> <span class="p">=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">failures</span><span class="p">[</span><span class="nx">item</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// The backoff is capped such that &#39;calculated&#39; value never overflows.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">backoff</span> <span class="o">:=</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">baseDelay</span><span class="p">.</span><span class="nf">Nanoseconds</span><span class="p">())</span> <span class="o">*</span> <span class="nx">math</span><span class="p">.</span><span class="nf">Pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">exp</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">backoff</span> <span class="p">&gt;</span> <span class="nx">math</span><span class="p">.</span><span class="nx">MaxInt64</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">r</span><span class="p">.</span><span class="nx">maxDelay</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">calculated</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="nx">backoff</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">calculated</span> <span class="p">&gt;</span> <span class="nx">r</span><span class="p">.</span><span class="nx">maxDelay</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">r</span><span class="p">.</span><span class="nx">maxDelay</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">calculated</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">ItemExponentialFailureRateLimiter</span><span class="p">)</span> <span class="nf">NumRequeues</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">r</span><span class="p">.</span><span class="nx">failuresLock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">r</span><span class="p">.</span><span class="nx">failuresLock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">r</span><span class="p">.</span><span class="nx">failures</span><span class="p">[</span><span class="nx">item</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">ItemExponentialFailureRateLimiter</span><span class="p">)</span> <span class="nf">Forget</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">r</span><span class="p">.</span><span class="nx">failuresLock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">r</span><span class="p">.</span><span class="nx">failuresLock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nb">delete</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">failures</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="itemfastslowratelimiter">ItemFastSlowRateLimiter</h3>
<p><code>ItemFastSlowRateLimiter </code> ，限速器先快速重试一定次数，然后慢速重试</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ItemFastSlowRateLimiter</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">failuresLock</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span></span><span class="line"><span class="cl">	<span class="nx">failures</span>     <span class="kd">map</span><span class="p">[</span><span class="kd">interface</span><span class="p">{}]</span><span class="kt">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">maxFastAttempts</span> <span class="kt">int</span> <span class="c1">// 最大尝试次数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fastDelay</span>       <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span> <span class="c1">// 快的速度
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">slowDelay</span>       <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span> <span class="c1">// 慢的速度
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewItemFastSlowRateLimiter</span><span class="p">(</span><span class="nx">fastDelay</span><span class="p">,</span> <span class="nx">slowDelay</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">,</span> <span class="nx">maxFastAttempts</span> <span class="kt">int</span><span class="p">)</span> <span class="nx">RateLimiter</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">ItemFastSlowRateLimiter</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">failures</span><span class="p">:</span>        <span class="kd">map</span><span class="p">[</span><span class="kd">interface</span><span class="p">{}]</span><span class="kt">int</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fastDelay</span><span class="p">:</span>       <span class="nx">fastDelay</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">slowDelay</span><span class="p">:</span>       <span class="nx">slowDelay</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">maxFastAttempts</span><span class="p">:</span> <span class="nx">maxFastAttempts</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">ItemFastSlowRateLimiter</span><span class="p">)</span> <span class="nf">When</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{})</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">r</span><span class="p">.</span><span class="nx">failuresLock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">r</span><span class="p">.</span><span class="nx">failuresLock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">r</span><span class="p">.</span><span class="nx">failures</span><span class="p">[</span><span class="nx">item</span><span class="p">]</span> <span class="p">=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">failures</span><span class="p">[</span><span class="nx">item</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 当错误次数没超过快速的阈值使用快速，否则使用慢速
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">r</span><span class="p">.</span><span class="nx">failures</span><span class="p">[</span><span class="nx">item</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">maxFastAttempts</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">r</span><span class="p">.</span><span class="nx">fastDelay</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">r</span><span class="p">.</span><span class="nx">slowDelay</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">ItemFastSlowRateLimiter</span><span class="p">)</span> <span class="nf">NumRequeues</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">r</span><span class="p">.</span><span class="nx">failuresLock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">r</span><span class="p">.</span><span class="nx">failuresLock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">r</span><span class="p">.</span><span class="nx">failures</span><span class="p">[</span><span class="nx">item</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">ItemFastSlowRateLimiter</span><span class="p">)</span> <span class="nf">Forget</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">r</span><span class="p">.</span><span class="nx">failuresLock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">r</span><span class="p">.</span><span class="nx">failuresLock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nb">delete</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">failures</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="maxofratelimiter">MaxOfRateLimiter</h3>
<p><code>MaxOfRateLimiter</code> 是返回限速器列表中，延迟最大的那个限速器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">MaxOfRateLimiter</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">limiters</span> <span class="p">[]</span><span class="nx">RateLimiter</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">MaxOfRateLimiter</span><span class="p">)</span> <span class="nf">When</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{})</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ret</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Duration</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">limiter</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">r</span><span class="p">.</span><span class="nx">limiters</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">curr</span> <span class="o">:=</span> <span class="nx">limiter</span><span class="p">.</span><span class="nf">When</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">curr</span> <span class="p">&gt;</span> <span class="nx">ret</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ret</span> <span class="p">=</span> <span class="nx">curr</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">ret</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewMaxOfRateLimiter</span><span class="p">(</span><span class="nx">limiters</span> <span class="o">...</span><span class="nx">RateLimiter</span><span class="p">)</span> <span class="nx">RateLimiter</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">MaxOfRateLimiter</span><span class="p">{</span><span class="nx">limiters</span><span class="p">:</span> <span class="nx">limiters</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">MaxOfRateLimiter</span><span class="p">)</span> <span class="nf">NumRequeues</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ret</span> <span class="o">:=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 找到列表內所有的NumRequeues（失败的次数），以最多次的为主。 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">limiter</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">r</span><span class="p">.</span><span class="nx">limiters</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">curr</span> <span class="o">:=</span> <span class="nx">limiter</span><span class="p">.</span><span class="nf">NumRequeues</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">curr</span> <span class="p">&gt;</span> <span class="nx">ret</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ret</span> <span class="p">=</span> <span class="nx">curr</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">ret</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">MaxOfRateLimiter</span><span class="p">)</span> <span class="nf">Forget</span><span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">limiter</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">r</span><span class="p">.</span><span class="nx">limiters</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">limiter</span><span class="p">.</span><span class="nf">Forget</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="如何使用kubernetes的限速器">如何使用Kubernetes的限速器</h3>
<p>基于流量管制的限速队列实例，可以大量突发，但是需要进行整形，添加操作会根据 <code>When()</code> 中设计的需要等待的时间进行添加。根据不同的队列实现不同方式的延迟</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;log&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;strconv&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/client-go/util/workqueue&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">stopCh</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">timeLayout</span> <span class="o">:=</span> <span class="s">&#34;2006-01-02:15:04:05.0000&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">limiter</span> <span class="o">:=</span> <span class="nx">workqueue</span><span class="p">.</span><span class="nf">NewRateLimitingQueue</span><span class="p">(</span><span class="nx">workqueue</span><span class="p">.</span><span class="nf">DefaultControllerRateLimiter</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">length</span> <span class="o">:=</span> <span class="mi">20</span> <span class="c1">// 一共请求20次
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">chs</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">length</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">chs</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">taskId</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">ch</span> <span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">item</span> <span class="o">:=</span> <span class="s">&#34;Task-&#34;</span> <span class="o">+</span> <span class="nx">taskId</span> <span class="o">+</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">Format</span><span class="p">(</span><span class="nx">timeLayout</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">item</span> <span class="o">+</span> <span class="s">&#34; Added.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nx">limiter</span><span class="p">.</span><span class="nf">AddRateLimited</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="c1">// 添加会根据When() 延迟添加到工作队列中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">		<span class="p">}(</span><span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatInt</span><span class="p">(</span><span class="nb">int64</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span> <span class="mi">10</span><span class="p">),</span> <span class="nx">chs</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">key</span><span class="p">,</span> <span class="nx">quit</span> <span class="o">:=</span> <span class="nx">limiter</span><span class="p">.</span><span class="nf">Get</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">quit</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s process done&#34;</span><span class="p">,</span> <span class="nx">key</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">				<span class="k">defer</span> <span class="nx">limiter</span><span class="p">.</span><span class="nf">Done</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">&lt;-</span><span class="nx">stopCh</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>因为默认的限速器不支持初始化 QPS，修改源码内的为 $BT(1, 5)$ ，执行结果可以看出，大突发流量时，超过桶内token数时，会根据token生成的速度进行放行。</p>
<p>图中，任务的添加是突发性的，日志打印的是同时添加，但是在添加前输出的日志，消费端可以看到实际是被延迟了。配置的是每秒一个token，实际上放行流量也是每秒一个token。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220617173106990.png" alt="image-20220617173106990"  /></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>源码分析client-go架构 - 什么是informer</title>
      <link>https://www.oomkill.com/2022/05/ch08-informer/</link>
      <pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/05/ch08-informer/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>之前了解了client-go中的架构设计，也就是 <code>tools/cache</code> 下面的一些概念，那么下面将对informer进行分析</p>
<h2 id="controller">Controller</h2>
<p>在client-go informer架构中存在一个 <code>controller</code> ，这个不是 Kubernetes 中的Controller组件；而是在 <code>tools/cache</code> 中的一个概念，<code>controller</code> 位于 informer 之下，Reflector 之上。<a href="https://github.com/kubernetes/client-go/blob/master/tools/cache/controller.go#L90-L115">code</a></p>
<h3 id="config">Config</h3>
<p>从严格意义上来讲，<code>controller</code> 是作为一个  <code>sharedInformer</code> 使用，通过接受一个 <code>Config</code> ，而 <code>Reflector</code> 则作为 <code>controller</code> 的 slot。<code>Config</code> 则包含了这个 <code>controller</code> 里所有的设置。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Config</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Queue</span> <span class="c1">// DeltaFIFO
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ListerWatcher</span> <span class="c1">// 用于list watch的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Process</span> <span class="nx">ProcessFunc</span> <span class="c1">// 定义如何从DeltaFIFO中弹出数据后处理的操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ObjectType</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span> <span class="c1">// Controller处理的对象数据，实际上就是kubernetes中的资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">FullResyncPeriod</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span> <span class="c1">// 全量同步的周期
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ShouldResync</span> <span class="nx">ShouldResyncFunc</span> <span class="c1">// Reflector通过该标记来确定是否应该重新同步
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">RetryOnError</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="controller-1">controller</h3>
<p>然后 <code>controller</code>  又为 <code>reflertor</code> 的上层</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">controller</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">config</span>         <span class="nx">Config</span>
</span></span><span class="line"><span class="cl">	<span class="nx">reflector</span>      <span class="o">*</span><span class="nx">Reflector</span> 
</span></span><span class="line"><span class="cl">	<span class="nx">reflectorMutex</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span>
</span></span><span class="line"><span class="cl">	<span class="nx">clock</span>          <span class="nx">clock</span><span class="p">.</span><span class="nx">Clock</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Controller</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// controller 主要做两件事，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 1. 构建并运行 Reflector,将listerwacther中的泵压到queue（Delta fifo）中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 2. Queue用Pop()弹出数据，具体的操作是Process
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 直到 stopCh 不阻塞，这两个协程将退出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Run</span><span class="p">(</span><span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nf">HasSynced</span><span class="p">()</span> <span class="kt">bool</span> <span class="c1">// 这个实际上是从store中继承的，标记这个controller已经
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">LastSyncResourceVersion</span><span class="p">()</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>controller</code> 中的方法，仅有一个 <code>Run()</code> 和 <code>New()</code>；这意味着，<code>controller</code> 只是一个抽象的概念，作为 <code>Reflector</code>,  <code>Delta FIFO</code> 整合的工作流</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220523224050974.png" alt="image-20220523224050974"  /></p>
<p>而 <code>controller</code> 则是 <code>SharedInformer</code> 了。</p>
<h3 id="queue">Queue</h3>
<p>这里的 <code>queue</code> 可以理解为是一个具有 <code>Pop()</code> 功能的 <code>Indexer</code> ;而 <code>Pop()</code> 的功能则是 <code>controller</code> 中的一部分；也就是说 <code>queue</code> 是一个扩展的 <code>Store</code> ， <code>Store</code> 是不具备弹出功能的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Queue</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Store</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Pop会阻塞等待，直到有内容弹出，删除对应的值并处理计数器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Pop</span><span class="p">(</span><span class="nx">PopProcessFunc</span><span class="p">)</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// AddIfNotPresent puts the given accumulator into the Queue (in
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// association with the accumulator&#39;s key) if and only if that key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// is not already associated with a non-empty accumulator.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">AddIfNotPresent</span><span class="p">(</span><span class="kd">interface</span><span class="p">{})</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// HasSynced returns true if the first batch of keys have all been
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// popped.  The first batch of keys are those of the first Replace
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// operation if that happened before any Add, Update, or Delete;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// otherwise the first batch is empty.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">HasSynced</span><span class="p">()</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Close</span><span class="p">()</span> <span class="c1">// 关闭queue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而弹出的操作是通过 controller 中的 <code>processLoop()</code> 进行的，最终走到Delta FIFO中进行处理。</p>
<p>通过忙等待去读取要弹出的数据，然后在弹出前 通过<code>PopProcessFunc</code> 进行处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">controller</span><span class="p">)</span> <span class="nf">processLoop</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">obj</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Queue</span><span class="p">.</span><span class="nf">Pop</span><span class="p">(</span><span class="nf">PopProcessFunc</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Process</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">ErrFIFOClosed</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">c</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">RetryOnError</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// This is the safe way to re-enqueue.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">c</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Queue</span><span class="p">.</span><span class="nf">AddIfNotPresent</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/kubernetes/client-go/blob/master/tools/cache/delta_fifo.go#L515">DeltaFIFO.Pop()</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">DeltaFIFO</span><span class="p">)</span> <span class="nf">Pop</span><span class="p">(</span><span class="nx">process</span> <span class="nx">PopProcessFunc</span><span class="p">)</span> <span class="p">(</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">f</span><span class="p">.</span><span class="nx">lock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nx">lock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nb">len</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">queue</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// When the queue is empty, invocation of Pop() is blocked until new item is enqueued.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// When Close() is called, the f.closed is set and the condition is broadcasted.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// Which causes this loop to continue and return from the Pop().
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">f</span><span class="p">.</span><span class="nf">IsClosed</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">ErrFIFOClosed</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">			<span class="nx">f</span><span class="p">.</span><span class="nx">cond</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">queue</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="nx">f</span><span class="p">.</span><span class="nx">queue</span> <span class="p">=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">queue</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">f</span><span class="p">.</span><span class="nx">initialPopulationCount</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">f</span><span class="p">.</span><span class="nx">initialPopulationCount</span><span class="o">--</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">item</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// Item may have been deleted subsequently.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">continue</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nb">delete</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">err</span> <span class="o">:=</span> <span class="nf">process</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="c1">// 进行处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">e</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">err</span><span class="p">.(</span><span class="nx">ErrRequeue</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">f</span><span class="p">.</span><span class="nf">addIfNotPresent</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="c1">// 如果失败，再重新加入到队列中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">err</span> <span class="p">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">Err</span> 
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// Don&#39;t need to copyDeltas here, because we&#39;re transferring
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="c1">// ownership to the caller.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="nx">item</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="informer">Informer</h2>
<p>通过对 <code>Reflector</code>, <code>Store</code>, <code>Queue</code>, <code>ListerWatcher</code>、<code>ProcessFunc</code>, 等的概念，发现由 <code>controller</code> 所包装的起的功能并不能完成通过对API的动作监听，并通过动作来处理本地缓存的一个能力；这个情况下诞生了 <code>informer</code> 严格意义上来讲是  <a href="https://github.com/kubernetes/client-go/blob/master/tools/cache/controller.go#L317">sharedInformer</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">newInformer</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lw</span> <span class="nx">ListerWatcher</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">objType</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resyncPeriod</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">h</span> <span class="nx">ResourceEventHandler</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">clientState</span> <span class="nx">Store</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="nx">Controller</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// This will hold incoming changes. Note how we pass clientState in as a
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// KeyLister, that way resync operations will result in the correct set
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// of update/delete deltas.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fifo</span> <span class="o">:=</span> <span class="nf">NewDeltaFIFOWithOptions</span><span class="p">(</span><span class="nx">DeltaFIFOOptions</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">KnownObjects</span><span class="p">:</span>          <span class="nx">clientState</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">EmitDeltaTypeReplaced</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">cfg</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Config</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Queue</span><span class="p">:</span>            <span class="nx">fifo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ListerWatcher</span><span class="p">:</span>    <span class="nx">lw</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ObjectType</span><span class="p">:</span>       <span class="nx">objType</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">FullResyncPeriod</span><span class="p">:</span> <span class="nx">resyncPeriod</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">RetryOnError</span><span class="p">:</span>     <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">Process</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// from oldest to newest
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">d</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">obj</span><span class="p">.(</span><span class="nx">Deltas</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">switch</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Type</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="nx">Sync</span><span class="p">,</span> <span class="nx">Replaced</span><span class="p">,</span> <span class="nx">Added</span><span class="p">,</span> <span class="nx">Updated</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="nx">old</span><span class="p">,</span> <span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">clientState</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">Object</span><span class="p">);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">exists</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">clientState</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">Object</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span>
</span></span><span class="line"><span class="cl">						<span class="nx">h</span><span class="p">.</span><span class="nf">OnUpdate</span><span class="p">(</span><span class="nx">old</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Object</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">clientState</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">Object</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span>
</span></span><span class="line"><span class="cl">						<span class="nx">h</span><span class="p">.</span><span class="nf">OnAdd</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">Object</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="nx">Deleted</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">clientState</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">Object</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="nx">h</span><span class="p">.</span><span class="nf">OnDelete</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">Object</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nf">New</span><span class="p">(</span><span class="nx">cfg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>newInformer是位于 <a href="https://github.com/kubernetes/client-go/blob/master/tools/cache/controller.go#L317">tools/cache/controller.go</a> 下，可以看出，这里面并没有informer的概念，这里通过注释可以看到，newInformer实际上是一个提供了存储和事件通知的informer。他关联的 <code>queue</code> 则是 <code>Delta FIFO</code>，并包含了 <code>ProcessFunc</code>, <code>Store</code> 等 controller的概念。最终对外的方法为 <code>NewInformer()</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewInformer</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lw</span> <span class="nx">ListerWatcher</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">objType</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resyncPeriod</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">h</span> <span class="nx">ResourceEventHandler</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> <span class="p">(</span><span class="nx">Store</span><span class="p">,</span> <span class="nx">Controller</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// This will hold the client state, as we know it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">clientState</span> <span class="o">:=</span> <span class="nf">NewStore</span><span class="p">(</span><span class="nx">DeletionHandlingMetaNamespaceKeyFunc</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">clientState</span><span class="p">,</span> <span class="nf">newInformer</span><span class="p">(</span><span class="nx">lw</span><span class="p">,</span> <span class="nx">objType</span><span class="p">,</span> <span class="nx">resyncPeriod</span><span class="p">,</span> <span class="nx">h</span><span class="p">,</span> <span class="nx">clientState</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ResourceEventHandler</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">OnAdd</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nf">OnUpdate</span><span class="p">(</span><span class="nx">oldObj</span><span class="p">,</span> <span class="nx">newObj</span> <span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nf">OnDelete</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到  <code>NewInformer()</code> 就是一个带有 Store功能的controller，通过这些可以假定出，<strong>Informer</strong> 就是<code>controller</code> ，将queue中相关操作分发给不同事件处理的功能</p>
<h2 id="sharedindexinformer">SharedIndexInformer</h2>
<p><code>shareInformer</code> 为客户端提供了与apiserver一致的数据对象本地缓存，并支持多事件处理程序的<strong>informer</strong>，而 <code>shareIndexInformer </code> 则是对<code>shareInformer</code>  的扩展</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">SharedInformer</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// AddEventHandler adds an event handler to the shared informer using the shared informer&#39;s resync
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// period.  Events to a single handler are delivered sequentially, but there is no coordination
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// between different handlers.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">AddEventHandler</span><span class="p">(</span><span class="nx">handler</span> <span class="nx">ResourceEventHandler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// AddEventHandlerWithResyncPeriod adds an event handler to the
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// shared informer with the requested resync period; zero means
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// this handler does not care about resyncs.  The resync operation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// consists of delivering to the handler an update notification
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// for every object in the informer&#39;s local cache; it does not add
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// any interactions with the authoritative storage.  Some
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// informers do no resyncs at all, not even for handlers added
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// with a non-zero resyncPeriod.  For an informer that does
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// resyncs, and for each handler that requests resyncs, that
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// informer develops a nominal resync period that is no shorter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// than the requested period but may be longer.  The actual time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// between any two resyncs may be longer than the nominal period
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// because the implementation takes time to do work and there may
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// be competing load and scheduling noise.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">AddEventHandlerWithResyncPeriod</span><span class="p">(</span><span class="nx">handler</span> <span class="nx">ResourceEventHandler</span><span class="p">,</span> <span class="nx">resyncPeriod</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// GetStore returns the informer&#39;s local cache as a Store.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">GetStore</span><span class="p">()</span> <span class="nx">Store</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// GetController is deprecated, it does nothing useful
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">GetController</span><span class="p">()</span> <span class="nx">Controller</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Run starts and runs the shared informer, returning after it stops.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// The informer will be stopped when stopCh is closed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Run</span><span class="p">(</span><span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// HasSynced returns true if the shared informer&#39;s store has been
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// informed by at least one full LIST of the authoritative state
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// of the informer&#39;s object collection.  This is unrelated to &#34;resync&#34;.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">HasSynced</span><span class="p">()</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// LastSyncResourceVersion is the resource version observed when last synced with the underlying
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// store. The value returned is not synchronized with access to the underlying store and is not
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// thread-safe.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">LastSyncResourceVersion</span><span class="p">()</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>SharedIndexInformer</code> 是对SharedInformer的实现，可以从结构中看出，<code>SharedIndexInformer</code> 大致具有如下功能：</p>
<ul>
<li>索引本地缓存</li>
<li>controller，通过list watch拉取API并推入 <code>Deltal FIFO</code></li>
<li>事件的处理</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">sharedIndexInformer</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">indexer</span>    <span class="nx">Indexer</span> <span class="c1">// 具有索引的本地缓存
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">controller</span> <span class="nx">Controller</span> <span class="c1">// controller
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">processor</span>             <span class="o">*</span><span class="nx">sharedProcessor</span> <span class="c1">// 事件处理函数集合
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cacheMutationDetector</span> <span class="nx">MutationDetector</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">listerWatcher</span> <span class="nx">ListerWatcher</span>
</span></span><span class="line"><span class="cl">	<span class="nx">objectType</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resyncCheckPeriod</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span></span><span class="line"><span class="cl">	<span class="nx">defaultEventHandlerResyncPeriod</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span></span><span class="line"><span class="cl">	<span class="nx">clock</span> <span class="nx">clock</span><span class="p">.</span><span class="nx">Clock</span>
</span></span><span class="line"><span class="cl">	<span class="nx">started</span><span class="p">,</span> <span class="nx">stopped</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="nx">startedLock</span>      <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span></span><span class="line"><span class="cl">	<span class="nx">blockDeltas</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而在 <a href="https://github.com/kubernetes/client-go/blob/master/tools/cache/shared_informer.go#L397-L444">tools/cache/share_informer.go</a> 可以看到 shareIndexInformer 的运行过程</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">sharedIndexInformer</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleCrash</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">fifo</span> <span class="o">:=</span> <span class="nf">NewDeltaFIFOWithOptions</span><span class="p">(</span><span class="nx">DeltaFIFOOptions</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">KnownObjects</span><span class="p">:</span>          <span class="nx">s</span><span class="p">.</span><span class="nx">indexer</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">EmitDeltaTypeReplaced</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">cfg</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Config</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Queue</span><span class="p">:</span>            <span class="nx">fifo</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ListerWatcher</span><span class="p">:</span>    <span class="nx">s</span><span class="p">.</span><span class="nx">listerWatcher</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ObjectType</span><span class="p">:</span>       <span class="nx">s</span><span class="p">.</span><span class="nx">objectType</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">FullResyncPeriod</span><span class="p">:</span> <span class="nx">s</span><span class="p">.</span><span class="nx">resyncCheckPeriod</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">RetryOnError</span><span class="p">:</span>     <span class="kc">false</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ShouldResync</span><span class="p">:</span>     <span class="nx">s</span><span class="p">.</span><span class="nx">processor</span><span class="p">.</span><span class="nx">shouldResync</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">Process</span><span class="p">:</span> <span class="nx">s</span><span class="p">.</span><span class="nx">HandleDeltas</span><span class="p">,</span> <span class="c1">// process 弹出时操作的流程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">s</span><span class="p">.</span><span class="nx">startedLock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">s</span><span class="p">.</span><span class="nx">startedLock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">s</span><span class="p">.</span><span class="nx">controller</span> <span class="p">=</span> <span class="nf">New</span><span class="p">(</span><span class="nx">cfg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">s</span><span class="p">.</span><span class="nx">controller</span><span class="p">.(</span><span class="o">*</span><span class="nx">controller</span><span class="p">).</span><span class="nx">clock</span> <span class="p">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">clock</span>
</span></span><span class="line"><span class="cl">		<span class="nx">s</span><span class="p">.</span><span class="nx">started</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Separate stop channel because Processor should be stopped strictly after controller
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">processorStopCh</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">wg</span> <span class="nx">wait</span><span class="p">.</span><span class="nx">Group</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>              <span class="c1">// Wait for Processor to stop
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">processorStopCh</span><span class="p">)</span> <span class="c1">// Tell Processor to stop
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">wg</span><span class="p">.</span><span class="nf">StartWithChannel</span><span class="p">(</span><span class="nx">processorStopCh</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">cacheMutationDetector</span><span class="p">.</span><span class="nx">Run</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">StartWithChannel</span><span class="p">(</span><span class="nx">processorStopCh</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">processor</span><span class="p">.</span><span class="nx">run</span><span class="p">)</span> <span class="c1">// 启动事件处理函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">s</span><span class="p">.</span><span class="nx">startedLock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">s</span><span class="p">.</span><span class="nx">startedLock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">s</span><span class="p">.</span><span class="nx">stopped</span> <span class="p">=</span> <span class="kc">true</span> <span class="c1">// Don&#39;t want any new listeners
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">s</span><span class="p">.</span><span class="nx">controller</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">)</span> <span class="c1">// 启动controller，controller会启动Reflector和fifo的Pop()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而在操作Delta FIFO中可以看到，做具体操作时，会将动作分发至对应的事件处理函数中，这个是informer初始化时对事件操作的函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">sharedIndexInformer</span><span class="p">)</span> <span class="nf">HandleDeltas</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span><span class="p">.</span><span class="nx">blockDeltas</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">s</span><span class="p">.</span><span class="nx">blockDeltas</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">d</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">obj</span><span class="p">.(</span><span class="nx">Deltas</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">switch</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Type</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">Sync</span><span class="p">,</span> <span class="nx">Replaced</span><span class="p">,</span> <span class="nx">Added</span><span class="p">,</span> <span class="nx">Updated</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="nx">s</span><span class="p">.</span><span class="nx">cacheMutationDetector</span><span class="p">.</span><span class="nf">AddObject</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">Object</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">old</span><span class="p">,</span> <span class="nx">exists</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">indexer</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">Object</span><span class="p">);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">exists</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">indexer</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">Object</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">				<span class="nx">isSync</span> <span class="o">:=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">				<span class="k">switch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Type</span> <span class="o">==</span> <span class="nx">Sync</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="nx">isSync</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Type</span> <span class="o">==</span> <span class="nx">Replaced</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span> <span class="nx">accessor</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">meta</span><span class="p">.</span><span class="nf">Accessor</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">Object</span><span class="p">);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">						<span class="k">if</span> <span class="nx">oldAccessor</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">meta</span><span class="p">.</span><span class="nf">Accessor</span><span class="p">(</span><span class="nx">old</span><span class="p">);</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">							<span class="nx">isSync</span> <span class="p">=</span> <span class="nx">accessor</span><span class="p">.</span><span class="nf">GetResourceVersion</span><span class="p">()</span> <span class="o">==</span> <span class="nx">oldAccessor</span><span class="p">.</span><span class="nf">GetResourceVersion</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">						<span class="p">}</span>
</span></span><span class="line"><span class="cl">					<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 事件的分发
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">s</span><span class="p">.</span><span class="nx">processor</span><span class="p">.</span><span class="nf">distribute</span><span class="p">(</span><span class="nx">updateNotification</span><span class="p">{</span><span class="nx">oldObj</span><span class="p">:</span> <span class="nx">old</span><span class="p">,</span> <span class="nx">newObj</span><span class="p">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Object</span><span class="p">},</span> <span class="nx">isSync</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">indexer</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">Object</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 事件的分发
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">s</span><span class="p">.</span><span class="nx">processor</span><span class="p">.</span><span class="nf">distribute</span><span class="p">(</span><span class="nx">addNotification</span><span class="p">{</span><span class="nx">newObj</span><span class="p">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Object</span><span class="p">},</span> <span class="kc">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="nx">Deleted</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">indexer</span><span class="p">.</span><span class="nf">Delete</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">Object</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">s</span><span class="p">.</span><span class="nx">processor</span><span class="p">.</span><span class="nf">distribute</span><span class="p">(</span><span class="nx">deleteNotification</span><span class="p">{</span><span class="nx">oldObj</span><span class="p">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Object</span><span class="p">},</span> <span class="kc">false</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="事件处理函数-processor">事件处理函数 processor</h3>
<p>启动informer时也会启动注册进来的事件处理函数；<code>processor</code> 就是这个事件处理函数。</p>
<p><code>run()</code> 函数会启动两个 listener，j监听事件处理业务函数 <code>listener.run</code> 和 事件的处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">wg</span><span class="p">.</span><span class="nf">StartWithChannel</span><span class="p">(</span><span class="nx">processorStopCh</span><span class="p">,</span> <span class="nx">s</span><span class="p">.</span><span class="nx">processor</span><span class="p">.</span><span class="nx">run</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">sharedProcessor</span><span class="p">)</span> <span class="nf">run</span><span class="p">(</span><span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">p</span><span class="p">.</span><span class="nx">listenersLock</span><span class="p">.</span><span class="nf">RLock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">p</span><span class="p">.</span><span class="nx">listenersLock</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">listener</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">p</span><span class="p">.</span><span class="nx">listeners</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">p</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">listener</span><span class="p">.</span><span class="nx">run</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">			<span class="nx">p</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">listener</span><span class="p">.</span><span class="nx">pop</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">p</span><span class="p">.</span><span class="nx">listenersStarted</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="o">&lt;-</span><span class="nx">stopCh</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p</span><span class="p">.</span><span class="nx">listenersLock</span><span class="p">.</span><span class="nf">RLock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">p</span><span class="p">.</span><span class="nx">listenersLock</span><span class="p">.</span><span class="nf">RUnlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">listener</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">p</span><span class="p">.</span><span class="nx">listeners</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">close</span><span class="p">(</span><span class="nx">listener</span><span class="p">.</span><span class="nx">addCh</span><span class="p">)</span> <span class="c1">// Tell .pop() to stop. .pop() will tell .run() to stop
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span> <span class="c1">// Wait for all .pop() and .run() to stop
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看出，就是拿到的事件，根据注册的到informer的事件函数进行处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">processorListener</span><span class="p">)</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">stopCh</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wait</span><span class="p">.</span><span class="nf">Until</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">next</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">p</span><span class="p">.</span><span class="nx">nextCh</span> <span class="p">{</span> <span class="c1">// 消费事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">switch</span> <span class="nx">notification</span> <span class="o">:=</span> <span class="nx">next</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="nx">updateNotification</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="nx">p</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nf">OnUpdate</span><span class="p">(</span><span class="nx">notification</span><span class="p">.</span><span class="nx">oldObj</span><span class="p">,</span> <span class="nx">notification</span><span class="p">.</span><span class="nx">newObj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="nx">addNotification</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="nx">p</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nf">OnAdd</span><span class="p">(</span><span class="nx">notification</span><span class="p">.</span><span class="nx">newObj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="nx">deleteNotification</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="nx">p</span><span class="p">.</span><span class="nx">handler</span><span class="p">.</span><span class="nf">OnDelete</span><span class="p">(</span><span class="nx">notification</span><span class="p">.</span><span class="nx">oldObj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleError</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;unrecognized notification: %T&#34;</span><span class="p">,</span> <span class="nx">next</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// the only way to get here is if the p.nextCh is empty and closed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nb">close</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="mi">1</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="informer中的事件的设计">informer中的事件的设计</h3>
<p>了解了informer如何处理事件，就需要学习下，informer的事件系统设计 <code>prossorListener</code></p>
<h4 id="事件的添加">事件的添加</h4>
<p>当在handleDelta时，会分发具体的事件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 事件的分发
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">s</span><span class="p">.</span><span class="nx">processor</span><span class="p">.</span><span class="nf">distribute</span><span class="p">(</span><span class="nx">updateNotification</span><span class="p">{</span><span class="nx">oldObj</span><span class="p">:</span> <span class="nx">old</span><span class="p">,</span> <span class="nx">newObj</span><span class="p">:</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Object</span><span class="p">},</span> <span class="nx">isSync</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>此时，事件泵 <code>Pop()</code> 会根据接收到的事件进行处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// run() 时会启动一个事件泵
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">p</span><span class="p">.</span><span class="nx">wg</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">listener</span><span class="p">.</span><span class="nx">pop</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">processorListener</span><span class="p">)</span> <span class="nf">pop</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleCrash</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">nextCh</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">nextCh</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kd">interface</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">notification</span> <span class="kd">interface</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="nx">nextCh</span> <span class="o">&lt;-</span> <span class="nx">notification</span><span class="p">:</span> <span class="c1">// 这里实际上是一个阻塞的等待
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// 单向channel 可能不会走到这步骤
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="kd">var</span> <span class="nx">ok</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// deltahandle 中 distribute 会将事件添加到addCh待处理事件中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// 处理完事件会再次拿到一个事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">notification</span><span class="p">,</span> <span class="nx">ok</span> <span class="p">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">pendingNotifications</span><span class="p">.</span><span class="nf">ReadOne</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span> <span class="c1">// Nothing to pop
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">nextCh</span> <span class="p">=</span> <span class="kc">nil</span> <span class="c1">// Disable this select case
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 处理 分发过来的事件 addCh
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">case</span> <span class="nx">notificationToAdd</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">p</span><span class="p">.</span><span class="nx">addCh</span><span class="p">:</span> <span class="c1">// distribute分发的事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 这里代表第一次，没有任何事件时，或者上面步骤完成读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">notification</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span> <span class="c1">// 就会走这里
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">notification</span> <span class="p">=</span> <span class="nx">notificationToAdd</span> 
</span></span><span class="line"><span class="cl">				<span class="nx">nextCh</span> <span class="p">=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">nextCh</span> 
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">                <span class="c1">// notification否则代表没有处理完，将数据再次添加到待处理中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">p</span><span class="p">.</span><span class="nx">pendingNotifications</span><span class="p">.</span><span class="nf">WriteOne</span><span class="p">(</span><span class="nx">notificationToAdd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>该消息事件的流程图为</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220525213837136.png" alt="image-20220525213837136"  /></p>
<p>通过一个简单实例来学习client-go中的消息通知机制</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/utils/buffer&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">nextCh1</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">addCh</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">stopper</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">notification</span> <span class="kd">interface</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">pendding</span> <span class="p">=</span> <span class="o">*</span><span class="nx">buffer</span><span class="p">.</span><span class="nf">NewRingGrowing</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// pop
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">nextCh</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kd">interface</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">notification</span> <span class="kd">interface</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">//var n int
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;busy wait&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;entry select&#34;</span><span class="p">,</span> <span class="nx">notification</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 初始时，一个未初始化的channel，nil，形成一个阻塞（单channel下是死锁）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">case</span> <span class="nx">nextCh</span> <span class="o">&lt;-</span> <span class="nx">notification</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;entry nextCh&#34;</span><span class="p">,</span> <span class="nx">notification</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="kd">var</span> <span class="nx">ok</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// 读不到数据代表已处理完，置空锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">notification</span><span class="p">,</span> <span class="nx">ok</span> <span class="p">=</span> <span class="nx">pendding</span><span class="p">.</span><span class="nf">ReadOne</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;unactive nextch&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">nextCh</span> <span class="p">=</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 事件的分发，监听，初始时也是一个阻塞
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">case</span> <span class="nx">notificationToAdd</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">addCh</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">notificationToAdd</span><span class="p">,</span> <span class="nx">notification</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// 线程安全
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// 当消息为空时，没有被处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// 锁为空，就分发数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">if</span> <span class="nx">notification</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;frist notification nil&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">notification</span> <span class="p">=</span> <span class="nx">notificationToAdd</span>
</span></span><span class="line"><span class="cl">					<span class="nx">nextCh</span> <span class="p">=</span> <span class="nx">nextCh1</span> <span class="c1">// 这步骤等于初始化了局部的nextCh，会触发上面的流程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// 在第三次时，会走到这里，数据进入环
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;into ring&#34;</span><span class="p">,</span> <span class="nx">notificationToAdd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="nx">pendding</span><span class="p">.</span><span class="nf">WriteOne</span><span class="p">(</span><span class="nx">notificationToAdd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// producer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">i</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">i</span><span class="o">%</span><span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">addCh</span> <span class="o">&lt;-</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;thread 2 inner -- %d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span> <span class="o">*</span> <span class="mi">9000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">addCh</span> <span class="o">&lt;-</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;thread 2 outer -- %d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span> <span class="o">*</span> <span class="mi">500</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// subsriber
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="nx">next</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">nextCh1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span> <span class="o">*</span> <span class="mi">300</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;consumer&#34;</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="o">&lt;-</span><span class="nx">stopper</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>总结，这里的机制类似于线程安全，进入临界区的一些算法，临界区就是 <code>nextCh</code>，<code>notification</code> 就是保证了至少有一个进程可以进入临界区（要么分发事件，要么生产事件）；<code>nextCh</code> 和 <code>nextCh1</code> 一个是局部管道一个是全局的，管道未初始化代表了死锁（阻塞）；当有消息要处理时，会将局部管道 <code>nextCh</code> 赋值给 全局 <code>nextCh1</code> 此时相当于解除了分发的步骤（对管道赋值，触发分发操作）；<code>ringbuffer</code> 实际上是提供了一个对 <code>notification</code> 加锁的操作，在没有处理的消息时，需要保障 <code>notification</code> 为空，同时也关闭了流程 <code>nextCh</code> 的写入。这里主要是考虑对golang中channel的用法</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Kubernetes组件核心 - client-go</title>
      <link>https://www.oomkill.com/2022/05/ch06-client-go/</link>
      <pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/05/ch06-client-go/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="prepare">Prepare</h2>
<h3 id="introduction">Introduction</h3>
<p>从2016年8月起，Kubernetes官方提取了与Kubernetes相关的核心源代码，形成了一个独立的项目，即<code>client-go</code>，作为官方提供的go客户端。Kubernetes的部分代码也是基于这个项目的。</p>
<p><code>client-go</code> 是kubernetes中广义的客户端基础库，在Kubernetes各个组件中或多或少都有使用其功能。。也就是说，<code>client-go</code>可以在kubernetes集群中添加、删除和查询资源对象（包括deployment、service、pod、ns等）。</p>
<p>在了解client-go前，还需要掌握一些概念</p>
<ul>
<li>在客户端验证 API</li>
<li>使用证书和使用令牌，来验证客户端</li>
<li>kubernetes集群的访问模式</li>
</ul>
<h3 id="使用证书和令牌来验证客户端">使用证书和令牌来验证客户端</h3>
<p>在访问apiserver时，会对访问者进行鉴权，因为是https请求，在请求时是需要ca的，也可以使用 -k 使用insecure模式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ curl --cacert /etc/kubernetes/pki/ca.crt https://10.0.0.4:6443/version
</span></span><span class="line"><span class="cl">\{
</span></span><span class="line"><span class="cl">  &#34;major&#34;: &#34;1&#34;,
</span></span><span class="line"><span class="cl">  &#34;minor&#34;: &#34;18+&#34;,
</span></span><span class="line"><span class="cl">  &#34;gitVersion&#34;: &#34;v1.18.20-dirty&#34;,
</span></span><span class="line"><span class="cl">  &#34;gitCommit&#34;: &#34;1f3e19b7beb1cc0110255668c4238ed63dadb7ad&#34;,
</span></span><span class="line"><span class="cl">  &#34;gitTreeState&#34;: &#34;dirty&#34;,
</span></span><span class="line"><span class="cl">  &#34;buildDate&#34;: &#34;2022-05-17T12:45:14Z&#34;,
</span></span><span class="line"><span class="cl">  &#34;goVersion&#34;: &#34;go1.16.15&#34;,
</span></span><span class="line"><span class="cl">  &#34;compiler&#34;: &#34;gc&#34;,
</span></span><span class="line"><span class="cl">  &#34;platform&#34;: &#34;linux/amd64&#34;
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ curl -k https://10.0.0.4:6443/api/v1/namespace/default/pods/netbox
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">  &#34;kind&#34;: &#34;Status&#34;,
</span></span><span class="line"><span class="cl">  &#34;apiVersion&#34;: &#34;v1&#34;,
</span></span><span class="line"><span class="cl">  &#34;metadata&#34;: {
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">  },
</span></span><span class="line"><span class="cl">  &#34;status&#34;: &#34;Failure&#34;,
</span></span><span class="line"><span class="cl">  &#34;message&#34;: &#34;namespace \&#34;default\&#34; is forbidden: User \&#34;system:anonymous\&#34; cannot get resource \&#34;namespace/pods\&#34; in API group \&#34;\&#34; at the cluster scope&#34;,
</span></span><span class="line"><span class="cl">  &#34;reason&#34;: &#34;Forbidden&#34;,
</span></span><span class="line"><span class="cl">  &#34;details&#34;: {
</span></span><span class="line"><span class="cl">    &#34;name&#34;: &#34;default&#34;,
</span></span><span class="line"><span class="cl">    &#34;kind&#34;: &#34;namespace&#34;
</span></span><span class="line"><span class="cl">  },
</span></span><span class="line"><span class="cl">  &#34;code&#34;: 403
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>从错误中可以看出，该请求已通过身份验证，用户是  <code>system:anonymous</code>，但该用户未授权列出对应的资源。而上述请求只是忽略 curl 的https请求需要做的验证，而Kubernetes也有对应验证的机制，这个时候需要提供额外的身份信息来获得所需的访问权限。<a href="https://kubernetes.io/docs/reference/access-authn-authz/authentication/">Kubernetes支持多种身份认证机制</a>，ssl证书也是其中一种。</p>
<blockquote>
<p>注：在Kubernetes中没有表示用户的资源。即kubernetes集群中，无法添加和创建。但由集群提供的有效证书的用户都视为允许的用户。Kubernetes从证书中的使用者CN和使用者可选名称中获得<strong>用户</strong>；然后，RBAC 判断用户是否有权限操作资源。从 Kubernetes1.4 开始，支持<strong>用户组</strong>，即证书中的O</p>
</blockquote>
<p>可以使用 curl 的 <code>--cert</code> 和 <code>--key</code> 指定用户的证书</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">curl --cacert /etc/kubernetes/pki/ca.crt  \
</span></span><span class="line"><span class="cl">	--cert /etc/kubernetes/pki/apiserver-kubelet-client.crt \
</span></span><span class="line"><span class="cl">	--key /etc/kubernetes/pki/apiserver-ubelet-client.key \
</span></span><span class="line"><span class="cl">	https://10.0.0.4:6443/api/v1/namespaces/default/pods/netbox
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用serviceaccount验证客户端身份">使用serviceaccount验证客户端身份</h3>
<p>使用一个serviceaccount JWT，获取一个SA的方式如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">kubectl get secrets \
</span></span><span class="line"><span class="cl">$(kubectl get serviceaccounts/default -o jsonpath=&#39;{.secrets[0].name}&#39;)  -o jsonpath=&#39;{.data.token}&#39; \
</span></span><span class="line"><span class="cl">| base64 --decode
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">JWT=$(kubectl get secrets \
</span></span><span class="line"><span class="cl">$(kubectl get serviceaccounts/default -o jsonpath=&#39;{.secrets[0].name}&#39;)  -o jsonpath=&#39;{.data.token}&#39; \
</span></span><span class="line"><span class="cl">| base64 --decode)
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用secret来访问API</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">curl --cacert /etc/kubernetes/pki/ca.crt \
</span></span><span class="line"><span class="cl">	--header &#34;Authorization: Bearer $JWT&#34; \
</span></span><span class="line"><span class="cl">	https://10.0.0.4:6443/apis/apps/v1/namespaces/default/deployments
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="pod内部调用kubernetes-api">Pod内部调用Kubernetes API</h3>
<p>kubernete会将Kubernetes API地址通过环境变量提供给 Pod，可以通过命令看到</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ env|grep -i kuber
</span></span><span class="line"><span class="cl">KUBERNETES_SERVICE_PORT=443
</span></span><span class="line"><span class="cl">KUBERNETES_PORT=tcp://192.168.0.1:443
</span></span><span class="line"><span class="cl">KUBERNETES_PORT_443_TCP_ADDR=192.168.0.1
</span></span><span class="line"><span class="cl">KUBERNETES_PORT_443_TCP_PORT=443
</span></span><span class="line"><span class="cl">KUBERNETES_PORT_443_TCP_PROTO=tcp
</span></span><span class="line"><span class="cl">KUBERNETES_PORT_443_TCP=tcp://192.168.0.1:443
</span></span><span class="line"><span class="cl">KUBERNETES_SERVICE_PORT_HTTPS=443
</span></span><span class="line"><span class="cl">KUBERNETES_SERVICE_HOST=192.168.0.1
</span></span></code></pre></td></tr></table>
</div>
</div><p>并且还会在将 Kubernetes CA和SA等信息放置在目录 <code>/var/run/secrets/kubernetes.io/serviceaccount/</code>，通过这些就可以从Pod内部访问API</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cd /var/run/secrets/kubernetes.io/serviceaccount/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">curl --cacert ca.crt --header &#34;Authorization: Bearer $(cat token)&#34; https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT/api/v1/namespaces/default/pods/netbox
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Reference</p>
<p><a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/">Kubernetes API Reference Docs</a></p>
</blockquote>
<h2 id="client-go">client-go</h2>
<h3 id="关于client-go的模块">关于client-go的模块</h3>
<h4 id="k8sioapi">k8s.io/api</h4>
<p>与Pods、ConfigMaps、Secrets和其他Kubernetes 对象所对应的数据结构都在，<a href="https://github.com/kubernetes/api"><code>k8s.io/api</code></a>，此包几乎没有算法，仅仅是数据机构，该模块有多达上千个用于描述Kubernetes中资源API的结构；通常被client，server，controller等其他的组件使用。</p>
<h4 id="k8sioapimachinery">k8s.io/apimachinery</h4>
<p>根据该库的<a href="https://github.com/kubernetes/apimachinery/tree/3d7c63b4de4fdee1917284129969901d4777facc#purpose">描述文件</a>可知，这个库是Server和Client中使用的Kubernetes API共享依赖库，也是kubernetes中更低一级的通用的数据结构。在我们构建自定义资源时，不需要为自定义结构创建属性，如 <code>Kind</code>, <code>apiVersion</code>，<code>name</code>&hellip;，这些都是库 <code>apimachinery</code> 所提供的功能。</p>
<p>如，在包 <code>k8s.io/apimachinery/pkg/apis/meta </code> 定义了两个结构 <code>TypeMeta</code> 和 <code>ObjectMeta</code>；将这这两个结构嵌入自定义的结构中，可以以通用的方式兼容对象，如Kubernetes中的资源 <code>Deplyment</code> 也是这么完成的</p>
<center>通过图来了解Kubernetes的资源如何实现的</center>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220523211835602.png" alt="image-20220523211835602"  /></p>
<p>如在 <code>k8s.io/apimachinery/pkg/runtime/interfaces.go</code> 中定义了 interface，这个类为在schema中注册的API都需要实现这个结构</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Object</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">GetObjectKind</span><span class="p">()</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">ObjectKind</span>
</span></span><span class="line"><span class="cl">	<span class="nf">DeepCopyObject</span><span class="p">()</span> <span class="nx">Object</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220519162127427.png" alt="image-20220519162127427"  /></p>
<h4 id="非结构化数据">非结构化数据</h4>
<p>非结构化数据 <code>Unstructured </code> 是指在kubernete中允许将没有注册为Kubernetes API的对象，作为Json对象的方式进行操作，如，<a href="https://github.com/iximiuz/client-go-examples/blob/5b220c4572d65ea8bf0ad68e369e015902e7521c/crud-dynamic-simple/main.go#L36">使用非结构化 Kubernetes 对象</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">desired</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">unstructured</span><span class="p">.</span><span class="nx">Unstructured</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Object</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;apiVersion&#34;</span><span class="p">:</span> <span class="s">&#34;v1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;kind&#34;</span><span class="p">:</span>       <span class="s">&#34;ConfigMap&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;metadata&#34;</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;namespace&#34;</span><span class="p">:</span>    <span class="nx">namespace</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;generateName&#34;</span><span class="p">:</span> <span class="s">&#34;crud-dynamic-simple-&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;data&#34;</span><span class="p">:</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;foo&#34;</span><span class="p">:</span> <span class="s">&#34;bar&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="非结构化数据的转换">非结构化数据的转换</h4>
<p>在 <code>k8s.io/apimachinery/pkg/runtime.UnstructuredConverter</code> 中，也提供了将非结构化数据转换为Kubernetes API注册过的结构，参考如何将<a href="https://github.com/iximiuz/client-go-examples/tree/main/convert-unstructured-typed">非结构化对象转换为Kubernetes Object</a>。</p>
<blockquote>
<p>Reference</p>
<p><a href="https://iximiuz.com/en/posts/kubernetes-api-go-types-and-common-machinery/">go types</a></p>
</blockquote>
<h3 id="install-client-go">install client-go</h3>
<p><strong>如何选择 <code>client-go</code> 的版本</strong></p>
<p>​	对于不同的kubernetes版本使用标签 <code>v0.x.y</code> 来表示对应的客户端版本。具体对应参考 <a href="https://github.com/kubernetes/client-go#compatibility-matrix">client-go</a> 。</p>
<p>​	例如使用的kubernetes版本为 <code>v1.18.20</code> 则使用对应的标签 <code>v0.x.y</code> 来替换符合当前版本的客户端库。例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">go get k8s.io/client-go@v0.18.10
</span></span></code></pre></td></tr></table>
</div>
</div><p>官网中给出了<code>client-go</code>的兼容性矩阵，可以很明了的看出如何选择适用于自己kubernetes版本的对应的client-go</p>
<ul>
<li><code>✓</code> 表示 该版本的 <code>client-go</code> 与对应的 kubernetes版本功能完全一致</li>
<li><code>+</code> <code>client-go</code> 具有 kubernetes apiserver中不具备的功能。</li>
<li><code>-</code>  Kubernetes apiserver 具有<code>client-go</code> 无法使用的功。</li>
</ul>
<p>一般情况下，除了对应的版本号完全一致外，其他都存在 功能的<code>+-</code>。</p>
<h3 id="client-go-目录介绍">client-go 目录介绍</h3>
<p>client-go的每一个目录都是一个go package</p>
<ul>
<li><code>kubernetes</code> 包含与Kubernetes API所通信的客户端集</li>
<li><code>discovery</code>  用于发现kube-apiserver所支持的api</li>
<li><code>dynamic</code>  包含了一个动态客户端，该客户端能够对kube-apiserver任意的API进行操作。</li>
<li><code>transport</code>  提供了用于设置认证和启动链接的功能</li>
<li><code>tools/cache</code>: 一些 low-level controller与一些数据结构如fifo，reflector等</li>
</ul>
<h3 id="structure-of-client-go">structure of client-go</h3>
<ul>
<li>
<p><code>RestClient</code>：是最基础的基础架构，其作用是将是使用了http包进行封装成RESTClient。位于<code>rest</code> 目录，RESTClient封装了资源URL的通用格式，例如<code>Get()</code>、<code>Put()</code>、<code>Post()</code> <code>Delete()</code>。是与Kubernetes API的访问行为提供的基于RESTful方法进行交互基础架构。</p>
<ul>
<li>同时支持Json 与 protobuf</li>
<li>支持所有的原生资源和CRD</li>
</ul>
</li>
<li>
<p><code>ClientSet</code>：Clientset基于RestClient进行封装对 Resource 与 version 管理集合；<a href="https://pkg.go.dev/k8s.io/client-go@v0.24.0/kubernetes#NewForConfig">如何创建</a></p>
</li>
<li>
<p><code>DiscoverySet</code>：RestClient进行封装，可动态发现 kube-apiserver 所支持的 GVR（Group Version Resource）；<a href="https://pkg.go.dev/k8s.io/client-go@v0.24.0/discovery#NewDiscoveryClient">如何创建</a>，这种类型是一种非映射至clientset的客户端</p>
</li>
<li>
<p><code>DynamicClient</code>：基于RestClient，包含动态的客户端，可以对Kubernetes所支持的 API对象进行操作，包括CRD；<a href="https://pkg.go.dev/k8s.io/client-go@v0.24.0/dynamic#NewForConfig">如何创建</a></p>
</li>
<li>
<p>仅支持json</p>
</li>
<li>
<p><code>fakeClient</code>， <code>client-go</code> 实现的mock对象，主要用于单元测试。</p>
</li>
</ul>
<p>以上client-go所提供的客户端，仅可使用kubeconfig进行连接。</p>
<h3 id="什么是clientset">什么是clientset</h3>
<p>clientset代表了kubernetes中所有的资源类型，这里不包含CRD的资源，如：</p>
<ul>
<li><code>core</code></li>
<li><code>extensions</code></li>
<li><code>batch</code></li>
<li>&hellip;</li>
</ul>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220518185246688.png" alt="image-20220518185246688"  /></p>
<h3 id="client-go使用">client-go使用</h3>
<p><strong>DynamicClient客户端</strong></p>
<ul>
<li>
<p>与 ClientSet 的区别是，可以对任意 Kubernetes 资源进行 RESTful 操作。同样提供管理的方法</p>
</li>
<li>
<p>最大的不同，ClientSet 需要预先实现每种 Resource 和 Version 的操作，内部的数据都是结构化数据（已知数据结构）；DynamicClient 内部实现了 Unstructured，用于处理非结构化的数据（无法提前预知的数据结构），这是其可以处理 CRD 自定义资源的关键。</p>
</li>
</ul>
<p><strong>dynamicClient 实现流程</strong></p>
<ul>
<li>
<p>通过 NewForConfig 实例化 conf 为 DynamicInterface客户端</p>
</li>
<li>
<p><code>DynamicInterface </code>客户端中，实现了一个<code>Resource</code> 方法即为实现了<code>Interface</code>接口</p>
</li>
<li>
<p><code>dynamicClient</code> 实现了非结构化数据类型与rest client，可以通过其方法将<code>Resource</code> 由rest从apiserver中获得api对象，<code>runtime.DeafultUnstructuredConverter.FromUnstructrued</code> 转为对应的类型。</p>
</li>
</ul>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220522223023430.png" alt="image-20220522223023430"  /></p>
<hr>
<p>注意：<code>GVR </code>中资源类型 resource为复数。<code>kind:Pod</code> 即为 <code>Pods</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;context&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;flag&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">v1</span> <span class="s">&#34;k8s.io/apimachinery/pkg/apis/meta/v1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/apimachinery/pkg/runtime/schema&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/client-go/dynamic&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/client-go/kubernetes&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/client-go/rest&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/client-go/tools/clientcmd&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/client-go/util/homedir&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nx">k8sconfig</span>  <span class="o">*</span><span class="kt">string</span> <span class="c1">//使用kubeconfig配置文件进行集群权限认证
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">restConfig</span> <span class="o">*</span><span class="nx">rest</span><span class="p">.</span><span class="nx">Config</span>
</span></span><span class="line"><span class="cl">		<span class="nx">err</span>        <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">home</span> <span class="o">:=</span> <span class="nx">homedir</span><span class="p">.</span><span class="nf">HomeDir</span><span class="p">();</span> <span class="nx">home</span> <span class="o">!=</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">k8sconfig</span> <span class="p">=</span> <span class="nx">flag</span><span class="p">.</span><span class="nf">String</span><span class="p">(</span><span class="s">&#34;kubeconfig&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s/.kube/config&#34;</span><span class="p">,</span> <span class="nx">home</span><span class="p">),</span> <span class="s">&#34;kubernetes auth config&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">k8sconfig</span> <span class="p">=</span> <span class="nx">k8sconfig</span>
</span></span><span class="line"><span class="cl">	<span class="nx">flag</span><span class="p">.</span><span class="nf">Parse</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Stat</span><span class="p">(</span><span class="o">*</span><span class="nx">k8sconfig</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">restConfig</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">rest</span><span class="p">.</span><span class="nf">InClusterConfig</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 这里是从masterUrl 或者 kubeconfig传入集群的信息，两者选一
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">restConfig</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">clientcmd</span><span class="p">.</span><span class="nf">BuildConfigFromFlags</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">,</span> <span class="o">*</span><span class="nx">k8sconfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 创建客户端类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// NewForConfig creates a new dynamic client or returns an error.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// dynamic.NewForConfig(restConfig)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// NewForConfig creates a new Clientset for the given config
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// kubernetes.NewForConfig(restConfig)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// NewDiscoveryClientForConfig creates a new DiscoveryClient for the given config.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//clientset, err := discovery.NewDiscoveryClientForConfig(restConfig)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">dynamicset</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">dynamic</span><span class="p">.</span><span class="nf">NewForConfig</span><span class="p">(</span><span class="nx">restConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 这里遵循的是 kubernetes Rest API，如Pod是
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// /api/v1/namespaces/{namespace}/pods
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// /apis/apps/v1/namespaces/{namespace}/deployments
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 遵循GVR格式填写
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">podList</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">dynamicset</span><span class="p">.</span><span class="nf">Resource</span><span class="p">(</span><span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionResource</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Group</span><span class="p">:</span>    <span class="s">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Version</span><span class="p">:</span>  <span class="s">&#34;v1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Resource</span><span class="p">:</span> <span class="s">&#34;pods&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}).</span><span class="nf">Namespace</span><span class="p">(</span><span class="s">&#34;default&#34;</span><span class="p">).</span><span class="nf">List</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">ListOptions</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">daemonsetList</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">dynamicset</span><span class="p">.</span><span class="nf">Resource</span><span class="p">(</span><span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionResource</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Group</span><span class="p">:</span>    <span class="s">&#34;apps&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Version</span><span class="p">:</span>  <span class="s">&#34;v1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Resource</span><span class="p">:</span> <span class="s">&#34;daemonsets&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}).</span><span class="nf">Namespace</span><span class="p">(</span><span class="s">&#34;kube-system&#34;</span><span class="p">).</span><span class="nf">List</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">ListOptions</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">row</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">podList</span><span class="p">.</span><span class="nx">Items</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nf">GetName</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">row</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">daemonsetList</span><span class="p">.</span><span class="nx">Items</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nf">GetName</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// clientset mode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">clientset</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">kubernetes</span><span class="p">.</span><span class="nf">NewForConfig</span><span class="p">(</span><span class="nx">restConfig</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">podIns</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">clientset</span><span class="p">.</span><span class="nf">CoreV1</span><span class="p">().</span><span class="nf">Pods</span><span class="p">(</span><span class="s">&#34;default&#34;</span><span class="p">).</span><span class="nf">List</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">ListOptions</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">row</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">podIns</span><span class="p">.</span><span class="nx">Items</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">row</span><span class="p">.</span><span class="nf">GetName</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Extension</p>
<p><a href="http://yuezhizizhang.github.io/kubernetes/kubectl/client-go/2020/05/13/kubectl-client-go-part-2.html">一些client-go使用</a></p>
</blockquote>
<h2 id="informer">Informer</h2>
<p>informer是client-go提供的 <strong>Listwatcher</strong> 接口，主要作为 Controller构成的组件，在Kubernetes中， Controller的一个重要作用是观察对象的期望状态 <code>spec</code> 和实际状态 <code>statue</code> 。<strong>为了观察对象的状态，Controller需要向 Apiserver发送请求</strong>；但是通常情况下，频繁向Apiserver发出请求的会增加etcd的压力，为了解决这类问题，<code>client-go</code> 一个缓存，通过缓存，控制器可以不必发出大量请求，并且只关心对象的事件。也就是 informer。</p>
<p>从本质上来讲，informer是使用kubernetes API观察其变化，来维护状态的缓存，称为 <code>indexer</code>；并通过对应事件函数通知客户端信息的变化，informer为一系列组件，通过这些组件来实现的这些功能。</p>
<ul>
<li>Reflector：与 apiserver交互的组件</li>
<li>Delta FIFO：一个特殊的队列，Reflector将状态的变化存储在里面</li>
<li>indexer：本地存储，与etcd保持一致，减轻API Server与etcd的压力</li>
<li>Processor：监听处理器，通过将监听到的事件发送给对应的监听函数</li>
<li>Controller：从队列中对整个数据的编排处理的过程</li>
</ul>
<h3 id="informer的工作模式">informer的工作模式</h3>
<p>首先通过<code>List</code>从Kubernetes API中获取资源所有对象并同时缓存，然后通过<code>Watch</code>机制监控资源。这样，通过informer与缓存，就可以直接和informer交互，而不用每次都和Kubernetes API交互。</p>
<p>另外，<code>informer</code> 还提供了事件的处理机制，以便 Controller 或其他应用程序根据回调钩子函数等处理特定的业务逻辑。因为<code>Informer</code>可以通过<code>List/Watch</code>机制监控所有资源的所有事件，只要在<code>Informer</code>中添加<code>ResourceEventHandler</code>实例的回调函数，如：<code>onadd(obj interface {})</code>, <code>onupdate (oldobj, newobj interface {})</code>和<code>OnDelete( obj interface {})</code> 可以实现处理资源的创建、更新和删除。 在Kubernetes中，各种控制器都使用了Informer。</p>
<h3 id="分析informer的流程">分析informer的流程</h3>
<p>通过代码 <a href="https://github.com/kubernetes/client-go/blob/master/informers/apps/v1/deployment.go">k8s.io/client-go/informers/apps/v1/deployment.go</a> 可以看出，在每个控制器下，都实现了一个 <code>Informer</code> 和 <code>Lister</code> ，Lister就是indexer；</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">SharedInformer</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 添加一个事件处理函数，使用informer默认的resync period
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">AddEventHandler</span><span class="p">(</span><span class="nx">handler</span> <span class="nx">ResourceEventHandler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将事件处理函数注册到 share informer，将resyncPeriod作为参数传入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">AddEventHandlerWithResyncPeriod</span><span class="p">(</span><span class="nx">handler</span> <span class="nx">ResourceEventHandler</span><span class="p">,</span> <span class="nx">resyncPeriod</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 从本地缓存获取的信息作为infomer的返回
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">GetStore</span><span class="p">()</span> <span class="nx">Store</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 已弃用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">GetController</span><span class="p">()</span> <span class="nx">Controller</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 运行一个informer，当stopCh停止时，informer也被关闭
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Run</span><span class="p">(</span><span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// HasSynced returns true if the shared informer&#39;s store has been
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// informed by at least one full LIST of the authoritative state
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// of the informer&#39;s object collection.  This is unrelated to &#34;resync&#34;.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">HasSynced</span><span class="p">()</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// LastSyncResourceVersion is the resource version observed when last synced with the underlying store. The value returned is not synchronized with access to the underlying store and is not thread-safe.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">LastSyncResourceVersion</span><span class="p">()</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而 Shared Informer 对所有的API组提供一个shared informer</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// SharedInformerFactory provides shared informers for resources in all known
</span></span></span><span class="line"><span class="cl"><span class="c1">// API group versions.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">SharedInformerFactory</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">internalinterfaces</span><span class="p">.</span><span class="nx">SharedInformerFactory</span>
</span></span><span class="line"><span class="cl">	<span class="nf">ForResource</span><span class="p">(</span><span class="nx">resource</span> <span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionResource</span><span class="p">)</span> <span class="p">(</span><span class="nx">GenericInformer</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">WaitForCacheSync</span><span class="p">(</span><span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="kd">map</span><span class="p">[</span><span class="nx">reflect</span><span class="p">.</span><span class="nx">Type</span><span class="p">]</span><span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nf">Admissionregistration</span><span class="p">()</span> <span class="nx">admissionregistration</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Apps</span><span class="p">()</span> <span class="nx">apps</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Auditregistration</span><span class="p">()</span> <span class="nx">auditregistration</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Autoscaling</span><span class="p">()</span> <span class="nx">autoscaling</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Batch</span><span class="p">()</span> <span class="nx">batch</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Certificates</span><span class="p">()</span> <span class="nx">certificates</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Coordination</span><span class="p">()</span> <span class="nx">coordination</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Core</span><span class="p">()</span> <span class="nx">core</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Discovery</span><span class="p">()</span> <span class="nx">discovery</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Events</span><span class="p">()</span> <span class="nx">events</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Extensions</span><span class="p">()</span> <span class="nx">extensions</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Flowcontrol</span><span class="p">()</span> <span class="nx">flowcontrol</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Networking</span><span class="p">()</span> <span class="nx">networking</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Node</span><span class="p">()</span> <span class="nx">node</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Policy</span><span class="p">()</span> <span class="nx">policy</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Rbac</span><span class="p">()</span> <span class="nx">rbac</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Scheduling</span><span class="p">()</span> <span class="nx">scheduling</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Settings</span><span class="p">()</span> <span class="nx">settings</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Storage</span><span class="p">()</span> <span class="nx">storage</span><span class="p">.</span><span class="nx">Interface</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到在 <a href="https://github.com/kubernetes/kubernetes/blob/v1.9.0/staging/src/k8s.io/client-go/informers/apps/v1/deployment.go">k8s.io/client-go/informers/apps/v1/deployment.go</a> 实现了这个interface</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">DeploymentInformer</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="nf">Informer</span><span class="p">()</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">SharedIndexInformer</span>
</span></span><span class="line"><span class="cl">   <span class="nf">Lister</span><span class="p">()</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">DeploymentLister</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而在对应的 deployment controller中会调用这个<code>Informer</code> 实现对状态的监听；``</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// NewDeploymentController creates a new DeploymentController.
</span></span></span><span class="line"><span class="cl"><span class="c1">//  appsinformers.DeploymentInformer就是client-go 中的 /apps/v1/deployment实现的informer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewDeploymentController</span><span class="p">(</span><span class="nx">dInformer</span> <span class="nx">appsinformers</span><span class="p">.</span><span class="nx">DeploymentInformer</span><span class="p">,</span> <span class="nx">rsInformer</span> <span class="nx">appsinformers</span><span class="p">.</span><span class="nx">ReplicaSetInformer</span><span class="p">,</span> <span class="nx">podInformer</span> <span class="nx">coreinformers</span><span class="p">.</span><span class="nx">PodInformer</span><span class="p">,</span> <span class="nx">client</span> <span class="nx">clientset</span><span class="p">.</span><span class="nx">Interface</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">DeploymentController</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">eventBroadcaster</span> <span class="o">:=</span> <span class="nx">record</span><span class="p">.</span><span class="nf">NewBroadcaster</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">eventBroadcaster</span><span class="p">.</span><span class="nf">StartLogging</span><span class="p">(</span><span class="nx">klog</span><span class="p">.</span><span class="nx">Infof</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">eventBroadcaster</span><span class="p">.</span><span class="nf">StartRecordingToSink</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">v1core</span><span class="p">.</span><span class="nx">EventSinkImpl</span><span class="p">{</span><span class="nx">Interface</span><span class="p">:</span> <span class="nx">client</span><span class="p">.</span><span class="nf">CoreV1</span><span class="p">().</span><span class="nf">Events</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">client</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">client</span><span class="p">.</span><span class="nf">CoreV1</span><span class="p">().</span><span class="nf">RESTClient</span><span class="p">().</span><span class="nf">GetRateLimiter</span><span class="p">()</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ratelimiter</span><span class="p">.</span><span class="nf">RegisterMetricAndTrackRateLimiterUsage</span><span class="p">(</span><span class="s">&#34;deployment_controller&#34;</span><span class="p">,</span> <span class="nx">client</span><span class="p">.</span><span class="nf">CoreV1</span><span class="p">().</span><span class="nf">RESTClient</span><span class="p">().</span><span class="nf">GetRateLimiter</span><span class="p">());</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dc</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">DeploymentController</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">client</span><span class="p">:</span>        <span class="nx">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">eventRecorder</span><span class="p">:</span> <span class="nx">eventBroadcaster</span><span class="p">.</span><span class="nf">NewRecorder</span><span class="p">(</span><span class="nx">scheme</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">,</span> <span class="nx">v1</span><span class="p">.</span><span class="nx">EventSource</span><span class="p">{</span><span class="nx">Component</span><span class="p">:</span> <span class="s">&#34;deployment-controller&#34;</span><span class="p">}),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">queue</span><span class="p">:</span>         <span class="nx">workqueue</span><span class="p">.</span><span class="nf">NewNamedRateLimitingQueue</span><span class="p">(</span><span class="nx">workqueue</span><span class="p">.</span><span class="nf">DefaultControllerRateLimiter</span><span class="p">(),</span> <span class="s">&#34;deployment&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dc</span><span class="p">.</span><span class="nx">rsControl</span> <span class="p">=</span> <span class="nx">controller</span><span class="p">.</span><span class="nx">RealRSControl</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">KubeClient</span><span class="p">:</span> <span class="nx">client</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Recorder</span><span class="p">:</span>   <span class="nx">dc</span><span class="p">.</span><span class="nx">eventRecorder</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">dInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">().</span><span class="nf">AddEventHandler</span><span class="p">(</span><span class="nx">cache</span><span class="p">.</span><span class="nx">ResourceEventHandlerFuncs</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">AddFunc</span><span class="p">:</span>    <span class="nx">dc</span><span class="p">.</span><span class="nx">addDeployment</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">UpdateFunc</span><span class="p">:</span> <span class="nx">dc</span><span class="p">.</span><span class="nx">updateDeployment</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// This will enter the sync loop and no-op, because the deployment has been deleted from the store.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">DeleteFunc</span><span class="p">:</span> <span class="nx">dc</span><span class="p">.</span><span class="nx">deleteDeployment</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rsInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">().</span><span class="nf">AddEventHandler</span><span class="p">(</span><span class="nx">cache</span><span class="p">.</span><span class="nx">ResourceEventHandlerFuncs</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">AddFunc</span><span class="p">:</span>    <span class="nx">dc</span><span class="p">.</span><span class="nx">addReplicaSet</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">UpdateFunc</span><span class="p">:</span> <span class="nx">dc</span><span class="p">.</span><span class="nx">updateReplicaSet</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DeleteFunc</span><span class="p">:</span> <span class="nx">dc</span><span class="p">.</span><span class="nx">deleteReplicaSet</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">podInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">().</span><span class="nf">AddEventHandler</span><span class="p">(</span><span class="nx">cache</span><span class="p">.</span><span class="nx">ResourceEventHandlerFuncs</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DeleteFunc</span><span class="p">:</span> <span class="nx">dc</span><span class="p">.</span><span class="nx">deletePod</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">dc</span><span class="p">.</span><span class="nx">syncHandler</span> <span class="p">=</span> <span class="nx">dc</span><span class="p">.</span><span class="nx">syncDeployment</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dc</span><span class="p">.</span><span class="nx">enqueueDeployment</span> <span class="p">=</span> <span class="nx">dc</span><span class="p">.</span><span class="nx">enqueue</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">dc</span><span class="p">.</span><span class="nx">dLister</span> <span class="p">=</span> <span class="nx">dInformer</span><span class="p">.</span><span class="nf">Lister</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dc</span><span class="p">.</span><span class="nx">rsLister</span> <span class="p">=</span> <span class="nx">rsInformer</span><span class="p">.</span><span class="nf">Lister</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dc</span><span class="p">.</span><span class="nx">podLister</span> <span class="p">=</span> <span class="nx">podInformer</span><span class="p">.</span><span class="nf">Lister</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dc</span><span class="p">.</span><span class="nx">dListerSynced</span> <span class="p">=</span> <span class="nx">dInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">().</span><span class="nx">HasSynced</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dc</span><span class="p">.</span><span class="nx">rsListerSynced</span> <span class="p">=</span> <span class="nx">rsInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">().</span><span class="nx">HasSynced</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dc</span><span class="p">.</span><span class="nx">podListerSynced</span> <span class="p">=</span> <span class="nx">podInformer</span><span class="p">.</span><span class="nf">Informer</span><span class="p">().</span><span class="nx">HasSynced</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">dc</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="reflector">Reflector</h2>
<p>reflector是client-go中负责监听 Kubernetes API 的组件，也是整个机制中的生产者，负责将 watch到的数据将其放入 <code>watchHandler</code> 中的delta FIFO队列中。也就是吧etcd的数据反射为 delta fifo的数据</p>
<p>在代码 <a href="https://github.com/kubernetes/kubernetes/blob/v1.9.0/staging/src/k8s.io/client-go/tools/cache/reflector.go">k8s.io/client-go/tools/cache/reflector.go</a> 中定义了 Reflector 对象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Reflector</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// reflector的名称，默认为一个 file:line的格式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 期待的类型名称，这里只做展示用，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 如果提供，是一个expectedGVK字符串类型，否则是expectedType字符串类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">expectedTypeName</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 期待放置在存储中的类型，如果是一个非格式化数据，那么其 APIVersion与Kind也必须为正确的格式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">expectedType</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">Type</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// GVK 存储中的对象，是GVK格式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">expectedGVK</span> <span class="o">*</span><span class="nx">schema</span><span class="p">.</span><span class="nx">GroupVersionKind</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 同步数据的存储
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">store</span> <span class="nx">Store</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 这个是reflector的一个核心，提供了 List和Watch功能
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">listerWatcher</span> <span class="nx">ListerWatcher</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// backoff manages backoff of ListWatch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">backoffManager</span> <span class="nx">wait</span><span class="p">.</span><span class="nx">BackoffManager</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">resyncPeriod</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="nx">ShouldResync</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// clock allows tests to manipulate time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">clock</span> <span class="nx">clock</span><span class="p">.</span><span class="nx">Clock</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="nx">paginatedResult</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 最后资源的版本号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">lastSyncResourceVersion</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 当 lastSyncResourceVersion 过期或者版本太大，这个值将为 true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">isLastSyncResourceVersionUnavailable</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 读写锁，对lastSyncResourceVersion的读写操作的保护
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">lastSyncResourceVersionMutex</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// WatchListPageSize is the requested chunk size of initial and resync watch lists.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// scalability problems.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 是初始化时，或者重新同步时的块大小。如果没有设置，将为任意的旧数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 因为是提供了分页功能，RV=0则为默认的页面大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">WatchListPageSize</span> <span class="kt">int64</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而 方法 <code>NewReflector()</code> 给用户提供了一个初始化 Reflector的接口</p>
<p>在 cotroller.go 中会初始化一个 relector</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">controller</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleCrash</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="o">&lt;-</span><span class="nx">stopCh</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Queue</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">r</span> <span class="o">:=</span> <span class="nf">NewReflector</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">ListerWatcher</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">ObjectType</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Queue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">FullResyncPeriod</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Reflector下有三个可对用户提供的方法，<code>Run()</code>, <code>ListAndWatch()</code> , <code>LastSyncResourceVersion()</code></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220519222729807.png" alt="image-20220519222729807"  /></p>
<p><code>Run()</code> 是对Reflector的运行，也就是对 <code>ListAndWatch()</code> ；</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">Reflector</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Starting reflector %s (%s) from %s&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">expectedTypeName</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">resyncPeriod</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wait</span><span class="p">.</span><span class="nf">BackoffUntil</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">ListAndWatch</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleError</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">},</span> <span class="nx">r</span><span class="p">.</span><span class="nx">backoffManager</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Stopping reflector %s (%s) from %s&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">expectedTypeName</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">resyncPeriod</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而 <code>ListAndWatch()</code> 则是实际上真实的对Reflector业务的执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 前面一些都是对信息的初始化与日志输出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">r</span> <span class="o">*</span><span class="nx">Reflector</span><span class="p">)</span> <span class="nf">ListAndWatch</span><span class="p">(</span><span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;Listing and watching %v from %s&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">expectedTypeName</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">resourceVersion</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">options</span> <span class="o">:=</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">ListOptions</span><span class="p">{</span><span class="nx">ResourceVersion</span><span class="p">:</span> <span class="nx">r</span><span class="p">.</span><span class="nf">relistResourceVersion</span><span class="p">()}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 分页功能
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">initTrace</span> <span class="o">:=</span> <span class="nx">trace</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;Reflector ListAndWatch&#34;</span><span class="p">,</span> <span class="nx">trace</span><span class="p">.</span><span class="nx">Field</span><span class="p">{</span><span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">name</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">initTrace</span><span class="p">.</span><span class="nf">LogIfLong</span><span class="p">(</span><span class="mi">10</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">list</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">paginatedResult</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">		<span class="nx">listCh</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{},</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">panicCh</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">interface</span><span class="p">{},</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="o">...</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 清理和重新同步的一些
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">resyncerrc</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">error</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cancelCh</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nb">close</span><span class="p">(</span><span class="nx">cancelCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="o">...</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// give the stopCh a chance to stop the loop, even in case of continue statements further down on errors
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">stopCh</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">timeoutSeconds</span> <span class="o">:=</span> <span class="nb">int64</span><span class="p">(</span><span class="nx">minWatchTimeout</span><span class="p">.</span><span class="nf">Seconds</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="nx">rand</span><span class="p">.</span><span class="nf">Float64</span><span class="p">()</span> <span class="o">+</span> <span class="mf">1.0</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="nx">options</span> <span class="p">=</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">ListOptions</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ResourceVersion</span><span class="p">:</span> <span class="nx">resourceVersion</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 为了避免watch的挂起设置一个超时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// 仅在工作窗口期，处理任何时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">TimeoutSeconds</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">timeoutSeconds</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// To reduce load on kube-apiserver on watch restarts, you may enable watch bookmarks.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// Reflector doesn&#39;t assume bookmarks are returned at all (if the server do not support
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="c1">// watch bookmarks, it will ignore this field).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">AllowWatchBookmarks</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">start</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">clock</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 开始监听
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">w</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">listerWatcher</span><span class="p">.</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">switch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="nf">isExpiredError</span><span class="p">(</span><span class="nx">err</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// 没有设置 LastSyncResourceVersionExpired 也就是过期，会保持与返回数据相同的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="c1">// 首次会先将RV列出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;%s: watch of %v closed with: %v&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">expectedTypeName</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="c1">// 通常为watch关闭
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">case</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">io</span><span class="p">.</span><span class="nx">ErrUnexpectedEOF</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;%s: Watch for %v closed with unexpected EOF: %v&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">expectedTypeName</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleError</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;%s: Failed to watch %v: %v&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">expectedTypeName</span><span class="p">,</span> <span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// 如果出现 connection refuse，通常与apisserver通讯失败，这个时候会重新发送请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">if</span> <span class="nx">utilnet</span><span class="p">.</span><span class="nf">IsConnectionRefused</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">continue</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">watchHandler</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">w</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">resourceVersion</span><span class="p">,</span> <span class="nx">resyncerrc</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">errorStopRequested</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">switch</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="nf">isExpiredError</span><span class="p">(</span><span class="nx">err</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">					<span class="c1">// 同上步骤的功能
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>					<span class="nx">klog</span><span class="p">.</span><span class="nf">V</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">Infof</span><span class="p">(</span><span class="s">&#34;%s: watch of %v closed with: %v&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">expectedTypeName</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="nx">klog</span><span class="p">.</span><span class="nf">Warningf</span><span class="p">(</span><span class="s">&#34;%s: watch of %v ended with: %v&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">expectedTypeName</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>那么在实现时，如 deploymentinformer,会实现 Listfunc和 watchfunc，这其实就是clientset中的操作方法，也是就list与watch</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewFilteredDeploymentInformer</span><span class="p">(</span><span class="nx">client</span> <span class="nx">kubernetes</span><span class="p">.</span><span class="nx">Interface</span><span class="p">,</span> <span class="nx">namespace</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">resyncPeriod</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">,</span> <span class="nx">indexers</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">Indexers</span><span class="p">,</span> <span class="nx">tweakListOptions</span> <span class="nx">internalinterfaces</span><span class="p">.</span><span class="nx">TweakListOptionsFunc</span><span class="p">)</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">SharedIndexInformer</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">cache</span><span class="p">.</span><span class="nf">NewSharedIndexInformer</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">cache</span><span class="p">.</span><span class="nx">ListWatch</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ListFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">options</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">ListOptions</span><span class="p">)</span> <span class="p">(</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">tweakListOptions</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nf">tweakListOptions</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">client</span><span class="p">.</span><span class="nf">AppsV1</span><span class="p">().</span><span class="nf">Deployments</span><span class="p">(</span><span class="nx">namespace</span><span class="p">).</span><span class="nf">List</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">			<span class="nx">WatchFunc</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">options</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">ListOptions</span><span class="p">)</span> <span class="p">(</span><span class="nx">watch</span><span class="p">.</span><span class="nx">Interface</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="nx">tweakListOptions</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="nf">tweakListOptions</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="nx">client</span><span class="p">.</span><span class="nf">AppsV1</span><span class="p">().</span><span class="nf">Deployments</span><span class="p">(</span><span class="nx">namespace</span><span class="p">).</span><span class="nf">Watch</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">TODO</span><span class="p">(),</span> <span class="nx">options</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">appsv1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">resyncPeriod</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">indexers</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>tools/cache/controller.go</code> 是存储controller的配置及实现。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Config</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Queue</span> <span class="c1">// 对象的队列，必须为DeltaFIFO
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ListerWatcher</span> <span class="c1">// 这里能够监视并列出对象的一些信息，这个对象接受process函数的弹出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Something that can process a popped Deltas.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Process</span> <span class="nx">ProcessFunc</span> <span class="c1">// 处理Delta的弹出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 对象类型，这个controller期待的处理类型，其apiServer与kind必须正确，即，GVR必须正确
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ObjectType</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// FullResyncPeriod是每次重新同步的时间间隔
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">FullResyncPeriod</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// type ShouldResyncFunc func() bool
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 返回值nil或true，则表示reflector继续同步
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ShouldResync</span> <span class="nx">ShouldResyncFunc</span>
</span></span><span class="line"><span class="cl">    <span class="nx">RetryOnError</span> <span class="kt">bool</span> <span class="c1">// 标志位，true时，在process()返回错误时重新排列对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// Called whenever the ListAndWatch drops the connection with an error.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 断开连接是出现错误调用这个函数处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">WatchErrorHandler</span> <span class="nx">WatchErrorHandler</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// WatchListPageSize is the requested chunk size of initial and relist watch lists.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">WatchListPageSize</span> <span class="kt">int64</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>实现这个接口</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">controller</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">config</span>         <span class="nx">Config</span>
</span></span><span class="line"><span class="cl">	<span class="nx">reflector</span>      <span class="o">*</span><span class="nx">Reflector</span>
</span></span><span class="line"><span class="cl">	<span class="nx">reflectorMutex</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span>
</span></span><span class="line"><span class="cl">	<span class="nx">clock</span>          <span class="nx">clock</span><span class="p">.</span><span class="nx">Clock</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>New()</code> 为给定controller 配置的设置，即为上面的config struct，用来初始化controller对象</p>
<p><code>NewInformer()</code> ：返回一个store（保存数据的最终接口）和一个用于store的controller，同时提供事件的通知(crud)等</p>
<p><code>NewIndexerInformer()</code>：返回一个索引与一个用于索引填充的控制器</p>
<p>控制器的run()的功能实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">controller</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">stopCh</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">utilruntime</span><span class="p">.</span><span class="nf">HandleCrash</span><span class="p">()</span> <span class="c1">// 延迟销毁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>  <span class="c1">// 信号处理，用于线程管理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="o">&lt;-</span><span class="nx">stopCh</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Queue</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span> 
</span></span><span class="line"><span class="cl">	<span class="nx">r</span> <span class="o">:=</span> <span class="nf">NewReflector</span><span class="p">(</span>  <span class="c1">// 初始化Reflector
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">c</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">ListerWatcher</span><span class="p">,</span> <span class="c1">// ls
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">c</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">ObjectType</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">Queue</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">FullResyncPeriod</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">r</span><span class="p">.</span><span class="nx">ShouldResync</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">ShouldResync</span> <span class="c1">// 配置是否应该继续同步
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">r</span><span class="p">.</span><span class="nx">WatchListPageSize</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">WatchListPageSize</span>
</span></span><span class="line"><span class="cl">	<span class="nx">r</span><span class="p">.</span><span class="nx">clock</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">clock</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">c</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">WatchErrorHandler</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span> <span class="c1">// 断开连接错误处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">r</span><span class="p">.</span><span class="nx">watchErrorHandler</span> <span class="p">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">WatchErrorHandler</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">reflectorMutex</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">reflector</span> <span class="p">=</span> <span class="nx">r</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">reflectorMutex</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">wg</span> <span class="nx">wait</span><span class="p">.</span><span class="nx">Group</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">StartWithChannel</span><span class="p">(</span><span class="nx">stopCh</span><span class="p">,</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Run</span><span class="p">)</span> <span class="c1">// 这里是真正的运行。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// processLoop() 是DeltaFIFO的消费者方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">wait</span><span class="p">.</span><span class="nf">Until</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">processLoop</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span> <span class="nx">stopCh</span><span class="p">)</span> <span class="c1">// 消费队列的数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="总结">总结</h3>
<p>在controller的初始化时就初始化了Reflector， controller.Run里面Reflector是结构体初始化时的Reflector，主要作用是watch指定的资源，并且将变化同步到本地的<code>store</code>中。</p>
<p>Reflector接着执行ListAndWatch函数，ListAndWatch第一次会列出所有的对象，并获取资源对象的版本号，然后watch资源对象的版本号来查看是否有被变更。首先会将资源版本号设置为0，<code>list()</code>可能会导致本地的缓存相对于etcd里面的内容存在延迟，<code>Reflector</code>会通过<code>watch</code>的方法将延迟的部分补充上，使得本地缓存数据与etcd的数据保持一致。</p>
<p><code>controller.Run</code>函数还会调用processLoop函数，processLoop通过调用HandleDeltas，再调用distribute，processorListener.add最终将不同更新类型的对象加入<code>processorListener</code>的channel中，供processorListener.Run使用。</p>
<h2 id="delta-fifo">Delta FIFO</h2>
<p>通过下图可以看出，<code>Delta FIFO</code>  是位于Reflector中的一个FIFO队列，那么 <code>Delta FIFO</code> 究竟是什么，让我们来进一步深剖。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/1iI8uFsPRBY5m_g_WW4huMQ.png" alt="img"  /></p>
<center>图源于：https://miro.medium.com/max/700/1*iI8uFsPRBY5m_g_WW4huMQ.png</center>
<p>在代码中的注释可以看到一些信息，根据信息可以总结出</p>
<ul>
<li>Delta FIFO 是一个生产者-消费者的队列，生产者是 <code>Reflector</code>，消费者是 <code>Pop()</code></li>
<li>与传统的FIFO有两点不同
<ul>
<li>Delta FIFO</li>
</ul>
</li>
</ul>
<p>Delta FIFO也是实现了 Queue以及一些其他 interface 的类，</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220520174110756.png" alt="image-20220520174110756"  /></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">DeltaFIFO</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lock</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">RWMutex</span>  <span class="c1">// 一个读写锁，保证线程安全
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">cond</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Cond</span>
</span></span><span class="line"><span class="cl">	<span class="nx">items</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">Deltas</span> <span class="c1">// 存放的类型是一个key[string] =》 value[Delta] 类型的数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">queue</span> <span class="p">[]</span><span class="kt">string</span>  <span class="c1">// 用于存储item的key，是一个fifo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">populated</span> <span class="kt">bool</span> <span class="c1">// populated 是用来标记首次被加入的数据是否被变动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">initialPopulationCount</span> <span class="kt">int</span> <span class="c1">// 首次调用 replace() 的数量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">keyFunc</span> <span class="nx">KeyFunc</span>
</span></span><span class="line"><span class="cl">	<span class="nx">knownObjects</span> <span class="nx">KeyListerGetter</span> <span class="c1">// 这里为indexer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">closed</span>     <span class="kt">bool</span>       <span class="c1">// 代表已关闭
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">closedLock</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Mutex</span>
</span></span><span class="line"><span class="cl">    <span class="nx">emitDeltaTypeReplaced</span> <span class="kt">bool</span> <span class="c1">// 表示事件的类型，true为 replace(), false 为 sync()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>那么delta的类型是，也就是说通常情况下，Delta为一个 <code>string[runtime.object]</code> 的对象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Delta</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Type</span>   <span class="nx">DeltaType</span> <span class="c1">// 这就是一个string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Object</span> <span class="kd">interface</span><span class="p">{}</span> <span class="c1">// 之前API部分有了解到，API的类型大致为两类，runtime.Object和非结构化数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="k8s.io/">apimachinery/pkg/runtime/interfaces.go</a></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220520182830431.png" alt="image-20220520182830431"  /></p>
<p>那么此时，已经明白了Delta FIFO的结构，为一个Delta的队列，整个结构如下</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220520191654098.png" alt="image-20220520191654098"  /></p>
<h3 id="第一步创建一个delta-fifo">第一步创建一个Delta FIFO</h3>
<p>现在版本中，对创建Delta FIFO是通过函数 <code>NewDeltaFIFOWithOptions()</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">NewDeltaFIFOWithOptions</span><span class="p">(</span><span class="nx">opts</span> <span class="nx">DeltaFIFOOptions</span><span class="p">)</span> <span class="o">*</span><span class="nx">DeltaFIFO</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">opts</span><span class="p">.</span><span class="nx">KeyFunction</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">opts</span><span class="p">.</span><span class="nx">KeyFunction</span> <span class="p">=</span> <span class="nx">MetaNamespaceKeyFunc</span> <span class="c1">// 默认的计算key的方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">f</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">DeltaFIFO</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">items</span><span class="p">:</span>        <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">Deltas</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">queue</span><span class="p">:</span>        <span class="p">[]</span><span class="kt">string</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="nx">keyFunc</span><span class="p">:</span>      <span class="nx">opts</span><span class="p">.</span><span class="nx">KeyFunction</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">knownObjects</span><span class="p">:</span> <span class="nx">opts</span><span class="p">.</span><span class="nx">KnownObjects</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">emitDeltaTypeReplaced</span><span class="p">:</span> <span class="nx">opts</span><span class="p">.</span><span class="nx">EmitDeltaTypeReplaced</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">f</span><span class="p">.</span><span class="nx">cond</span><span class="p">.</span><span class="nx">L</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">lock</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">f</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="queueactionlockeddelta-fifo添加操作">queueActionLocked，Delta FIFO添加操作</h3>
<p>这里说下之前说道的，在追加时的操作 <code>queueActionLocked</code> ，如add update delete实际上走的都是这里</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">DeltaFIFO</span><span class="p">)</span> <span class="nf">queueActionLocked</span><span class="p">(</span><span class="nx">actionType</span> <span class="nx">DeltaType</span><span class="p">,</span> <span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">id</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nf">KeyOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="c1">// 计算key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">KeyError</span><span class="p">{</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">err</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 把新数据添加到DeltaFIFO中，Detal就是 动作为key，对象为值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// item是DeltaFIFO中维护的一个 map[string]Deltas
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">newDeltas</span> <span class="o">:=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">id</span><span class="p">],</span> <span class="nx">Delta</span><span class="p">{</span><span class="nx">actionType</span><span class="p">,</span> <span class="nx">obj</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">newDeltas</span> <span class="p">=</span> <span class="nf">dedupDeltas</span><span class="p">(</span><span class="nx">newDeltas</span><span class="p">)</span> <span class="c1">// 去重，去重我们前面讨论过了
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">newDeltas</span><span class="p">)</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">exists</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">id</span><span class="p">];</span> <span class="p">!</span><span class="nx">exists</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">f</span><span class="p">.</span><span class="nx">queue</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">queue</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="c1">// 不存在则添加
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">f</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">id</span><span class="p">]</span> <span class="p">=</span> <span class="nx">newDeltas</span>
</span></span><span class="line"><span class="cl">		<span class="nx">f</span><span class="p">.</span><span class="nx">cond</span><span class="p">.</span><span class="nf">Broadcast</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">delete</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">items</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span> <span class="c1">// 这里走不到，因为添加更新等操作用newDelta是1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 源码中也说要忽略这里
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在FIFO继承的Stroe的方法中，如，Add, Update等都是需要去重的，去重的操作是通过对比最后一个和倒数第二个值</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220520222611473.png" alt="image-20220520222611473"  /></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">DeltaFIFO</span><span class="p">)</span> <span class="nf">queueActionLocked</span><span class="p">(</span><span class="nx">actionType</span> <span class="nx">DeltaType</span><span class="p">,</span> <span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">id</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nf">KeyOf</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">KeyError</span><span class="p">{</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">err</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">newDeltas</span> <span class="o">:=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">id</span><span class="p">],</span> <span class="nx">Delta</span><span class="p">{</span><span class="nx">actionType</span><span class="p">,</span> <span class="nx">obj</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">newDeltas</span> <span class="p">=</span> <span class="nf">dedupDeltas</span><span class="p">(</span><span class="nx">newDeltas</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在函数 <code>dedupDeltas()</code> 中实现的这个</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// re-listing and watching can deliver the same update multiple times in any
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">order</span><span class="p">.</span> <span class="nx">This</span> <span class="nx">will</span> <span class="nx">combine</span> <span class="nx">the</span> <span class="nx">most</span> <span class="nx">recent</span> <span class="nx">two</span> <span class="nx">deltas</span> <span class="k">if</span> <span class="nx">they</span> <span class="nx">are</span> <span class="nx">the</span> <span class="nx">same</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">dedupDeltas</span><span class="p">(</span><span class="nx">deltas</span> <span class="nx">Deltas</span><span class="p">)</span> <span class="nx">Deltas</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">n</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">deltas</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">n</span> <span class="p">&lt;</span> <span class="mi">2</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">deltas</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">a</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">deltas</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c1">// 如 [1,2,3,4] a=4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">b</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">deltas</span><span class="p">[</span><span class="nx">n</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="c1">// b=3,这里两个值其实为事件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">out</span> <span class="o">:=</span> <span class="nf">isDup</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span> <span class="nx">out</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">d</span> <span class="o">:=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">Deltas</span><span class="p">{},</span> <span class="nx">deltas</span><span class="p">[:</span><span class="nx">n</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nb">append</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="o">*</span><span class="nx">out</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">deltas</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果b对象的类型是 <code>DeletedFinalStateUnknown</code> 也会认为是一个旧对象被删除，这里在去重时也只是对删除的操作进行去重。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// tools/cache/delta_fifo.go
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">isDup</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="o">*</span><span class="nx">Delta</span><span class="p">)</span> <span class="o">*</span><span class="nx">Delta</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">out</span> <span class="o">:=</span> <span class="nf">isDeletionDup</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">);</span> <span class="nx">out</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">out</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// TODO: Detect other duplicate situations? Are there any?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// keep the one with the most information if both are deletions.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">isDeletionDup</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="o">*</span><span class="nx">Delta</span><span class="p">)</span> <span class="o">*</span><span class="nx">Delta</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">Type</span> <span class="o">!=</span> <span class="nx">Deleted</span> <span class="o">||</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Type</span> <span class="o">!=</span> <span class="nx">Deleted</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Do more sophisticated checks, or is this sufficient?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">Object</span><span class="p">.(</span><span class="nx">DeletedFinalStateUnknown</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">a</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">b</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>为什么需要去重？什么情况下需合并</strong></p>
<p>代码中开发者给我们留了一个TODO</p>
<blockquote>
<p>TODO: is there anything other than deletions that need deduping?</p>
</blockquote>
<ul>
<li>取决于Detal FIFO 生产-消费延迟
<ul>
<li>当在一个资源的创建时，其状态会频繁的更新，如 Creating，Runinng等，这个时候会出现大量写入FIFO中的数据，但是在消费端可能之前的并未消费完。</li>
<li>在上面那种情况下，以及Kubernetes 声明式 API 的设计，其实多余的根本不关注，只需要最后一个动作如Running，这种情况下，多个内容可以合并为一个步骤</li>
</ul>
</li>
<li>然而在代码中，去重仅仅是在Delete状态生效，显然这不可用；那么结合这些得到：
<ul>
<li>在一个工作时间窗口内，如果对于删除操作来说发生多次，与发生一次实际上没什么区别，可以去重</li>
<li>但在更新于新增操作时，实际上在对于声明式 API 的设计个人感觉是完全可以做到去重操作。
<ul>
<li>同一个时间窗口内多次操作，如更新，实际上Kubernetes应该只关注最终状态而不是命令式？</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="compute-key">Compute Key</h3>
<p>上面大概对一些Detal FIFO的逻辑进行了分析，那么对于Detal FIFO如何去计算，也就是说 <code>MetaNamespaceKeyFunc</code> ，这个是默认的KeyFunc，作用是计算Detals中的唯一key。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">MetaNamespaceKeyFunc</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">obj</span><span class="p">.(</span><span class="nx">ExplicitKey</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>  <span class="c1">// 显示声明的则为这个值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">return</span> <span class="nb">string</span><span class="p">(</span><span class="nx">key</span><span class="p">),</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">meta</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">meta</span><span class="p">.</span><span class="nf">Accessor</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="c1">// 那么使用Accessor,每一个资源都会实现这个Accessor
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;object has no meta: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">meta</span><span class="p">.</span><span class="nf">GetNamespace</span><span class="p">())</span> <span class="p">&gt;</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">meta</span><span class="p">.</span><span class="nf">GetNamespace</span><span class="p">()</span> <span class="o">+</span> <span class="s">&#34;/&#34;</span> <span class="o">+</span> <span class="nx">meta</span><span class="p">.</span><span class="nf">GetName</span><span class="p">(),</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">meta</span><span class="p">.</span><span class="nf">GetName</span><span class="p">(),</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>ObjectMetaAccessor</code> 每个Kubernetes资源都会实现这个对象，如Deployment</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// accessor interface
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">ObjectMetaAccessor</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">GetObjectMeta</span><span class="p">()</span> <span class="nx">Object</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 会被ObjectMeta所实现
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">obj</span> <span class="o">*</span><span class="nx">ObjectMeta</span><span class="p">)</span> <span class="nf">GetObjectMeta</span><span class="p">()</span> <span class="nx">Object</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">obj</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 而每一个资源都会继承这个 ObjectMeta，如 ClusterRole
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ClusterRole</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span><span class="p">.</span><span class="nx">TypeMeta</span> <span class="s">`json:&#34;,inline&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMeta</span> <span class="s">`json:&#34;metadata,omitempty&#34;protobuf:&#34;bytes,1,opt,name=metadata&#34;`</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>那么这个Deltas的key则为集群类型的是资源本身的名字，namespace范围的则为 <code>meta.GetNamespace() + &quot;/&quot; + meta.GetName()</code>，可以在上面代码中看到，这样就可以给Detal生成了一个唯一的key</p>
<h3 id="keyof用于计算对象的key">keyof，用于计算对象的key</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">f</span> <span class="o">*</span><span class="nx">DeltaFIFO</span><span class="p">)</span> <span class="nf">KeyOf</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">d</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">obj</span><span class="p">.(</span><span class="nx">Deltas</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span> <span class="c1">// 长度为0的时候是一个初始的类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">KeyError</span><span class="p">{</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">ErrZeroLengthDeltasObject</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">obj</span> <span class="p">=</span> <span class="nx">d</span><span class="p">.</span><span class="nf">Newest</span><span class="p">().</span><span class="nx">Object</span> <span class="c1">// 用最新的一个对象，如果为空则是nil
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">d</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">obj</span><span class="p">.(</span><span class="nx">DeletedFinalStateUnknown</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Key</span><span class="p">,</span> <span class="kc">nil</span> <span class="c1">// 到了这里，之前提到过，是一个过期的值将会被删除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">f</span><span class="p">.</span><span class="nf">keyFunc</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="c1">// 调用具体的key计算函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="indexer">Indexer</h2>
<p>indexer 在整个 client-go 架构中提供了一个具有线程安全的数据存储的对象存储功能；对于Indexer这里会分析下对应的架构及使用方法。</p>
<p><a href="https://github.com/kubernetes/client-go/blob/master/tools/cache/index.go">client-go/tools/cache/index.go</a> 中可以看到 indexer是一个实现了<code>Store</code> 的一个interface</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Indexer</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 继承了store，拥有store的所有方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Store</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 返回indexname的obj的交集
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">Index</span><span class="p">(</span><span class="nx">indexName</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">([]</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 通过对 indexName，indexedValue与之相匹配的集合
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">IndexKeys</span><span class="p">(</span><span class="nx">indexName</span><span class="p">,</span> <span class="nx">indexedValue</span> <span class="kt">string</span><span class="p">)</span> <span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 给定一个indexName 返回所有的indexed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">ListIndexFuncValues</span><span class="p">(</span><span class="nx">indexName</span> <span class="kt">string</span><span class="p">)</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 通过indexname，返回与indexedvalue相关的 obj
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">ByIndex</span><span class="p">(</span><span class="nx">indexName</span><span class="p">,</span> <span class="nx">indexedValue</span> <span class="kt">string</span><span class="p">)</span> <span class="p">([]</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 返回所有的indexer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">GetIndexers</span><span class="p">()</span> <span class="nx">Indexers</span>
</span></span><span class="line"><span class="cl">	<span class="nf">AddIndexers</span><span class="p">(</span><span class="nx">newIndexers</span> <span class="nx">Indexers</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>实际上对他的实现是一个 cache，cache是一个KeyFunc与ThreadSafeStore实现的indexer，有名称可知具有线程安全的功能</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">cache</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cacheStorage</span> <span class="nx">ThreadSafeStore</span>
</span></span><span class="line"><span class="cl">	<span class="nx">keyFunc</span> <span class="nx">KeyFunc</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>既然index继承了Store那么，也就是 <code>ThreadSafeStore</code> 必然实现了Store，这是一个基础保证</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ThreadSafeStore</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Add</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Update</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Delete</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Get</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">item</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">exists</span> <span class="kt">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">List</span><span class="p">()</span> <span class="p">[]</span><span class="kd">interface</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nf">ListKeys</span><span class="p">()</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Replace</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Index</span><span class="p">(</span><span class="nx">indexName</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">([]</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">IndexKeys</span><span class="p">(</span><span class="nx">indexName</span><span class="p">,</span> <span class="nx">indexKey</span> <span class="kt">string</span><span class="p">)</span> <span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">ListIndexFuncValues</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">)</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nf">ByIndex</span><span class="p">(</span><span class="nx">indexName</span><span class="p">,</span> <span class="nx">indexKey</span> <span class="kt">string</span><span class="p">)</span> <span class="p">([]</span><span class="kd">interface</span><span class="p">{},</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">GetIndexers</span><span class="p">()</span> <span class="nx">Indexers</span>
</span></span><span class="line"><span class="cl">	<span class="nf">AddIndexers</span><span class="p">(</span><span class="nx">newIndexers</span> <span class="nx">Indexers</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Resync</span><span class="p">()</span> <span class="kt">error</span> <span class="c1">// Resync is a no-op and is deprecated
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// KeyFunc是一个生成key的函数，给一个对象，返回一个key值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">KeyFunc</span> <span class="kd">func</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>那么这个indexer structure可以通过图来很直观的看出来</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220522003635661.png" alt="image-20220522003635661"  /></p>
<h3 id="cache的结构">cache的结构</h3>
<p>cache中会出现三种数据结构，也可以成为三种名词，为 <code>Index </code>, <code>Indexers</code> , <code>Indices</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Index</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">sets</span><span class="p">.</span><span class="nx">String</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Indexers</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">IndexFunc</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Indices</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">Index</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看出：</p>
<ul>
<li><code>Index</code> 映射到对象，<code>sets.String</code> 也是在API中定义的数据类型 <code>[string]Struct{}</code>，</li>
<li><code>Indexers</code> 是这个 <code>Index</code> 的 <code>IndexFunc</code> , 是一个如何计算Index的keyname的函数</li>
<li><code>Indices</code> 通过Index 名词拿到对应的对象</li>
</ul>
<p>这个名词的概念如下，通过图来了解会更加清晰</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220522172028443.png" alt="image-20220522172028443"  /></p>
<h3 id="从创建开始">从创建开始</h3>
<p>创建一个cache有两种方式，一种是指定indexer，一种是默认indexer</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// NewStore returns a Store implemented simply with a map and a lock.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewStore</span><span class="p">(</span><span class="nx">keyFunc</span> <span class="nx">KeyFunc</span><span class="p">)</span> <span class="nx">Store</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">cache</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cacheStorage</span><span class="p">:</span> <span class="nf">NewThreadSafeStore</span><span class="p">(</span><span class="nx">Indexers</span><span class="p">{},</span> <span class="nx">Indices</span><span class="p">{}),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">keyFunc</span><span class="p">:</span>      <span class="nx">keyFunc</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// NewIndexer returns an Indexer implemented simply with a map and a lock.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewIndexer</span><span class="p">(</span><span class="nx">keyFunc</span> <span class="nx">KeyFunc</span><span class="p">,</span> <span class="nx">indexers</span> <span class="nx">Indexers</span><span class="p">)</span> <span class="nx">Indexer</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">cache</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">cacheStorage</span><span class="p">:</span> <span class="nf">NewThreadSafeStore</span><span class="p">(</span><span class="nx">indexers</span><span class="p">,</span> <span class="nx">Indices</span><span class="p">{}),</span>
</span></span><span class="line"><span class="cl">		<span class="nx">keyFunc</span><span class="p">:</span>      <span class="nx">keyFunc</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="更新操作">更新操作</h3>
<p>在indexer中的更新操作（诸如 <code>add</code> , <code>update</code> ），实际上操作的是 <code>updateIndices</code>， 通过在代码可以看出</p>
<p><a href="https://github.com/kubernetes/client-go/blob/master/tools/cache/thread_safe_store.go">tools/cache/thread_safe_store.go</a> 的 77行起，那么就来看下 <code>updateIndices()</code> 具体做了什么</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">threadSafeMap</span><span class="p">)</span> <span class="nf">updateIndices</span><span class="p">(</span><span class="nx">oldObj</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">newObj</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 在操作时，如果有旧对象，需要先删除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">oldObj</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nf">deleteFromIndices</span><span class="p">(</span><span class="nx">oldObj</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 先对整个indexer遍历，拿到index name与 index function
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">indexFunc</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">c</span><span class="p">.</span><span class="nx">indexers</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 通过index function，计算出对象的indexed name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">indexValues</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">indexFunc</span><span class="p">(</span><span class="nx">newObj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">panic</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;unable to calculate an index entry for key %q on index %q: %v&#34;</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 接下来通过遍历的index name 拿到这个index的对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">index</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">indices</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">index</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span> <span class="c1">// 确认这个index是否存在，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">index</span> <span class="p">=</span> <span class="nx">Index</span><span class="p">{}</span> <span class="c1">// 如果不存在将一个Index{}初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">c</span><span class="p">.</span><span class="nx">indices</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="p">=</span> <span class="nx">index</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 通过计算出的indexed name来拿到对应的 set of object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">indexValue</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">indexValues</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">set</span> <span class="o">:=</span> <span class="nx">index</span><span class="p">[</span><span class="nx">indexValue</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">set</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 如果这个set不存在，则初始化这个set
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="nx">set</span> <span class="p">=</span> <span class="nx">sets</span><span class="p">.</span><span class="nx">String</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">index</span><span class="p">[</span><span class="nx">indexValue</span><span class="p">]</span> <span class="p">=</span> <span class="nx">set</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">set</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="c1">// 然后将key插入set中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>那么通过上面可以了解到了 <code>updateIndices</code> 的逻辑，那么通过对更新函数分析来看看他具体做了什么？这里是add函数，通过一段代码模拟操作来熟悉结构</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">testIndexer</span> <span class="o">:=</span> <span class="s">&#34;testIndexer&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">testIndex</span> <span class="o">:=</span> <span class="s">&#34;testIndex&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">indexers</span> <span class="o">:=</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">Indexers</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">testIndexer</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">(</span><span class="nx">strings</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="nx">e</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">indexes</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">testIndex</span><span class="p">}</span> <span class="c1">// index的名词
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="nx">indexes</span><span class="p">,</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">indices</span> <span class="o">:=</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">Indices</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="nx">store</span> <span class="o">:=</span> <span class="nx">cache</span><span class="p">.</span><span class="nf">NewThreadSafeStore</span><span class="p">(</span><span class="nx">indexers</span><span class="p">,</span> <span class="nx">indices</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%#v\n&#34;</span><span class="p">,</span> <span class="nx">store</span><span class="p">.</span><span class="nf">GetIndexers</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">store</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">&#34;retain&#34;</span><span class="p">,</span> <span class="s">&#34;pod--1&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">store</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">&#34;delete&#34;</span><span class="p">,</span> <span class="s">&#34;pod--2&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">store</span><span class="p">.</span><span class="nf">Update</span><span class="p">(</span><span class="s">&#34;retain&#34;</span><span class="p">,</span> <span class="s">&#34;pod-3&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">//lists := store.Update(&#34;retain&#34;, &#34;pod-3&#34;)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">lists</span> <span class="o">:=</span> <span class="nx">store</span><span class="p">.</span><span class="nf">List</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">item</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">lists</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里是对add操作以及对<code>updateIndices()</code> 进行操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// threadSafe.go
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">threadSafeMap</span><span class="p">)</span> <span class="nf">Add</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span><span class="p">.</span><span class="nx">lock</span><span class="p">.</span><span class="nf">Lock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">c</span><span class="p">.</span><span class="nx">lock</span><span class="p">.</span><span class="nf">Unlock</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">oldObject</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="c1">// 这个item就是存储object的地方, 为空
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span><span class="p">.</span><span class="nx">items</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="p">=</span> <span class="nx">obj</span> <span class="c1">// 这里已经添加了新的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span><span class="p">.</span><span class="nf">updateIndices</span><span class="p">(</span><span class="nx">oldObject</span><span class="p">,</span> <span class="nx">obj</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span> <span class="c1">// 转至updateIndices
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// updateIndices
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">threadSafeMap</span><span class="p">)</span> <span class="nf">updateIndices</span><span class="p">(</span><span class="nx">oldObj</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">newObj</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 就当是新创建的，这里是空的忽略
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">oldObj</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nf">deleteFromIndices</span><span class="p">(</span><span class="nx">oldObj</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 这个时候拿到的就是 name=testKey function=testIndexer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">indexFunc</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">c</span><span class="p">.</span><span class="nx">indexers</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 通过testIndexer对testKey计算出的结果是 []string{testIndexer}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">indexValues</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">indexFunc</span><span class="p">(</span><span class="nx">newObj</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">panic</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;unable to calculate an index entry for key %q on index %q: %v&#34;</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">err</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">index</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">indices</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> 
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">index</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">            <span class="nx">index</span> <span class="p">=</span> <span class="nx">Index</span><span class="p">{}</span> 
</span></span><span class="line"><span class="cl">            <span class="c1">// 因为假设为空了，故到这里c.indices[testIndexer]= Index{}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">c</span><span class="p">.</span><span class="nx">indices</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="p">=</span> <span class="nx">index</span> 
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">indexValue</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">indexValues</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// indexValue=testIndexer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="c1">// set := c.index[name] = c.indices[testIndexer]Index{}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">set</span> <span class="o">:=</span> <span class="nx">index</span><span class="p">[</span><span class="nx">indexValue</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="nx">set</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="nx">set</span> <span class="p">=</span> <span class="nx">sets</span><span class="p">.</span><span class="nx">String</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">				<span class="nx">index</span><span class="p">[</span><span class="nx">indexValue</span><span class="p">]</span> <span class="p">=</span> <span class="nx">set</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="nx">set</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="c1">// 到这里就为set=indices[testIndexer]Index{}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>总结一下，到这里，可以很明显的看出来，indexer中的三个概念是什么了，前面如果没有看明白话</p>
<ul>
<li><code>Index</code>：通过indexer计算出key的名称，值为对应obj的一个集合，可以理解为索引的数据结构
<ul>
<li>比如说 <code>Pod:{&quot;nginx-pod1&quot;: v1.Pod{Name:Nginx}}</code></li>
</ul>
</li>
<li><code>Indexers</code> ：这个很简单，就是，对于Index中如何计算每个key的名称；可以理解为分词器，索引的过程</li>
<li><code>Indices</code> 通过Index 名词拿到对应的对象，是Index的集合；是将原始数据Item做了一个索引，可以理解为做索引的具体字段
<ul>
<li>比如说 <code>Indices[&quot;Pod&quot;]{&quot;nginx-pod1&quot;: v1.Pod{Name:Nginx}, &quot;nginx-pod2&quot;: v1.Pod{Name:Nginx}}</code></li>
</ul>
</li>
<li><code>Items</code>：实际上存储的在Indices中的<code>set.String{key:value}</code> ，中的 <code>key=value</code>
<ul>
<li>例如：<code>Item:{&quot;nginx-pod1&quot;: v1.Pod{Name:Nginx}, &quot;coredns-depoyment&quot;: App.Deployment{Name:coredns}}</code></li>
</ul>
</li>
</ul>
<h3 id="删除操作">删除操作</h3>
<p>对于删除操作，在最新版本中是使用了 <code>updateIndices</code> 就是 add update delete全都是相同的方法操作，对于旧版包含1.19- 是单独的一个操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">// v1.2+
</span></span><span class="line"><span class="cl">func (c *threadSafeMap) Delete(key string) {
</span></span><span class="line"><span class="cl">	c.lock.Lock()
</span></span><span class="line"><span class="cl">	defer c.lock.Unlock()
</span></span><span class="line"><span class="cl">	if obj, exists := c.items[key]; exists {
</span></span><span class="line"><span class="cl">		c.updateIndices(obj, nil, key)
</span></span><span class="line"><span class="cl">		delete(c.items, key)
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">// v1.19-
</span></span><span class="line"><span class="cl">func (c *threadSafeMap) Delete(key string) {
</span></span><span class="line"><span class="cl">	c.lock.Lock()
</span></span><span class="line"><span class="cl">	defer c.lock.Unlock()
</span></span><span class="line"><span class="cl">	if obj, exists := c.items[key]; exists {
</span></span><span class="line"><span class="cl">		c.deleteFromIndices(obj, key)
</span></span><span class="line"><span class="cl">		delete(c.items, key)
</span></span><span class="line"><span class="cl">	}
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="indexer使用">indexer使用</h3>
<p>上面了解了indexer概念，可以通过写代码来尝试使用一些indexer</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">appsV1</span> <span class="s">&#34;k8s.io/api/apps/v1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span> <span class="s">&#34;k8s.io/apimachinery/pkg/apis/meta/v1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;k8s.io/client-go/tools/cache&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">indexers</span> <span class="o">:=</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">Indexers</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;getDeplyment&#34;</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">(</span><span class="nx">strings</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="nx">e</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">d</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">obj</span><span class="p">.(</span><span class="o">*</span><span class="nx">appsV1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">d</span><span class="p">.</span><span class="nx">Name</span><span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;getDaemonset&#34;</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">obj</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">(</span><span class="nx">strings</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="nx">e</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">d</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">obj</span><span class="p">.(</span><span class="o">*</span><span class="nx">appsV1</span><span class="p">.</span><span class="nx">DaemonSet</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">return</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="nx">d</span><span class="p">.</span><span class="nx">Name</span><span class="p">},</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 第一个参数是计算set内的key的名称 就是map[string]sets.String的这个strings的名称/namespace/resorcename
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 第二个参数是计算index即外部的key的名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">indexer</span> <span class="o">:=</span> <span class="nx">cache</span><span class="p">.</span><span class="nf">NewIndexer</span><span class="p">(</span><span class="nx">cache</span><span class="p">.</span><span class="nx">MetaNamespaceKeyFunc</span><span class="p">,</span> <span class="nx">indexers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">deployment</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">appsV1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ObjectMeta</span><span class="p">:</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMeta</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Name</span><span class="p">:</span>      <span class="s">&#34;nginx-deplyment&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Namespace</span><span class="p">:</span> <span class="s">&#34;test&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">daemonset</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">appsV1</span><span class="p">.</span><span class="nx">DaemonSet</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ObjectMeta</span><span class="p">:</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMeta</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Name</span><span class="p">:</span>      <span class="s">&#34;firewall-daemonset&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Namespace</span><span class="p">:</span> <span class="s">&#34;test&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">daemonset2</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">appsV1</span><span class="p">.</span><span class="nx">DaemonSet</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ObjectMeta</span><span class="p">:</span> <span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMeta</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Name</span><span class="p">:</span>      <span class="s">&#34;etcd-daemonset&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Namespace</span><span class="p">:</span> <span class="s">&#34;default&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">indexer</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">deployment</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">indexer</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">daemonset</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">indexer</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="nx">daemonset2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 第一个参数是索引器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 第二个参数是所引起做索引的字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">lists</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">indexer</span><span class="p">.</span><span class="nf">ByIndex</span><span class="p">(</span><span class="s">&#34;getDaemonset&#34;</span><span class="p">,</span> <span class="s">&#34;etcd-daemonset&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">item</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">lists</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">switch</span> <span class="nx">item</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">*</span><span class="nx">appsV1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">item</span><span class="p">.(</span><span class="o">*</span><span class="nx">appsV1</span><span class="p">.</span><span class="nx">Deployment</span><span class="p">).</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">*</span><span class="nx">appsV1</span><span class="p">.</span><span class="nx">DaemonSet</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">item</span><span class="p">.(</span><span class="o">*</span><span class="nx">appsV1</span><span class="p">.</span><span class="nx">DaemonSet</span><span class="p">).</span><span class="nx">Name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>如何通过源码编译Kubernetes</title>
      <link>https://www.oomkill.com/2022/05/ch11-code-compile/</link>
      <pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/05/ch11-code-compile/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="本地构建">本地构建</h2>
<h3 id="选择要构建的版本">选择要构建的版本</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git checkout tags/v1.19.5
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="将依赖包复制到对应路径下">将依赖包复制到对应路径下</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cp staging/src/k8s.io vendor/
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="调整makefile">调整makefile</h3>
<p>在windows上编译的克隆下可能文件编码变了，需要手动修改下文件编码。比如说出现 <code>\r not found</code> 类似关键词时</p>
<p>这里转换编码使用了 dos2unix，需要提前安装下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">apt install dos2unix
</span></span></code></pre></td></tr></table>
</div>
</div><p>转换原因是因为对于bash 脚本执行识别不了windows的换行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">find . -name &#39;*.sh&#39; -exec dos2unix {} \;
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后将 <code>build/root/</code> 的文件复制到项目根目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cp build/root/Makefile* ./
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="编译">编译</h3>
<p>查看帮助 <code>make help</code></p>
<p>编译 <code>make all WHAT=cmd/kube-apiserver GOFLAGS=-v</code></p>
<p><code>WHAT=cmd/kube-apiserver</code> 为仅编译单一组件，<code>all</code> 为所有的组件</p>
<p>还可以增加其他的一些环境变量 <code>KUBE_BUILD_PLATFORMS=</code> 如编译的平台</p>
<p>更多的可以 <code>make help</code> 查看帮助</p>
<h3 id="编译中问题">编译中问题</h3>
<p><strong>Makefile:93: recipe for target &lsquo;all&rsquo; failed</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">!!! [0515 21:32:52] Call tree:
</span></span><span class="line"><span class="cl">!!! [0515 21:32:52]  1: /mnt/d/src/go_work/src/kubernetes/hack/lib/golang.sh:717 kube::golang::build_some_binaries(...)
</span></span><span class="line"><span class="cl">!!! [0515 21:32:52]  2: /mnt/d/src/go_work/src/kubernetes/hack/lib/golang.sh:861 kube::golang::build_binaries_for_platform(...)
</span></span><span class="line"><span class="cl">!!! [0515 21:32:52]  3: hack/make-rules/build.sh:27 kube::golang::build_binaries(...)
</span></span><span class="line"><span class="cl">!!! [0515 21:32:52] Call tree:
</span></span><span class="line"><span class="cl">!!! [0515 21:32:52]  1: hack/make-rules/build.sh:27 kube::golang::build_binaries(...)
</span></span><span class="line"><span class="cl">!!! [0515 21:32:52] Call tree:
</span></span><span class="line"><span class="cl">!!! [0515 21:32:52]  1: hack/make-rules/build.sh:27 kube::golang::build_binaries(...)
</span></span><span class="line"><span class="cl">Makefile:93: recipe for target &#39;all&#39; failed
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里看报错根本不知道发生什么问题，使用 <code>strace</code> 追送了下，很明显看到是没有gcc</p>
<p>cgo: exec gcc: exec: &ldquo;gcc&rdquo;: executable file not found in $PATH</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">rt_sigprocmask(SIG_BLOCK, [HUP INT QUIT TERM XCPU XFSZ], NULL, 8) = 0
</span></span><span class="line"><span class="cl">clone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7fbf45410a10) = 17890
</span></span><span class="line"><span class="cl">rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0
</span></span><span class="line"><span class="cl">wait4(-1, +++ [0515 21:34:40] Building go targets for linux/amd64:
</span></span><span class="line"><span class="cl">    cmd/kubelet
</span></span><span class="line"><span class="cl">k8s.io/kubernetes/vendor/github.com/opencontainers/runc/libcontainer/system
</span></span><span class="line"><span class="cl">k8s.io/kubernetes/vendor/github.com/mindprince/gonvml
</span></span><span class="line"><span class="cl"># k8s.io/kubernetes/vendor/github.com/opencontainers/runc/libcontainer/system
</span></span><span class="line"><span class="cl">cgo: exec gcc: exec: &#34;gcc&#34;: executable file not found in $PATH
</span></span><span class="line"><span class="cl"># k8s.io/kubernetes/vendor/github.com/mindprince/gonvml
</span></span><span class="line"><span class="cl">cgo: exec gcc: exec: &#34;gcc&#34;: executable file not found in $PATH
</span></span><span class="line"><span class="cl">!!! [0515 21:34:42] Call tree:
</span></span><span class="line"><span class="cl">!!! [0515 21:34:42]  1: /mnt/d/src/go_work/src/kubernetes/hack/lib/golang.sh:717 kube::golang::build_some_binaries(...)
</span></span><span class="line"><span class="cl">!!! [0515 21:34:42]  2: /mnt/d/src/go_work/src/kubernetes/hack/lib/golang.sh:861 kube::golang::build_binaries_for_platform(...)
</span></span><span class="line"><span class="cl">!!! [0515 21:34:42]  3: hack/make-rules/build.sh:27 kube::golang::build_binaries(...)
</span></span><span class="line"><span class="cl">!!! [0515 21:34:42] Call tree:
</span></span><span class="line"><span class="cl">!!! [0515 21:34:42]  1: hack/make-rules/build.sh:27 kube::golang::build_binaries(...)
</span></span><span class="line"><span class="cl">!!! [0515 21:34:42] Call tree:
</span></span><span class="line"><span class="cl">!!! [0515 21:34:42]  1: hack/make-rules/build.sh:27 kube::golang::build_binaries(...)
</span></span><span class="line"><span class="cl">[{WIFEXITED(s) &amp;&amp; WEXITSTATUS(s) == 1}], 0, NULL) = 17890
</span></span><span class="line"><span class="cl">--- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=17890, si_uid=0, si_status=1, si_utime=0, si_stime=0} ---
</span></span><span class="line"><span class="cl">rt_sigreturn({mask=[]})                 = 17890
</span></span><span class="line"><span class="cl">openat(AT_FDCWD, &#34;/usr/share/locale/C.UTF-8/LC_MESSAGES/make.mo&#34;, O_RDONLY) = -1 ENOENT (No such file or directory)
</span></span><span class="line"><span class="cl">openat(AT_FDCWD, &#34;/usr/share/locale/C.utf8/LC_MESSAGES/make.mo&#34;, O_RDONLY) = -1 ENOENT (No such file or directory)
</span></span><span class="line"><span class="cl">openat(AT_FDCWD, &#34;/usr/share/locale/C/LC_MESSAGES/make.mo&#34;, O_RDONLY) = -1 ENOENT (No such file or directory)
</span></span><span class="line"><span class="cl">openat(AT_FDCWD, &#34;/usr/share/locale-langpack/C.UTF-8/LC_MESSAGES/make.mo&#34;, O_RDONLY) = -1 ENOENT (No such file or directory)
</span></span><span class="line"><span class="cl">openat(AT_FDCWD, &#34;/usr/share/locale-langpack/C.utf8/LC_MESSAGES/make.mo&#34;, O_RDONLY) = -1 ENOENT (No such file or directory)
</span></span><span class="line"><span class="cl">openat(AT_FDCWD, &#34;/usr/share/locale-langpack/C/LC_MESSAGES/make.mo&#34;, O_RDONLY) = -1 ENOENT (No such file or directory)
</span></span><span class="line"><span class="cl">fstat(1, {st_mode=S_IFCHR|0640, st_rdev=makedev(4, 1), ...}) = 0
</span></span><span class="line"><span class="cl">ioctl(1, TCGETS, {B38400 opost isig icanon echo ...}) = 0
</span></span><span class="line"><span class="cl">write(1, &#34;Makefile:93: recipe for target &#39;&#34;..., 44Makefile:93: recipe for target &#39;all&#39; failed
</span></span><span class="line"><span class="cl">) = 44
</span></span><span class="line"><span class="cl">write(2, &#34;make: *** [all] Error 1\n&#34;, 24make: *** [all] Error 1
</span></span><span class="line"><span class="cl">) = 24
</span></span><span class="line"><span class="cl">rt_sigprocmask(SIG_BLOCK, [HUP INT QUIT TERM XCPU XFSZ], NULL, 8) = 0
</span></span><span class="line"><span class="cl">rt_sigprocmask(SIG_SETMASK, [], NULL, 8) = 0
</span></span><span class="line"><span class="cl">chdir(&#34;/mnt/d/src/go_work/src/kubernetes&#34;) = 0
</span></span><span class="line"><span class="cl">close(1)                                = 0
</span></span><span class="line"><span class="cl">exit_group(2)                           = ?
</span></span><span class="line"><span class="cl">+++ exited with 2 +++
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>修改后编译问题可以明显看出是哪里</strong></p>
<p>如尝试增加一种资源类型后编译，这种类型的错误可以根据报错提示进行修改</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/1380340-20220516172727798-791337963.png" alt=""  /></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">+++ [0515 21:47:59] Building go targets for linux/amd64:
</span></span><span class="line"><span class="cl">    cmd/kube-apiserver
</span></span><span class="line"><span class="cl">k8s.io/kubernetes/vendor/k8s.io/api/apps/v1
</span></span><span class="line"><span class="cl"># k8s.io/kubernetes/vendor/k8s.io/api/apps/v1
</span></span><span class="line"><span class="cl">vendor/k8s.io/api/apps/v1/register.go:48:3: cannot use &amp;StateDeploy{} (type *StateDeploy) as type runtime.Object in argument to scheme.Ad
</span></span><span class="line"><span class="cl">dKnownTypes:
</span></span><span class="line"><span class="cl">        *StateDeploy does not implement runtime.Object (missing DeepCopyObject method)
</span></span><span class="line"><span class="cl">!!! [0515 21:48:01] Call tree:
</span></span><span class="line"><span class="cl">!!! [0515 21:48:01]  1: /mnt/d/src/go_work/src/kubernetes/hack/lib/golang.sh:706 k
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>深入理解kubernetes API</title>
      <link>https://www.oomkill.com/2022/05/ch02-kubernetes-api/</link>
      <pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/05/ch02-kubernetes-api/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="apiserver">APIServer</h2>
<p>在kubernetes架构概念层面上，Kubernetes由一些具有不同角色的服务节点组成。而master的控制平面由 <code>Apiserver</code>  <code>Controller-manager</code> 和 <code>Scheduler</code> 组成。</p>
<p><code>Apiserver</code> 从概念上理解可以分为 <code>api</code> 和 <code>object</code> 的集合，<code>api</code> 可以理解为，处理读写请求来修改相应 <code>object</code> 的组件；而 <code>object</code> 可以表示为 kubernetes 对象，如 <code>Pod</code>， <code>Deployment</code> 等 。</p>
<h2 id="基于声明式的api">基于声明式的API</h2>
<p>在命令式 API 中，会直接发送要执行的命令，例如：<em>运行</em>、<em>停止</em> 等命令。在声明式API 中，将声明希望系统执行的操作，系统将不断将自身状态朝希望状态改变。</p>
<h3 id="为什么使用声明式">为什么使用声明式</h3>
<p>在分布式系统中，任何组件随时都可能发生故障，当组件故障恢复时，需要明白自己需要做什么。在使用命令式时，出现故障的组件可能在异常时错过调用，并且在恢复时需要其他外部组件进行干预。而声明式仅需要在恢复时确定当前状态以确定他需要做什么。</p>
<h3 id="external-apis">External APIs</h3>
<p>在kubernetes中，控制平面是透明的，及没有internal APIs。这就意味着Kubernetes组件间使用相同的API交互。这里通过一个例子来说明外部APIs与声明式的关系。</p>
<p>例如，创建一个Pod对象，<code>Scheduler</code> 会监听 API来完成创建，创建完成后，调度程序不会命令被分配节点启动Pod。而在kubelet端，发现pod具有与自己相同的一些信息时，会监听pod状态。如改变kubelet则修改状态，如果删除掉Pod（对象资源不存在与API中），那么kubelet则将终止他。</p>
<h3 id="为什么不使用internal-api">为什么不使用Internal API</h3>
<p>使用External API可以使kubernetes组件都使用相同的API，使得kubernetes具有可扩展性和可组合性。对于kubernetes中任何默认组件，如不足满足需求时，都可以更换为使用相同API的组件。</p>
<p>另外，外部API还可轻松的使用公共API来扩展kubernetes的功能</p>
<h2 id="api资源">API资源</h2>
<p>从广义上讲，kubernetes对象可以用任何数据结构来表示，如：资源实例、配置（审计策略）或持久化实体（Pod）；在使用中，常见到的就是对应YAML的资源清单。转换出来就是RESTful地址，那么应该怎么理解这个呢？即，对资源的动作（操作）如图所示。但如果需要了解Kubernetes API需要掌握一些概念才可继续。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220513221304830.png" alt="image-20220513221304830"  /></p>
<h3 id="group">Group</h3>
<p>出于对kubernetes扩展性的原因，将资源类型分为了API组进行独立管理，可以通过 <code>kubectl api-resources</code>查看。在代码部分为 <code>vendor/k8s.io/api</code></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220513215038910.png" alt="image-20220513215038910"  /></p>
<p>也可以通过 <code>kubectl xxx -v 6</code> 来查看 <code>kubectl</code> 命令进行了那些API调用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ kubectl get pods -v 6
</span></span><span class="line"><span class="cl">I0513 21:54:33.250752   38661 round_trippers.go:444] GET http://localhost:8080/api?timeout=32s 200 OK in 1 milliseconds
</span></span><span class="line"><span class="cl">I0513 21:54:33.293831   38661 round_trippers.go:444] GET http://localhost:8080/apis?timeout=32s 200 OK in 0 milliseconds
</span></span><span class="line"><span class="cl">I0513 21:54:33.299741   38661 round_trippers.go:444] GET http://localhost:8080/apis/discovery.k8s.io/v1beta1?timeout=32s 200 OK in 3 milliseconds
</span></span><span class="line"><span class="cl">I0513 21:54:33.301097   38661 round_trippers.go:444] GET http://localhost:8080/apis/autoscaling/v2beta1?timeout=32s 200 OK in 4 milliseconds
</span></span><span class="line"><span class="cl">I0513 21:54:33.301128   38661 round_trippers.go:444] GET http://localhost:8080/apis/authorization.k8s.io/v1beta1?timeout=32s 200 OK in 3 milliseconds
</span></span><span class="line"><span class="cl">I0513 21:54:33.301222   38661 round_trippers.go:444] GET http://localhost:8080/apis/rbac.authorization.k8s.io/v1beta1?timeout=32s 200 OK in 1 milliseconds
</span></span><span class="line"><span class="cl">I0513 21:54:33.301238   38661 round_trippers.go:444] GET http://localhost:8080/apis/authentication.k8s.io/v1beta1?timeout=32s 200 OK in 4 milliseconds
</span></span><span class="line"><span class="cl">I0513 21:54:33.301280   38661 round_trippers.go:444] GET http://localhost:8080/apis/certificates.k8s.io/v1beta1?timeout=32s 200 OK in 4 milliseconds
</span></span><span class="line"><span class="cl">....
</span></span><span class="line"><span class="cl">No resources found in default namespace.
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="kind">Kind</h3>
<p>在<code>kubectl api-resources</code> 中可以看到，有Kind字段，大部分人通常会盲目的 <code>kubectl apply</code> ,这导致了，很多人以为 <code>kind</code> 实际上为资源名称，<code>Pod</code> ，<code>Deployment</code> 等。</p>
<p>根据 <a href="https://github.com/kubernetes/community/blob/7f3f3205448a8acfdff4f1ddad81364709ae9b71/contributors/devel/sig-architecture/api-conventions.md#types-kinds">api-conventions.md</a> 的说明，<strong>Kind</strong> 是对象模式，包含三种类型：</p>
<ul>
<li>Object，代表系统中持久化数据资源，如，<code>Service</code>, <code>Namespace</code>, <code>Pod</code>等</li>
<li>List，是一个或多个资源的集合，通常以List结尾，如 <code>DeploymentList</code></li>
<li>对Object的操作和和非持久化实体，如，当发生错误时会返回“status”类型，并不会持久化该数据。</li>
</ul>
<h3 id="object">Object</h3>
<p>对象是Kubernetes中持久化的实体，也就是保存在etcd中的数据；如：<code>Replicaset</code> , <code>Configmap</code> 等。这个对象代表的了集群期望状态和实际状态。</p>
<blockquote>
<p>例如：创建了Pod，kubernetes集群会调整状态，直到相应的容器在运行</p>
</blockquote>
<p>Kubernetes资源又代表了对象，对象必须定义一些<a href="https://github.com/kubernetes/community/blob/7f3f3205448a8acfdff4f1ddad81364709ae9b71/contributors/devel/sig-architecture/api-conventions.md#resources">字段</a>：</p>
<ul>
<li>所有对象必须具有以下字段：
<ul>
<li>Kind</li>
<li>apiVersion</li>
</ul>
</li>
<li>metadata</li>
<li>spec：期望的状态</li>
<li>status：实际的状态</li>
</ul>
<h3 id="api-link">API Link</h3>
<p>前面讲到的 <code>kubectl api-resources</code> 展示的列表不能完整称为API资源，而是已知类型的kubernetes对象，要对展示这个API对象，需要了解其完整的周期。以 <code>kubectl get --raw /</code> 可以递归查询每个路径。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">kubectl get --raw /
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">  &#34;paths&#34;: [
</span></span><span class="line"><span class="cl">    &#34;/api&#34;,
</span></span><span class="line"><span class="cl">    &#34;/api/v1&#34;,
</span></span><span class="line"><span class="cl">    &#34;/apis&#34;,
</span></span><span class="line"><span class="cl">    &#34;/apis/&#34;,
</span></span><span class="line"><span class="cl">    &#34;/apis/admissionregistration.k8s.io&#34;,
</span></span><span class="line"><span class="cl">    &#34;/apis/admissionregistration.k8s.io/v1&#34;,
</span></span><span class="line"><span class="cl">    &#34;/apis/admissionregistration.k8s.io/v1beta1&#34;,
</span></span><span class="line"><span class="cl">    &#34;/apis/apiextensions.k8s.io&#34;,
</span></span><span class="line"><span class="cl">    &#34;/apis/apiextensions.k8s.io/v1&#34;,
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于一个Pod来说，其查询路径就为 <code>/api/v1/namespaces/kube-system/pods/coredns-f9bbb4898-7zkbf</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">kubectl get --raw /api/v1/namespaces/kube-system/pods/coredns-f9bbb4898-7zkbf|jq
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">kind: Pod
</span></span><span class="line"><span class="cl">apiVersion: v1
</span></span><span class="line"><span class="cl">metadata: {}
</span></span><span class="line"><span class="cl">spec:{}
</span></span><span class="line"><span class="cl">status: {}
</span></span></code></pre></td></tr></table>
</div>
</div><p>但有一些资源对象也并非这种结构，如 <code>configMap</code> ，因其只是存储的数据，所以没有 <code>spec</code> 和 <code>status</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">kubectl get --raw /api/v1/namespaces/kube-system/configmaps/coredns|jq
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">kind
</span></span><span class="line"><span class="cl">apiVersion
</span></span><span class="line"><span class="cl">metadata
</span></span><span class="line"><span class="cl">data
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="api组成">API组成</h3>
<p>一个API的组成为 一个 API 组<code>Group</code> , 一个版本 <code>Version</code> , 和一个资源 <code>Resource</code> ; 简称为 <code>GVR</code></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/API-server-gvr.png" alt="img"  /></p>
<p>转换为实际的http路径为：</p>
<ul>
<li><code>/api/{version}/namespaces/{namespace_name}/resourcesPlural/{actual_resources_name}</code></li>
<li><code>/api/v1/namespaces/default/pods/pods123</code></li>
</ul>
<p>而GVR中的R代表的是RESTful中的资源，转换为Kubernetes中资源应为 <code>Kind</code>，简称为 <code>GVK</code>，K在URI中表示在：</p>
<ul>
<li><code>/apis/{GROUP}/{VERSION}/namespaces/{namespace}/{KIND}</code></li>
</ul>
<h2 id="请求和处理">请求和处理</h2>
<p>这里讨论API请求和处理，API的一些数据结构位于 <code>k8s.io/api</code> ，并处理集群内部与外部的请求，而Apiserver 位于 <code>k8s.io/apiserver/pkg/server</code> 提供了http服务。</p>
<p>那么，当 HTTP 请求到达 Kubernetes API 时，实际上会发生什么？</p>
<ul>
<li>首先HTTP请求在 <code>DefaultBuildHandlerChain</code> （可以参考<code>k8s.io/apiserver/pkg/server/config.go</code>）中注册filter chain，过滤器允许并将相应的信息附加至 <code>ctx.RequestInfo</code>; 如身份验证的相应</li>
<li><code>k8s.io/apiserver/pkg/server/mux</code> 将其分配到对应的应用</li>
<li><code>k8s.io/apiserver/pkg/server/routes</code> 定义了REST与对应应用相关联</li>
<li><code>k8s.io/apiserver/pkg/endpoints/groupversion.go.InstallREST()</code> 接收上下文，从存储中传递请求的对象。</li>
</ul>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220516171908228.png" alt="image-20220516171908228"  /></p>
<blockquote>
<p>Reference</p>
<p><a href="https://iximiuz.com/en/posts/kubernetes-api-structure-and-terminology/">Kubernetes API 基础——资源、种类和对象</a></p>
<p><a href="https://networktechstudy.com/home/kubernetes-the-one-api">Kubernetes - 一个 API 统治</a></p>
<p><a href="https://flugel.it/infrastructure-as-code/building-kubernetes-operators-part-2/">Design and implementation</a></p>
<p><a href="https://www.codeproject.com/Articles/5252640/Extending-the-Kubernetes-API">Extending-the-Kubernetes-API</a></p>
<p><a href="https://cloud.redhat.com/blog/kubernetes-deep-dive-api-server-part-1">Kubernetes 深入探讨</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>理解kubernetes listwatch机制原理</title>
      <link>https://www.oomkill.com/2021/12/ch05-listwatch-mechanism/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/12/ch05-listwatch-mechanism/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="overview">overview</h2>
<p>kubernetes的设计里面大致上分为3部分：</p>
<ul>
<li>API驱动型的特点 (<code>API-driven</code>)</li>
<li>控制循环（<code>control loops</code>）与 条件触发 （<code>Level Trigger</code>）</li>
<li>API的可延伸性</li>
</ul>
<p>而正因为这些设计特性，才使得kubernetes工作非常稳定。</p>
<h2 id="什么是level-trigger与-edge-trigger">什么是Level Trigger与 Edge trigger</h2>
<p>看到网上有资料是这么解释两个属于的：</p>
<ul>
<li>
<p><strong>条件触发(level-trigger，也被称为水平触发)LT指</strong>： 只要满足条件，就触发一个事件(只要有数据没有被获取，就不断通知)。</p>
</li>
<li>
<p><strong>边缘触发(edge-trigger)ET</strong>: 每当状态变化时，触发一个事件。</p>
</li>
</ul>
<p>通过查询了一些资料，实际上也不明白这些究竟属于哪门科学中的理论，但是具体解释起来看的很明白。</p>
<p><strong>LEVEL TRIGGERING</strong>：当电流有两个级别，<code>VH</code> 和 <code>VL</code>。代表了两个触发事件的级别。如果将<code>VH</code> 设置为LED在正时钟。当电压为VH时，LED可以在该时间线任何时刻点亮。这称为<strong>LEVEL TRIGGERING</strong>，每当遇到<code>VH</code> 时间线就会触发事件。事件是在时间内的任何时刻开始，直到满足条件。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20211212232954599.png" alt="image-20211212232954599"  /></p>
<p><strong>Edge TRIGGERING</strong>:</p>
<p>如图所示，会看到上升线与下降线，当事件在上升/下降边缘触发时（两个状态的交点），称为边缘触发（<strong>Edge TRIGGERING</strong>:）。</p>
<p>如果需要打开LED灯，则当时钟从<code>VL</code>转换到<code>VH</code>时才会亮起，而不是一家处在对应的时钟线上，仅仅是在过渡时亮起。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20211212233004721.png" alt="image-20211212233004721"  /></p>
<h2 id="为什么kubernetes使用level-trigger而不使用edge-trigger">为什么kubernetes使用Level Trigger而不使用Edge trigger</h2>
<p>如图所述，两种不同的设计模式，随着时间形状进行相应，当系统在由高转低，或由低转高时，系统处在关闭或者不可控的异常状态下，应如何触发对应的事件呢。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20211212233012534.png" alt="image-20211212233012534"  /></p>
<p>换一种方式来来解释，比如说通过 加法运算，如下，i=3，当给I+4作为一个操作触发事件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># let i=3
</span></span><span class="line"><span class="cl"># let i+=4
</span></span><span class="line"><span class="cl"># let i
</span></span><span class="line"><span class="cl"># echo $i
</span></span><span class="line"><span class="cl">7
</span></span></code></pre></td></tr></table>
</div>
</div><p>当为<code>Edge trigger</code>时操作的情况下，将看到 <code>i+4</code> ,而在 <code>level trigger</code> 时看到的是 <code>i=7</code>。这里将会从``i+4` 一直到下一个信号的触发。</p>
<h3 id="信号的干扰">信号的干扰</h3>
<p>通常情况下，两者是没有区别的，但在大规模分布式网络环境中，有很多因素的影响下，任何都是不可靠的，在这种情况下会改变了我们对事件信号的感知。</p>
<p>如图所示，图为<code>Level Trigger</code>与<code>Edge trigger</code> 的信号发生模拟，在理想情况下，两者间并没有什么不同。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20211212233021583.png" alt="image-20211212233021583"  /></p>
<h4 id="一次中断场景">一次中断场景</h4>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20211212232713291.png" alt="image-20211212232713291"  /></p>
<p>由图可知，<code>Edge trigger</code>当在恰当的时间点发生信号中断，会对整个流产生很大的影响，甚至改变了整个状态，对于较少的干扰并不会对有更好的结果，而单次的中断，使<code>Edge trigger</code>错过了从高到低的变化，而 <code>level trigger</code> 基本上保证了整个信号量的所有改变状态。</p>
<h4 id="两次中断的场景下">两次中断的场景下</h4>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20211212232747769.png" alt="image-20211212232747769"  /></p>
<p>由图可看到，信号的上升和下降中如果存在了中断，<code>Edge trigger</code> 丢失了上升的信号，但最终状态是正确的。</p>
<p>在信号状态的两次变化时发生了两次中断，<code>Level Trigger</code>与<code>Edge trigger</code> 之间的区别很明显，<code>Edge trigger</code> 的信号错过了第一次上升，而<code>Level Trigger</code> 保持了最后观察到的状态，知道拿到了其他状态，这种模式保证了得到的信号基本的正确性，但是发生延迟到中断恢复后。</p>
<h4 id="通过运算来表示两种模式的变化情况">通过运算来表示两种模式的变化情况</h4>
<p>完整的信号</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># let i=2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># let i+1</span>
</span></span><span class="line"><span class="cl"><span class="c1"># let i-=1</span>
</span></span><span class="line"><span class="cl"><span class="c1"># let i+1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># echo $i</span>
</span></span><span class="line"><span class="cl"><span class="m">3</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Edge trigger</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># let i=2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># let i+1  </span>
</span></span><span class="line"><span class="cl"><span class="o">(</span><span class="c1"># let i-=1) miss this</span>
</span></span><span class="line"><span class="cl"><span class="c1"># let i+1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># echo $i</span>
</span></span><span class="line"><span class="cl"><span class="m">4</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="如何使理想状态和实际状态一样呢">如何使理想状态和实际状态一样呢？</h2>
<p>在Kubernetes中，不仅仅是观察对象的一个信号，还观察了其他两个信号，集群的期待状态与实际状态，期望的状态是用户期望集群所处的状态，如我运行了2个实例（pod）。在最理想的场景下，集群的实际状态与期待状态是相同的，但这个过程会受到任意的外界因素干扰被影响下，实际状态与理想状态发生偏差。</p>
<p>Kubernetes必须接受实际状态，并将其与所需状态调和。不断地这样做，采取两种状态，确定其之间的差异，并纠正其不断的更改，以使实际状态达到理想状态。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20211212232804746.png" alt="image-20211212232804746"  /></p>
<p>如图所示，在一个<code>Edge trigger</code> 中，最终的结果很可能会与理想中的结果发生偏差。</p>
<p>当初始实例为1时，并希望扩展为5个副本，然后再向下缩容到2个副本，则<code>Edge trigger</code>环境下将看到以下状态：系统的实际状态不能立即对这些命令作出反应。正如图所述，当只有3个副本在运行时，它可能会终止3个副本。这就给我们留下了0个副本，而不是所需的2个副本。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># let replicas=1
</span></span><span class="line"><span class="cl"># let replicas += 4 # 此时副本数为5，但是这个过程需要时间而不是立即完成至理想状态
</span></span><span class="line"><span class="cl"># let replicas -= 3 # 当未完成时又接到信号的变化，此时副本数为3，减去3，很可能实际状态为0，与理想状态2发生了偏差
</span></span></code></pre></td></tr></table>
</div>
</div><p>而使用<code>Level Trigger</code>时，会总是比较完整的期望状态和实际状态，直到实际状态与期望状态相同。这大大减少了状态同步间（错误）的产生。</p>
<h2 id="summary">summary</h2>
<p>每一种触发器的产生一定有其道理，<code>Edge trigger</code>本身并不是很差，只是应用场景的不同，而使用的模式也不同，比如nginx的高性能就是使用了<code>Edge trigger</code>模型，如nginx使用了 <code>Level trigger</code>在大并发下，当发生了变更信号等待返回时，发生大量客户端连接在侦听队列，而<code>Edge trigger</code>模型则不会出现这种情况。</p>
<p>综上所述，kubernetes在设计时，各个组件需要感知数据的最终理想状态，无需担心错过数据变化的过程。而设计kubernentes系统消息通知机制（或数据实时通知机制），也应满足以下要求：</p>
<ul>
<li>
<p>实时性（即数据变化时，相关组件感觉越快越好）。消息必须是实时的。在<code>list/watch</code>机制下，每当apiserver资源有状态变化事件时，都会及时将事件推送到客户端，以保证消息的实时性。</p>
</li>
<li>
<p>消息序列：消息的顺序也很重要。在并发场景下，客户端可能会在短时间内收到同一资源的多个事件。对于关注最终一致性的kubernetes来说，它需要知道哪个是最新的事件，并保证资源的最终状态与最新事件所表达的一致。kubernetes在每个资源事件中都携带一个<code>resourceVersion</code>标签，这个标签是递增的。因此，客户端在并发处理同一资源的事件时，可以比较<code>resourceVersion</code>，以确保最终状态与最新事件的预期状态一致。</p>
</li>
<li>
<p>消息的可靠性，保证消息不丢失或者有可靠的重新获取的机制（比如 <code>kubelet</code>和 <code>kube-apisever</code>之间的网络波动（<code>network flashover</code> ）需要保证kubelet在网络恢复后可以接收到网络故障时产生的消息）。</p>
</li>
</ul>
<p>正是因为Kubernetes使用了 <code>Level trigger</code>才让集群更加可靠。</p>
<h2 id="reference">Reference</h2>
<blockquote>
<p><a href="https://levelup.gitconnected.com/nginx-event-driven-architecture-demonstrated-in-code-51bf0061cad9">nginx-event-driven-architecture</a></p>
<p><a href="https://www.quora.com/What-is-meant-by-edge-triggering-and-level-triggering">What-is-meant-by-edge-triggering-and-level-triggering</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>理解kubernetes schema</title>
      <link>https://www.oomkill.com/2021/11/ch03-kubernetes-schema/</link>
      <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/11/ch03-kubernetes-schema/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="什么是schema">什么是schema</h2>
<p>schema一词起源于希腊语中的<code>form</code>或<code>figure</code>，但具体应该如何定义<code>schema</code>取决于应用环境的上下文。<code>schema</code>有不同的类型，其含义与数据科学、教育、营销和SEO以及心理学等领域密切相关。</p>
<blockquote>
<p>在维基百科中将schema解释为，<strong>图式</strong>，在心里学中主要描述一种思维或行为类型，用来组织资讯的类别，以及资讯之间的关系。它也可以被描述为先入为主思想的心理结构，表示世界某些观点的框架，或是用于组织和感知新资讯的系统。</p>
</blockquote>
<p>但在计算机科学中，从很多地方都可以看到 <em>schema</em> 这个名词，例如 database，openldap，programing language等的。这里可以简单的吧<em>schema</em> 理解为 <strong>元数据集合</strong> （metadata component）<strong>数据模型</strong>，主要包含元素及属性的声明，与其他数据结构组成。</p>
<h3 id="数据库中的schema">数据库中的schema</h3>
<p>在数据库中，<code>schema</code> 就像一个骨架结构，代表整个数据库的逻辑视图。它设计了应用于特定数据库中数据的所有约束。当在数据建模时，就会产生一个schema。在谈到关系数据库]和面向对象数据库时经常使用schema。有时也指将结构或文本的描述。</p>
<p>数据库中schema描述数据的形状以及它与其他模型、表和库之间的关系。在这种情况下，数据库条目是schema的一个实例，包含schema中描述的所有属性。</p>
<p>数据库schema通常分为两类：定义数据文件实际存储方式的**物理数据库schema <strong>；和</strong>逻辑数据库schema **，它描述了应用于存储数据的所有逻辑约束，包括完整性、表和视图。常见包括</p>
<ul>
<li>星型模式（star schema）</li>
<li>雪花模式（snowflake schema）</li>
<li>事实星座模型（fact constellation schema 或 galaxy schema）</li>
</ul>
<p>星型模式是类似于一个简单的数据仓库图，包括一对多的事实表和维度表。它使用非规范化数据。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/dm-star_schema-f_mobile.png" alt="星型模式"  /></p>
<p>雪花模式是更为复杂的一种流行的数据库模式，在该模式下，维度表是规范化的，可以节省存储空间并最大限度地减少数据冗余。</p>
<p>事实星座模式远比星型模式和雪花模式复杂得多。它拥有多个共享多个维度表的事实表。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/dm-snowflake_schema-f_mobile.png" alt="snowflake schema"  /></p>
<h2 id="kubernetes中的schema">Kubernetes中的schema</h2>
<p>通过上面的阐述，大概上可以明白 schema究竟是什么东西了，在Kubernetes中也有schema的概念，通过对kubernetes中资源（GVK）的规范定义、相互关系间的映射等，schema即k8s资源对象元数据。</p>
<p>而kubernetes中资源对象即  <code>Group</code> <code>Version</code> <code>Kind</code> 这些被定义在 <code>staging/src/k8s.io/api/type.go</code>中，即平时所操作的yaml文件，例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment  </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w">  </span><span class="l">ngx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">ngx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">  
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">ngx-schema</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">containerPort</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20211117001624039.png" alt="image-20211117001624039"  /></p>
<p>而对应的的即为<code>TypeMeta</code> 、<code>ObjectMeta</code> 和 <code>DeploymentSpec</code>,</p>
<p><code>TypeMeta</code> 为 <code>kind</code> 与 <code>apiserver</code></p>
<p><code>ObjectMeta</code> 为  <code>Name</code> 、<code>Namespace</code>  <code>CreationTimestamp</code>等段。</p>
<p><code>DeploymentSpec</code> 则对应了 yaml 中的 spec。</p>
<p>而整个yaml组成了 一个 k8s的资源对象。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Deployment</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span><span class="p">.</span><span class="nx">TypeMeta</span> <span class="s">`json:&#34;,inline&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// Standard object metadata.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">metav1</span><span class="p">.</span><span class="nx">ObjectMeta</span> <span class="s">`json:&#34;metadata,omitempty&#34; protobuf:&#34;bytes,1,opt,name=metadata&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Specification of the desired behavior of the Deployment.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Spec</span> <span class="nx">DeploymentSpec</span> <span class="s">`json:&#34;spec,omitempty&#34; protobuf:&#34;bytes,2,opt,name=spec&#34;`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// Most recently observed status of the Deployment.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// +optional
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Status</span> <span class="nx">DeploymentStatus</span> <span class="s">`json:&#34;status,omitempty&#34; protobuf:&#34;bytes,3,opt,name=status&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>register.go</code> 则是将对应的资源类型注册到schema中的类</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// TODO: move SchemeBuilder with zz_generated.deepcopy.go to k8s.io/api.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// localSchemeBuilder and AddToScheme will stay in k8s.io/kubernetes.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">SchemeBuilder</span>      <span class="p">=</span> <span class="nx">runtime</span><span class="p">.</span><span class="nf">NewSchemeBuilder</span><span class="p">(</span><span class="nx">addKnownTypes</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">localSchemeBuilder</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">SchemeBuilder</span>
</span></span><span class="line"><span class="cl">	<span class="nx">AddToScheme</span>        <span class="p">=</span> <span class="nx">localSchemeBuilder</span><span class="p">.</span><span class="nx">AddToScheme</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Adds the list of known types to the given scheme.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">addKnownTypes</span><span class="p">(</span><span class="nx">scheme</span> <span class="o">*</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">Scheme</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">scheme</span><span class="p">.</span><span class="nf">AddKnownTypes</span><span class="p">(</span><span class="nx">SchemeGroupVersion</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">Deployment</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">DeploymentList</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">StatefulSet</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">StatefulSetList</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">DaemonSet</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">DaemonSetList</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">ReplicaSet</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">ReplicaSetList</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">ControllerRevision</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">		<span class="o">&amp;</span><span class="nx">ControllerRevisionList</span><span class="p">{},</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">metav1</span><span class="p">.</span><span class="nf">AddToGroupVersion</span><span class="p">(</span><span class="nx">scheme</span><span class="p">,</span> <span class="nx">SchemeGroupVersion</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而 <code>apimachinery</code> 包则是 schema的实现，通过看其内容可以发下，kubernetes中 schema就是 <strong>GVK</strong> 的属性约束 与 <strong>GVR</strong> 之间的映射。</p>
<h2 id="通过示例了解schema">通过示例了解schema</h2>
<p>例如在 <code>apps/v1/deployment</code> 这个资源，在代码中表示 <code>k8s.io/api/apps/v1/types.go</code> ，如果需要对其资源进行扩展那么需要怎么做？如，建立一个 <code>StateDeplyment</code> 资源</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">type Deployment struct {
</span></span><span class="line"><span class="cl">	metav1.TypeMeta `json:&#34;,inline&#34;`
</span></span><span class="line"><span class="cl">	// Standard object metadata.
</span></span><span class="line"><span class="cl">	// +optional
</span></span><span class="line"><span class="cl">	metav1.ObjectMeta `json:&#34;metadata,omitempty&#34; protobuf:&#34;bytes,1,opt,name=metadata&#34;`
</span></span></code></pre></td></tr></table>
</div>
</div><p>如上述代码所示，Deployment 中的 <code>metav1.TypeMeta</code> 和 <code>metav1.ObjectMeta</code></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220517172901775.png" alt="image-20220517172901775"  /></p>
<p>那么我们复制一个 Deployment 为 StateDeployment，注意，因为 Deployment的两个属性， <code>metav1.TypeMeta</code> 和 <code>metav1.ObjectMeta</code> 分别实现了不同的方法，如图所示</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220517173136077.png" alt="image-20220517173136077"  /></p>
<p>所以在实现方法时，需要实现 <code>DeepCopyinfo</code> ， <code>DeepCopy</code>  和继承接口 <code>Object</code> 的 <code>DeepCopyObject</code> 方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">in</span> <span class="o">*</span><span class="nx">StateDeployment</span><span class="p">)</span> <span class="nf">DeepCopyInto</span><span class="p">(</span><span class="nx">out</span> <span class="o">*</span><span class="nx">StateDeployment</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="nx">out</span> <span class="p">=</span> <span class="o">*</span><span class="nx">in</span>
</span></span><span class="line"><span class="cl">	<span class="nx">out</span><span class="p">.</span><span class="nx">TypeMeta</span> <span class="p">=</span> <span class="nx">in</span><span class="p">.</span><span class="nx">TypeMeta</span>
</span></span><span class="line"><span class="cl">	<span class="nx">in</span><span class="p">.</span><span class="nx">ObjectMeta</span><span class="p">.</span><span class="nf">DeepCopyInto</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">out</span><span class="p">.</span><span class="nx">ObjectMeta</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">in</span><span class="p">.</span><span class="nx">Spec</span><span class="p">.</span><span class="nf">DeepCopyInto</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">out</span><span class="p">.</span><span class="nx">Spec</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">in</span><span class="p">.</span><span class="nx">Status</span><span class="p">.</span><span class="nf">DeepCopyInto</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">out</span><span class="p">.</span><span class="nx">Status</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StateDeployment.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">in</span> <span class="o">*</span><span class="nx">StateDeployment</span><span class="p">)</span> <span class="nf">DeepCopy</span><span class="p">()</span> <span class="o">*</span><span class="nx">StateDeployment</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">in</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">out</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">StateDeployment</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">in</span><span class="p">.</span><span class="nf">DeepCopyInto</span><span class="p">(</span><span class="nx">out</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">out</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">in</span> <span class="o">*</span><span class="nx">StateDeployment</span><span class="p">)</span> <span class="nf">DeepCopyObject</span><span class="p">()</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">Object</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">c</span> <span class="o">:=</span> <span class="nx">in</span><span class="p">.</span><span class="nf">DeepCopy</span><span class="p">();</span> <span class="nx">c</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">c</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>那么扩展一个资源的整个流为：</p>
<ul>
<li>资源类型在：<code>k8s.io/api/{Group}/types.go</code></li>
<li>资料类型的实现接口 <code>k8s.io/apimachinery/pkg/runtime/interfaces.go.Object</code></li>
<li>其中是基于 <code>Deployment</code> 的类型，<code>metav1.TypeMeta</code> 和 <code>metav1.ObjectMeta</code></li>
<li><code>metav1.TypeMeta</code> 实现了 <code>GetObjectKind()</code> ；<code>metav1.ObjectMeta</code> 实现了<code>DeepCopyinfo=()</code> ， <code>DeepCopy()</code> ，还需要实现 <code>DeepCopyObject()</code></li>
<li>最后注册资源到schema中 <code>k8s.io/api/apps/v1/register.go</code></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>k8s开发环境准备 - 如何配置开发环境</title>
      <link>https://www.oomkill.com/2021/11/ch01-k8s-perpare/</link>
      <pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/11/ch01-k8s-perpare/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="下载源码">下载源码</h2>
<p>根据kubernetes github 方式可以</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mkdir -p $GOPATH/src/k8s.io
</span></span><span class="line"><span class="cl">cd $GOPATH/src/k8s.io
</span></span><span class="line"><span class="cl">git clone https://github.com/kubernetes/kubernetes
</span></span><span class="line"><span class="cl">cd kubernetes
</span></span><span class="line"><span class="cl">make
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果有需要可以切换到对应的版本进行学习或者修改，一般kubernetes版本为对应tag</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git fetch origin [远程tag名]
</span></span><span class="line"><span class="cl">git checkout  [远程tag名]
</span></span><span class="line"><span class="cl">git branch
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="配置goland">配置goland</h2>
<p>kubernetes本身是支持 go mod 的，但源码这里提供了所有的依赖在 <code>staging/src/k8s.io/</code> 目录下，可以将此目录内的文件复制到 <code>vendor</code>下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cp -a staging/src/k8s.io/* vendor/k8s.io/
</span></span></code></pre></td></tr></table>
</div>
</div><p>对于 <code>k8s.io/kubernetes/pkg/</code> 发红的（找不到依赖的），可以将手动创建一个目录在 <code>vendor/k8s.io/</code> 将克隆下来的根目录 <code>pkg</code> 复制到刚才的目录下。</p>
<p>goland中，此时不推荐使用go mod模式了，这里goland一定要配置GOPATH的模式。对应的GOPATH加入 <code>{project}/vender</code>即可。 这里可以添加到 goland中 <code>project GOPATH</code>里。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20211116222531919.png" alt="image-20211116222531919"  /></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
