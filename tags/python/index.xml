<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>python on Cylon&#39;s Collection</title>
    <link>https://www.oomkill.com/tags/python/</link>
    <description>Recent content in python on Cylon&#39;s Collection</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 06 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.oomkill.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>python drf之viewset</title>
      <link>https://www.oomkill.com/2021/10/python-django-restframework-view-set/</link>
      <pubDate>Wed, 06 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/10/python-django-restframework-view-set/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="what-is-views">What is Views</h2>
<p>drf提供了两个基类，五个视图扩展类，9个视图集</p>
<p>drf提供了一个Django中view的子类<code>APIView </code>,主要变动大概为以下：</p>
<ul>
<li>重新封装了<code>Request</code> 与 <code>Response</code>实例。
<ul>
<li>使用了独有的Request与Response对象，并且提供了专有的解析器 <code>Parser</code> 可以根据HTTP <code>Content-Type</code> 指明的请求数据进行解析。</li>
</ul>
</li>
<li>增加了自有的鉴权/节流
<ul>
<li>在django中<code>dispatch()</code> 分发前，会对请求进行身份认证、权限检查、流量控制。</li>
</ul>
</li>
<li>异常捕获 <code>APIException</code>。</li>
</ul>
<p>APIView implement</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@classmethod</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">as_view</span><span class="p">(</span><span class="bp">cls</span><span class="p">,</span> <span class="o">**</span><span class="n">initkwargs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="o">....</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 调用父类的方法，Python 3 可以使用直接使用 super().xxx 代替 super(Class, self).xxx</span>
</span></span><span class="line"><span class="cl">    <span class="n">view</span> <span class="o">=</span> <span class="nb">super</span><span class="p">(</span><span class="n">APIView</span><span class="p">,</span> <span class="bp">cls</span><span class="p">)</span><span class="o">.</span><span class="n">as_view</span><span class="p">(</span><span class="o">**</span><span class="n">initkwargs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">view</span><span class="o">.</span><span class="n">cls</span> <span class="o">=</span> <span class="bp">cls</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 并且生成一个新的request</span>
</span></span><span class="line"><span class="cl">    <span class="n">view</span><span class="o">.</span><span class="n">initkwargs</span> <span class="o">=</span> <span class="n">initkwargs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Note: session based authentication is explicitly CSRF validated,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># all other authentication is CSRF exempt.</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">csrf_exempt</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 父类的view会执行dispatch分配为对应的handle memory，通过method获得对应的方法处理请求</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">dispatch</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Try to dispatch to the right method; if a method doesn&#39;t exist,</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># defer to the error handler. Also defer to the error handler if the</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># request method isn&#39;t on the approved list.</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">http_method_names</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">handler</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="o">.</span><span class="n">method</span><span class="o">.</span><span class="n">lower</span><span class="p">(),</span> <span class="bp">self</span><span class="o">.</span><span class="n">http_method_not_allowed</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">handler</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">http_method_not_allowed</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">handler</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="what-is-genericapiview">What is GenericAPIView</h2>
<p><code>GenericAPIView</code> 是继承与 <code>APIView</code>的子类，在 <code>APIView</code> 的基础上增加了对于视图的通用支持方法，用来简化用户代码的编写。主要增加了 <code>QuerySet</code> 与 <code>Serializers</code></p>
<p><strong>GenericAPIView implement</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">GenericAPIView</span><span class="p">(</span><span class="n">views</span><span class="o">.</span><span class="n">APIView</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">    <span class="n">queryset</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">    <span class="n">serializer_class</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">lookup_url_kwarg</span> <span class="o">=</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">get_queryset</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="o">...</span>
</span></span><span class="line"><span class="cl">        <span class="k">assert</span> <span class="bp">self</span><span class="o">.</span><span class="n">queryset</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">,</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;&#39;</span><span class="si">%s</span><span class="s2">&#39; should either include a `queryset` attribute, &#34;</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;or override the `get_queryset()` method.&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="vm">__class__</span><span class="o">.</span><span class="vm">__name__</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">queryset</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">queryset</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">queryset</span><span class="p">,</span> <span class="n">QuerySet</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># Ensure queryset is re-evaluated on each request.</span>
</span></span><span class="line"><span class="cl">            <span class="n">queryset</span> <span class="o">=</span> <span class="n">queryset</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">queryset</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="how-to-use">How to Use</h2>
<h2 id="reference">Reference</h2>
<blockquote>
<p><a href="https://www.django-rest-framework.org/api-guide/views/">APIView</a></p>
<p><a href="https://www.django-rest-framework.org/api-guide/generic-views/">GenericAPIView</a></p>
</blockquote>
<p>使用<code>APIView</code>与使用<code>View</code>类似，像往常一样，请求会根据不同的方法被<code>dispatch</code>到对应的处理逻辑方法，例如<code>.get()</code>or <code>.post()</code></p>
<p>引入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rest_framework.views</span> <span class="kn">import</span> <span class="n">APIView</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rest_framework.response</span> <span class="kn">import</span> <span class="n">Response</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用<code>GenericAPIView</code> 是 <code>APIView</code> 的子类，是实现了<code>APIView</code> 的常用行为的一个类。一般情况下会与引入</p>
<ul>
<li><code>queryset</code>：对象查询集，使用<code>GenericAPIView</code> 必须设置该属性，或者重写 <code>get_queryset()</code> 方法</li>
<li><code>serializer_class</code>: 序列化器类，必须设置该属性或重写<code>get_serializer_class()</code>方法。</li>
<li><code>lookup_field</code>: 查库时使用的条件字段，一般为传入的值，默认为pk</li>
<li><code>pagination_class</code> ：分页</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">generics</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BookViewSet</span><span class="p">(</span><span class="n">generics</span><span class="o">.</span><span class="n">GenericAPIView</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Book</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">BookModelSerializer</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">book_list</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_queryset</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">book_serializers</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_serializer</span><span class="p">(</span><span class="n">book_list</span><span class="p">,</span> <span class="n">many</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">book_serializers</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">reques</span><span class="p">,</span> <span class="n">pk</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">book</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">get_object</span><span class="p">()</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Response</span><span class="p">({</span><span class="s2">&#34;message&#34;</span><span class="p">:</span><span class="s2">&#34;success&#34;</span><span class="p">,</span> <span class="s2">&#34;status&#34;</span><span class="p">:</span><span class="mi">100</span><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="五个视图扩展">五个视图扩展</h3>
<p>Mixin类：DRF提供的通用的增删改查行为，Mixin一般与<code>generics.GenericAPI</code> 混用，可以组成灵活的视图。</p>
<ul>
<li><code>CreateModelMixin</code>: 保存新对象实例
<ul>
<li>创建成功返回201与序列化后的列表，失败则返回400与错误的详细信息</li>
</ul>
</li>
<li><code>UpdateModelMixin</code> ：对现有对象实例进行更新
<ul>
<li>与创建相同，成功返回200，失败返回400</li>
</ul>
</li>
<li><code>DestroyModelMixin</code>：删除对象实例
<ul>
<li>成功删除返回204 错误将返回一个404</li>
</ul>
</li>
<li><code>ListModelMixin</code>：列出实例列表
<ul>
<li>查询成功返回200，需要设置queryset，相应数据可以设置分页</li>
</ul>
</li>
<li><code>RetrieveModelMixin</code>: 只读操作单个对象</li>
</ul>
<h3 id="九个视图集">九个视图集</h3>
<blockquote>
<p>在路由确定用于请求的控制器之后，您的控制器负责理解请求并产生适当的输出。</p>
<p>— <a href="https://guides.rubyonrails.org/action_controller_overview.html">Ruby on Rails 文档</a>Django REST 框架允许您将一组相关视图的逻辑组</p>
</blockquote>
<p>视图集 <code>ViewSet</code> 是DRF基于view使用视图集ViewSet，可以将一系列逻辑相关的动作放到一个类中，如<code>.get()</code>或<code>.post()</code>则不在提供了，换为<code>.list()</code>和<code>.create()</code>的具体逻辑动作。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>python drf之Serializer</title>
      <link>https://www.oomkill.com/2021/10/python-django-restframework-serializers/</link>
      <pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/10/python-django-restframework-serializers/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="what-is-serializers">What is serializers？</h2>
<p>serializers主要作用是将原生的Python数据类型（如 <code>model</code> <code>querysets </code>）转换为web中通用的<code>JSON</code>，<code>XML</code>或其他内容类型。</p>
<p><code>DRF</code> 提供了一个<code>Serializer</code>类，它为您提供了种强大的通用方法来控制响应的输出，以及一个<code>ModelSerializer </code>类，它为创建处理 <code>model instance</code> 和 <code>serializers</code> 提供了一个序列化的快捷方式。</p>
<h2 id="reference">Reference</h2>
<blockquote>
<p><a href="https://www.django-rest-framework.org/api-guide/serializers/">drf serializers manual</a></p>
</blockquote>
<h2 id="how-to-declaring-serializers">How to Declaring Serializers?</h2>
<p>序列化一个django model</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Comment</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">content</span><span class="p">,</span> <span class="n">created</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">email</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">content</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">created</span> <span class="o">=</span> <span class="n">created</span> <span class="ow">or</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">comment</span> <span class="o">=</span> <span class="n">Comment</span><span class="p">(</span><span class="n">email</span><span class="o">=</span><span class="s1">&#39;leila@example.com&#39;</span><span class="p">,</span> <span class="n">content</span><span class="o">=</span><span class="s1">&#39;foo bar&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>声明Serializers，可以用来序列化与反序列化对象 <code>Comment</code>的属性及值。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">serializers</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">CommentSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="o">.</span><span class="n">Serializer</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">email</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">EmailField</span><span class="p">()</span> <span class="c1"># 属性名称与类Comment名校相同</span>
</span></span><span class="line"><span class="cl">    <span class="n">content</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">created</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="序列化及反序列化">序列化及反序列化</h2>
<h2 id="序列化">序列化</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">serializers</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">CommentSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="o">.</span><span class="n">Serializer</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">email</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">EmailField</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">content</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">created</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="c1"># 上面类似于如下python中的操作</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rest_framework.renderers</span> <span class="kn">import</span> <span class="n">JSONRenderer</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">json</span> <span class="o">=</span> <span class="n">JSONRenderer</span><span class="p">()</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">serializer</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">json</span>
</span></span><span class="line"><span class="cl"><span class="c1"># b&#39;{&#34;email&#34;:&#34;leila@example.com&#34;,&#34;content&#34;:&#34;foo bar&#34;,&#34;created&#34;:&#34;2016-01-27T15:17:10.375877&#34;}&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="反序列化">反序列化</h3>
<p>反序列化是将json数据流解析为python的数据类型，后映射至对象</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">io</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rest_framework.parsers</span> <span class="kn">import</span> <span class="n">JSONParser</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">stream</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">BytesIO</span><span class="p">(</span><span class="n">json</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">JSONParser</span><span class="p">()</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">stream</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">serializer</span> <span class="o">=</span> <span class="n">CommentSerializer</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">serializer</span><span class="o">.</span><span class="n">is_valid</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># True</span>
</span></span><span class="line"><span class="cl"><span class="n">serializer</span><span class="o">.</span><span class="n">validated_data</span>
</span></span><span class="line"><span class="cl"><span class="c1"># {&#39;content&#39;: &#39;foo bar&#39;, &#39;email&#39;: &#39;leila@example.com&#39;, &#39;created&#39;: datetime.datetime(2012, 08, 22, 16, 20, 09, 822243)}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="数据的落地">数据的落地</h2>
<p>如果需要对经过认证的数据进行保存入库，需要实现对应 serializer的 <code>create()</code> 和 <code>update()</code> 方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">CommentSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="o">.</span><span class="n">Serializer</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">email</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">EmailField</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">content</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">created</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">validated_data</span><span class="p">):</span> <span class="c1"># validate_data 实际与 Comment一致，打散后为</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Comment</span><span class="p">(</span><span class="o">**</span><span class="n">validated_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">instance</span><span class="p">,</span> <span class="n">validated_data</span><span class="p">):</span> <span class="c1"># drf serializer实现了对应的实例，instance是该serializer，vilidated是对应的属性</span>
</span></span><span class="line"><span class="cl">        <span class="n">instance</span><span class="o">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">validated_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">,</span> <span class="n">instance</span><span class="o">.</span><span class="n">email</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">instance</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">validated_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">,</span> <span class="n">instance</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">instance</span><span class="o">.</span><span class="n">created</span> <span class="o">=</span> <span class="n">validated_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;created&#39;</span><span class="p">,</span> <span class="n">instance</span><span class="o">.</span><span class="n">created</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">instance</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">serializer = CommentSerializer(data={&#39;email&#39;: &#39;foobar&#39;, &#39;content&#39;: &#39;baz&#39;})
</span></span><span class="line"><span class="cl">serializer.is_valid()
</span></span><span class="line"><span class="cl"># False
</span></span><span class="line"><span class="cl">serializer.errors
</span></span><span class="line"><span class="cl"># {&#39;email&#39;: [&#39;Enter a valid e-mail address.&#39;], &#39;created&#39;: [&#39;This field is required.&#39;]}
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="save">save()</h3>
<p><code>save()</code> 可以创建或更新一个实例（实例是值库中的行）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># .save() will create a new instance.</span>
</span></span><span class="line"><span class="cl"><span class="n">serializer</span> <span class="o">=</span> <span class="n">CommentSerializer</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># .save() will update the existing `comment` instance.</span>
</span></span><span class="line"><span class="cl"><span class="n">serializer</span> <span class="o">=</span> <span class="n">CommentSerializer</span><span class="p">(</span><span class="n">comment</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">data</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="how-to-use-validate">How to Use validate?</h2>
<p>validate是值在反序列化数据时，需要对数据进行验证（如，长度，值，类型），即在数据落地前，对其制定的规则进行验证。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">serializer</span> <span class="o">=</span> <span class="n">CommentSerializer</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;email&#39;</span><span class="p">:</span> <span class="s1">&#39;foobar&#39;</span><span class="p">,</span> <span class="s1">&#39;content&#39;</span><span class="p">:</span> <span class="s1">&#39;baz&#39;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl"><span class="n">serializer</span><span class="o">.</span><span class="n">is_valid</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># False</span>
</span></span><span class="line"><span class="cl"><span class="n">serializer</span><span class="o">.</span><span class="n">errors</span>
</span></span><span class="line"><span class="cl"><span class="c1"># {&#39;email&#39;: [&#39;Enter a valid e-mail address.&#39;], &#39;created&#39;: [&#39;This field is required.&#39;]}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>.is_valid()</code> 是对数据的验证。<code>raise_exception</code> 是一个可选参数，如果 <code>serializers.ValidationError</code>如果存在验证错误，将引发异常。异常由 REST framework 提供的默认异常处理程序自动处理，并<code>HTTP 400 Bad Request</code>默认返回响应。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Return a 400 response if the data was invalid.</span>
</span></span><span class="line"><span class="cl"><span class="n">serializer</span><span class="o">.</span><span class="n">is_valid</span><span class="p">(</span><span class="n">raise_exception</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="字段的验证">字段的验证</h3>
<h4 id="自定义验证">自定义验证</h4>
<p><strong>单字段验证</strong></p>
<p>通过子类 <code>.validate_&lt;field_name&gt;</code> 方法进行自定义验证方式，该方法需要返回验证的值或触发<code>serializers.ValidationError</code>. 例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">serializers</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BlogPostSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="o">.</span><span class="n">Serializer</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">title</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">content</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">CharField</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">validate_title</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        Check that the blog post is about Django.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="s1">&#39;django&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">value</span><span class="o">.</span><span class="n">lower</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">            <span class="k">raise</span> <span class="n">serializers</span><span class="o">.</span><span class="n">ValidationError</span><span class="p">(</span><span class="s2">&#34;Blog post is not about Django&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">value</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>类级别验证</strong></p>
<p>如果需要对多个字段进行验证验证，需要在类中实现<code>validate()</code> 方法。该方法仅单个参数 <code>data</code>, 为验证的字段的字典。例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">serializers</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">EventSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="o">.</span><span class="n">Serializer</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">description</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">start</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">finish</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">DateTimeField</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        Check that start is before finish.
</span></span></span><span class="line"><span class="cl"><span class="s2">        &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;start&#39;</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">data</span><span class="p">[</span><span class="s1">&#39;finish&#39;</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="k">raise</span> <span class="n">serializers</span><span class="o">.</span><span class="n">ValidationError</span><span class="p">(</span><span class="s2">&#34;finish must occur after start&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">data</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="忽略验证">忽略验证</h4>
<p><strong>注意</strong>：如在Serializer 的<code>&lt;field_name&gt;</code> 声明了参数<code>required=False</code> 则该字段不会进行验证。</p>
<h4 id="指定验证器">指定验证器</h4>
<p>Serializer 的<code>&lt;field_name&gt;</code> 还可以声明 validator，例如，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">multiple_of_ten</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">value</span> <span class="o">%</span> <span class="mi">10</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span> <span class="n">serializers</span><span class="o">.</span><span class="n">ValidationError</span><span class="p">(</span><span class="s1">&#39;Not a multiple of ten&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">GameRecord</span><span class="p">(</span><span class="n">serializers</span><span class="o">.</span><span class="n">Serializer</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">score</span> <span class="o">=</span> <span class="n">IntegerField</span><span class="p">(</span><span class="n">validators</span><span class="o">=</span><span class="p">[</span><span class="n">multiple_of_ten</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>validator Reference</p>
<p><a href="https://www.django-rest-framework.org/api-guide/validators/">validator</a></p>
</blockquote>
<h2 id="modelserializer">ModelSerializer</h2>
<p><code>ModelSerializer</code>，是drf为了方便实现好的可以直接用的Serializer。实现为：</p>
<ul>
<li>将根据模型自动为您生成一组字段。</li>
<li>将自动为Serializer程序生成validator，例如 unique_together 验证器。</li>
<li>包括简单的实现默认的<code>.create()</code>和<code>.update()</code>。</li>
</ul>
<h3 id="modelserializer的声明">ModelSerializer的声明</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">AccountSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="o">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">model</span> <span class="o">=</span> <span class="n">Account</span>
</span></span><span class="line"><span class="cl">        <span class="n">fields</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;account_name&#39;</span><span class="p">,</span> <span class="s1">&#39;users&#39;</span><span class="p">,</span> <span class="s1">&#39;created&#39;</span><span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="meta的说明">Meta的说明</h4>
<p><code>Meta</code> 类，如名称可知，这是设置Serializer的一些元数据。包含<code>Model</code>,<code>Filed</code>, <code>Validator</code>等信息，例如声明一个Meta类。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">EventSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="o">.</span><span class="n">Serializer</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">CharField</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">room_number</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">(</span><span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="mi">101</span><span class="p">,</span> <span class="mi">102</span><span class="p">,</span> <span class="mi">103</span><span class="p">,</span> <span class="mi">201</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">date</span> <span class="o">=</span> <span class="n">serializers</span><span class="o">.</span><span class="n">DateField</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 通过在内部Meta类中声明validators来包含，如下所示：</span>
</span></span><span class="line"><span class="cl">        <span class="n">validators</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="n">UniqueTogetherValidator</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="n">queryset</span><span class="o">=</span><span class="n">Event</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">                <span class="n">fields</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;room_number&#39;</span><span class="p">,</span> <span class="s1">&#39;date&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 通过在内部Meta类中声明model来包含对应使用model，如下所示：</span>
</span></span><span class="line"><span class="cl">        <span class="n">model</span> <span class="o">=</span> <span class="n">User</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># fields 可以指定要序列化的字段，&#39;__all__&#39;为model中的所有字段</span>
</span></span><span class="line"><span class="cl">        <span class="n">fields</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">,</span> <span class="s1">&#39;email&#39;</span><span class="p">,</span> <span class="s1">&#39;profile&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">exclude</span><span class="o">=</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">]</span> <span class="c1"># exclude是要排除的字段</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注：从 3.3.0 版开始，<strong>必须</strong>提供以下属性之一<code>fields</code>或<code>exclude</code>.</p>
</blockquote>
<p>Serializer会在Meta中拿取自己对应的属性进行使用，例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">meta</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s1">&#39;Meta&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">validators</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">meta</span><span class="p">,</span> <span class="s1">&#39;validators&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># assert &lt;condition&gt;,(..error message)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 可以看到Meta和Meta.model必须要设置</span>
</span></span><span class="line"><span class="cl"><span class="k">assert</span> <span class="nb">hasattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="s1">&#39;Meta&#39;</span><span class="p">),</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Class </span><span class="si">{serializer_class}</span><span class="s1"> missing &#34;Meta&#34; attribute&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">serializer_class</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="vm">__class__</span><span class="o">.</span><span class="vm">__name__</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">assert</span> <span class="nb">hasattr</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">Meta</span><span class="p">,</span> <span class="s1">&#39;model&#39;</span><span class="p">),</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;Class </span><span class="si">{serializer_class}</span><span class="s1"> missing &#34;Meta.model&#34; attribute&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">serializer_class</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="vm">__class__</span><span class="o">.</span><span class="vm">__name__</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">model_meta</span><span class="o">.</span><span class="n">is_abstract_model</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">Meta</span><span class="o">.</span><span class="n">model</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;Cannot use ModelSerializer with Abstract Models.&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="其他用法">其他用法</h3>
<p>设置只读字段：字段属性中添加 <code>read_only=True</code>, 或者在Meta类中添加属性 中指定字段 <code>read_only_fields</code> 为列表。</p>
<p><a href="https://www.django-rest-framework.org/api-guide/serializers/#specifying-read-only-fields">readonly-field</a></p>
<h2 id="serializer的字段与字段属性属性">Serializer的字段与字段属性属性</h2>
<blockquote>
<p>Reference</p>
<p><a href="https://www.django-rest-framework.org/api-guide/fields">fields</a></p>
</blockquote>
<h3 id="字段属性">字段属性</h3>
<ul>
<li><code>read_only</code> 在创建或更新时改属性True字段都被忽略</li>
<li><code>write_only</code> 仅为创建或更新时使用，序列化时不操作该字段</li>
<li><code>required</code> 默认情况下，在反序列化时未提供字段会引发错误，如果不需要可以设置为<code>False</code></li>
<li><code>source</code>：
<ul>
<li>用于序列化时，填充替代对应字段名称的作用 <code>URLField(source='get_absolute_url')</code></li>
<li>可以跨表</li>
<li>可以执行对象内方法。</li>
</ul>
</li>
<li><code>Many</code>: 可以返回多个对象，而非一个，在objects.all时使用</li>
</ul>
<h3 id="字段类型">字段类型</h3>
<ul>
<li><code>BooleanField()</code></li>
<li><code>CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True)</code> 文本字段</li>
<li><code>EmailField(max_length=None, min_length=None, allow_blank=False)</code> email字段</li>
<li><code>RegexField(regex, max_length=None, min_length=None, allow_blank=False)</code> 正则表达式</li>
<li><code>IPAddressField(protocol='both', unpack_ipv4=False, **options)</code> IP地址</li>
<li><code>SerializerMethodField(method_name=None)</code> 通过方法序列化，只读字段
<ul>
<li><code>method_name</code> 序列化时通过方法的名称。默认为<code>get_&lt;field_name&gt;</code>.</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>python django使用</title>
      <link>https://www.oomkill.com/2021/10/python-django/</link>
      <pubDate>Sun, 03 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/10/python-django/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="路由匹配">路由匹配</h2>
<h3 id="django中默认匹配页">django中默认匹配页</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">url(r&#39;^$&#39;, views.login),
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="django中404匹配">django中404匹配</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">url(r&#39;^$&#39;, views.login), # 需要放置最后，不过一般不推荐，都是通过异常捕获处理
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="named-group-名称组">named group 名称组</h3>
<p><a href="https://docs.djangoproject.com/en/1.11/topics/http/urls/#named-groups">https://docs.djangoproject.com/en/1.11/topics/http/urls/#named-groups</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">url(r&#39;^test[0-9]{4}&#39;,views.login) 
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="反向解析">反向解析</h2>
<blockquote>
<p>别名不能出现冲突</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">from django.shortcuts import reverse
</span></span><span class="line"><span class="cl">reverse(xxx)
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="名称组反向解析">名称组反向解析</h3>
<p>无名分组</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 路由部分</span>
</span></span><span class="line"><span class="cl"><span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;^index/(\d+)/&#39;</span><span class="p">,</span> <span class="n">views</span><span class="o">.</span><span class="n">home</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;xxx&#39;</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl"><span class="c1"># 前端</span>
</span></span><span class="line"><span class="cl"> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&#34;{</span><span class="si">% u</span><span class="s2">rl &#39;id&#39; obj.id %}&#34;</span> <span class="n">class</span><span class="o">=</span><span class="s2">&#34;btn btn-primary btn-xs&#34;</span><span class="o">&gt;</span><span class="n">remove</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="n">s</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 后端</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">reverse</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="nb">id</span><span class="p">,))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>有名称分组</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 路由部分</span>
</span></span><span class="line"><span class="cl">  <span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s2">&#34;^userdel/(?P&lt;id&gt;\d+)/&#34;</span><span class="p">,</span><span class="n">views</span><span class="o">.</span><span class="n">UserDelete</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;id&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 前端</span>
</span></span><span class="line"><span class="cl">  <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&#34;{</span><span class="si">% u</span><span class="s2">rl &#39;id&#39; obj.id %}&#34;</span> <span class="n">class</span><span class="o">=</span><span class="s2">&#34;btn btn-primary btn-xs&#34;</span><span class="o">&gt;</span><span class="n">remove</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># or</span>
</span></span><span class="line"><span class="cl">  <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&#34;{</span><span class="si">% u</span><span class="s2">rl &#39;id&#39; id=obj.id %}&#34;</span> <span class="n">class</span><span class="o">=</span><span class="s2">&#34;btn btn-primary btn-xs&#34;</span><span class="o">&gt;</span><span class="n">remove</span><span class="o">&lt;/</span><span class="n">a</span><span class="o">&gt;</span><span class="n">s</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 后端</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span> <span class="n">reverse</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="n">kwargs</span><span class="o">=</span><span class="p">{</span><span class="s2">&#34;id&#34;</span><span class="p">:</span><span class="nb">id</span><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="路由分发">路由分发</h2>
<p>路由分发中，并不能识别出，名称分组并不能准确识别出对应的分组，这里需要增加namespace概念</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">url</span><span class="p">,</span> <span class="n">include</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">memberserver</span> <span class="kn">import</span> <span class="n">urls</span> <span class="k">as</span> <span class="n">member_urls</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;member&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">member_urls</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>路由分发中，并不能识别出，名称分组并不能准确识别出对应的分组，这里需要增加namespace概念</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.conf.urls</span> <span class="kn">import</span> <span class="n">url</span><span class="p">,</span> <span class="n">include</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.contrib</span> <span class="kn">import</span> <span class="n">admin</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">memberserver</span> <span class="kn">import</span> <span class="n">urls</span> <span class="k">as</span> <span class="n">member_urls</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">urlpatterns</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="n">url</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;member&#39;</span><span class="p">,</span> <span class="n">include</span><span class="p">(</span><span class="n">member_urls</span><span class="p">,</span> <span class="n">namespace</span><span class="o">=</span><span class="s2">&#34;member&#34;</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl"><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 在后端映射可以使用</span>
</span></span><span class="line"><span class="cl"><span class="n">reverse</span><span class="p">(</span><span class="s2">&#34;member:id&#34;</span><span class="p">)</span> <span class="c1">## 来获得对应的路由</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 在前端可以使用 来获得对应的路由</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="o">%</span> <span class="n">url</span> <span class="s1">&#39;id&#39;</span> <span class="nb">id</span><span class="o">=</span><span class="n">obj</span><span class="o">.</span><span class="n">id</span> <span class="o">%</span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>伪静态</p>
<p>虚拟环境</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>django ORM</title>
      <link>https://www.oomkill.com/2021/10/django-orm/</link>
      <pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/10/django-orm/</guid>
      <description></description>
      <content:encoded><![CDATA[<p><a href="https://www.cnblogs.com/Dominic-Ji/p/11516152.html">https://www.cnblogs.com/Dominic-Ji/p/11516152.html</a></p>
<p>对象关系映射（Object Relational Mapping，简称ORM）模式是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术。</p>
<p>简单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中。</p>
<p>ORM在业务逻辑层和数据库层之间充当了桥梁的作用。</p>
<h2 id="django中仅测试orm">django中仅测试ORM</h2>
<p>导入model，然后直接使用对应对象进行ORM操作。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">import os
</span></span><span class="line"><span class="cl">if __name__ == &#34;__main__&#34;:
</span></span><span class="line"><span class="cl">    os.environ.setdefault(&#34;DJANGO_SETTINGS_MODULE&#34;, &#34;app.settings&#34;)
</span></span><span class="line"><span class="cl">    import django
</span></span><span class="line"><span class="cl">    django.setup()
</span></span><span class="line"><span class="cl">    from xxx import models
</span></span><span class="line"><span class="cl">    models.User.objects.all()
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="连接数据库">连接数据库</h2>
<p>django配置数据库</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">DATABASES</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;default&#39;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;ENGINE&#39;</span><span class="p">:</span> <span class="s1">&#39;django.db.backends.mysql&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;USER&#39;</span><span class="p">:</span> <span class="s1">&#39;root&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;PASSWORD&#39;</span><span class="p">:</span> <span class="s1">&#39;111&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;HOST&#39;</span><span class="p">:</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;NAME&#39;</span><span class="p">:</span> <span class="s1">&#39;book&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;CHARSET&#39;</span><span class="p">:</span> <span class="s1">&#39;utf8&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>可选</strong>：<code>pymysql</code> 使用模块连接MySQL数据库:：在项目中<code>__init__.py</code> 文件中添加配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pymysql</span>
</span></span><span class="line"><span class="cl"><span class="n">pymysql</span><span class="o">.</span><span class="n">install_as_MySQLdb</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="创建表对象">创建（表）对象</h2>
<p>ORM中，<code>O</code> (Object)  代表&quot;对象&quot;，而<code>R</code>(Relational) 则代表&quot;关系&quot;。所以创建表即创建一个类，字段则是类的属性。类的每个实例则对应表中的一条记录。</p>
<p>在Django中model就是你数据来源。通常，一个model映射到一个数据库表，一般情况下基本满足：</p>
<ul>
<li>
<p>每个model（表）都是一个Python类，它是<code>django.db.models.Model</code>的子类即继承<code>models.Model</code>。</p>
</li>
<li>
<p>类的每个属性都代表一个字段（字段）。</p>
</li>
<li>
<p>实例化出的对象，代表表中的记录。</p>
</li>
</ul>
<p>例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">User</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span></span><span class="line"><span class="cl"><span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">age</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">registration_time</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateField</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="字段类型">字段类型</h3>
<h2 id="reference">Reference</h2>
<blockquote>
<p><a href="https://docs.djangoproject.com/zh-hans/2.0/ref/models/fields/#field-types">字段类型说明</a></p>
<p><a href="https://docs.djangoproject.com/zh-hans/2.0/ref/models/fields/#field-options">字段选项说明</a></p>
</blockquote>
<blockquote>
<p><strong>必需掌握字段类型说明</strong>：</p>
</blockquote>
<ul>
<li>
<p><code>BigIntegerField</code> or <code>BigAutoField</code>: <code>1~9223372036854775807</code> 的64位自增int</p>
</li>
<li>
<p><code>CharField</code>: 用于存储字符串，对应MySQL中varchar</p>
</li>
<li>
<p><code>DateField</code>:  python中的<code>datetime.date.today()</code> 即 <code>Y-m-d</code></p>
</li>
<li>
<p><code>DateTimeField</code>：<code>timezone.now</code> - <code>django.utils.timezone.now()</code>为<code>YYYY-MM-DD HH:MM[:ss[.uuuuuu]][TZ]</code>，相当于Python中的<code>datetime.datetime()</code></p>
</li>
<li>
<p><code>DecimalField</code>：小数，使用：<code>models.DecimalField(..., max_digits=5, decimal_places=2)</code></p>
</li>
<li>
<p><code>BooleanField</code>: 代表一个true/false的布尔值。</p>
</li>
<li>
<p><code>AutoField</code>: int类型的自增列，必须填入参数<code>primary_key=True</code> 。当model中如果没有自增列，则自动会创建一个列名为id的列。</p>
</li>
</ul>
<h3 id="字段参数">字段参数</h3>
<blockquote>
<p><strong>Reference</strong></p>
<p><a href="https://docs.djangoproject.com/zh-hans/2.0/ref/models/fields/#field-options">字段选项说明</a></p>
</blockquote>
<p><strong>必须掌握的字段选项</strong>：</p>
<ul>
<li><code>null</code>：表示该字段是否允许空值，如果为true，django将在数据库中将空值存储为null。默认为false。使用：<code>models.CharField(null=True)</code></li>
<li><code>db_index</code>：是否对字段创建索引，如果为true，将为此字段创建数据库索引。</li>
<li><code>default</code>：字段的默认值。这可以是值或可调用的对象。如果可调用它将每次创建新对象时调用它。</li>
<li><code>primary_key</code>：<code>primary_key=True</code>，该字段为主键。</li>
</ul>
<p>时间字段特殊参数：</p>
<ul>
<li><code>auto_now_add</code>:  <code>auto_now_add=True</code>，仅在创建对象时将当前时间插入到数据库中。如果不设置</li>
<li><code>auto_now</code>: <code>auto_now=True</code>，每次更新数据记录的时候会更新该字段。</li>
</ul>
<h2 id="增">增</h2>
<h3 id="save">save()</h3>
<p>Python对象中表示数据库表数据，模型类表示数据库表，该类的实例表示数据库表中的记录。</p>
<p>要创建一个对象，然后调用<code>save()</code>将其保存到数据库中。</p>
<p><code>save()</code> 直到调用时，才操作数据库，并且没有返回值。</p>
<p><code>save()</code> 必须实例化后调用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">User</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&#34;zhangsan&#34;</span><span class="p">,</span><span class="n">age</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="create">create()</h3>
<p>创建对象并且保存</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">models</span><span class="o">.</span><span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&#34;lisi&#34;</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">19</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="删">删</h2>
<h3 id="delete">delete()</h3>
<p><code>delete()</code> 在查询集中的所有行上执行SQL DELETE，并返回删除的对象数量和每个对象类型的删除次数的字典。</p>
<p>delete()无法对<code>QuerySet</code> 上调用<code>delete()</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">models</span><span class="o">.</span><span class="n">User</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">pk</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="查">查</h2>
<h3 id="查询必会的方法">查询必会的方法</h3>
<p><strong>返回值为QuerySet对象的方法有</strong></p>
<p><code>all()</code> 查询所有数据
<code>filter()</code> 带有过滤条件的查询
<code>exclude()</code> 排除数据，<code>exclude('xxx=xxx')</code>
<code>order_by()</code> 排序 降序 <code>models.User.objects.order_by('-age')</code>
<code>reverse()</code> 反转，反转的数据必须是 <code>order_by()</code>后的数据
<code>distinct()</code> 去重，主键是唯一值，需要过滤主键</p>
<p><strong>返回值为特殊的QuerySet</strong></p>
<p><code>values()</code>    返回一个可迭代的字典序列。（列表套字典）
<code>values_list()</code> 返回一个可迭代的元祖序列。（列表套<code>QuerySet</code>）</p>
<p><strong>返回值为具体对象</strong></p>
<p><code>get()</code>
<code>first()</code>
<code>last()</code></p>
<p><strong>返回值布尔值</strong>：</p>
<p><code>exists()</code></p>
<p><strong>返回值为数字</strong></p>
<p><code>count()</code> 统计当前数据个数</p>
<h4 id="django-查看原生sql的方法">django 查看原生SQL的方法</h4>
<ul>
<li>
<p>``QuerySet<code> 可以使用</code>models.User.objects.values_list().query`</p>
</li>
<li>
<p>终端打印，在<code>setting.py</code>中配置下列</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">LOGGING</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;version&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;disable_existing_loggers&#39;</span><span class="p">:</span> <span class="kc">False</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;handlers&#39;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;console&#39;</span><span class="p">:{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;level&#39;</span><span class="p">:</span><span class="s1">&#39;DEBUG&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;class&#39;</span><span class="p">:</span><span class="s1">&#39;logging.StreamHandler&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;loggers&#39;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;django.db.backends&#39;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;handlers&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s1">&#39;console&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;propagate&#39;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;level&#39;</span><span class="p">:</span><span class="s1">&#39;DEBUG&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="条件查询">条件查询</h3>
<h4 id="基于双下划线的查询">基于双下划线的查询</h4>
<p>查询大于的18的用户 <code>models.User.objects.filter(age__gt=12)</code></p>
<p>查询年龄为18,19,20岁的用户 <code>models.User.objects.filter(age__in=[18,19,20])</code></p>
<p>查询90后用户 <code>models.User.objects.filter(age__range=[22,31])</code></p>
<p>模糊查询：查询名字包含<code>l</code> 的用户：<code>models.User.objects.filter(name__contains='li')</code></p>
<p>模糊查询：忽略大小写查询：<code>models.User.objects.filter(name__icontains='li') </code></p>
<p>查询注册时间为 2020 7月份数据：<code>models.User.objects.filter(registration_time__month=7)</code></p>
</li>
</ul>
<h2 id="多表操作">多表操作</h2>
<p>在django中外键的存在使得<code>ORM</code>框架在处理表关系的时候异常的强大。在Django中，外键类定义为：<code>class ForeignKey(to,on_delete,**options)</code> 。可以看到外键的参数大致分为：</p>
<ul>
<li>to：引用那个model（表）。</li>
<li>on_delete：当使用了外键引用model（表）的数据被删除后的操作。</li>
</ul>
<p><strong>定义一个外键</strong>：</p>
<p>在关系数据库中外键的作用是在于将表彼此关联起来。Django提供了定义三种最常见的数据库关系类型的方法：多对一、多对多和一对一。</p>
<p>而关系型字段分为：</p>
<table>
<thead>
<tr>
<th>关系型字段</th>
<th>对应关系</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://docs.djangoproject.com/zh-hans/2.0/topics/db/models/#many-to-one-relationships">ForeignKey</a></td>
<td>多对一</td>
</tr>
<tr>
<td><a href="https://docs.djangoproject.com/zh-hans/2.0/topics/db/models/#many-to-many-relationships">ManyToManyField</a></td>
<td>多对多</td>
</tr>
<tr>
<td><a href="https://docs.djangoproject.com/zh-hans/2.0/topics/db/models/#one-to-one-relationships">OneToOneField</a></td>
<td>一对一</td>
</tr>
</tbody>
</table>
<p>如下：</p>
<ul>
<li>一个作者可以写多本书，但一本书只能由一个出版社出版，使用 <code>ForeignKey</code> 可以直接使用Book实例中通过 <code>Press</code> 属性来操作对应的<code>Press</code>模型。</li>
<li>一本书 可以由多个 <code>Author</code> 编写，也可以由一个作者  <code>Author</code> 编写，但一个作者( <code>Author</code>)也可以编写多本书 <code>Book</code>。</li>
<li>一般情况下，出版社仅记录<code>Author</code>的一个联系方式，也就是 <code>Author</code> 与 <code>AuthorDetail</code> 为一对一关系。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Book</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">title</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">price</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DecimalField</span><span class="p">(</span><span class="n">max_digits</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">decimal_places</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">publishData</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">DateField</span><span class="p">(</span><span class="n">auto_now_add</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">press</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">to</span><span class="o">=</span><span class="s2">&#34;Press&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">author</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ManyToManyField</span><span class="p">(</span><span class="n">to</span><span class="o">=</span><span class="s2">&#34;Author&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Press</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span><span class="n">null</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">address</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">email</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">EmailField</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Author</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span><span class="n">null</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">age</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">IntegerField</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">authorDetail</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">OneToOneField</span><span class="p">(</span><span class="n">to</span><span class="o">=</span><span class="s2">&#34;AuthorDetail&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">AuthorDetail</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">phoneNumber</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">BigIntegerField</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">address</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">32</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="外键的基本操作">外键的基本操作</h3>
<p>添加外键关系：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">bookobj</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">Book</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">pk</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">bookobj</span><span class="o">.</span><span class="n">author</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1"># 给主键为1的书籍绑定一个主键1的作者</span>
</span></span><span class="line"><span class="cl"><span class="n">bookobj</span><span class="o">.</span><span class="n">author</span><span class="o">.</span><span class="n">add</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span> <span class="c1"># 给主键为1的书籍绑定多个作者</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>移除关系：<code>bookobj.author.remove(1)</code></p>
<p>修改关系：<code>bookobj.author.set(2)</code></p>
<p>清空该关系：<code>bookobj.author.clear() # 清除所有这个作者的书</code></p>
<h3 id="正反向概念">正反向概念</h3>
<p>正向查询：在子表中，查询父表（外键所在表）的信息
反向查询：通过父表，查询子表的信息</p>
<h3 id="多表查询">多表查询</h3>
<p>查询口诀：正向查询按外键字段，反向查询按表名（model）</p>
<p><code>all()</code> 当结果为多个时，需要使用<code>.all()</code> 如多对多，一对多</p>
<p><strong>查询书籍1的出版社</strong> 正向查询</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">book = models.Book.objects.filter(pk=1).first()
</span></span><span class="line"><span class="cl">print book.press.name
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>查询书籍1的作者</strong> 正向查询</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">book = models.Book.objects.filter(pk=1).first()
</span></span><span class="line"><span class="cl">print book.author.all()
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>查询作者1的电话</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">auther = models.Author.objects.filter(pk=1).first()
</span></span><span class="line"><span class="cl">print auther.authorDetail.phoneNumber
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>查询出版社拥有的书</strong> 反向查询</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">press</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">Press</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">pk</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">books</span> <span class="o">=</span> <span class="n">press</span><span class="o">.</span><span class="n">book_set</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>查询作者Phoenix写的书</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">auther</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">Author</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&#34;Phoenix&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">auther</span><span class="o">.</span><span class="n">book_set</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>根据手机号查询作者</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">phone</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">AuthorDetail</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">phoneNumber</span><span class="o">=</span><span class="mi">1511111111</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span> <span class="n">phone</span><span class="o">.</span><span class="n">author</span><span class="o">.</span><span class="n">name</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="基于下划线的查询">基于下划线的查询</h3>
<p><strong>根据名称查询手机号</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">models</span><span class="o">.</span><span class="n">Author</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&#34;Phoenix&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">values</span><span class="p">(</span><span class="s2">&#34;authorDetail__phoneNumber&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 获取两个表中的字段</span>
</span></span><span class="line"><span class="cl"><span class="n">models</span><span class="o">.</span><span class="n">Author</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&#34;Phoenix&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">values</span><span class="p">(</span><span class="s2">&#34;authorDetail__phoneNumber&#34;</span><span class="p">,</span><span class="s2">&#34;name&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>查询书籍1的作者名称</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 正向</span>
</span></span><span class="line"><span class="cl"><span class="n">models</span><span class="o">.</span><span class="n">Book</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">pk</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">values</span><span class="p">(</span><span class="s2">&#34;author__name&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 反向</span>
</span></span><span class="line"><span class="cl"><span class="n">models</span><span class="o">.</span><span class="n">AuthorDetail</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">author__name</span><span class="o">=</span><span class="s2">&#34;Phoenix&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">values</span><span class="p">(</span><span class="s2">&#34;phoneNumber&#34;</span><span class="p">,</span><span class="s2">&#34;author__name&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>查询书籍1的作者手机号</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">models.Book.objects.filter(pk=1).values(&#34;author__authorDetail__phoneNumber&#34;)
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="聚合查询-aggregate">聚合查询 (aggregate)</h2>
<p><code>aggregate()</code> 是 <code>QuerySet</code> 的一个终止子句，意思是说，它返回一个包含一些键值对的字典。键的名称是聚合值的标识符，值是计算出来的聚合值。键的名称是按照字段和聚合函数的名称自动生成出来的。</p>
<p>使用聚合查询需要引入具体的类 <code>from django.db.models import Avg,Max,Min,Count,Sum</code></p>
<p>获取书的总数 <code>Book.objects.count()</code></p>
<p>对数据进行聚合查询：<code>aggregate(别名 = 聚合函数名[avg,max..](&quot;属性名称&quot;))</code></p>
<h2 id="分组查询annotate">分组查询（annotate）</h2>
<p>分组查询一般会与聚合函数一起使用，使用前也许引入具体类：<code>from django.db.models import Avg,Max,Min,Count,Sum</code></p>
<p>返回值：</p>
<ul>
<li>分组后，用 values 取值，则返回值是 QuerySet 数据类型里面为一个个字典；</li>
<li>分组后，用 values_list 取值，则返回值是 QuerySet 数据类型里面为一个个元组。</li>
</ul>
<p>分组位置 <code>annotate</code>：</p>
<ul>
<li><strong>values  or values_list 在 annotate 前</strong>：values 或者 values_list 是声明以什么字段分组，annotate 执行分组。</li>
<li><strong>values or values_list 在annotate后</strong>： annotate 表示直接以当前表的pk执行分组，values 或者 values_list 表示查询哪些字段， 并且要将 annotate 里的聚合函数起别名，在 values 或者 values_list 里写其别名。</li>
</ul>
<p><strong>统计每本书的作者有几个</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">models</span><span class="o">.</span><span class="n">Book</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">autherNum</span><span class="o">=</span><span class="n">Count</span><span class="p">(</span><span class="s1">&#39;author__id&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">values</span><span class="p">(</span><span class="s1">&#39;autherNum&#39;</span><span class="p">,</span><span class="s1">&#39;title&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>统计出版社最便宜书的价格</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"> <span class="n">models</span><span class="o">.</span><span class="n">Press</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">minPrice</span><span class="o">=</span><span class="n">Min</span><span class="p">(</span><span class="s1">&#39;book__price&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">values</span><span class="p">(</span><span class="s2">&#34;name&#34;</span><span class="p">,</span> <span class="s2">&#34;minPrice&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>统计不止一个作者的书</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">models</span><span class="o">.</span><span class="n">Book</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">autherCount</span><span class="o">=</span><span class="n">Count</span><span class="p">(</span><span class="s2">&#34;author__id&#34;</span><span class="p">))</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">autherCount__gt</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">values</span><span class="p">(</span><span class="s2">&#34;title&#34;</span><span class="p">,</span><span class="s2">&#34;autherCount&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>统计作者出书的总价</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">models</span><span class="o">.</span><span class="n">Author</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">annotate</span><span class="p">(</span><span class="n">bookPrice</span><span class="o">=</span><span class="n">Sum</span><span class="p">(</span><span class="s2">&#34;book__price&#34;</span><span class="p">))</span><span class="o">.</span><span class="n">values</span><span class="p">(</span><span class="s2">&#34;name&#34;</span><span class="p">,</span><span class="s2">&#34;bookPrice&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>根据指定字段分组</strong></p>
<h2 id="fq查询">F&amp;Q查询</h2>
<h3 id="f查询">F查询</h3>
<p>F 可以在对Model字段值的转换时，无需从数据库中将值加载到内存中，进行操作后再<code>save()</code>。</p>
<p>例如。通常情况下，在更新数据时需先从数据库里将原数据加载到内存里，编辑后最后提交。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">order</span> <span class="o">=</span> <span class="n">Order</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">orderid</span><span class="o">=</span><span class="s1">&#39;1&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">order</span><span class="o">.</span><span class="n">amount</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">order</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而F 可以直接对值进行运行而不必将数据从库中拉到内存中。例如</p>
<p><strong>卖出大于库存的书籍</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">models</span><span class="o">.</span><span class="n">Book</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">sell__gt</span><span class="o">=</span><span class="n">F</span><span class="p">(</span><span class="s1">&#39;stock&#39;</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>对所有书籍价格增加100</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">models</span><span class="o">.</span><span class="n">Book</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">price</span><span class="o">=</span><span class="n">F</span><span class="p">(</span><span class="s1">&#39;price&#39;</span><span class="p">)</span><span class="o">+</span><span class="mi">100</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="q查询">Q查询</h3>
<p>ORM filter() 等方法中的关键字参数查询都是一起进行 <code>AND</code>  的。 如需要执行更复杂的查询（例如OR语句），你可以使用Q对象。</p>
<p>Q是对查询条件进行字符串拼接，故可以组合 <code>&amp;</code>  和<code>|</code>  等操作符以及使用括号进行分组来编写任意复杂的Q对象。同时，Q 对象可以使用<code>~</code> 操作符取反。</p>
<p>Q 对象允许组合正常的查询和取反(<code>NOT</code>) 查询。</p>
<p>如**：查询作者是的Radamandis和Phoenix**</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">models</span><span class="o">.</span><span class="n">Book</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">Q</span><span class="p">(</span><span class="n">authors__name</span><span class="o">=</span><span class="s2">&#34;Phoenix&#34;</span><span class="p">)</span><span class="o">|</span><span class="n">Q</span><span class="p">(</span><span class="n">authors__name</span><span class="o">=</span><span class="s2">&#34;Radamandis&#34;</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>查询作者不是Phoenix的书</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">models</span><span class="o">.</span><span class="n">Book</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="o">~</span><span class="n">Q</span><span class="p">(</span><span class="n">author__name</span><span class="o">=</span><span class="s2">&#34;Phoenix&#34;</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>也可以进行组合查询</strong>: 查询作者不是Phoenix 并且价格大于700</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">models.Book.objects.filter(~Q(author__name=&#34;Phoenix&#34;) &amp; Q(publishData__gt=&#34;2021-08-04&#34;))
</span></span></code></pre></td></tr></table>
</div>
</div><p>Q的第二种使用方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">query</span> <span class="o">=</span> <span class="n">Q</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">query</span><span class="o">.</span><span class="n">connector</span> <span class="o">=</span> <span class="s1">&#39;OR&#39;</span> <span class="c1">#默认为and</span>
</span></span><span class="line"><span class="cl"><span class="n">query</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">query</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">query</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">models</span><span class="o">.</span><span class="n">Book</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="事务">事务</h2>
<blockquote>
<p>Reference</p>
<p><a href="https://docs.djangoproject.com/zh-hans/3.2/topics/db/transactions/">transactions</a></p>
</blockquote>
<p>在操作多表，或多次变更数据时，这些数据的修改应该是一个整体事务，即要么一起成功，要么一起失败。Django 默认的事务行为是自动提交，即每执行一次则会自动提交到数据库。</p>
<p>在django中事务的使用是通过<code>django.db.transaction</code>模块提供的<code>atomic</code>来定义事务。所以使用事务需要先引入<code>from django.db import transaction</code></p>
<p>事务的使用可以通过<code>装饰器</code> 或 <code>with</code>语句。</p>
<p>通过装饰器方式（全局事务），在整个函数内为一个事务，要么一起成功，要么一起失败。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@transaction</span><span class="o">.</span><span class="n">atomic</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">models</span><span class="o">.</span><span class="n">Press</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&#34;Yasgot&#34;</span><span class="p">,</span><span class="n">address</span><span class="o">=</span><span class="s2">&#34;Nordische Botschaften&#34;</span><span class="p">,</span> <span class="n">email</span><span class="o">=</span><span class="s2">&#34;yasgot.com@gamil.com&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="s2">&#34;insert ok.&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">models</span><span class="o">.</span><span class="n">Press</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&#34;Yasgot&#34;</span><span class="p">,</span><span class="n">address</span><span class="o">=</span><span class="s2">&#34;Nordische Botschaften&#34;</span><span class="p">,</span> <span class="n">email</span><span class="o">=</span><span class="s2">&#34;yasgot.com@gamil.com&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">book</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">Press</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="n">book</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过with方式（局部事务），在函数中，使用 <code>with transaction.atomic():</code> 代码块内的为一个事务。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">viewfunc</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">	<span class="k">with</span> <span class="n">transaction</span><span class="o">.</span><span class="n">atomic</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 这部分代码会在事务中执行</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="事务的异常处理">事务的异常处理</h3>
<h4 id="保存点">保存点</h4>
<p>保存点（<code>savepoint</code>），在事务中可以做到部分回滚，而不是整个事务。</p>
<p><code>atomic()</code> 为开启一个事务，而回滚是通过，<code>transaction.rollback()</code> 执行的完全回滚。而django也推荐仅使用<code>atomic()</code>。</p>
<ul>
<li>
<p><a href="https://docs.djangoproject.com/zh-hans/3.2/topics/db/transactions/#django.db.transaction.savepoint"><code>savepoint(*using=None*)</code></a>：创建新的保存点，返回保存点ID (<code>sid</code>) 。</p>
</li>
<li>
<p><a href="https://docs.djangoproject.com/zh-hans/3.2/topics/db/transactions/#django.db.transaction.savepoint_commit"><code>savepoint_commit(*sid*, *using=None*)</code></a>：释放保存点 <code>sid</code> 。如回滚等将不在保证之前的保存点的数据而是整个事务。</p>
</li>
<li>
<p><a href="https://docs.djangoproject.com/zh-hans/3.2/topics/db/transactions/#django.db.transaction.savepoint_rollback"><code>savepoint_rollback(*sid*, *using=None*)</code></a>:回滚事务 <code>sid</code> 。</p>
</li>
</ul>
<p>下面是官方的一个例子：<a href="https://docs.djangoproject.com/zh-hans/3.2/topics/db/transactions/#django.db.transaction.clean_savepoints">example-to-savepoint</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">transaction</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># open a transaction</span>
</span></span><span class="line"><span class="cl"><span class="nd">@transaction</span><span class="o">.</span><span class="n">atomic</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">viewfunc</span><span class="p">(</span><span class="n">request</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">a</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># transaction now contains a.save()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">sid</span> <span class="o">=</span> <span class="n">transaction</span><span class="o">.</span><span class="n">savepoint</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">b</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># transaction now contains a.save() and b.save()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">want_to_keep_b</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">transaction</span><span class="o">.</span><span class="n">savepoint_commit</span><span class="p">(</span><span class="n">sid</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># open transaction still contains a.save() and b.save()</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">transaction</span><span class="o">.</span><span class="n">savepoint_rollback</span><span class="p">(</span><span class="n">sid</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># open transaction now contains only a.save()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="执行原生sql">执行原生SQL</h2>
<h2 id="reference-1">Reference</h2>
<blockquote>
<p><a href="https://docs.djangoproject.com/zh-hans/3.2/topics/db/sql/">raw-sql</a></p>
</blockquote>
<p><strong><code>raw()</code></strong> :执行原生语句 <code>django.db.models.query.RawQuerySet</code></p>
<p><strong><code> django.db.connection()</code></strong>：；连接多个库 <code>from django.db import connection</code></p>
<h2 id="自定义字段类">自定义字段类</h2>
<h2 id="reference-2">Reference</h2>
<blockquote>
<p><a href="https://docs.djangoproject.com/zh-hans/3.2/howto/custom-model-fields/">custom-filed</a></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">class FixedCharField(models.Field):
</span></span><span class="line"><span class="cl">    &#34;&#34;&#34;
</span></span><span class="line"><span class="cl">    自定义的 char 类型的字段类
</span></span><span class="line"><span class="cl">    &#34;&#34;&#34;
</span></span><span class="line"><span class="cl">    def __init__(self, max_length, *args, **kwargs):
</span></span><span class="line"><span class="cl">        self.max_length = max_length
</span></span><span class="line"><span class="cl">        super(FixedCharField, self).__init__(max_length=max_length, *args, **kwargs)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    def db_type(self, connection):
</span></span><span class="line"><span class="cl">        &#34;&#34;&#34;
</span></span><span class="line"><span class="cl">        限定生成数据库表的字段类型为 char，长度为 max_length 指定的值
</span></span><span class="line"><span class="cl">        &#34;&#34;&#34;
</span></span><span class="line"><span class="cl">        return &#39;char(%s)&#39; % self.max_length
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>由PIPE size 引起的线上故障</title>
      <link>https://www.oomkill.com/2021/10/pipe-size-problem/</link>
      <pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/10/pipe-size-problem/</guid>
      <description></description>
      <content:encoded><![CDATA[<blockquote>
<p><strong>sence</strong>：python中使用subprocess.Popen(cmd, stdout=sys.STDOUT, stderr=sys.STDERR, shell=True) ，stdout, stderr 为None.</p>
</blockquote>
<p>在错误中执行是无法捕获 stderr的内容，后面将上面的改为 <code>subprocess.Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True)</code>,发现是可以拿到 <code>stderr</code>, 但是会遇到大量任务hanging，造成线上事故。</p>
<p>为此特意查询<code>subprocess</code>的一些参数的说明。</p>
<blockquote>
<p><code>stdin</code> <code>stdout </code> <code>stderr </code> 如果这些参数为 <code>PIPE</code>, 此时会为一个文件句柄，而传入其他（例如 <code>sys.stdout</code> 、<code>None</code> 等）的则为<code>None</code></p>
</blockquote>
<p>正如这里介绍的一样，<a href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.stdin">subprocess</a> 。</p>
<p>而使用 <code>PIPE</code>，却导致程序 hanging。一般来说不推荐使用 <code>stdout=PIPE</code>  <code>stderr=PIPE</code>，这样会导致一个死锁，子进程会将输入的内容输入到 <code>pipe</code>，直到操作系统从buffer中读取出输入的内容。</p>
<p>查询手册可以看到确实是这个问题 <a href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.communicate">Refernce</a></p>
<blockquote>
<p><strong>Warning</strong> This will deadlock when using <code>stdout=PIPE</code> and/or <code>stderr=PIPE</code> and the child process generates enough output to a pipe such that it blocks waiting for the OS pipe buffer to accept more data. Use <a href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.communicate"><code>communicate()</code></a> to avoid that.</p>
</blockquote>
<p>而在linux中 <code>PIPE</code> 的容量（capacity）是内核中具有固定大小的一块缓冲区，如果用来接收但不消费就会阻塞，所以当用来接收命令的输出基本上100% 阻塞所以会导致整个任务 hanging。<em>（ -Linux2.6.11 ，pipe capacity 和system page size 一样（如， i386 为 4096 bytes ）。 since Linux 2.6.11+，pipe capacity 为 65536  bytes。）</em></p>
<p>关于更多的信息可以参考：<a href="https://linux.die.net/man/7/pipe">pipe</a></p>
<p>所以如果既要拿到对应的输出进行格式化，又要防止程序hang，可以自己创建一个缓冲区，这样可以根据需求控制其容量，可以有效的避免hanging。列如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">cmd</span> <span class="o">=</span> <span class="s2">&#34;this is complex command&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">outPipe</span> <span class="o">=</span> <span class="n">tempfile</span><span class="o">.</span><span class="n">SpooledTemporaryFile</span><span class="p">(</span><span class="n">bufsize</span><span class="o">=</span><span class="mi">10</span><span class="o">*</span><span class="mi">10000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">fileno</span> <span class="o">=</span> <span class="n">outPipe</span><span class="o">.</span><span class="n">fileno</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">process</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span><span class="n">stdout</span><span class="o">=</span><span class="n">fileno</span><span class="p">,</span><span class="n">stderr</span><span class="o">=</span><span class="n">fileno</span><span class="p">,</span><span class="n">shell</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>另外，几个参数设置的不通的区别如下：</p>
<p><code>stdout=None</code> 为继承父进程的句柄，通俗来说为标准输出。</p>
<p><code>stderr=STDOUT</code> 重定向错误输出到标准输出</p>
<p><code>stdout=PIPE</code> 将标准输出到linux pipe</p>
<h2 id="reference">Reference</h2>
<blockquote>
<p><a href="https://docs.python.org/2/library/subprocess.html#subprocess.Popen.stdin">subprocess</a></p>
<p><a href="https://stackoverflow.com/questions/25370347/python-subprocess-stderr-stdout-field-is-none-if-created">subprocess stderr/stdout field is None</a></p>
<p><a href="https://stackoverflow.com/questions/39477003/python-subprocess-popen-hanging">subprocess-popen-hanging</a></p>
<p><a href="https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer">pipe size</a></p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>python使用虚拟环境venv</title>
      <link>https://www.oomkill.com/2021/06/python-venv/</link>
      <pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/06/python-venv/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>venv模块支持使用自己的站点目录创建轻量级“虚拟环境”，可选择与系统站点目录隔离。每个虚拟环境都有自己的Python二进制文件（与用于创建此环境的二进制文件的版本相匹配），并且可以在其站点目录中拥有自己独立的已安装 Python 软件包集。</p>
<p>3.6 版后已移除: pyvenv 是 Python 3.3 和 3.4 中创建虚拟环境的推荐工具，不过 在 Python 3.6 中已弃用。</p>
<p>在 3.5 版更改: 现在推荐使用 venv 来创建虚拟环境。</p>
<h3 id="创建venv虚拟环境">创建venv虚拟环境</h3>
<p>如果使用python2，则需要安装virtualenv模块</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">pip install virtualenv 
</span></span><span class="line"><span class="cl">python -m virtualenv {name}
</span></span></code></pre></td></tr></table>
</div>
</div><p>python3内置了 <code>venv</code> 模块，可以直接使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">python3 -m venv {name}
</span></span></code></pre></td></tr></table>
</div>
</div><p>进入虚拟环境</p>
<p>linux</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">venv\Scripts\activate
</span></span></code></pre></td></tr></table>
</div>
</div><p>windows</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">venv\Scripts\activate.bat
</span></span></code></pre></td></tr></table>
</div>
</div><p>退出环境</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">venv\Scripts\deactivate.bat
</span></span><span class="line"><span class="cl">venv\Scripts\deactivate
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用venv环境安装软件报错">使用venv环境安装软件报错</h3>
<blockquote>
<p>Could not fetch URL <a href="https://pypi.org/simple/pip/">https://pypi.org/simple/pip/</a>: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host=&lsquo;pypi.org&rsquo;, port=443): Max retries exceeded with url: /simple/pip/ (Caused by SSLError(SSLEOFError(8, u&rsquo;EOF occurred in violation of protocol (_ssl.c:727)&rsquo;),)) - skipping</p>
</blockquote>
<p>查询很多都无法解决，最后发现有文章提到这是因为开启了climb wall软件导致的，关闭后恢复正常</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>python中的signal</title>
      <link>https://www.oomkill.com/2021/06/python-signal-handle/</link>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/06/python-signal-handle/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="什么是信号">什么是信号</h2>
<p>信号（signal）&ndash; 进程间通讯的一种方式，也可作为一种软件中断的方法。一个进程一旦接收到信号就会打断原来的程序执行来按照信号进行处理。</p>
<p>简化术语，信号是一个事件，用于中断运行功能的执行。信号始终在主Python线程中执行。对于信号，这里不做详细介绍。</p>
<p>Python封装了操作系统的信号功能的库 <code>singal</code> 的库。<code>singal</code>  库可以使我们在python程序中中实现信号机制。</p>
<p><a href="https://zh.wikipedia.org/wiki/Unix%E4%BF%A1%E5%8F%B7">https://zh.wikipedia.org/wiki/Unix%E4%BF%A1%E5%8F%B7</a>)</p>
<h2 id="python的信号处理">Python的信号处理</h2>
<p>首先需要了解Python为什么要提供 <code>signal Library</code>。信号库使我们能够使用信号处理程序，以便当接收信号时都可以执行自定义任务。</p>
<blockquote>
<p>Mission：当接收到信号时执行信号处理方法</p>
</blockquote>
<p>可以通过使用 <code>signal.singal()</code> 函数来实现此功能</p>
<h3 id="python对信号的处理">Python对信号的处理</h3>
<p>通常情况下Python 信号处理程序总是会在主 Python 主解析器的主线程中执行，即使信号是在另一个线程中接收的。 这意味着信号不能被用作线程间通信的手段。 你可以改用 <a href="https://docs.python.org/zh-cn/3/library/threading.html#module-threading"><code>threading</code></a> 模块中的同步原语。</p>
<p>Python信号处理流程，需要对信号处理程序（signal handling ）简要说明。<code>signal handling </code> 是一个任务或程序，当检测到特定信号时，处理函数需要两个参数，即信号id <code>signal number</code> （Linux 中 1-64），与堆栈帧 <code>frame</code>。通过相应信号启动对应 <code>signal handling</code> ，<code>signal.signal()</code> 将为信号分配 处理函数。</p>
<p>如：当运行一个脚本时，取消，此时是捕获到一个信号，可以通过捕获信号方式对程序进行异步的优雅处理。通过将信号处理程序注册到应用程序中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">signal</span>  
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">handler</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>  <span class="c1"># 定义一个signal handling</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Signal Number:&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="s2">&#34; Frame: &#34;</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>  
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"><span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">handler</span><span class="p">)</span>  <span class="c1"># 将handle分配给对应信号</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>  
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Press ctrl + c&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/python-signal-processing.png" alt="python signal processing, python SIGINT handler"  /></p>
<p>如果不对对应信号进行捕获处理时，python将会抛出异常。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ python signal.py
</span></span><span class="line"><span class="cl">^CTraceback (most recent call last):
</span></span><span class="line"><span class="cl">  File &#34;signal.py&#34;, line 3, in &lt;module&gt;
</span></span><span class="line"><span class="cl">    while True:
</span></span><span class="line"><span class="cl">KeyboardInterrupt
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="信号枚举">信号枚举</h2>
<p>信号的表现为一个int，Python的信号库有对应的信号枚举成员</p>
<p>其中常用的一般有，</p>
<p>SIGINT  control+c</p>
<p>SIGTERM  终止进程 软件终止信号</p>
<p>SIGKILL  终止进程 杀死进程</p>
<p>SIGALRM 超时</p>
<table>
<thead>
<tr>
<th>信号</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>SIG_DFL</strong></td>
<td></td>
</tr>
<tr>
<td><strong>SIG_IGN</strong></td>
<td>标准信号处理程序，它将简单地忽略给定的信号</td>
</tr>
<tr>
<td><strong>SIGABRT</strong> <br><strong>SIGIOT</strong></td>
<td>来自 abort 的中止信号。<br>abort 导致异常进程终止。通常由检测内部错误或严重破坏约束的库函数调用。例如，如果堆的内部结构被堆溢出损坏，<code>malloc()</code>将调用<code>abort()</code></td>
</tr>
<tr>
<td><strong>SIGALRM</strong><br/><strong>SIGVTALRM</strong> <strong><br></strong> <strong>SIGPROF</strong></td>
<td>如果你用 setitimer 这一类的报警设置函数设置了一个时限，到达时限时进程会接收到 SIGALRM, SIGVTALRM 或者 SIGPROF。但是这三个信号量的含义各有不同，SIGALRM 计时的是真实时间，SIGVTALRM计时的是进程使用了多少CPU时间，而 SIGPROF 计时的是进程和代表该进程的内核用了多少时间。</td>
</tr>
<tr>
<td><strong>SIGBUS</strong></td>
<td>总线发生错误时，进程接收到一个SIGBUS信号。举例来说，存储器访问对齐或者或不存在对应的物理地址都会产生SIGBUS信号。</td>
</tr>
<tr>
<td><strong>SIGCHLD</strong></td>
<td>当子进程终止、被中断或被中断后恢复时，SIGCHLD信号被发送到进程。该信号的一个常见用法是指示操作系统在子进程终止后清理其使用的资源，而不显式调用等待系统调用。</td>
</tr>
<tr>
<td><strong>SIGILL</strong></td>
<td>非法指令。当进程试图执行非法、格式错误、未知或特权指令时，SIGILL信号被发送到该进程。</td>
</tr>
<tr>
<td><strong>SIGKILL</strong></td>
<td>发送SIGKILL信号到一个进程可以使其立即终止(KILL)。与SIGTERM和SIGINT相不同的是，这个信号不能被捕获或忽略，接收过程在接收到这个信号时不能执行任何清理。 以下例外情况适用:</td>
</tr>
<tr>
<td><strong>SIGINT</strong></td>
<td>来自键盘的中断 (CTRL + C)。<code>KeyboardInterrupt</code></td>
</tr>
<tr>
<td><strong>SIGPIPE</strong></td>
<td>当一个进程试图写入一个没有连接到另一端进程的管道时，SIGPIPE信号会被发送到该进程。</td>
</tr>
<tr>
<td>**SIGTERM **</td>
<td>终结信号。 KILL -15 |KILL</td>
</tr>
<tr>
<td><strong>SIGUSR1</strong><br><strong>SIGUSR2</strong></td>
<td>用户自定义信号</td>
</tr>
<tr>
<td><strong>SIGWINCH</strong></td>
<td>终端窗口大小已变化</td>
</tr>
<tr>
<td><strong>SIGHUP</strong></td>
<td>在控制终端上检测到挂起或控制进程的终止。</td>
</tr>
</tbody>
</table>
<p>Reference：[signal-wikipedia](</p>
<h2 id="信号函数">信号函数</h2>
<p>Python的信号库中也有很多常用的函数</p>
<h3 id="signalalarmtime">signal.alarm(time)</h3>
<p>创建一个 <code>SIGALRM</code> 类型的信号，time为预定的时间，设置为0时取消先前设置的定时器</p>
<h3 id="signalpause"><strong>signal.pause()</strong></h3>
<p>可以使代码逻辑处理过程睡眠，直到收到信号，然后调用对应的handler。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">signal</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">do_exit</span><span class="p">(</span><span class="n">sig</span><span class="p">,</span> <span class="n">stack</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">raise</span> <span class="ne">SystemExit</span><span class="p">(</span><span class="s1">&#39;Exiting&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">signal</span><span class="o">.</span><span class="n">SIG_IGN</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGUSR1</span><span class="p">,</span> <span class="n">do_exit</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;My PID:&#39;</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">signal</span><span class="o">.</span><span class="n">pause</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在执行时，忽略了ctrl + c的信号，对USR1做退出操作</p>
<h3 id="signalsetitimerwhich-seconds-interval"><strong>signal.setitimer(which, seconds, interval)</strong></h3>
<p>which： <code>signal.ITIMER_REAL，</code><a href="https://docs.python.org/2/library/signal.html?highlight=signal#signal.ITIMER_VIRTUAL"><code>signal.ITIMER_VIRTUAL</code></a> 或 <code>signal.ITIMER_PROF</code></p>
<p>seconds：多少秒后触发which。seconds设置为0可以清除which的计时器。</p>
<p>interval：每隔interval秒后触发一次</p>
<h3 id="osgetpid">os.getpid()</h3>
<p>获得当前执行程序的pid</p>
<h2 id="windows下信号的使用">Windows下信号的使用</h2>
<p>在Linux中，可以通过任何可接受的信号枚举值作为信号函数的参数。在Windows中，<code>SIGABRT</code>, <code>SIGFPE</code>, <code>SIGINT</code>, <code>SIGILL</code>, <code>SIGSEGV</code>, <code>SIGTERM</code>, <code>SIGBREAK</code>。</p>
<h2 id="当signal-handling需要参数怎么办">当signal handling需要参数怎么办</h2>
<p>在一些时候，signal handling的操作需要对应主进程传递进来一些函数，而在整个项目中执行过程中的变量与 signal handling不处于一个作用域中，而<code>signal.signal()</code> 不能传递其他的参数，这个时候可以使用 <code>partial</code> 创建一个闭包来解决这个问题。</p>
<p>例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">signal</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">partial</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">这里signal frame默认参数需要放到最后
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">signal_handler</span><span class="p">(</span><span class="n">test_parameter1</span><span class="p">,</span> <span class="n">test_parameter2</span><span class="p">,</span> <span class="n">signal_num</span><span class="p">,</span> <span class="n">frame</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="s2">&#34;signal </span><span class="si">{}</span><span class="s2"> exit. </span><span class="si">{}</span><span class="s2"> </span><span class="si">{}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">signal_num</span><span class="p">,</span> <span class="n">test_parameter1</span><span class="p">,</span> <span class="n">test_parameter2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">a</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span><span class="o">=</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">partial</span><span class="p">(</span><span class="n">signal_handler</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s1">&#39;My PID:&#39;</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">signal</span><span class="o">.</span><span class="n">pause</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="忽略信号">忽略信号</h2>
<p>signal定义了忽略接收信号的方法。为了实现信号的处理，需要使用<code>signal.signal()</code> 将默认的信号与<code>signal.SIG_IGN</code> 注册，即可忽略对应的信号中断，<code>kill -9</code> 不可忽略 。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">signal</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">receiveSignal</span><span class="p">(</span><span class="n">signalNumber</span><span class="p">,</span> <span class="n">frame</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Received:&#39;</span><span class="p">,</span> <span class="n">signalNumber</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">raise</span> <span class="ne">SystemExit</span><span class="p">(</span><span class="s1">&#39;Exiting&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># register the signal to be caught</span>
</span></span><span class="line"><span class="cl">    <span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGUSR1</span><span class="p">,</span> <span class="n">receiveSignal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># register the signal to be ignored</span>
</span></span><span class="line"><span class="cl">    <span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">signal</span><span class="o">.</span><span class="n">SIG_IGN</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># output current process id</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;My PID is:&#39;</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">signal</span><span class="o">.</span><span class="n">pause</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="常用的信号">常用的信号</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">signal</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">sys</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">readConfiguration</span><span class="p">(</span><span class="n">signalNumber</span><span class="p">,</span> <span class="n">frame</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="p">(</span><span class="s1">&#39;(SIGHUP) reading configuration&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">terminateProcess</span><span class="p">(</span><span class="n">signalNumber</span><span class="p">,</span> <span class="n">frame</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="p">(</span><span class="s1">&#39;(SIGTERM) terminating the process&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">receiveSignal</span><span class="p">(</span><span class="n">signalNumber</span><span class="p">,</span> <span class="n">frame</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Received:&#39;</span><span class="p">,</span> <span class="n">signalNumber</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGHUP</span><span class="p">,</span> <span class="n">readConfiguration</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">receiveSignal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGQUIT</span><span class="p">,</span> <span class="n">receiveSignal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGILL</span><span class="p">,</span> <span class="n">receiveSignal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGTRAP</span><span class="p">,</span> <span class="n">receiveSignal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGABRT</span><span class="p">,</span> <span class="n">receiveSignal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGBUS</span><span class="p">,</span> <span class="n">receiveSignal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGFPE</span><span class="p">,</span> <span class="n">receiveSignal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#signal.signal(signal.SIGKILL, receiveSignal)</span>
</span></span><span class="line"><span class="cl">    <span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGUSR1</span><span class="p">,</span> <span class="n">receiveSignal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGSEGV</span><span class="p">,</span> <span class="n">receiveSignal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGUSR2</span><span class="p">,</span> <span class="n">receiveSignal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGPIPE</span><span class="p">,</span> <span class="n">receiveSignal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGALRM</span><span class="p">,</span> <span class="n">receiveSignal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGTERM</span><span class="p">,</span> <span class="n">terminateProcess</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>macos python安装mysqlapi集合</title>
      <link>https://www.oomkill.com/2021/04/mac-mysqlapi/</link>
      <pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/04/mac-mysqlapi/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>记录一下，接了一个python2 django1.x的项目，很老了导致很多扩展无法安装</p>
<p>os version：macos catalina
python version: 2.7.18</p>
<p>而django后端使用sqllite以外需要对应客户端引擎，而安装时编译依赖C客户端即实际mysql组件。</p>
<blockquote>
<p>使用的数据库后端。 内建的数据库后端有：</p>
<p>&lsquo;django.db.backends.postgresql&rsquo;
&lsquo;django.db.backends.mysql&rsquo;
&lsquo;django.db.backends.sqlite3&rsquo;
&lsquo;django.db.backends.oracle&rsquo;</p>
</blockquote>
<p>并且修改配置实例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">DATABASES = {
</span></span><span class="line"><span class="cl">    &#39;default&#39;: {
</span></span><span class="line"><span class="cl">        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,
</span></span><span class="line"><span class="cl">        &#39;USER&#39;: &#39;mydatabaseuser&#39;,
</span></span><span class="line"><span class="cl">        &#39;NAME&#39;: &#39;mydatabase&#39;,
</span></span><span class="line"><span class="cl">        &#39;TEST&#39;: {
</span></span><span class="line"><span class="cl">            &#39;NAME&#39;: &#39;mytestdatabase&#39;,
</span></span><span class="line"><span class="cl">        },
</span></span><span class="line"><span class="cl">    },
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>brew unlink mysql</p>
<h3 id="error-command-gcc-failed-with-exit-status-1">error: command &lsquo;gcc&rsquo; failed with exit status 1</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">  creating build/temp.macosx-10.9-x86_64-2.7
</span></span><span class="line"><span class="cl">  gcc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -g -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -Dversion_info=(1,2,5,&#39;final&#39;,1) -D__version__=1.2.5 -I/usr/local/Cellar/mysql@5.7/5.7.32/include/mysql -I/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c _mysql.c -o build/temp.macosx-10.9-x86_64-2.7/_mysql.o
</span></span><span class="line"><span class="cl">  gcc -bundle -undefined dynamic_lookup -arch x86_64 -g build/temp.macosx-10.9-x86_64-2.7/_mysql.o -L/usr/local/Cellar/mysql@5.7/5.7.32/lib -lmysqlclient -lssl -lcrypto -o build/lib.macosx-10.9-x86_64-2.7/_mysql.so
</span></span><span class="line"><span class="cl">  ld: library not found for -lssl
</span></span><span class="line"><span class="cl">  clang: error: linker command failed with exit code 1 (use -v to see invocation)
</span></span><span class="line"><span class="cl">  error: command &#39;gcc&#39; failed with exit status 1
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Required for mysqlclient, see brew info openssl
</span></span><span class="line"><span class="cl">echo &#39;export PATH=&#34;/usr/local/opt/openssl/bin:$PATH&#34;&#39; &gt;&gt; ~/.bash_profile
</span></span><span class="line"><span class="cl">export LDFLAGS=&#34;-L/usr/local/opt/openssl/lib&#34;
</span></span><span class="line"><span class="cl">export CPPFLAGS=&#34;-I/usr/local/opt/openssl/include&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">pip install MySQL-python
</span></span></code></pre></td></tr></table>
</div>
</div><p>Reference：<a href="https://stackoverflow.com/questions/49025594/osx-ld-library-not-found-for-lssl">not-found-for-lssl</a></p>
<p>windows安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">pip install mysqlclient-1.3.12-cp36-cp36m-win_amd64.whl
</span></span></code></pre></td></tr></table>
</div>
</div><p>Reference <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p>
<p>ubuntu安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">apt-get install libmysqld-dev
</span></span><span class="line"><span class="cl">pip install MySQL-python
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="my_configh-file-not-found">my_config.h file not found</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">creating build/temp.macosx-10.9-x86_64-2.7
</span></span><span class="line"><span class="cl">    gcc -fno-strict-aliasing -fno-common -dynamic -arch x86_64 -g -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -Dversion_info=(1,2,5,&#39;final&#39;,1) -D__version__=1.2.5 -I/usr/local/Cellar/mysql/8.0.23_1/include/mysql -I/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c _mysql.c -o build/temp.macosx-10.9-x86_64-2.7/_mysql.o
</span></span><span class="line"><span class="cl">    _mysql.c:44:10: fatal error: &#39;my_config.h&#39; file not found
</span></span><span class="line"><span class="cl">    #include &#34;my_config.h&#34;
</span></span><span class="line"><span class="cl">             ^~~~~~~~~~~~~
</span></span><span class="line"><span class="cl">    1 error generated.
</span></span><span class="line"><span class="cl">    error: command &#39;gcc&#39; failed with exit status 1
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决：网上找了很多版本均无法解决，最后发现实际上与linux处理思路是一样的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">brew install mysql # 可以加版本 如 brew install mysq@5.7
</span></span><span class="line"><span class="cl">brew unlink mysql
</span></span><span class="line"><span class="cl">brew install mysql-connector-c  # 这个是客户端
</span></span><span class="line"><span class="cl">ln -snvf /usr/local/Cellar/mysql\@5.7/5.7.32/bin/mysql_config  /usr/local/bin/ # 做个软连接，位置可能不一致
</span></span><span class="line"><span class="cl">sed -i -e &#39;s/libs=&#34;$libs -l &#34;/libs=&#34;$libs -lmysqlclient -lssl -lcrypto&#34;/g&#39; /usr/local/bin/mysql_config
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">pip install MySQL-python
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="sh-mysql_config-command-not-found">sh: mysql_config: command not found</h3>
<p><code>sh: mysql_config: command not found</code> 这个与上面类似，可以看到也是在PATH中找mysql_config</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
