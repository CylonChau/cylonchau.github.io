<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>docker on Cylon&#39;s Collection</title>
    <link>https://www.oomkill.com/tags/docker/</link>
    <description>Recent content in docker on Cylon&#39;s Collection</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 01 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.oomkill.com/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用docker管理谷歌物件仓库gcr上的镜像</title>
      <link>https://www.oomkill.com/2024/06/docker-push-gcr/</link>
      <pubDate>Sat, 01 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2024/06/docker-push-gcr/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="创建服务账户">创建服务账户</h2>
<p>首先可以到「 IAM管理 -&gt; 服务帐户」新增帐户。在新增完成后，会得到一把 key，将它下载后请妥善保管，因为所有相关的身份认证都会用到，这个 key 在下载后就无法继续下载了。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/cylonchau/imgbed/img/image-20240602000041487.png" alt="image-20240602000041487"  /></p>
<h2 id="授权">授权</h2>
<p>接着到「IAM -&gt; 新增」成员，并且选择角色，这里选择「Cloud Storage -&gt; 储存空间物件检视者」，让此帐户具备有 read（读取） storage 的功能。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/cylonchau/imgbed/img/image-20240602000120347.png" alt="image-20240602000120347"  /></p>
<h2 id="登录">登录</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat KEY-FILE <span class="p">|</span> docker login -u KEY-TYPE --password-stdin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	https://LOCATION-docker.pkg.dev
</span></span></code></pre></td></tr></table>
</div>
</div><p>GCP 的 KEY-TYPE 通为 <code>json_key</code>，但这里包含两种类型 <code>_json_key</code> 和 <code>_json_key_base64</code></p>
<p>KEY-FILE 就是下载的 Service account key 的文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat KEY-FILE <span class="p">|</span> docker login -u _json_key --password-stdin <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	https://LOCATION-docker.pkg.dev
</span></span></code></pre></td></tr></table>
</div>
</div><p>通常 Service account key 文件内容如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">{<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">&#34;type&#34;: </span><span class="s2">&#34;service_account&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">&#34;project_id&#34;: </span><span class="s2">&#34;project2024-0101&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">&#34;private_key_id&#34;: </span><span class="s2">&#34;bdfsd612779509406bb8452c3ek12d730ed547e722d&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">&#34;private_key&#34;: </span><span class="s2">&#34;-----BEGIN PRIVATE KEY----....-----END PRIVATE KEY-----\n&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">&#34;client_email&#34;: </span><span class="s2">&#34;gcr@project2024-0101.iam.gserviceaccount.com&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">&#34;client_id&#34;: </span><span class="s2">&#34;206651723512339084907274&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">&#34;auth_uri&#34;: </span><span class="s2">&#34;https://accounts.google.com/o/oauth2/auth&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">&#34;token_uri&#34;: </span><span class="s2">&#34;https://oauth2.googleapis.com/token&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">&#34;auth_provider_x509_cert_url&#34;: </span><span class="s2">&#34;https://www.googleapis.com/oauth2/v1/certs&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">&#34;client_x509_cert_url&#34;: </span><span class="s2">&#34;https://www.googleapis.com/robot/v1/metadata/x509/manager-image%40project2024-0101.iam.gserviceaccount.com&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">&#34;universe_domain&#34;: </span><span class="s2">&#34;googleapis.com&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>}<span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>Docker中的多进程管理 s6-overlay</title>
      <link>https://www.oomkill.com/2023/05/multi-process-management/</link>
      <pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/05/multi-process-management/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="什么是容器中的多进程管理">什么是容器中的多进程管理</h2>
<p>在容器中的主进程 (<em><strong>main running process</strong></em>) 是指 Dockerfile中 <code>ENTRYPOINT</code> 或 <code>CMD</code> 指定运行的命令，通常情况下一个进程（服务）为一个容器；也存在一种场景，就是主进程会fork多个子进程，例如nginx，不过这种多进程通常为nginx主进程进行管理。而一些场景下，我们的业务本身就需要多个启用独立的多个进程。</p>
<p>在Docker官方提到了在容器中运行多个服务的方式，官方提出，应该避免这种情况</p>
<blockquote>
<p>but to get the most benefit out of Docker, avoid one container being responsible for multiple aspects of your overall application.</p>
</blockquote>
<p>但也给出了如何管理多进程的一种思路，</p>
<ul>
<li>Use a wrapper script</li>
<li>Use Bash job controls</li>
<li>Use a process manager</li>
</ul>
<p>下面就通过官方给出的这三种方式阐述容器中的多进程管理</p>
<h2 id="use-a-wrapper-script">Use a wrapper script</h2>
<p>对于使用脚本来管理多进程来说，本质上是可以实现多进程的启动，但是你没法去监控(管理)多个进程的运行时，例如 Nginx + PHP 模式， PHP或nginx全部挂掉，只要脚本还在运行，那么这个容器的生命周期还是处于Running</p>
<h2 id="use-bash-job-controls">Use Bash job controls</h2>
<p>这种模式是利用了Bash的后台模式进行短暂的切换进程，但有些镜像不提供Bash这时应该怎么办</p>
<h2 id="use-a-process-manager">Use a process manager</h2>
<p>进程管理器，通常情况下大家想到的就是顶顶大名的 supervisor 和 systemd，但这两个程序运行的环境十分苛刻，例如 supervisor 是Python开发的程序，运行需要依赖 Python；而 systemd 的运行条件更为苛刻，例如需要额外运行dbus-damon进行注册到dbus总线之上，这种进程管理器可能运行的进程比我们要管理的进程都要多。在这种场景下，有一个部署简单，配置简单，无依赖的轻量级容器多进程管理器 <a href="https://github.com/just-containers/s6-overlay">s6-overlay</a></p>
<h2 id="s6-overlay">s6-overlay</h2>
<p>s6-overlay 一组脚本，只需要简单解压就可以使现有的 Docker 镜像通过将 s6 用作容器的 pid 1 和服务的来管理多个进程。</p>
<p>s6-overlay 包含两个组件，<code>s6-overlay-noarch.tar.xz</code> 与 <code>s6-overlay-x86_64.tar.xz</code></p>
<ul>
<li>noarch 包含了一些脚本，是s6运行的所必须有的一个组件，他包含了 /init 作为 pid 为1 的进程</li>
<li>x86 是作为 x86系统下运行 s6 所需要的 所有二进制文件</li>
</ul>
<h2 id="编写服务启动脚本">编写服务启动脚本</h2>
<p>需要在 /etc/s6-overlay/s6-rc.d/ 与 /etc/services.d/ 中配置你要启动的app，例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">/etc/services.d/nginx/run
</span></span></code></pre></td></tr></table>
</div>
</div><p>run则代表启动的命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="cp">#!/command/execlineb -P
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>nginx -g <span class="s2">&#34;daemon off;&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>除上述提到的内容外，还需一个 type 来指明 启动的模式</p>
<ul>
<li><em><strong>longrun</strong></em> 运行为daemon模式被s6进行管理</li>
<li><em><strong>oneshot</strong></em> 类似一个脚本，但通过s6-rc进行管理，类似于初始化任务</li>
</ul>
<p>所以你需要在 <code>/etc/s6-overlay/s6-rc.d/myapp/type</code> 中定义其 <code>type</code> 文件，这个文件内填写这两种类型的文字即可</p>
<p>到这里完成了一个基本的进程的配置，例如还有 <code>finish</code> 脚本，当在失败时执行的</p>
<h2 id="s6-init-的阶段">S6 init 的阶段</h2>
<p>s6官方对init阶段省略了用户不需要关心的一个阶段后，为 3 个阶段</p>
<ul>
<li>初始化阶段 (<em>initialization</em>)，这里是内核启动的第一个用户态进程，该阶段作为init唯一的持久进程</li>
<li>巡航阶段 (<em>cruising</em>)，这个阶段init负责启动与维护其他进程，比如运行s6系列，init 的职责是清除孤儿进程并监督进程，同时允许管理员添加或删除服务，例如上面的 <code>longrun</code> 与 <code>oneshot</code> 类的服务，都是在这个阶段被启动</li>
<li>关闭阶段 (<em>shutdown</em>)，在此阶段结束时，所有进程都将被终止
<ul>
<li>发送 TERM 信号 到遗留的 <code>longrun</code> 服务，如果需要将等待结束后退出</li>
<li>有序的关闭用户 s6-rc</li>
<li>运行 finalization 脚本</li>
<li>向进程发送 <code>TERM</code> signal，最终不会留下任何的进程</li>
<li>sleep一阵，允许驻留的进程退出完</li>
<li>发送 KILL 信号，退出所有进程，这时容器退出</li>
</ul>
</li>
</ul>
<h2 id="s6的安装">S6的安装</h2>
<p>S6的安装很简单，步骤只需要如下几步：</p>
<ul>
<li>只需要下载对应的两个tar包</li>
<li>将 <code>init</code> 作为pid为1的进程</li>
<li>准备 installiation阶段 和 finalization 阶段的脚本 复制到对应路径内就可以正常启动了</li>
</ul>
<blockquote>
<p>finalization 通常使用场景为：当你的程序在退出时存在一些特定的结束命令的场景，官方给出的通常是用于进程结束后的清理动作</p>
</blockquote>
<blockquote>
<p>Note that in general, finish scripts should only be used for local cleanups after a daemon dies. If a service is so important that the container needs to stop when it dies, we really recommend running it as the CMD.</p>
</blockquote>
<p>下面是一个完整的使用了 s6 的多进程容器的 Dockerfile</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-docker" data-lang="docker"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> nginx:1.20 AS runner</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /uranus</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ARG</span> <span class="nv">S6_OVERLAY_VERSION</span><span class="o">=</span><span class="m">3</span>.1.5.0<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ADD</span> https://github.com/just-containers/s6-overlay/releases/download/v<span class="si">${</span><span class="nv">S6_OVERLAY_VERSION</span><span class="si">}</span>/s6-overlay-noarch.tar.xz /tmp<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ADD</span> https://github.com/just-containers/s6-overlay/releases/download/v<span class="si">${</span><span class="nv">S6_OVERLAY_VERSION</span><span class="si">}</span>/s6-overlay-x86_64.tar.xz /tmp<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt update <span class="o">&amp;&amp;</span> apt install xz-utils procps iproute2 -y <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    tar -Jxpf /tmp/s6-overlay-x86_64.tar.xz -C / <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    tar -Jxpf /tmp/s6-overlay-noarch.tar.xz -C / <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    rm -f /tmp/s6-overlay-x86_64.tar.xz <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    rm -f /tmp/s6-overlay-noarch.tar.xz<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENTRYPOINT</span> <span class="p">[</span><span class="s2">&#34;/init&#34;</span><span class="p">]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> mkdir /etc/services.d/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>builder /uranus/_output/firewalld-gateway ./bin/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>builder /uranus/firewalld-gateway.toml .<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>builder /uranus/dist /var/run/nginx/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>builder /uranus/uranus.nginx.conf /etc/nginx/conf.d/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>builder /uranus/s6/ /etc/s6-overlay/s6-rc.d/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>builder /uranus/s6/ /etc/services.d/<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> PATH <span class="s2">&#34;</span><span class="nv">$PATH</span><span class="s2">:/uranus/bin&#34;</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span>  firewalld-gateway --sql-driver<span class="o">=</span>sqlite --migration <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     rm -f /etc/nginx/conf.d/default.conf <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     <span class="nb">echo</span> <span class="s2">&#34;longrun&#34;</span> &gt; /etc/s6-overlay/s6-rc.d/nginx/type <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     <span class="nb">echo</span> <span class="s2">&#34;longrun&#34;</span> &gt; /etc/s6-overlay/s6-rc.d/uranus/type <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     mkdir -pv /etc/s6-overlay/s6-rc.d/uranus/contents.d <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>     mkdir -pv /etc/s6-overlay/s6-rc.d/nginx/contents.d<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="c">#CMD [ &#34; /command/s6-svscan&#34;, &#34;/etc/services.d&#34; ]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">VOLUME</span> <span class="p">[</span><span class="s2">&#34;/uranus&#34;</span> <span class="p">]</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">EXPOSE</span><span class="s"> 2953/tcp</span><span class="err">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在容器中进程内可以看出对应进程图  s6init 作为所有进程的父进程管理着supervise，之后管理者你需要管理的进程；如果进程异常，他会不断地拉起对应的进程，当然，如果是启动参数错误问题，那么永远不会被拉起，当然容器是出于 Running，这时就需要自行做服务检测</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ pstree
</span></span><span class="line"><span class="cl">s6-svscan-+-s6-supervise---s6-linux-init-s
</span></span><span class="line"><span class="cl">          |-s6-supervise---s6-ipcserverd
</span></span><span class="line"><span class="cl">          |-3*[s6-supervise]
</span></span><span class="line"><span class="cl">          |-s6-supervise---firewalld-gatew---5*[{firewalld-gatew}]
</span></span><span class="line"><span class="cl">          `-s6-supervise---nginx---4*[nginx]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ ps -ef
</span></span><span class="line"><span class="cl">UID        PID  PPID  C STIME TTY          TIME CMD
</span></span><span class="line"><span class="cl">root         1     0  0 May18 ?        00:00:00 /package/admin/s6/command/s6-svscan -d4 -- /run/service
</span></span><span class="line"><span class="cl">root        16     1  0 May18 ?        00:00:00 s6-supervise s6-linux-init-shutdownd
</span></span><span class="line"><span class="cl">root        18    16  0 May18 ?        00:00:00 /package/admin/s6-linux-init/command/s6-linux-init-shutdownd -c /run/s6/basedir -g 3000 -C -B
</span></span><span class="line"><span class="cl">root        25     1  0 May18 ?        00:00:00 s6-supervise s6rc-oneshot-runner
</span></span><span class="line"><span class="cl">root        26     1  0 May18 ?        00:00:00 s6-supervise s6rc-fdholder
</span></span><span class="line"><span class="cl">root        27     1  0 May18 ?        00:00:00 s6-supervise uranus
</span></span><span class="line"><span class="cl">root        28     1  0 May18 ?        00:00:00 s6-supervise nginx
</span></span><span class="line"><span class="cl">root        34    25  0 May18 ?        00:00:00 /package/admin/s6/command/s6-ipcserverd -1 -- /package/admin/s6/command/s6-ipcserver-access -v0 -E -l0 -i data/rules -- /package/admin/s6/command/s6-sudod -t 30000 -- /package/admin/s6-rc/command/s6-rc-oneshot-run -l .
</span></span><span class="line"><span class="cl">root        69     1  0 May18 ?        00:00:00 s6-supervise uranus
</span></span><span class="line"><span class="cl">root        70     1  0 May18 ?        00:00:00 s6-supervise nginx
</span></span><span class="line"><span class="cl">root        71    69  1 May18 ?        00:36:40 /uranus/bin/firewalld-gateway -v 5 --sql-driver=sqlite --config=/uranus/firewalld-gateway.toml
</span></span><span class="line"><span class="cl">root        72    70  0 May18 ?        00:00:00 nginx: master process nginx -g daemon off;
</span></span><span class="line"><span class="cl">nginx       74    72  0 May18 ?        00:00:00 nginx: worker process
</span></span><span class="line"><span class="cl">nginx       75    72  0 May18 ?        00:00:00 nginx: worker process
</span></span><span class="line"><span class="cl">nginx       76    72  0 May18 ?        00:00:00 nginx: worker process
</span></span><span class="line"><span class="cl">nginx       77    72  0 May18 ?        00:00:00 nginx: worker process
</span></span><span class="line"><span class="cl">root        83     0  1 04:17 pts/0    00:00:00 bash
</span></span><span class="line"><span class="cl">root        90    83  0 04:18 pts/0    00:00:00 ps -ef
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="reference"><strong>Reference</strong></h2>
<p><a href="https://skarnet.org/software/s6/s6-svscan-1.html">How to run s6-svscan as process 1</a></p>
<p><a href="https://github.com/just-containers/s6-overlay">Usage</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>alpine安装网络工具</title>
      <link>https://www.oomkill.com/2023/03/alpine-network-tools/</link>
      <pubDate>Wed, 22 Mar 2023 23:00:36 +0800</pubDate>
      
      <guid>https://www.oomkill.com/2023/03/alpine-network-tools/</guid>
      <description></description>
      <content:encoded><![CDATA[<ul>
<li>telnet：<code>busybox-extras</code></li>
<li>net-tools: <code>net-tools</code></li>
<li>tcpdump: <code>tcpdump</code></li>
<li>wget: <code>wget</code></li>
<li>dig nslookup: <code>bind-tools</code></li>
<li>curl: <code>curl</code></li>
<li>nmap: <code>nmap</code></li>
<li>wget ifconfig nc traceroute.. : <code>busybox</code></li>
<li>ssh: <code>openssh-client</code></li>
<li>ss iptables: <code>iproute2</code></li>
<li>ethtool: <code>ethtool</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="l">FROM  alpine</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">MAINTAINER  </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">RUN sed -i &#39;s@http://dl-cdn.alpinelinux.org/@https://mirrors.aliyun.com/@g&#39; /etc/apk/repositories</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">RUN apk add --no-cache --virtual .persistent-deps \</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="l">curl \</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="l">tcpdump \</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="l">iproute2 \</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="l">bind-tools \</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="l">ethtool \</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="l">busybox-extras \</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="l">libressl \</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="l">openssh-client \</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">		</span><span class="l">busybox</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">CMD  [ &#34;tail&#34;, &#34;-f&#34; ]</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>windows下Docker Desktop安装管理</title>
      <link>https://www.oomkill.com/2020/10/windows10-install-docker/</link>
      <pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2020/10/windows10-install-docker/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="检查要求">检查要求</h2>
<ul>
<li>Windows 10 企业版、专业版或教育版  （必须windows10 1903版本以上）版本号 <code>18362.1049+</code> 或 <code>18363.1049+</code> ，次版本＃大于.<code>1049</code>。最好是最新版（新版windows可以hype-v wsl2 vmvare共存，但安卓模拟器目前还没稳定的共存版本）。建议使用wsl2，安装包容量会比起hype-v小很多 。</li>
<li>Windows开启wsl2，建议 Windows 10 2004（版本号不低于 19041.264），可wsl2与vmvare共存。</li>
<li>CPU 支持并开启虚拟化（<code>Intel  VT-c</code> 或  <code>AMD SVM</code>）。</li>
<li>最少 4 GB 内存。</li>
</ul>
<p>对于专业版、企业版、教育版可以使用docker desktop wsl2模式，此处无需开启<code>Hype-v</code></p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20210703212825867.png" alt="image-20210703212825867"  /></p>
<p>对于Win10 家庭版，Win10 19041.264之前版本，及 Win7 8用户，可以使用docker desktop <code>Hype-v</code> 后端。</p>
<h2 id="修改安装盘">修改安装盘</h2>
<p>Docker Desktop 默认安装到 <code>C:\Program Files\Docker</code> 并不可更改，这样很不友好，可以通过软连接的方式改变Docker Desktop 默认安装盘。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">mklink /J &#34;C:\Program Files\Docker&#34; &#34;D:\Program Files\Docker&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="限制wsl2运行最大内存">限制wsl2运行最大内存</h2>
<p>WSL 是 Microsoft 提供的一项功能，可以使开发人员能够直接在 Windows 上运行 <code>GNU/Linux</code> 环境，无需修改，无需传统虚拟机或双引导设置，减少了开发人员的使用复杂度</p>
<p>在 Docker Desktop 使用了 WSL 2 中的动态内存分配特性，极大地提高了资源消耗。这意味着，Docker Desktop 仅使用其所需的 CPU 和内存资源量，同时使 CPU 和内存密集型任务（例如构建容器）运行得更快。</p>
<p>但WSL2目前一个弊端，可能WSL2 vm会分配所有可用内存，并最终导致操作系统和其他应用程序的内存不足。</p>
<p>
  <img loading="lazy" src="https://miro.medium.com/max/700/1*GWlTOqcj4XeW4NO8_-OufA.png" alt="img"  /></p>
<p>所以需要对WLS2内存和CPU资源进行限制，在 <code>cmd</code> 或 <code>powshell</code> 终端中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">wsl --shutdown
</span></span><span class="line"><span class="cl">notepad &#34;$env:USERPROFILE/.wslconfig&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><p>在用户目录创建一个文件<code>.wslconfig</code>  ，编辑 <code>.wslconfig</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[wsl2]
</span></span><span class="line"><span class="cl">memory=3GB   # 限制wsl2的虚拟机最大内存
</span></span><span class="line"><span class="cl">processors=4  # 限制wsl2使用的处理器数量
</span></span><span class="line"><span class="cl">swap=0      # 不使用交换文件
</span></span></code></pre></td></tr></table>
</div>
</div><p>
  <img loading="lazy" src="https://miro.medium.com/max/700/1*Vv1RjqzQ5V7M2FzPQxdAkQ.png" alt="img"  /></p>
<h3 id="安装docker-desktop">安装Docker Desktop</h3>
<p>完成上面的操作，可以安装Docker Desktop了。从<a href="https://www.docker.com/products/docker-desktop">Docker Desktop</a>网站下载安装Docker Desktop for Windows，大于500M。</p>
<p>安装步骤基本上点击操作即可，没有什么难度</p>
<h2 id="镜像路径迁移">镜像路径迁移</h2>
<p>当使用了WSL2作为Docker Desktop后端引擎时，<code>WSL 2 Docker-Desktop-Data</code> 的VM磁盘镜像通常在 <code>%USERPROFILE%\AppData\Local\Docker\wsl\data\ext4.vhdx</code> 路径下，docker-desktop通常在<code>%LOCALAPPDATA%/Docker/wsl</code> 路径下，因为镜像的大小及一些交换文件，通常会占用大量C盘空间，可以改变其存储位置。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">wsl --list -v
</span></span></code></pre></td></tr></table>
</div>
</div><p>输入上述命令可以看到如下内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">  NAME                STATE          VERSION
</span></span><span class="line"><span class="cl">* docker-desktop         Stopped         2
</span></span><span class="line"><span class="cl">  docker-desktop-data      Stopped         2
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>docker-desktop</code> 替换了之前使用的 Hyper-V VM 实现 Docker Desktop。这处理容器的引导和管理。</p>
<p><code>docker-desktop-data</code> 是存储docker镜像和配置的地方；实际上是对 Hyper-V 以前使用的虚拟硬盘的直接替换。</p>
<p>从这里可以看出Docker Desktop使用了WSL2作为后端引擎时，实际上整个应用作为WLS2的两个子系统进行的。可以通过迁移WSL2系统镜像的存储位置来改变Docker霸占C盘不可转移的弊端。</p>
<p>导出wsl系统镜像</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">wsl --export docker-desktop docker-desktop.tar
</span></span><span class="line"><span class="cl">wsl --export docker-desktop-data docker-desktop-data.tar
</span></span></code></pre></td></tr></table>
</div>
</div><p>删除Docker Desktop wsl子系统，此操作会自动删除 <code>ext4.vhdx</code> 文件，故需要先导出一份备份</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">wsl --unregister docker-desktop
</span></span><span class="line"><span class="cl">wsl --unregister docker-desktop-data
</span></span></code></pre></td></tr></table>
</div>
</div><p>导入重新创建wsl Docker Desktop子系统</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">wsl --import docker-desktop d:\{new_path} docker-desktop.tar
</span></span><span class="line"><span class="cl">wsl --import docker-desktop-data d:\{new_path} docker-desktop-data.tar
</span></span></code></pre></td></tr></table>
</div>
</div><p>完成后，启动Docker服务，如果服务正常，可以删除掉 <code>docker-desktop.tar</code> 与 <code>docker-desktop-data.tar</code></p>
<h2 id="无法启动">无法启动</h2>
<p>我在使用windows时，会安装冰点还原，因为windows10 以上需要 冰点还原 8.38以上，我这里使用 8.38.020.4676 版本时，在开启还原状态时，Docker无法正常启动，在关闭还原时，可以正常启动。更换 8.62.020.5630。后正常。 8.38.020.4676 是2017年的版本，当时Docker对windows兼容并不好，而8.38.020.4676 是2020年发行的版本，目前在使用中并未发现异常。 8.38.020.4676 与 8.62.020.5630为网上常见的纯净的破解版了，所以按需选择使用。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>docker Registry使用</title>
      <link>https://www.oomkill.com/2018/06/docker-registry/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2018/06/docker-registry/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="docker-registry介绍">docker registry介绍</h2>
<p>Registry用于保存docker镜像，包括镜像的层次结构和元数据，用户可自建<code>Registry</code>，也可使用官方的<code>Docker Hub</code></p>
<p>分类</p>
<ul>
<li>Sponsor Registry：第三方的registry，供客户和Docker社区使用</li>
<li>Mirror Registry：第三方的registry，只让客户使用</li>
<li>Vendor Registry：由发布Docker镜像的供应商提供的registry</li>
<li>Private Registry：通过设有防火墙和额外的安全层的私有实体提供的registry</li>
</ul>
<p>一个docker Registry上拥有两种功能：</p>
<ol>
<li>提供镜像存储的仓库。</li>
<li>提供用户获取镜像时的认证功能。</li>
<li>同时提供当前服务器上所有可用镜像的搜索索引。</li>
</ol>
<p>一个docker镜像仓库有仓库的名称，等同于yum的repostory。通常简称为repo。为了使的镜像和应用程序版本之间有意义上的关联关系。在docker一个仓库通常只存放一个应用程序的镜像。因此，这个仓库名就是应用程序名。通过给每个镜像额外添加一个组件叫<font color="#f8070d" size=3><code>tag</code></font>，来标识每一个镜像。通常镜像名称:标签<font color="#f8070d" size=3><code>repo_name:tag</code></font>才能唯一标识一个镜像。</p>
<p>为了可以快速创建registry，docker专门提供了一个程序包 <font color="#f8070d" size=3><code>docker-distribution</code></font> 。https://hub.docker.com/r/distribution/registry/ regustry自身运行在容器中，而容器的文件系统会随着容器生命周期终止而删除，因此需要给registry定义存储卷，使用网络存储。</p>
<p> 在yum的extras仓库有一个<font color="#f8070d" size=3><code>docker-registry</code></font>的程序包。docker-distribution的主配置文件在 <font color="#f8070d" size=3><code>/etc/docker-distribution/registry/config.yml</code></font>，所有上传的镜像存放在<font color="#f8070d" size=3><code>/var/lib/registry</code></font> 。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ yum info docker-registry
</span></span><span class="line"><span class="cl">Available Packages
</span></span><span class="line"><span class="cl">Name        : docker-registry
</span></span><span class="line"><span class="cl">Arch        : x86_64
</span></span><span class="line"><span class="cl">Version     : 0.9.1
</span></span><span class="line"><span class="cl">Release     : 7.el7
</span></span><span class="line"><span class="cl">Size        : <span class="m">123</span> k
</span></span><span class="line"><span class="cl">Repo        : extras/7/x86_64
</span></span><span class="line"><span class="cl">Summary     : Registry server <span class="k">for</span> Docker
</span></span><span class="line"><span class="cl">URL         : https://github.com/docker/docker-registry
</span></span><span class="line"><span class="cl">License     : ASL 2.0
</span></span><span class="line"><span class="cl">Description : Registry server <span class="k">for</span> Docker <span class="o">(</span>hosting/delivering of repositories and images<span class="o">)</span>.
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="配置docker-registry访问">配置docker registry访问</h3>
<p>非 <code>docker hub</code> 必须给定registry的<font color="#f8070d" size=2><code>地址</code></font><font color="#f8070d" size=2><code>端口</code></font>，如果不是顶层仓库还要给定<font color="#f8070d" size=2><code>用户名</code></font>。
<font color="#f8070d" size=3><code>docker push</code></font> 默认基于https工作的，而服务器端使用的http，两者不兼容，需要标记为非加密、非安全的<font color="#f8070d" size=3><code>docker registry</code></font>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ docker push node02.com:5000/php
</span></span><span class="line"><span class="cl">The push refers to repository <span class="o">[</span>node02.com:5000/php<span class="o">]</span>
</span></span><span class="line"><span class="cl">Get https://node02.com:5000/v2/: http: server gave HTTP response to HTTPS client
</span></span></code></pre></td></tr></table>
</div>
</div><p>编辑 <font color="#f8070d" size=3><code>/etc/docker/daemon.json</code></font> 添加 <font color="#f8070d" size=3><code>insecure-registries</code></font> ，并且名称一定要与仓库引用时使用的名称完全保持一致，多个以逗号分隔</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;insecure-registries&#34;</span>: <span class="o">[</span><span class="s2">&#34;node02.com:5000&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>push的镜像存放在 <font color="#f8070d" size=3><code>/var/lib/registry/</code></font> 下，V2指的是registry的协议版本</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ ll /var/lib/registry/docker/registry/v2/
</span></span><span class="line"><span class="cl">total <span class="m">0</span>
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">3</span> root root <span class="m">20</span> Aug <span class="m">28</span> 23:31 blobs
</span></span><span class="line"><span class="cl">drwxr-xr-x <span class="m">3</span> root root <span class="m">17</span> Aug <span class="m">28</span> 23:31 repositories
</span></span></code></pre></td></tr></table>
</div>
</div><p>push时镜像会分层次，每一层都单独推送，单独存放。产生的镜像层次存放在 <font color="#f8070d" size=3><code>php/_layers/sha256/</code></font> ，真正存放的路径为 <font color="#f8070d" size=3><code>/var/lib/registry/docker/registry/v2/blobs</code></font> 下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ ll /var/lib/registry/docker/registry/v2/repositories/php/_layers/sha256/
</span></span><span class="line"><span class="cl">total <span class="m">0</span>
</span></span><span class="line"><span class="cl">13bb1aa790b2a283bdeb26a9dd4afa0891e37252dd6f836e2bc8e1555903f7fd
</span></span><span class="line"><span class="cl">256b176beaff7815db2a93ee2071621ae88f451bb1e198ca73010ed5bba79b65
</span></span><span class="line"><span class="cl">3584183957db768fc11554dfd6b06ec41be02d7872cecb65aa5ba9f238c897e6
</span></span><span class="line"><span class="cl">499f1709b835427d28bc4ddb1e7038a438f1a1272abfe5489d6c74cb69b51bec
</span></span><span class="line"><span class="cl">6d33f059b806836d7e63f6f26f154b99a42abcc1d384da7569de593b8135f7fb
</span></span><span class="line"><span class="cl">8158b516b87541f3641937087e8048977f48f9ced0bfaeb0bc007c1ea0d49b93
</span></span><span class="line"><span class="cl">8fa12d754b796a48f42433fae8a8eee24b56679bba4e5648fa50b184622dd941
</span></span><span class="line"><span class="cl">ca82288118de1328f65d428e6d2acc6a87ecf552ed5cc3698fde90cf76f3ebdb
</span></span><span class="line"><span class="cl">d393fc3ffa9b40bfbddd978604e0d5249b0bb1a6e4953142d8b2c80fcc85bcb4
</span></span><span class="line"><span class="cl">d9f1ee7bf8cab99a7362c98708edd26c2f622f13b8c74c3cafd6197442c20609
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过api获取中镜像与标签</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ curl http://192.168.50.27:5000/v2/game/tags/list
</span></span><span class="line"><span class="cl">{&#34;name&#34;:&#34;game&#34;,&#34;tags&#34;:[&#34;0123-151422&#34;,&#34;0124-162847&#34;,&#34;0124-164112&#34;,&#34;0125&#34;]}
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看仓库中内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ curl -XGET http://192.168.50.27:5000/v2/_catalog
</span></span><span class="line"><span class="cl">{&#34;repositories&#34;:[&#34;apiv1&#34;,&#34;game&#34;,&#34;php&#34;,&#34;tyapi&#34;]}
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>docker Volume</title>
      <link>https://www.oomkill.com/2018/06/docker-volume/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2018/06/docker-volume/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>对于docker来讲，作为容器运行的底层引擎，在组织及运行容器时每个容器内只运行一个程序及子程序。对于这个容器来讲，启动时依赖于
底层镜像联合挂载启动而成。
底层能够存储此类分层构建并联合挂载镜像的文件系统。最上层构建读写层。对于此读写层来说。所有对容器的操作都保存在最上层之上。而下层内容的操作需要使用写时复制。</p>
<p>Docker镜像由多个只读层叠加而成，启动容器时，Docker会加载只读镜像层并在镜像栈顶部添加一个读写层，如果运行中的容器修改了现有的一个已经存在的文件，那该文件将会从读写层下面的只读层复制到读写层，该文件的只读版本仍然存在，只是已经被读写层中该文件的副本所隐藏，此即 <font style="background:#ffff00;" size=3>写时复制（COW）</font>机制。此机制对IO较高的应用在实现持久化存储时，势必对在底层应用数据存储时性能要求较高。要想绕过使用限制，可以使用存储卷机制。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025233608002.png" alt="image-20221025233608002"  /></p>
<p>Why Data Volume？</p>
<p>宿主机的主机文件系统直接与容器内部的文件系统之上的某一访问路径建立绑定关系。</p>
<p>在宿主机上目录和容器内文件系统建立绑定关系的目录相对于容器来讲被称为<font color="#f8070d" size=3><code>volume</code></font>。容器内所有有效数据都是保存在存储卷，从而脱离容器自身文件系统。当容器关闭并删除时，只要不删除与宿主机与之绑定的存储目录，就能实现数据脱离容器的生命周期而持久化。docker的存储卷默认情况下使用其所在宿主机之上的本地文件系统目录的。</p>
<ol>
<li>关闭并重启容器，其数据不受影响；但删除Docker容器，则其更改将会全部丢失</li>
<li>存在的问题</li>
<li>存储于联合文件系统中，不易于宿主机访问；</li>
<li>容器间数据共享不便</li>
<li>删除容器其数据会丢失
解决方案：“卷（volume）”
“卷”是容器上的一个或多个“目录”，此类目录可绕过联合文件系统，与宿主机上的某目录“绑定（关联）”</li>
</ol>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025233624954.png" alt="image-20221025233624954"  /></p>
<p>在docker中如果需要动刀存储卷时，不必要手动创建，Volume于容器初始化之时即会创建，由base image提供的卷中的数据会于此期间完成复制</p>
<p>Volume的初衷是独立于容器的生命周期实现数据持久化，因此删除容器之时既不会删除卷，也不会对哪怕未被引用的卷做垃圾回收操作；</p>
<p>Data volumes
·卷为docker提供了独立于容器的数据管理机制
·可以把“镜像”想像成静态文件，例如“程序”，把卷类比为动态内容，例如“数据
&ldquo;；于是，镜像可以重用，而卷可以共享；
·卷实现了“程序（镜像）”和“数据（卷）”分离，以及“程序（镜像）”和“制作镜像的主机
&ldquo;分离，用户制作镜像时无须再考虑镜像运行的容器所在的主机的环境；</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025233642310.png" alt="image-20221025233642310"  /></p>
<p>Docker有两种类型的卷，每种类型都在容器中存在一个挂载点，但其在宿主机上的位置有所不同；</p>
<p>Bind mount volume 绑定挂载卷
在宿主机指定一个特定路径，在容器内指定一个特定路径，二者已知路径建立关联关系。</p>
<p>a volume that points to a user-specified location on the host file system</p>
<h3 id="docker-managed-volume-docker管理卷">Docker-managed volume docker管理卷</h3>
<p>指定容器内的挂载点，与之关联的是宿主机的目录由<code>docker daemon</code>引擎自行创建空目录，或者使用已存在目录与存储卷路径建立关联关系。</p>
<p>the Docker daemon creates managed volumes in a portion of the host&rsquo;s file system that&rsquo;s owned by Docker</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221025233706235.png" alt="image-20221025233706235"  /></p>
<h3 id="在容器中使用volumes">在容器中使用Volumes</h3>
<p>为docker run命令使用一v选项即可使用Volume</p>
<p>Docker-managed volume</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker run-it-name box1 -v /data busybox
</span></span><span class="line"><span class="cl">docker inspect-f <span class="o">{{</span>.Mounts<span class="o">}</span> box1
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看bbox1容器的卷、卷标识符及挂载的主机目录
Bind-mount Volume</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker run-it-v HOSTDIR:VOLUMEDIR--name box2 busybox
</span></span><span class="line"><span class="cl">docker inspect-f <span class="o">{{</span>.Mounts<span class="o">}}</span> box2
</span></span></code></pre></td></tr></table>
</div>
</div><p>Sharing volumes There are two ways to share volumes between containers
多个容器的卷使用同一个主机目录，例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run-it--namec1-v/docker/volumes/v1：/data busybox
</span></span><span class="line"><span class="cl">$ docker run-it--name c2-v/docker/volumes/v1：/data busybox
</span></span></code></pre></td></tr></table>
</div>
</div><p>复制使用其它容器的卷，为docker run命令使用&ndash;volumes-from选项</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker run-it--name box1 -v /docker/volumes/v1:/data busybox
</span></span><span class="line"><span class="cl">docker run-it--name box2 --volumes-from box1 busybox
</span></span></code></pre></td></tr></table>
</div>
</div><p>EXPOSE
用于为容器打开指定要监听的端口以实现与外部通信，并不会直接暴露，只是声明需要暴露的端口，在<code>docker run -P</code>时自动暴露端口</p>
<p>Syntax</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">EXPOSE &lt;port&gt; <span class="o">[</span>/&lt;protocol&gt;<span class="o">]</span> <span class="o">[</span>&lt;port&gt;<span class="o">[</span>/&lt;protocol&gt;<span class="o">]</span>..<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><protocol> 用于指定传输层协议，可为wp或udp二者之一，默认为TCP协议
EXPOSE指令可一次指定多个端口，例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">EXPOSE 11211/udp 11211/tcp
</span></span></code></pre></td></tr></table>
</div>
</div><p>ENV
用于为镜像定义所需的环境变量，并可被Dockerfile文件中位于其后的其它指令（如ENV、ADD、COPY等）所调用</p>
<p>调用格式为Svariable_name或${variable_name}</p>
<h3 id="syntax">Syntax</h3>
<ul>
<li>ENV <code>&lt;key&gt;</code> <code>&lt;value&gt;</code>或</li>
<li>ENV <code>&lt;key&gt;</code>=<code>&lt;value&gt;</code> .…</li>
</ul>
<p>第一种格式中，<key>之后的所有内容均会被视作其 <code>&lt;value&gt;</code> 的组成部分，因此，一次只能设置一个变量；</p>
<p>第二种格式可用一次设置多个变量，每个变量为一个 <code>&lt;key&gt;=&lt;value&gt;</code> 的键值对，如果
<code>&lt;value&gt;</code> 中包含空格，可以以反斜线（）进行转义，也可通过对 <code>&lt;value&gt;</code> 加引号进行标识；另外，反斜线也可用于续行；</p>
<p>定义多个变量时，建议使用第二种方式，以便在同一层中完成所有功能</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>docker-compose使用</title>
      <link>https://www.oomkill.com/2018/06/docker-compose/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2018/06/docker-compose/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>Compose是一个定义和管理多容器的工具，使用Python语言编写。使用Compose配置文件描述多个容器应用的架构，比如使用
什么镜像、数据卷、网络、映射端口等；然后一条命令管理所有服务，比如启动、停止、重启等。</p>
<h2 id="1linux安装compose">1、Linux安装Compose</h2>
<p>参考网址：<a href="https://github.com/docker/compose/releases">Releases · docker/compose · GitHub</a></p>
<ol>
<li>下载二进制文件</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -L <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>https://github.com/docker/compose/releases/download/1.22.0/docker-compose-<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span><span class="sb">`</span>uname -s<span class="sb">`</span>-<span class="sb">`</span>uname -m<span class="sb">`</span> -o /usr/local/bin/docker-compose
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>对二进制文件添加可执行权限</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">chmod +x /usr/local/bin/docker-compose
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>测试安装</li>
</ol>
<p>docker-compose &ndash;version</p>
<p>也可以使用pip工具安装：pip install docker-compose</p>
<h2 id="2使用compose">2、使用compose</h2>
<p>参考文档：<a href="https://docs.docker.com/compose/">Docker Compose | Docker Documentation</a></p>
<p>compose语法详解：<a href="https://docs.docker.com/compose/compose-file/#reference-and-guidelines">Compose file version 3 reference | Docker Documentation</a>
<a href="https://blog.csdn.net/guyue35/article/details/53891825">Docker compose file 中文参考文档 - CSDN博客</a></p>
<h3 id="21-compose常用命令选项">2.1 Compose常用命令选项</h3>
<table>
<thead>
<tr>
<th>参数</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td>build</td>
<td>构建或修改Dockerfile后重建服务</td>
</tr>
<tr>
<td>config</td>
<td>验证和查看compose文件语法<br> <code>-q</code>,只验证配置，不输出。 当配置正确时，不输出任何内容，当文件配置错误，输出错误信息。<br><code>--services</code>,打印服务名，一行一个</td>
</tr>
<tr>
<td>create</td>
<td></td>
</tr>
<tr>
<td>down</td>
<td>停止和删除容器、网络、卷、镜像，这些内容是通过docker-compose up命令创建的.  默认值删除 容器 网络。</td>
</tr>
<tr>
<td>logs</td>
<td>打印compose service日志输出。</td>
</tr>
<tr>
<td>ps</td>
<td>打印compose进程，-q只打印pid</td>
</tr>
</tbody>
</table>
<p>更多参数参考：<a href="https://blog.csdn.net/wanghailong041/article/details/52162293">Docker-compose命令详解 - CSDN博客</a></p>
<h3 id="22-compose创建tomcat环境">2.2 compose创建tomcat环境</h3>
<blockquote>
<p><strong>Dockerfile</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">FROM centos
</span></span><span class="line"><span class="cl">MAINTAINER lc
</span></span><span class="line"><span class="cl">ADD jdk-8u144-linux-x64.tar.gz /usr/local
</span></span><span class="line"><span class="cl">ENV <span class="nv">JAVA_HOME</span><span class="o">=</span>/usr/local/jdk1.8.0_144
</span></span><span class="line"><span class="cl">ADD apache-tomcat-8.5.32.tar.gz /usr/local/
</span></span><span class="line"><span class="cl">RUN mv /usr/local/apache-tomcat-8.5.32 /usr/local/tomcat
</span></span><span class="line"><span class="cl">WORKDIR /usr/local/tomcat
</span></span><span class="line"><span class="cl">ENTRYPOINT <span class="o">[</span><span class="s2">&#34;bin/catalina.sh&#34;</span>,<span class="s2">&#34;run&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">EXPOSE <span class="m">8080</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>compose</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">version: <span class="s2">&#34;3&#34;</span>
</span></span><span class="line"><span class="cl">services: 
</span></span><span class="line"><span class="cl">  web:
</span></span><span class="line"><span class="cl">    build:
</span></span><span class="line"><span class="cl">      context: .
</span></span><span class="line"><span class="cl">      dockerfile: <span class="s2">&#34;javafile&#34;</span>
</span></span><span class="line"><span class="cl">    ports:
</span></span><span class="line"><span class="cl">      - <span class="s2">&#34;80:8080&#34;</span>
</span></span><span class="line"><span class="cl">    image: <span class="s2">&#34;tomcat&#34;</span>
</span></span><span class="line"><span class="cl">    container_name: <span class="s2">&#34;tomcat&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>验证是否</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker-compose ps
</span></span><span class="line"><span class="cl">   Name            Command         State            Ports         
</span></span><span class="line"><span class="cl">------------------------------------------------------------------
</span></span><span class="line"><span class="cl">root_web_1   bin/catalina.sh run   Up      0.0.0.0:32768-&gt;8080/tcp
</span></span><span class="line"><span class="cl">$ 
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="23-docker-compose语法描述">2.3 docker compose语法描述</h3>
<table>
<thead>
<tr>
<th>关键词</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>version</td>
<td>compose版本</td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    
    <item>
      <title>docker-compose示例</title>
      <link>https://www.oomkill.com/2018/06/docker-compose-example/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2018/06/docker-compose-example/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="使用docker-compose构建lnmp环境">使用docker-compose构建LNMP环境。</h2>
<h3 id="编写dockerfile">编写Dockerfile</h3>
<p>这里采用的是先将nginx php打包为rpm包，然后做成镜像。与直接在容器里编译安装同理的。</p>
<blockquote>
<p><strong>nginx Dockerfile</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">FROM centos
</span></span><span class="line"><span class="cl">MAINTAINER lc
</span></span><span class="line"><span class="cl">RUN yum install -y gcc gcc-c++ openssl-devel make pcre-devel
</span></span><span class="line"><span class="cl">ADD nginx-1.13.9-1.el7.centos.x86_64.rpm /tmp/
</span></span><span class="line"><span class="cl">RUN <span class="nb">cd</span> /tmp/ <span class="o">&amp;&amp;</span> rpm -ivh nginx-1.13.9-1.el7.centos.x86_64.rpm
</span></span><span class="line"><span class="cl">ADD nginx.conf /etc/nginx/
</span></span><span class="line"><span class="cl">EXPOSE <span class="m">80</span>
</span></span><span class="line"><span class="cl">CMD <span class="o">[</span><span class="s2">&#34;/usr/sbin/nginx&#34;</span>, <span class="s2">&#34;-g&#34;</span>, <span class="s2">&#34;daemon off;&#34;</span><span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>php Dockerfile</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">FROM centos
</span></span><span class="line"><span class="cl">MAINTAINER LC
</span></span><span class="line"><span class="cl">RUN curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo
</span></span><span class="line"><span class="cl">RUN curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
</span></span><span class="line"><span class="cl">RUN yum install zlib-devel <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libxml2-devel <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libjpeg-devel <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libjpeg-turbo-devel <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    freetype-devel <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libpng-devel gd-devel <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    curl-devel <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libxslt-devel <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    bzip2-devel <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    gmp-devel <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    readline-devel <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    mcrypt <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    mhash <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    openssl-devel <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    libmcrypt-devel -y
</span></span><span class="line"><span class="cl">COPY php-7.1.17-1.el7.centos.x86_64.rpm /tmp/
</span></span><span class="line"><span class="cl">COPY libiconv-1.15-1.el7.centos.x86_64.rpm /tmp/
</span></span><span class="line"><span class="cl">RUN rpm -ivh /tmp/libiconv-1.15-1.el7.centos.x86_64.rpm
</span></span><span class="line"><span class="cl">RUN rpm -ivh /tmp/php-7.1.17-1.el7.centos.x86_64.rpm
</span></span><span class="line"><span class="cl">ADD php-fpm.conf /etc/php/
</span></span><span class="line"><span class="cl">CMD /usr/sbin/php-fpm <span class="o">&amp;&amp;</span> tail -f /dev/null
</span></span><span class="line"><span class="cl">EXPOSE <span class="m">9000</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="准备构建容器的配置文件">准备构建容器的配置文件</h3>
<blockquote>
<p><strong>在nginx配置文件中增加解析php的语句</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">location</span> <span class="p">~</span> <span class="sr">.*\.(php|php5)$</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kn">fastcgi_pass</span>  <span class="n">php.com</span><span class="p">:</span><span class="mi">9000</span><span class="p">;</span><span class="kn">$&lt;--这里使用link将php的ip解析过来</span>
</span></span><span class="line"><span class="cl">		<span class="s">fastcgi_index</span> <span class="s">index.php</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="kn">include</span> <span class="s">fastcgi.conf</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>修改php-fpm监听端口为外网通讯的ip</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ sed -i <span class="s2">&#34;s#listen = 127.0.0.1:900</span><span class="nv">$listen</span><span class="s2"> = 0.0.0.0:900</span><span class="nv">$g</span><span class="s2">&#34;</span> php/php-fpm.conf 
</span></span><span class="line"><span class="cl">$ cat php/php-fpm.conf <span class="p">|</span>grep <span class="m">9000</span>
</span></span><span class="line"><span class="cl"><span class="nv">listen</span> <span class="o">=</span> 0.0.0.0:9000
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<p>注：此步骤可以在打包RPM时，使用%post在安装后进行修改，免去构建镜像的步骤</p>
<hr>
<h3 id="准备rpm包">准备RPM包</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ls -1 php
</span></span><span class="line"><span class="cl">libiconv-1.15-1.el7.centos.x86_64.rpm
</span></span><span class="line"><span class="cl">php-7.1.17-1.el7.centos.x86_64.rpm
</span></span><span class="line"><span class="cl">phpfile
</span></span><span class="line"><span class="cl">php-fpm.conf
</span></span><span class="line"><span class="cl">php.ini
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ ls -1 nginx
</span></span><span class="line"><span class="cl">nginx-1.13.9-1.el7.centos.x86_64.rpm
</span></span><span class="line"><span class="cl">nginx.conf
</span></span><span class="line"><span class="cl">nginxfile
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用docker-compose一键构建镜像">使用docker-compose一键构建镜像</h3>
<h4 id="编写docker-composeyaml">编写docker-compose.yaml</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nginx</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostname</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">context</span><span class="p">:</span><span class="w"> </span><span class="l">./nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">dockerfile</span><span class="p">:</span><span class="w"> </span><span class="l">nginxfile</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">expose</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;80&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;80:80&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">links</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">mysql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">php:php.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./wwwroot:/usr/share/nginx/html/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">php</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostname</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;php&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">context</span><span class="p">:</span><span class="w"> </span><span class="l">./php</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">dockerfile</span><span class="p">:</span><span class="w"> </span><span class="l">phpfile</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;9000:9000&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">links</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">mysql:mysql-db</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./wwwroot:/usr/share/nginx/html/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mysql</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">mysql:5.6</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostname</span><span class="p">:</span><span class="w"> </span><span class="l">mysql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;3306:3306&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">MYSQL_ROOT_PASSWORD</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Zhang@123&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">MYSQL_USER</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;test&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">MYSQL_PASSWORD</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;test@123&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>参考文档： <a href="https://hub.docker.com/_/mysql/">https://hub.docker.com/_/mysql/</a></p>
<h4 id="检查docker-compose-yaml语法">检查docker-compose-yaml语法</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker-compose config
</span></span><span class="line"><span class="cl">services:
</span></span><span class="line"><span class="cl">  mysql:
</span></span><span class="line"><span class="cl">    environment:
</span></span><span class="line"><span class="cl">      MYSQL_PASSWORD: test@123
</span></span><span class="line"><span class="cl">      MYSQL_ROOT_PASSWORD: Zhang@123
</span></span><span class="line"><span class="cl">      MYSQL_USER: <span class="nb">test</span>
</span></span><span class="line"><span class="cl">    hostname: mysql
</span></span><span class="line"><span class="cl">    image: mysql:5.6
</span></span><span class="line"><span class="cl">    ports:
</span></span><span class="line"><span class="cl">......
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<p><strong><font color=#f8070d; size=2>注：在语法正确时，打印docker-compose.yaml内容，语法出错直接报问题所在位置。</font></strong></p>
<hr>
<h4 id="一键构建所有镜像">一键构建所有镜像</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker-compose build
</span></span><span class="line"><span class="cl">mysql uses an image, skipping
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Building php
</span></span><span class="line"><span class="cl">Step 1/12 : FROM centos
</span></span><span class="line"><span class="cl"> ---&gt; 5182e96772bf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">.....
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Step 12/12 : EXPOSE <span class="m">9000</span>
</span></span><span class="line"><span class="cl"> ---&gt; Running in 3c5f3c46124c
</span></span><span class="line"><span class="cl">Removing intermediate container 3c5f3c46124c
</span></span><span class="line"><span class="cl"> ---&gt; 8791ad17224d
</span></span><span class="line"><span class="cl">Successfully built 8791ad17224d
</span></span><span class="line"><span class="cl">Successfully tagged lnmp_php:latest
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Building nginx
</span></span><span class="line"><span class="cl">Step : FROM centos
</span></span><span class="line"><span class="cl"> ---&gt; 5182e96772bf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">.....
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Step 8/8 : CMD <span class="o">[</span><span class="s2">&#34;/usr/sbin/nginx&#34;</span>, <span class="s2">&#34;-g&#34;</span>, <span class="s2">&#34;daemon off;&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl"> ---&gt; Using cache
</span></span><span class="line"><span class="cl"> ---&gt; 8cca531a5c21
</span></span><span class="line"><span class="cl">Successfully built 8cca531a5c21
</span></span><span class="line"><span class="cl">Successfully tagged lnmp_nginx:latest
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="管理编排容器">管理编排容器</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker-compose up -d
</span></span><span class="line"><span class="cl">docker-compose down
</span></span><span class="line"><span class="cl">docker-compose ps 
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看运行结果</p>
<h2 id="使用docker-compose一键构建tomcat集群">使用docker-compose一键构建tomcat集群</h2>
<h3 id="编写dockerfile-1">编写Dockerfile</h3>
<h4 id="nginx-dockerfile">nginx Dockerfile</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">FROM centos
</span></span><span class="line"><span class="cl">MAINTAINER lc
</span></span><span class="line"><span class="cl">RUN yum install -y gcc gcc-c++ openssl-devel make pcre-devel
</span></span><span class="line"><span class="cl">ADD nginx-1.13.9-1.el7.centos.x86_64.rpm /tmp/
</span></span><span class="line"><span class="cl">RUN <span class="nb">cd</span> /tmp/ <span class="o">&amp;&amp;</span> rpm -ivh nginx-1.13.9-1.el7.centos.x86_64.rpm
</span></span><span class="line"><span class="cl">ADD nginx.conf /etc/nginx/
</span></span><span class="line"><span class="cl">EXPOSE <span class="m">80</span>
</span></span><span class="line"><span class="cl">CMD <span class="o">[</span><span class="s2">&#34;/usr/sbin/nginx&#34;</span>, <span class="s2">&#34;-g&#34;</span>, <span class="s2">&#34;daemon off;&#34;</span><span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="tomcat-dockerfile">tomcat Dockerfile</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">FROM centos
</span></span><span class="line"><span class="cl">MAINTAINER lc
</span></span><span class="line"><span class="cl">ADD apache-tomcat-8.5.29.tar.gz /usr/share/
</span></span><span class="line"><span class="cl">ADD jdk-8u161-linux-x64.tar.gz /usr/share/
</span></span><span class="line"><span class="cl">RUN mv /usr/share/apache-tomcat-8.5.29 /usr/share/tomcat
</span></span><span class="line"><span class="cl">ENV <span class="nv">JAVA_HOME</span><span class="o">=</span>/usr/share/jdk1.8.0_161
</span></span><span class="line"><span class="cl">WORKDIR /usr/share/tomcat
</span></span><span class="line"><span class="cl">ENTRYPOINT <span class="o">[</span><span class="s2">&#34;bin/catalina.sh&#34;</span>,<span class="s2">&#34;run&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">EXPOSE <span class="m">8080</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="准备配置文件">准备配置文件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nginx" data-lang="nginx"><span class="line"><span class="cl"><span class="k">upstream</span> <span class="s">tomcat</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kn">server</span> <span class="n">tomcat01</span><span class="p">:</span><span class="mi">8080</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="kn">server</span> <span class="n">tomcat02</span><span class="p">:</span><span class="mi">8080</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">server</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kn">listen</span> <span class="mi">81</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		     <span class="kn">proxy_pass</span> <span class="s">http://tomcat/</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		     <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$host</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		     <span class="kn">client_max_body_size</span> <span class="mi">10m</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		     <span class="kn">proxy_set_header</span> <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		     <span class="kn">proxy_set_header</span> <span class="s">REMOTE-HOST</span> <span class="nv">$remote_addr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		     <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		 <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 在日志中加入如下配置，来证明访问是负载进行的。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">log_format</span>  <span class="s">access</span>  <span class="s">&#39;&#34;</span><span class="nv">$upstream_addr&#34;</span> <span class="nv">$remote_addr</span> <span class="s">-</span> <span class="nv">$remote_user</span> <span class="s">[</span><span class="nv">$time_local]</span> <span class="s">&#34;</span><span class="nv">$request&#34;</span> <span class="s">&#39;</span>
</span></span><span class="line"><span class="cl">                    <span class="s">&#39;</span><span class="nv">$status</span> <span class="nv">$body_bytes_sent</span> <span class="s">&#34;</span><span class="nv">$http_referer&#34;</span> <span class="s">&#39;</span>
</span></span><span class="line"><span class="cl">										<span class="s">&#39;&#34;</span><span class="nv">$http_user_agent&#34;</span> <span class="s">&#34;</span><span class="nv">$http_x_forwarded_for&#34;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">access_log</span> <span class="s">/data/nginx/log/access.log</span> <span class="s">access</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir ./webapps/ROOT
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> jsp-test &gt;webapps/ROOT/index.jsp
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="准备构建容器所需的软件">准备构建容器所需的软件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">apache-tomcat-8.5.29.tar.gz
</span></span><span class="line"><span class="cl">jdk-8u144-linux-x64.tar.gz
</span></span><span class="line"><span class="cl">tomcatfile
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="编写docker-compose文件">编写docker-compose文件</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nginx</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostname</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">context</span><span class="p">:</span><span class="w"> </span><span class="l">./nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">dockerfile</span><span class="p">:</span><span class="w"> </span><span class="l">nginxfile</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">80</span><span class="p">:</span><span class="m">81</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">links</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">tomcat01:tomcat01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">tomcat02:tomcat02</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./webapps:/usr/share/nginx/html</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">depends_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">mysql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">tomcat01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">tomcat02</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tomcat01</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostname</span><span class="p">:</span><span class="w"> </span><span class="l">tomcat01</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">context</span><span class="p">:</span><span class="w"> </span><span class="l">./tomcat</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">dockerfile</span><span class="p">:</span><span class="w"> </span><span class="l">tomcatfile</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">links</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">mysql:mysql-db</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./webapps:/usr/share/tomcat/webapps/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tomcat02</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostname</span><span class="p">:</span><span class="w"> </span><span class="l">tomcat02</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">build</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">context</span><span class="p">:</span><span class="w"> </span><span class="l">./tomcat</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">dockerfile</span><span class="p">:</span><span class="w"> </span><span class="l">tomcatfile</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">links</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">mysql:mysql-db</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./webapps:/usr/share/tomcat/webapps/</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mysql</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostname</span><span class="p">:</span><span class="w"> </span><span class="l">mysql</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">mysql:5.5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">3306</span><span class="p">:</span><span class="m">3306</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">MYSQL_ROOT_PASSWORD</span><span class="p">:</span><span class="w"> </span><span class="m">123456</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">MYSQL_DATABASE</span><span class="p">:</span><span class="w"> </span><span class="l">wordpress</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">MYSQL_USER</span><span class="p">:</span><span class="w"> </span><span class="l">user</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">MYSQL_PASSWORD</span><span class="p">:</span><span class="w"> </span><span class="m">123456</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="使用docker-compose一键构建镜像-1">使用docker-compose一键构建镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker-compose -f docker-compose.yml build 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mysql uses an image, skipping
</span></span><span class="line"><span class="cl">Building tomcat02
</span></span><span class="line"><span class="cl">Step : FROM centos
</span></span><span class="line"><span class="cl"> ---&gt; 5182e96772bf
</span></span><span class="line"><span class="cl">Step 2/9 : MAINTAINER lc
</span></span><span class="line"><span class="cl"> ---&gt; Using cache
</span></span><span class="line"><span class="cl"> ---&gt; 111890e6d42e
</span></span><span class="line"><span class="cl">Step 3/9 : ADD apache-tomcat-8.5.29.tar.gz /usr/share/
</span></span><span class="line"><span class="cl"> ---&gt; 46725ed86e2e
</span></span><span class="line"><span class="cl">Step 4/9 : ADD jdk-8u144-linux-x64.tar.gz /usr/share/
</span></span><span class="line"><span class="cl"> ---&gt; 431ea9bb9918
</span></span><span class="line"><span class="cl">Step 5/9 : RUN mv /usr/share/apache-tomcat-8.5.29 /usr/share/tomcat
</span></span><span class="line"><span class="cl"> ---&gt; Running in 22275e028633
</span></span><span class="line"><span class="cl">Removing intermediate container 22275e028633
</span></span><span class="line"><span class="cl"> ---&gt; 0f3919e97b50
</span></span><span class="line"><span class="cl">Step 6/9 : ENV <span class="nv">JAVA_HOME</span><span class="o">=</span>/usr/share/jdk1.8.0_144
</span></span><span class="line"><span class="cl"> ---&gt; Running in 60d616e0b9fc
</span></span><span class="line"><span class="cl">Removing intermediate container 60d616e0b9fc
</span></span><span class="line"><span class="cl"> ---&gt; 5255488c51ab
</span></span><span class="line"><span class="cl">Step 7/9 : WORKDIR /usr/share/tomcat
</span></span><span class="line"><span class="cl"> ---&gt; Running in 6b04d8f5524b
</span></span><span class="line"><span class="cl">Removing intermediate container 6b04d8f5524b
</span></span><span class="line"><span class="cl"> ---&gt; db88a81ec00a
</span></span><span class="line"><span class="cl">Step 8/9 : ENTRYPOINT <span class="o">[</span><span class="s2">&#34;bin/catalina.sh&#34;</span>,<span class="s2">&#34;run&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl"> ---&gt; Running in 189b6ee0ff4e
</span></span><span class="line"><span class="cl">Removing intermediate container 189b6ee0ff4e
</span></span><span class="line"><span class="cl"> ---&gt; 9b444829ed55
</span></span><span class="line"><span class="cl">Step 9/9 : EXPOSE <span class="m">8080</span>
</span></span><span class="line"><span class="cl"> ---&gt; Running in f2115bf03afb
</span></span><span class="line"><span class="cl">Removing intermediate container f2115bf03afb
</span></span><span class="line"><span class="cl"> ---&gt; 31c01ca93305
</span></span><span class="line"><span class="cl">Successfully built 31c01ca93305
</span></span><span class="line"><span class="cl">Successfully tagged lnmp_tomcat02:latest
</span></span><span class="line"><span class="cl">Building tomcat01
</span></span><span class="line"><span class="cl">Step : FROM centos
</span></span><span class="line"><span class="cl"> ---&gt; 5182e96772bf
</span></span><span class="line"><span class="cl">Step 2/9 : MAINTAINER lc
</span></span><span class="line"><span class="cl"> ---&gt; Using cache
</span></span><span class="line"><span class="cl"> ---&gt; 111890e6d42e
</span></span><span class="line"><span class="cl">Step 3/9 : ADD apache-tomcat-8.5.29.tar.gz /usr/share/
</span></span><span class="line"><span class="cl"> ---&gt; Using cache
</span></span><span class="line"><span class="cl"> ---&gt; 46725ed86e2e
</span></span><span class="line"><span class="cl">Step 4/9 : ADD jdk-8u144-linux-x64.tar.gz /usr/share/
</span></span><span class="line"><span class="cl"> ---&gt; Using cache
</span></span><span class="line"><span class="cl"> ---&gt; 431ea9bb9918
</span></span><span class="line"><span class="cl">Step 5/9 : RUN mv /usr/share/apache-tomcat-8.5.29 /usr/share/tomcat
</span></span><span class="line"><span class="cl"> ---&gt; Using cache
</span></span><span class="line"><span class="cl"> ---&gt; 0f3919e97b50
</span></span><span class="line"><span class="cl">Step 6/9 : ENV <span class="nv">JAVA_HOME</span><span class="o">=</span>/usr/share/jdk1.8.0_144
</span></span><span class="line"><span class="cl"> ---&gt; Using cache
</span></span><span class="line"><span class="cl"> ---&gt; 5255488c51ab
</span></span><span class="line"><span class="cl">Step 7/9 : WORKDIR /usr/share/tomcat
</span></span><span class="line"><span class="cl"> ---&gt; Using cache
</span></span><span class="line"><span class="cl"> ---&gt; db88a81ec00a
</span></span><span class="line"><span class="cl">Step 8/9 : ENTRYPOINT <span class="o">[</span><span class="s2">&#34;bin/catalina.sh&#34;</span>,<span class="s2">&#34;run&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl"> ---&gt; Using cache
</span></span><span class="line"><span class="cl"> ---&gt; 9b444829ed55
</span></span><span class="line"><span class="cl">Step 9/9 : EXPOSE <span class="m">8080</span>
</span></span><span class="line"><span class="cl"> ---&gt; Using cache
</span></span><span class="line"><span class="cl"> ---&gt; 31c01ca93305
</span></span><span class="line"><span class="cl">Successfully built 31c01ca93305
</span></span><span class="line"><span class="cl">Successfully tagged lnmp_tomcat01:latest
</span></span><span class="line"><span class="cl">Building nginx
</span></span><span class="line"><span class="cl">Step : FROM centos
</span></span><span class="line"><span class="cl"> ---&gt; 5182e96772bf
</span></span><span class="line"><span class="cl">Step 2/8 : MAINTAINER lc
</span></span><span class="line"><span class="cl"> ---&gt; Using cache
</span></span><span class="line"><span class="cl"> ---&gt; 111890e6d42e
</span></span><span class="line"><span class="cl">Step 3/8 : RUN yum install -y gcc gcc-c++ openssl-devel make pcre-devel
</span></span><span class="line"><span class="cl"> ---&gt; Using cache
</span></span><span class="line"><span class="cl"> ---&gt; 36090d81ef5e
</span></span><span class="line"><span class="cl">Step 4/8 : ADD nginx-1.13.9-1.el7.centos.x86_64.rpm /tmp/
</span></span><span class="line"><span class="cl"> ---&gt; Using cache
</span></span><span class="line"><span class="cl"> ---&gt; cecd606c7619
</span></span><span class="line"><span class="cl">Step 5/8 : RUN <span class="nb">cd</span> /tmp/ <span class="o">&amp;&amp;</span> rpm -ivh nginx-1.13.9-1.el7.centos.x86_64.rpm
</span></span><span class="line"><span class="cl"> ---&gt; Using cache
</span></span><span class="line"><span class="cl"> ---&gt; 8c7b331fc175
</span></span><span class="line"><span class="cl">Step 6/8 : ADD nginx.conf /etc/nginx/
</span></span><span class="line"><span class="cl"> ---&gt; 84940ae84e06
</span></span><span class="line"><span class="cl">Step 7/8 : EXPOSE <span class="m">80</span>
</span></span><span class="line"><span class="cl"> ---&gt; Running in 94ac22711605
</span></span><span class="line"><span class="cl">Removing intermediate container 94ac22711605
</span></span><span class="line"><span class="cl"> ---&gt; ef10799c0844
</span></span><span class="line"><span class="cl">Step 8/8 : CMD <span class="o">[</span><span class="s2">&#34;/usr/sbin/nginx&#34;</span>, <span class="s2">&#34;-g&#34;</span>, <span class="s2">&#34;daemon off;&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl"> ---&gt; Running in 039ea9de17f0
</span></span><span class="line"><span class="cl">Removing intermediate container 039ea9de17f0
</span></span><span class="line"><span class="cl"> ---&gt; d489d87223f8
</span></span><span class="line"><span class="cl">Successfully built d489d87223f8
</span></span><span class="line"><span class="cl">Successfully tagged lnmp_nginx:latest
</span></span></code></pre></td></tr></table>
</div>
</div><p>测试访问结果</p>
<p></p>
<p>查看nginx访问日志，发现是负载到每一台tomcat上的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="s2">&#34;172.24.0.5:8080&#34;</span> 10.0.0.1 - - <span class="o">[</span>12/Aug/2018:17:52:39 +0000<span class="o">]</span> <span class="s2">&#34;GET /index.jsp HTTP/1.1&#34;</span> <span class="m">200</span> <span class="m">9</span> <span class="s2">&#34;-&#34;</span> <span class="s2">&#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.Safari/537.36&#34;</span> <span class="s2">&#34;-&#34;</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;172.24.0.4:8080&#34;</span> 10.0.0.1 - - <span class="o">[</span>12/Aug/2018:17:52:40 +0000<span class="o">]</span> <span class="s2">&#34;GET /index.jsp HTTP/1.1&#34;</span> <span class="m">200</span> <span class="m">9</span> <span class="s2">&#34;-&#34;</span> <span class="s2">&#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.Safari/537.36&#34;</span> <span class="s2">&#34;-&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>Dockerfile使用示例</title>
      <link>https://www.oomkill.com/2018/06/dockerfile/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2018/06/dockerfile/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="一使用前提">一、使用前提</h2>
<p>通用镜像未必与应用程序和配置是符合我们需要的。</p>
<h3 id="11-常见镜像制作方式">1.1 常见镜像制作方式</h3>
<p>常见制作镜像方式有两种</p>
<ul>
<li>基于容器</li>
<li>基于镜像制作：编辑一个Dockerfile，而后根据此文件制作；</li>
</ul>
<h2 id="二dockerfile概述">二、Dockerfile概述</h2>
<p>Dockerfile只是构建Docker镜像的源代码，docker可以通过读取Dockerfile中的指令自动构建图像。Dockerfile是一个文本文档，其中包含用户可以在命令行上调用以组合图像的所有命令。用户可以使用 <font color="#f8070d" size=3><code>docker build</code></font> 创建连续执行多个命令行指令的自动构建。</p>
<h3 id="21-dockerfile的工作模式">2.1 Dockerfile的工作模式</h3>
<p>基于Dockerfile制作镜像时，需在专用目录放置Dockerfile文件，并且文件首字母必须大写。基于Dockerfile中打包的文件必须奇基于工作目录往下走的路径。在打包镜像时，<font color="#f8070d" size=3><code>.dockeringore</code></font> 文件本身与所有包含在 <font color="#f8070d" size=3><code>.dockeringore</code></font> 文件中的路径，都不被打包进去。在Dockerfile制作环境为底层镜像启动容器时所能够提供的环境。</p>
<h3 id="22-环境变量替换">2.2 环境变量替换</h3>
<p>制作镜像中还可以使用环境变量。环境变量（使用ENV语句声明）也可以在某些指令中使用，因为<code>Dockerfile</code>环境变量在 <code>Dockerfile</code> 中以 <font color="#f8070d" size=3><code>$variable_name</code></font> 或<font color="#f8070d" size=3><code>${variable_name}</code></font>标记。</p>
<p>语法还支持一些标准`bash修饰符</p>
<ul>
<li><font color="#f8070d" size=3><code>${variable:-word}</code></font> 表示如果设置了变量，那么结果将是该值。如果未设置变量，那么word将是结果。</li>
<li><font color="#f8070d" size=3><code>${variable+word}</code></font> 表示如果设置了变量，则word将是结果，否则结果为空字符串。</li>
</ul>
<h2 id="三dockerfile指令说明">三、Dockerfile指令说明</h2>
<hr>
<p><strong><font color="#f8070d" size=3>特别说明：Dockerfile中每一条指令都会生成一个新的镜像层。</font></strong></p>
<hr>
<h3 id="from">FROM</h3>
<p>FROM指令（最重要的一个），<font style="background:#ffff00;" size=2>必须为Dockerfile文件开篇的第一个非注释行</font>，用于为镜像文件构建过程指定基准镜像，后续的指令运行于此基准镜像所提供的运行环境。基准镜像可以是任何可用镜像文件，默认情况下，<code>docker build</code>会在docker主机上查找指定的镜像文件，在其不存在时，则会从 <font color="#f8070d" size=3><code>Docker Hub Registry</code></font> 上拉取所需的镜像文件。如果找不到指定的镜像文件，<code>docker build</code> 会返回一个错误信息</p>
<blockquote>
<p><strong>Syntax</strong>:</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">FROM repository<span class="o">[</span>:tag<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">FROM registry/repository<span class="o">[</span>:tag<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">FROM resository@<span class="o">[</span>digest<span class="o">]</span>  <span class="c1">#←相同名称时，可以使用resository@镜像hush码指定镜像。</span>
</span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th>参数</th>
<th>说明-</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>reposotiry</strong></td>
<td>某一个镜像的仓库，如redis镜像仓库。</td>
</tr>
<tr>
<td><strong>registry</strong></td>
<td>docker镜像仓库，如docker hub，docker registry包含很多reposotiry，如nginx php tomcat等。不指定registry，默认从docker hub下载。</td>
</tr>
<tr>
<td><strong>tag</strong></td>
<td>image的标签，为可选项，省略时默认为latest。</td>
</tr>
</tbody>
</table>
<h3 id="maintanierdepreacted">MAINTANIER(depreacted)</h3>
<p>MAINTANIER（depreacted）用于让Dockerfile制作者提供本人的详细信息。Dockerfile并不限制MAINTAINER指令可在出现的位置，但推荐将其放置于FROM指令之后。</p>
<blockquote>
<p><strong>Syntax</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">MAINTAINER &lt;authtor<span class="err">&#39;</span>s detail&gt;  
</span></span></code></pre></td></tr></table>
</div>
</div><p>&lt;author&rsquo;s detail&gt; 可是任何文本信息，但约定俗成地使用作者名称及邮箱地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">MAINTAINER <span class="s2">&#34;lc &lt;12399.com@gmail.com&gt;&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="lable">LABLE</h3>
<p>LABLE可以提供Key value信息，比MAINTANIER具有更宽泛的使用领域。LABLE让用户提供格式各样的元数据，都是键值格式。如果在LABEL值中包含空格，请使用引号和反斜杠。image可以有多个tag。您可以在一行上指定多个tag。docker17+增加此指令。</p>
<blockquote>
<p><strong>Syntax</strong>:</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">LABEL &lt;key&gt;<span class="o">=</span>&lt;value&gt; &lt;key&gt;<span class="o">=</span>&lt;value&gt; &lt;key&gt;<span class="o">=</span>&lt;value&gt;...
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">LABEL <span class="nv">maintainer</span><span class="o">=</span><span class="s2">&#34;lc &lt;12399.com@gmail.com&gt;&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="copy">COPY</h3>
<p>用于从宿主机工作目录将文件复制至到镜像的文件系统中。</p>
<blockquote>
<p><strong>Syntax</strong>:</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">COPY src...dest
</span></span><span class="line"><span class="cl">COPY <span class="s2">&#34;src&#34;</span>....<span class="s2">&#34;dest&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>src</td>
<td>要复制的源文件或目录，支持使用通配符。</td>
</tr>
<tr>
<td>dest</td>
<td>目标路径，即正在创建的image的文件系统路径；建议为dest使用绝对路径，否则，COPY指定则以WORKDIR为其起始路径。</td>
</tr>
</tbody>
</table>
<hr>
<p>注意：在路径中有空白字符时，通常使用第二种格式。</p>
<hr>
<p>文件复制准则</p>
<ul>
<li><code>src</code> 必须是build上下文中的路径，不能是其父目录中的文件。</li>
<li>如果src是目录，则其内部文件或子目录会被递归复制，但src目录自身不会被复制。 等同于 <font color="#f8070d" size=3><code>cp a/*</code></font>而不是 <font color="#f8070d" size=3><code>cp -r a</code></font></li>
<li>如果指定了多个src，或在src中使用了通配符，则dest必须是一个目录，且必须以<font color="#f8070d" size=3><code>/</code></font>结尾。</li>
<li>如果dest事先不存在，它将会被自动创建，这包括其父目录路径。</li>
</ul>
<h3 id="add">ADD</h3>
<p>ADD指令类似于COPY指令，ADD支持使用TAR文件和URL路径。</p>
<p>add官方解释：<a href="https://docs.docker.com/engine/reference/builder/#add">ADD</a></p>
<p>如果src是以</p>
<blockquote>
<p><strong>Syntax</strong>:</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ADD src dest
</span></span><span class="line"><span class="cl">ADD <span class="o">[</span><span class="s2">&#34;src&#34;</span>…<span class="s2">&#34;dest&#34;</span><span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>操作准则同COPY指令</p>
<ul>
<li>
<p>如果 <code>&lt;src&gt;</code> 为URL且 <code>&lt;dest&gt;</code> 不以 <font color="#f8070d" size=3><code>/</code></font> 结尾，则 <code>&lt;src&gt;</code> 指定的文件将被下载并直接被创建为dest；如果dest以<font color="#f8070d" size=3><code>/</code></font>结尾，则文件名URL指定的文件将被直接下载并保存为 <font color="#f8070d" size=3><code>dest/filename</code></font></p>
</li>
<li>
<p>如果src是一个本地系统上的可识别的压缩格式（identity，gzip，bzip2或xz）的本地 tar存档，则将其解压缩为目录。，其行为类似于 <font color="#f8070d" size=3><code>tar -xf</code></font> 命令；然而，从URL远程网址不会自动解压。</p>
</li>
<li>
<p>如果src有多个，或其间接或直接使用了通配符，则dest必须是一个以 <font color="#f8070d" size=3><code>/</code></font> 结尾的目录路径；如果dest不以 <font color="#f8070d" size=3><code>/</code></font> 结尾，则其被视作一个普通文件，src的内容将被直接写入到dest。</p>
</li>
</ul>
<hr>
<p><font color="#0215cd" size=3>Dockerfile中每一条指令都会生成一个新的镜像层。尽量避免很多指令</font></p>
<hr>
<h3 id="workdir">WORKDIR</h3>
<p>用于为Dockerfile中所有的 <font color="#f8070d" size=3><code>RUN</code></font>、<font color="#f8070d" size=3><code>CMD</code></font>、<font color="#f8070d" size=3><code>ENTRYPOINT</code></font>、<font color="#f8070d" size=3><code>COPY</code></font> 和 <font color="#f8070d" size=3><code>ADD</code></font> 指定设定工作目录</p>
<blockquote>
<p><strong>Syntax</strong>:</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">WORKDIR dirpath  
</span></span></code></pre></td></tr></table>
</div>
</div><p>在Dockerfile文件中，WORKDIR指令可出现多次，其路径也可以为相对路径，不过，其是相对此前一个WORKDR指令指定的路径。另外，WORKDIR也可满用由ENV指定定义的变量</p>
<p>例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">WORKDIR /var/log
</span></span><span class="line"><span class="cl">WORKDIR <span class="nv">$STATEPATH</span>  
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="volume">VOLUME</h3>
<p>用于在image中创建一个挂载点目录，以挂载Docker host上的卷或其它容器上的卷，在Dockerfile中的镜像自动指定VOLUME时，一般只能指定挂载点，不能指定宿主机文件。被称之为docker管理的卷。</p>
<blockquote>
<p><strong>Syntax</strong>:</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">VOLUME mountpoint
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">VOLUME <span class="o">[</span><span class="s2">&#34;mountpoint&#34;</span><span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果挂载点目录路径下此前在文件存在，docker run命令会在卷挂载完成后将此前的所有文件复制到新挂载的卷中。</p>
<h3 id="expose">EXPOSE</h3>
<p>用于为容器打开指定要监听的端口以实现与外部通信，写在文件中的端口暴露并不会直接暴露，当<font color="#f8070d" size=3><code>docker run -P</code></font>时不用声明端口，会自动读取镜像中指定要暴露的端口，动态分配到宿主机端口上。</p>
<blockquote>
<p><strong>Syntax</strong>:</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">EXPOSE port<span class="o">[</span>/protocol<span class="o">]</span> <span class="o">[</span>port<span class="o">[</span>/protocol<span class="o">]</span>  
</span></span></code></pre></td></tr></table>
</div>
</div><p>protocol用于指定传输层协议，可为tcp或udp二者之一，默认为TCP协议。</p>
<p>EXPOSE指令可一次指定多个端口，例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">EXPOSE 11211/udp 11211/tcp  
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="env">ENV</h3>
<p>用于为镜像定义新需的环境变量，并可被Dockerfile文件中位于其后的其它指令（如ENV、ADD、COPY等）所调用格式为 <font color="#f8070d" size=3><code>$variable_name</code></font> 或 <font color="#f8070d" size=3><code>${variable_name}</code></font>。在Dockerfile中所定义的所有环境变量，是可以在启动容器后直接在容器中使用的变量。在运行容器时更改ENV并不会影响<code>docker build</code>的值。</p>
<blockquote>
<p><strong>Syntax</strong>:</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ENV key value
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ENV <span class="nv">key1</span><span class="o">=</span>value1 <span class="nv">key2</span><span class="o">=</span>value2....    
</span></span></code></pre></td></tr></table>
</div>
</div><p>第一位格式中。key之后的所有内容均会被视作其value的组成部分，因此，一次只能设置一个变量。第二种格式可用一次设置多个变量，每个变量为一个 <font color="#f8070d" size=3><code>key=value</code></font> 的键值对，如果value中包含空格，可以以反斜线（\）进行转义，也可通过对value加引号递行标识；另外，反斜线也可用于续行。</p>
<p>在定义多个变量时，建议使用第二种方式，以便在同一层中完成所有功能。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/085a742e.png" alt="image"  /></p>
<p>运行命令。</p>
<h3 id="run">RUN</h3>
<p>用于指定 <font color="#f8070d" size=3><code>dodker build</code></font> 过程中运行的程序，其可以是任何命令。RUN可以运行多次的，如果多个命令彼此间有关联关系，建议在一条RUN中将多个Command写进来。</p>
<blockquote>
<p><strong>Syntax</strong>:</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">RUN <span class="nb">command</span>
</span></span><span class="line"><span class="cl">RUN <span class="o">[</span><span class="s2">&#34;executable&#34;</span>，<span class="s2">&#34;param1&#34;</span>，<span class="s2">&#34;param2&#34;</span><span class="o">]</span>  
</span></span></code></pre></td></tr></table>
</div>
</div><p>第一种格式中，command通常是一个shell命令，且以 <font color="#f8070d" size=3><code>/bin/sh -c</code></font> 来运行它，这意味着此进程在容器中的PID不为1，不能接枚Unix信号，因此，当使用 <font color="#f8070d" size=3><code>docker stop container </code></font> 命令停止容器时，此进程接收不到SIGTERM信号；</p>
<p>第二种语法格式中的参数是一个JSON格式的数组，其中executable为要运行的命令，后面的 <font color="#f8070d" size=3><code>paramN</code></font> 为传递给命令的选项或参数；然而，此种格式指定的命令不会以 <font color="#f8070d" size=3><code>/bin/sh -c</code></font> 来发起，因此常见的shell操作如变量替换以及通配符（，*等）替换将不会进行；不过，如果要运行的命令依赖于此shell特性的话，可以将其替换为奏似下面的格式。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">RUN <span class="o">[</span><span class="s2">&#34;/bin/bash&#34;</span> , <span class="s2">&#34;-c&#34;</span>，<span class="s2">&#34;executable&#34;</span>, <span class="s2">&#34;param1&#34;</span><span class="o">]</span>  
</span></span></code></pre></td></tr></table>
</div>
</div><p>CMD是在镜像运行为容器时没有指定默认运行命令时所运行的命令。
RUN是在基于Dockerfile构建镜像时要运行的命令。将在docker build中运行。</p>
<h3 id="cmd">CMD</h3>
<p>类似于RUN指令，CMD指令也可用于运行任何命令或应用程序，不过，二者的运行时间点不同。RUN指令运行于镜像文件构建过程中，而CMD指令运行于基于Dockerfile构建出的新映像文件启动一个容器时</p>
<p>CMD指令的首要目的在于为启动的容器指定默认要运行的程序，且其运行结束后，容器也将终止；不过，CMD指定的命令其可以被<font color="#f8070d" size=3><code>docker run</code></font>的命令行选项所覆盖。<font style="background:#ffff00;" size=2>在Dockerfile中可以存在多个CMD指令，但仅最后一个会生效</font>。</p>
<blockquote>
<p><strong>Syntax</strong>:</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">CMD <span class="nb">command</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">CMD <span class="o">[</span><span class="s2">&#34;executable&#34;</span> , <span class="s2">&#34;param1&#34;</span> , <span class="s2">&#34;param2&#34;</span><span class="o">]</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">CMD <span class="o">[</span><span class="s2">&#34;param1&#34;</span> , <span class="s2">&#34;param2&#34;</span><span class="o">]</span>  
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>使用第一种方式默认使用bin/sh -c</li>
<li>前两种语法格式的意义同RUN</li>
<li>第三种则用于为ENTRYPOINT指令提供默认参数</li>
</ul>
<h3 id="entrypoint">ENTRYPOINT</h3>
<p>在<font color="#f8070d" size=3><code>docker run</code></font>时明明指定的运行命令为nginx，但是可以执行<font color="#f8070d" size=3><code>docker run -it --rm busybox ls /</code></font>，这表示了更改了镜像中默认要运行的程序。没有运行默认程序，转而运行了指定的命令。</p>
<p>对于自定义的镜像而言，默认在运行容器时运行的命令是可以被覆盖的。而不允许在运行命令是改变默认命令CMD就无法完成，而<font color="#f8070d" size=3><code>ENTRYPOINT</code></font>可以做到</p>
<p>类似CMD指令的功能，用于为容器指定默认运行程序，从而使得容器像是一个单独的可执行程序。但是与CMD不同的是，。<font style="background:#ffff00;" size=2>由ENTRYPOINT启动的程序不会被docker run命令行指定的参数所覆盖</font>，而且，这些命令行参数会被当作参数传递给ENTRYPOINT指定的程序。当CMD和ENTRYPOINT同时存在时，CMD的内容会当做参数传给ENTRYPOINT。不过，docker run命令的&ndash;entrypoint选项的参教可覆盖ENTRYPOINT指令指定的程序。</p>
<blockquote>
<p><strong>Syntax</strong>:</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ENTRYPOINT <span class="nb">command</span>
</span></span><span class="line"><span class="cl">ENTRYPOINT <span class="o">[</span><span class="s2">&#34;executable&#34;</span>，<span class="s2">&#34;paraml&#34;</span>，<span class="s2">&#34;param2&#34;</span><span class="o">]</span>  
</span></span></code></pre></td></tr></table>
</div>
</div><p>docker run命令传入的命令参数会覆盖CMD指令的内容并且附加到ENTRYPOINT命令最后做为其参数使用，Dockerfile文件中也可以存在多个ENTRYPOINT指令，但仅有最后一个会生效</p>
<p>当同时CMD与ENTRYPOINT，在运行容器时传入参数会覆盖CMD，除非使用<code>--entrypoint选项</code>否则ENTRYPOINT不能够被覆盖。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">CMD <span class="o">[</span><span class="s2">&#34;/bin/httpd&#34;</span> , <span class="s2">&#34;-f&#34;</span> , <span class="s2">&#34;-h </span><span class="si">${</span><span class="nv">WEB00C_ROOT</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">]</span>
</span></span><span class="line"><span class="cl">ENTRYPOINT <span class="o">[</span><span class="s2">&#34;/bin/sh&#34;</span>,<span class="s2">&#34;-c&#34;</span><span class="o">]</span>  
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>为什么非要同时使用CMD与ENTRYPOINT？</strong></p>
<ol>
<li>多数情况下ENTRYPOINT是用来指定一个shell，指定一个谁用来作为启动别的进程的服务进程。在命令行中的参数会当做他的子进程来启动。这样就可以灵活传参数被shell所解析了。</li>
<li>容器接受配置要靠环境变量，要想让应用镜像（如，nginx）在run时能够通过环境变量接受参数来决定他的配置文件（监听地址、端口、document_root），变量可以在启动容器时进行传递。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="cp">#!/bin/sh
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>cat &gt;/etc/nginx/conf.d/www.conf <span class="s">&lt;&lt; EOF 
</span></span></span><span class="line"><span class="cl"><span class="s">  server{
</span></span></span><span class="line"><span class="cl"><span class="s">    server name ${HOSTNAME};
</span></span></span><span class="line"><span class="cl"><span class="s">    listen ${IP:-0.0.0.0}:{PORT:-80};
</span></span></span><span class="line"><span class="cl"><span class="s">    root ${NGX_DOC_ROOT:-/usr/share/nginx/html};
</span></span></span><span class="line"><span class="cl"><span class="s">}
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span> <span class="nb">exec</span> <span class="s2">&#34;</span><span class="nv">$@</span><span class="s2">&#34;</span>  
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">FROM nginx:1.14-alpine 
</span></span><span class="line"><span class="cl">LABEL <span class="nv">maintainer</span><span class="o">=</span><span class="s2">&#34;lc &lt;lc.com&gt;&#34;</span>
</span></span><span class="line"><span class="cl">ENV <span class="nv">NGX_DOC_ROOT</span><span class="o">=</span><span class="s2">&#34;/data/web/html/&#34;</span>
</span></span><span class="line"><span class="cl">ADD index.html <span class="si">${</span><span class="nv">NGX_DOC_ROOT</span><span class="si">}</span>
</span></span><span class="line"><span class="cl">ADD entrypoint.sh /bin/
</span></span><span class="line"><span class="cl">CMD <span class="o">[</span><span class="s2">&#34;/usr/sbin/nginx&#34;</span> , <span class="s2">&#34;-g&#34;</span> , <span class="s2">&#34;daemon off;&#34;</span> <span class="o">]</span>
</span></span><span class="line"><span class="cl">ENTRYPOINT <span class="o">[</span><span class="s2">&#34;/bin/entrypoint.sh&#34;</span><span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="user">USER</h3>
<p>用于指定运行image时的或运行Dockerfile中任何RUN、CMD或ENTRYPOINT指令指定的程序时的用户名或UID，默认情况下，container的运行身份为root用户</p>
<blockquote>
<p><strong>Syntax</strong>:</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">USER UID<span class="p">|</span>UseName  
</span></span></code></pre></td></tr></table>
</div>
</div><p>需要注意的是，UID可以为任意教字，但实践中必须为 <font color="#f8070d" size=3><code>/etc/passwd</code></font> 中某用户的有效UID，否则，<font color="#f8070d" size=3><code>docker run</code></font> 命令将运行失败</p>
<p>在基于某个镜像启动容器后，只要容器没转向后台（没停止），这个容器就不会停止。在docker引擎在判定容器健康与否并不是主进程能否提供服务，而仅仅判断进程是否运行。因此docker判断机制并不是真正意义上判断主进程的是否健康，需要其他工具来辅助确定。</p>
<h3 id="healthcheck">HEALTHCHECK</h3>
<p>HEALTHCHECK指令定义一个command，<font color="#f8070d" size=3><code>CMD</code></font> 为固定关键词，<font color="#f8070d" size=3><code>CMD</code></font> 后指定一个命令，这个命令用于检查容器主进程工作状态健康与否。即使主进程仍在运行，这也可以检测到陷入无限循环且无法处理新连接的Web服务器等情况。</p>
<p>HEALTHCHECK指令有</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">HEALTHCHECK <span class="o">[</span>OPTIONS<span class="o">]</span> CMD <span class="nb">command</span> <span class="c1"># 通过在容器内运行命令来检查容器运行状况</span>
</span></span><span class="line"><span class="cl">HEALTHCHECK NONE <span class="c1"># 禁用任何的健康状态检查，包括默认的健康状态检测机制</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以在CMD之前出现的选项：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明-</th>
</tr>
</thead>
<tbody>
<tr>
<td>--interval  </td>
<td>间隔 s秒、m分钟、h小时，default:30s。</td>
</tr>
<tr>
<td>--timeout</td>
<td>执行command需要时间，比如curl一个地址，如果超过timeout秒则认为超时是错误的状态，此时每次健康检查的时间是timeout+interval秒。default:30s。</td>
</tr>
<tr>
<td>--start-period</td>
<td>在启动容器是，对主进程自我初始化较慢的情况下，default:0s。17.05引入</td>
</tr>
<tr>
<td>--retries=N</td>
<td>失败次数，default:3。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>当指定了健康检测状态命令，检测请求发出时，响应值为如下3种情况：</p>
<ul>
<li>0: 成功，容器健康且随时可用。</li>
<li>1: 不健康，容器无法正常工作。</li>
<li>2: 预留值，无意义，可以自行定义。</li>
</ul>
<p>|HEALTHCHECK&ndash;start-period=3s CMD wget-0&ndash;q http://${IP:-0.0.0.0}:10080/</p>
<p>For example</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">  HEALTHCHECK--interval<span class="o">=</span>5m --timeout<span class="o">=</span>3s <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  CMD curl -f http://locdlhost/ <span class="o">||</span> <span class="nb">exit</span> <span class="m">1</span>  
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="shell">SHELL</h3>
<p>SHELL指令允许覆盖用于shell命令形式的默认shell。在Linux上的默认shell是 <font color="#f8070d" size=3><code>[&quot;/bin/sh&quot;,&quot;-c&quot;]</code></font> , 在Windows上是 <font color="#f8070d" size=3><code>[&quot;cmd&quot; , &quot;/S&quot; , &quot;/C&quot;]</code></font> 。SHELL指令必须以JSON格式写入Dockerfile。</p>
<p>SHELL指令可以多次出现。每个SHELL指令覆盖先前的SHELL指令，并影响所有后续指令。</p>
<blockquote>
<p><strong>Syntax</strong>:</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">SHELL <span class="o">[</span><span class="s2">&#34;executable&#34;</span>,<span class="s2">&#34;parameters]  
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="stohsignal">STOHSIGNAL</h3>
<p>STOPSIGNAL指令设置将发送到容器的系统调用信号，以退出。此信号可以是与内核的系统调用表中的位置匹配的有效无符号数，例如9，或SIGNAME格式的信号名，例如SIGKILL。
语法：<font color="#f8070d" size=3><code>STOPSIGNAL signal</code></font></p>
<h3 id="arg">ARG</h3>
<p>ARG指令使用 <font color="#f8070d" size=3><code>--build-arg varname='value'</code></font> 标志定义一个变量，用户可以在使用<font color="#f8070d" size=3><code>docker build</code></font>命令在构建时将其传递给构建器。</p>
<p>此功能使得一个Dockerfile能够适用于较多的不同场景，尤其是应用程序版本变换时。直接传参数就能确定应该基于Dockerfile制作哪个版本。<font style="background:#fee904;" size=2>如果用户指定了未在Dockerfile中定义的构建参数，则构建会输出警告</font>。</p>
<blockquote>
<p><strong>Syntax</strong>:</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ARG <span class="nv">name</span> <span class="o">=</span> default value
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Dockerfile中可以包括一个或多个ARG指令。</li>
<li>ARG指令可以选择性地包括默认值：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ARG <span class="nv">version</span> <span class="o">=</span> 1.14
</span></span><span class="line"><span class="cl"><span class="nv">ARGuser</span> <span class="o">=</span> mageedu  
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="onbuild">ONBUILD</h3>
<p>用于在Dockerfile中定义一个触发器。Dockerfile用于build映像文件，此映像文件亦可作为base image被另一个Dockerfile用作FROM指令的参数，并以之构建新的映像文件</p>
<p>在后面的这个Dockerfile中的FROM指令在build过程中被执行时，将会“触发”创建其base image的Dockerfile文件中的ONBUILD指令定义的触发器</p>
<blockquote>
<p><strong>Syntax</strong>:</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ONBUILD INSTRUCTION  
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>注意</strong>：</p>
<ul>
<li>尽管任何指令都可注册成为触发器指令，但ONBUILD不能自我嵌套，且不会触发FROM和MAINTAINER指令。</li>
<li>使用包含ONBUILD指令的Dockerfle构建的镜像应该使用特殊的标签，例如ruby：2.0-onbuild</li>
<li>在ONBUILD指令中使用ADD或COPY指令应该格外小心，因为新构建过程的上下文在缺少指定的源文件时会失败。</li>
</ul>
<h2 id="四构建php环境镜像">四、构建php环境镜像</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">FROM  centos:6
</span></span><span class="line"><span class="cl">MAINTAINER   lc
</span></span><span class="line"><span class="cl">RUN  yum install -y httpd php php-gd php-mysql mysql mysql-server
</span></span><span class="line"><span class="cl">ENV   MYSQL_ROOT_PASSWORD <span class="m">123456</span>
</span></span><span class="line"><span class="cl">RUN   <span class="nb">echo</span> <span class="s2">&#34;&lt;?php phpinfo()?&gt;&#34;</span> &gt; /var/www/html/index.php
</span></span><span class="line"><span class="cl">ADD   start.sh /start.sh
</span></span><span class="line"><span class="cl">RUN  chmod +x /start.sh
</span></span><span class="line"><span class="cl">ADD   https://cn.wordpress.org/wordpress-4.7.4-zh_CN.tar.gz /var/www/html
</span></span><span class="line"><span class="cl">COPY   wp-config.php /var/www/html/wordpress
</span></span><span class="line"><span class="cl">VOLUME   <span class="o">[</span><span class="s2">&#34;/var/lib/mysql&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">CMD   /start.sh
</span></span><span class="line"><span class="cl">EXPOSE  <span class="m">80</span> <span class="m">3306</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="五构建java环境镜像">五、构建java环境镜像</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">FROM centos
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">MAINTAINER lc
</span></span><span class="line"><span class="cl">ADD jdk-8u144-linux-x64.tar.gz /usr/local
</span></span><span class="line"><span class="cl">ENV <span class="nv">JAVA_HOME</span><span class="o">=</span>/usr/local/jdk1.8.0_144
</span></span><span class="line"><span class="cl">ADD apache-tomcat-8.5.32.tar.gz /usr/local/
</span></span><span class="line"><span class="cl">RUN mv /usr/local/apache-tomcat-8.5.32 /usr/local/tomcat
</span></span><span class="line"><span class="cl">WORKDIR /usr/local/tomcat
</span></span><span class="line"><span class="cl">ENTRYPOINT <span class="o">[</span><span class="s2">&#34;bin/catalina.sh&#34;</span>,<span class="s2">&#34;run&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">EXPOSE <span class="m">8080</span>  
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="六构建ssh环境镜像">六、构建ssh环境镜像</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">FROM centos
</span></span><span class="line"><span class="cl">MAINTAINER zhangsan
</span></span><span class="line"><span class="cl">ENV PWD <span class="m">123</span>
</span></span><span class="line"><span class="cl">RUN yum install openssh openssh-server openssh-clients -y
</span></span><span class="line"><span class="cl">RUN <span class="nb">echo</span> <span class="nv">$PWD</span><span class="p">|</span>passwd --stdin root
</span></span><span class="line"><span class="cl">RUN ssh-keygen -t dsa -f /etc/ssh/ssh_host_dsa_key
</span></span><span class="line"><span class="cl">RUN ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key
</span></span><span class="line"><span class="cl">CMD <span class="o">[</span><span class="s2">&#34;/usr/sbin/sshd&#34;</span>,<span class="s2">&#34;-D&#34;</span><span class="o">]</span>  
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="61-测试ssh镜像">6.1 测试ssh镜像</h4>
<blockquote>
<p><strong>systemd启动</strong></p>
</blockquote>
<p>构建完镜像使用systemctl启动发现没有sshd进程</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ ps
</span></span><span class="line"><span class="cl">   PID TTY          TIME CMD
</span></span><span class="line"><span class="cl">     <span class="m">1</span> pts/0    00:00:00 bash
</span></span><span class="line"><span class="cl">    <span class="m">18</span> pts/0    00:00:00 ps
</span></span><span class="line"><span class="cl">$ systemctl start ssh
</span></span><span class="line"><span class="cl">Failed to get D-Bus connection: Operation not permitted
</span></span></code></pre></td></tr></table>
</div>
</div><p>此问题原因：systemd服务没有启动无法使用systemd启动</p>
<p><a href="https://github.com/moby/moby/issues/7459">Failed to get D-Bus connection: No connection to service manager</a></p>
<p>故启动时一般使用 <code>CMD [&quot;/usr/sbin/sshd&quot;,&quot;-D&quot;]</code></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Docker跨宿主机网络通信</title>
      <link>https://www.oomkill.com/2018/06/docker-cross-node-network/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2018/06/docker-cross-node-network/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="docker-overlay-network">Docker Overlay Network</h2>
<p>    Overlay网络是指在不改变现有网络基础设施的前提下，通过某种约定通信协议，把二层报文封装在IP报文之上的新的数据格式。这样不但能够充分利用成熟的IP路由协议进程数据分发；而且在Overlay技术中采用扩展的隔离标识位数，能够突破VLAN的4000数量限制支持高达16M的用户，并在必要时可将广播流量转化为组播流量，避免广播数据泛滥。</p>
<p>    因此，Overlay网络实际上是目前最主流的容器跨节点数据传输和路由方案。</p>
<p><strong>要想使用Docker原生Overlay网络，需要满足下列任意条件</strong></p>
<ul>
<li><strong>Docker 运行在Swarm</strong></li>
<li><strong>使用键值存储的Docker主机集群</strong></li>
</ul>
<h2 id="使用键值存储搭建docker主机集群">使用键值存储搭建Docker主机集群</h2>
<p>使用键值存储的Docker主机集群，需满足下列条件：</p>
<ul>
<li>集群中主机连接到键值存储，Docker支持 Consul、Etcd和Zookeeper</li>
<li>集群中主机运行一个Docker守护进程</li>
<li>集群中主机必须具有唯一的主机名，因为键值存储使用主机名来标识集群成员</li>
<li>集群中linux主机内核版本在3.12+,支持VXLAN数据包处理，否则可能无法通行</li>
</ul>
<h2 id="部署docker内置的overlay网络">部署docker内置的OverLAY网络</h2>
<h3 id="环境准备说明">环境准备说明</h3>
<table>
<thead>
<tr>
<th>host</th>
<th>ip-</th>
</tr>
</thead>
<tbody>
<tr>
<td>node01</td>
<td>10.0.0.15</td>
</tr>
<tr>
<td>node02</td>
<td>10.0.0.16</td>
</tr>
</tbody>
</table>
<h3 id="安装consul">安装Consul</h3>
<p>下载地址：<a href="https://www.consul.io/downloads.html">Download Consul</a></p>
<p>启动命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">consul agent -server -bootstrap -ui -data-dir /data/docker/consul <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-client<span class="o">=</span>10.0.0.16 -bind<span class="o">=</span>10.0.0.16 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker run -d -p 8400:8400 -p 8500:8500 -p 8600:53/udp -h consul progrium/consul -server -bootstrap -ui-dir /ui
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1">#-ui : consul 的管理界面</span>
</span></span><span class="line"><span class="cl"><span class="c1">#-data-dir : 数据存储</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="配置docker链接consul">配置docker链接consul</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">ExecStart</span><span class="o">=</span>/usr/bin/dockerd  <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-H tcp://0.0.0.0:2375 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-H unix:///var/run/docker.sock <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--cluster-store consul://10.0.0.16:8500 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--cluster-advertise 10.0.0.16:2375
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="创建-overlay网络">创建 overlay网络</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker network create -d overlay --subnet<span class="o">=</span>10.0.2.1/24 overlay-net 
</span></span></code></pre></td></tr></table>
</div>
</div><p>这边自动回进行通步，因为使用的是同一个服务器发件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker network ls
</span></span><span class="line"><span class="cl">NETWORK ID          NAME                DRIVER              SCOPE
</span></span><span class="line"><span class="cl">5f3ff8aceaa8        bridge              bridge              <span class="nb">local</span>
</span></span><span class="line"><span class="cl">adb97c875132        docker_gwbridge     bridge              <span class="nb">local</span>
</span></span><span class="line"><span class="cl">497fb0d5ea2f        host                host                <span class="nb">local</span>
</span></span><span class="line"><span class="cl">65e001b471fe        none                null                <span class="nb">local</span>
</span></span><span class="line"><span class="cl">f72e6fcf1082        overlay-net         overlay             global
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="创建使用overlay网络的容器">创建使用overlay网络的容器</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -tid --name test2 --net<span class="o">=</span>overlay-net centos
</span></span><span class="line"><span class="cl">docker run -tid --name test3 --net<span class="o">=</span>overlay-net centos
</span></span></code></pre></td></tr></table>
</div>
</div><p>进入查看ip信息。</p>
<p>node01</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sh-4.2# ifconfig
</span></span><span class="line"><span class="cl">eth0: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="m">1450</span>
</span></span><span class="line"><span class="cl">        inet 10.0.2.3  netmask 255.255.255.0  broadcast 10.0.2.255
</span></span><span class="line"><span class="cl">        ether 02:42:0a:00:02:03  txqueuelen <span class="m">0</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">0</span>  bytes <span class="m">0</span> <span class="o">(</span>0.0 B<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">0</span>  bytes <span class="m">0</span> <span class="o">(</span>0.0 B<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">eth1: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="m">1500</span>
</span></span><span class="line"><span class="cl">        inet 172.18.0.2  netmask 255.255.0.0  broadcast 172.18.255.255
</span></span><span class="line"><span class="cl">        ether 02:42:ac:12:00:02  txqueuelen <span class="m">0</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">3192</span>  bytes <span class="m">12218706</span> <span class="o">(</span>11.6 MiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">2569</span>  bytes <span class="m">142308</span> <span class="o">(</span>138.9 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">lo: <span class="nv">flags</span><span class="o">=</span>73&lt;UP,LOOPBACK,RUNNING&gt;  mtu <span class="m">65536</span>
</span></span><span class="line"><span class="cl">        inet 127.0.0.1  netmask 255.0.0.0
</span></span><span class="line"><span class="cl">        loop  txqueuelen <span class="m">1</span>  <span class="o">(</span>Local Loopback<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">76</span>  bytes <span class="m">6960</span> <span class="o">(</span>6.7 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">76</span>  bytes <span class="m">6960</span> <span class="o">(</span>6.7 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>node02</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sh-4.2# ifconfig
</span></span><span class="line"><span class="cl">eth0: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="m">1450</span>
</span></span><span class="line"><span class="cl">        inet 10.0.2.2  netmask 255.255.255.0  broadcast 10.0.2.255
</span></span><span class="line"><span class="cl">        ether 02:42:0a:00:02:02  txqueuelen <span class="m">0</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">4</span>  bytes <span class="m">336</span> <span class="o">(</span>336.0 B<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">4</span>  bytes <span class="m">336</span> <span class="o">(</span>336.0 B<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">eth1: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="m">1500</span>
</span></span><span class="line"><span class="cl">        inet 172.18.0.2  netmask 255.255.0.0  broadcast 172.18.255.255
</span></span><span class="line"><span class="cl">        ether 02:42:ac:12:00:02  txqueuelen <span class="m">0</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">2753</span>  bytes <span class="m">12193675</span> <span class="o">(</span>11.6 MiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">2345</span>  bytes <span class="m">130189</span> <span class="o">(</span>127.1 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">lo: <span class="nv">flags</span><span class="o">=</span>73&lt;UP,LOOPBACK,RUNNING&gt;  mtu <span class="m">65536</span>
</span></span><span class="line"><span class="cl">        inet 127.0.0.1  netmask 255.0.0.0
</span></span><span class="line"><span class="cl">        loop  txqueuelen <span class="m">1</span>  <span class="o">(</span>Local Loopback<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">78</span>  bytes <span class="m">6884</span> <span class="o">(</span>6.7 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">78</span>  bytes <span class="m">6884</span> <span class="o">(</span>6.7 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>测试网络</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ping 10.0.2.3
</span></span><span class="line"><span class="cl">PING 10.0.2.3 <span class="o">(</span>10.0.2.3<span class="o">)</span> 56<span class="o">(</span>84<span class="o">)</span> bytes of data.
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.0.2.3: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.349 ms
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ ping 10.0.2.2
</span></span><span class="line"><span class="cl">PING 10.0.2.2 <span class="o">(</span>10.0.2.2<span class="o">)</span> 56<span class="o">(</span>84<span class="o">)</span> bytes of data.
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.0.2.2: <span class="nv">icmp_seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.023 ms
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>docker容器管理</title>
      <link>https://www.oomkill.com/2018/06/docker-ma/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2018/06/docker-ma/</guid>
      <description></description>
      <content:encoded><![CDATA[<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-i, &ndash;interactive</td>
<td>即使不是交互模式也保持stdin打开</td>
</tr>
<tr>
<td>-d, &ndash;detach</td>
<td>后台运行容器并打印容器ID</td>
</tr>
<tr>
<td>-t, &ndash;tty</td>
<td>分配一个伪TTY</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>添加自定义主机映射</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run -tid --add-host docker-node:10.0.0.1 centos
</span></span><span class="line"><span class="cl">61d5824c720f1a32c743a3d0f434e17a7f6860dba1cb5559653a80c064da8073
</span></span><span class="line"><span class="cl">$ docker <span class="nb">exec</span> 61d5824c720f1a32c cat /etc/hosts
</span></span><span class="line"><span class="cl">ff02::2	ip6-allrouters
</span></span><span class="line"><span class="cl">10.0.0.1	docker-node
</span></span><span class="line"><span class="cl">172.17.0.2	61d5824c720f
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>添加linux功能</strong></p>
</blockquote>
<p>linux内核特性，提供权限访问控制。如需要特殊权限，不赋权限容器将不能正常运行。</p>
<blockquote>
<p><strong>将容器pid写入一个文件内</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run -itd --cidfile /tmp/pid centos
</span></span><span class="line"><span class="cl">458d9f4b3cc51a4f0f3abffbc78c643b98a89eef3cdfe263e762ac05d3f5f47d
</span></span><span class="line"><span class="cl">$ cat /tmp/pid 
</span></span><span class="line"><span class="cl">458d9f4b3cc51a4f0f3abffbc78c643b98a89eef3cdfe263e762ac05d3f5f47d
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>将主机列表添加到容器中</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">--device list 
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>设置自定义dns</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run -it centos cat /etc/resolv.conf
</span></span><span class="line"><span class="cl">nameserver 10.0.0.2
</span></span><span class="line"><span class="cl">nameserver 10.0.0.2
</span></span><span class="line"><span class="cl">$ docker run -it --dns 8.8.8.8 centos cat /etc/resolv.conf
</span></span><span class="line"><span class="cl">nameserver 8.8.8.8
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>设置容器的环境变量</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run -itd -e <span class="s2">&#34;TEST=abc&#34;</span> centos
</span></span><span class="line"><span class="cl">2d3ef722737a0a034151060ef2d8e97b21feee7590917a0e921c21e864d18a47
</span></span><span class="line"><span class="cl">$ docker attach 2d3ef722737a0
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="nv">$TEST</span>
</span></span><span class="line"><span class="cl">abc
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>暴露端口或指定范围的端口号</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker ps 
</span></span><span class="line"><span class="cl">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
</span></span><span class="line"><span class="cl">f7fd3f365512        centos              <span class="s2">&#34;/bin/bash&#34;</span>         <span class="m">5</span> seconds ago       Up <span class="m">5</span> seconds        8080/tcp            wonderful_golick
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>为容器指定主机名</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run -itd -h nginx centos
</span></span><span class="line"><span class="cl">bdcdf43bf4540d1a9bb794042c6d506c2680be0eab317002697a8049c5667716
</span></span><span class="line"><span class="cl">$ docker <span class="nb">exec</span> bdcdf43bf4540 hostname
</span></span><span class="line"><span class="cl">nginx
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>为容器分配ip</strong></p>
</blockquote>
<p><strong>创建网络</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker network create --subnet<span class="o">=</span>10.10.0.0/24 network_test
</span></span><span class="line"><span class="cl">85d5f3e2cd09e2bd57bc68b56c9341f5b1d4cc1194641715937d8e197cca09f7
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>查看网络</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker network ls
</span></span><span class="line"><span class="cl">NETWORK ID          NAME                DRIVER              SCOPE
</span></span><span class="line"><span class="cl">6af203aae34e        bridge                  bridge              <span class="nb">local</span>
</span></span><span class="line"><span class="cl">b20cfc0864e6        host                     host                  <span class="nb">local</span>
</span></span><span class="line"><span class="cl">85d5f3e2cd09        network_test        bridge               <span class="nb">local</span>
</span></span><span class="line"><span class="cl">c287f5c1181e        none                      null                  <span class="nb">local</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>删除网络</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker network rm network_test
</span></span><span class="line"><span class="cl">network_test
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>指定容器网络</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run -idt --net<span class="o">=</span>network_test --ip 10.10.0.3 -h network centos
</span></span><span class="line"><span class="cl">ad885aebe13fa244748c040121f849385ae5b3b8d243f76cb43695495f20c301
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="查看容器信息">查看容器信息</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="s2">&#34;Networks&#34;</span><span class="err">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&#34;network_test&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;IPAMConfig&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nt">&#34;IPv4Address&#34;</span><span class="p">:</span> <span class="s2">&#34;10.10.0.3&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;Links&#34;</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;Aliases&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;ad885aebe13f&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;NetworkID&#34;</span><span class="p">:</span> <span class="s2">&#34;c1196614dc1eec93c34774f9498ea3254084e1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;EndpointID&#34;</span><span class="p">:</span> <span class="s2">&#34;a1c491b6155b104ac70194d9b1fa7ab84b6d4&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;Gateway&#34;</span><span class="p">:</span> <span class="s2">&#34;10.10.0.1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;IPAddress&#34;</span><span class="p">:</span> <span class="s2">&#34;10.10.0.3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;IPPrefixLen&#34;</span><span class="p">:</span> <span class="mi">24</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;IPv6Gateway&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;GlobalIPv6Address&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;GlobalIPv6PrefixLen&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="nt">&#34;MacAddress&#34;</span><span class="p">:</span> <span class="s2">&#34;02:42:0a:0a:00:03&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>link建立容器之间的连接</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run -tid --name centos centos
</span></span><span class="line"><span class="cl">8f6e13a26afe60ee2ac5335d419852d70580343f590c2500964f54020e54391c
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ docker <span class="nb">exec</span> centos ifconfig
</span></span><span class="line"><span class="cl">eth0: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="m">1500</span>
</span></span><span class="line"><span class="cl">        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run -tid --name link --link centos:nginx.org centos
</span></span><span class="line"><span class="cl">8f1a542c6058caeeb8b59e02b86e7b9cabc2bc7784d71e355f5d5ca7a6738481
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ docker <span class="nb">exec</span> link cat /etc/hosts
</span></span><span class="line"><span class="cl">127.0.0.1	localhost
</span></span><span class="line"><span class="cl">::1	localhost ip6-localhost ip6-loopback
</span></span><span class="line"><span class="cl">fe00::0	ip6-localnet
</span></span><span class="line"><span class="cl">ff00::0	ip6-mcastprefix
</span></span><span class="line"><span class="cl">ff02::1	ip6-allnodes
</span></span><span class="line"><span class="cl">ff02::2	ip6-allrouters
</span></span><span class="line"><span class="cl">172.17.0.2	*nginx.org* 8f6e13a26afe centos
</span></span><span class="line"><span class="cl">172.17.0.3	8f1a542c6058
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="log-driver">log-driver</h2>
<h3 id="docker-容器默认日志保存位置">docker 容器默认日志保存位置</h3>
<p><code>/var/lib/docker/containers/container-json.log</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ls -1 /var/lib/docker/containers
</span></span><span class="line"><span class="cl">8f1a542c6058caeeb8b59e02b86e7b9cabc2bc7784d71e355f5d5ca7a6738481
</span></span><span class="line"><span class="cl">8f6e13a26afe60ee2ac5335d419852d70580343f590c2500964f54020e54391c
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ ls -1
</span></span><span class="line"><span class="cl">8f6e13a26afe60ee2ac5335d419852d70580343f590c2500964f54020e54391c-json.log
</span></span><span class="line"><span class="cl">checkpoints
</span></span><span class="line"><span class="cl">config.v2.json
</span></span><span class="line"><span class="cl">hostconfig.json
</span></span><span class="line"><span class="cl">hostname
</span></span><span class="line"><span class="cl">hosts
</span></span><span class="line"><span class="cl">mounts
</span></span><span class="line"><span class="cl">resolv.conf
</span></span><span class="line"><span class="cl">resolv.conf.hash<span class="p">|</span>
</span></span><span class="line"><span class="cl">$ cat 8f6e..1c-json.log 
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以在启动时将日志输出到指定位置。</p>
<table>
<thead>
<tr>
<th>驱动</th>
<th>介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>none</strong></td>
<td>不输出日志</td>
</tr>
<tr>
<td><strong>json-file</strong></td>
<td>Docker的默认日志记录驱动程序，格式为JSON。</td>
</tr>
<tr>
<td><strong>syslog</strong></td>
<td>将日志消息写入syslog</td>
</tr>
<tr>
<td><strong>journald</strong></td>
<td>将日志消息写入journald。 journald守护程序必须在主机上运行。</td>
</tr>
<tr>
<td><strong>gelf</strong></td>
<td>将日志消息写入Graylog扩展日志格式（GELF）端点，例如Graylog或Logstash。</td>
</tr>
<tr>
<td><strong>fluentd</strong></td>
<td>将日志消息写入流利（正向输入）。流利的守护程序必须在主机上运行</td>
</tr>
<tr>
<td><strong>awslogs</strong></td>
<td>将日志消息写入Amazon CloudWatch Logs。</td>
</tr>
<tr>
<td><strong>splunk</strong></td>
<td>使用HTTP事件收集器将日志消息写入splunk</td>
</tr>
<tr>
<td><strong>etwlogs</strong></td>
<td>将日志消息写为Windows事件跟踪（ETW）事件。仅适用于Windows平台。</td>
</tr>
<tr>
<td><strong>gcplogs</strong></td>
<td>将日志消息写入Google Cloud Platform（GCP）日志记录。</td>
</tr>
<tr>
<td><strong>nats</strong></td>
<td>用于Docker的nats NATS日志记录驱动程序。将日志条目发布到NATS服务器。</td>
</tr>
</tbody>
</table>
<h3 id="指定日志驱动测试">指定日志驱动测试</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -tid --name nginx --log-driver syslog nginx
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl 172.17.0.4
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 新窗口查看日志可见到容器记录到宿主机的syslog中</span>
</span></span><span class="line"><span class="cl">$ tail -f /var/log/messages 
</span></span><span class="line"><span class="cl">Jul <span class="m">26</span> 01:44:18 docker-node2 systemd: Started Session <span class="m">8</span> of user root.
</span></span><span class="line"><span class="cl">Jul <span class="m">26</span> 01:44:18 docker-node2 systemd: Starting Session <span class="m">8</span> of user root.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Jul <span class="m">26</span> 01:45:20 docker-node2 5f95cf77c994<span class="o">[</span>2032<span class="o">]</span>: 172.17.0.1 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>- - <span class="o">[</span>25/Jul/2018:17:45:20 +0000<span class="o">]</span> <span class="s2">&#34;GET / HTTP/1.1&#34;</span> <span class="m">200</span> <span class="m">612</span> <span class="s2">&#34;-&#34;</span> <span class="s2">&#34;curl/7.29.0&#34;</span> <span class="s2">&#34;-&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>挂载宿主机的分区到容器</strong></p>
</blockquote>
<p><a href="https://docs.docker.com/storage/bind-mounts/#choosing-the--v-or---mount-flag">Use bind mounts | Docker Documentation</a></p>
<blockquote>
<p><strong>将容器的端口映射到宿主机上</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -itd -p 8080:80 centos
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>将expose声明的所有端口映射到宿主机的随机端口</strong></p>
<p>-P
<strong>容器down掉自动重启</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -tid --name nginx --restart always nginx
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ docker attach nginx
</span></span><span class="line"><span class="cl">^C
</span></span><span class="line"><span class="cl">$ docker ps 
</span></span><span class="line"><span class="cl">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMES
</span></span><span class="line"><span class="cl">07b2196fb6c5        nginx               <span class="s2">&#34;nginx -g &#39;daemon of…&#34;</span>   About a minute ago   Up <span class="m">4</span> seconds        80/tcp              nginx
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>设置文件描述符大小</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -itd --name <span class="nb">test</span> --ulimit <span class="nv">nproc</span><span class="o">=</span><span class="m">1024</span> --ulimit <span class="nv">nofile</span><span class="o">=</span><span class="m">1024</span> centos
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ docker attach <span class="nb">test</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ <span class="nb">ulimit</span> -a
</span></span><span class="line"><span class="cl">open files                      <span class="o">(</span>-n<span class="o">)</span> <span class="m">1024</span>
</span></span><span class="line"><span class="cl">max user processes              <span class="o">(</span>-u<span class="o">)</span> <span class="m">1024</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="资源限制">资源限制</h3>
<blockquote>
<p><strong>例1：限制cpu使用数量</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> docker run -tid --name cpu2 --cpus<span class="o">=</span><span class="m">2</span> centos
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>使用stress测试cpu使用情况</strong></p>
<p>测试机器为双核4G硬件资源</p>
<p><em><strong>1. 限制两颗CPU</strong></em></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ stress -c <span class="m">13</span>
</span></span><span class="line"><span class="cl">stress: info: <span class="o">[</span>70<span class="o">]</span> dispatching hogs: <span class="m">13</span> cpu, <span class="m">0</span> io, <span class="m">0</span> vm, <span class="m">0</span> hdd
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 docker stats 查看</span>
</span></span><span class="line"><span class="cl">docker stats cpu2
</span></span><span class="line"><span class="cl">CONTAINER ID        NAME       CPU %           MEM USAGE / LIMIT      MEM %      
</span></span><span class="line"><span class="cl">1eed573b906a        cpu2          199.46%           792KiB / 3.686GiB       0.02%
</span></span></code></pre></td></tr></table>
</div>
</div><p>在宿主机上top查看</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">%Cpu0  : 99.7 us,  0.3 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span><span class="line"><span class="cl">%Cpu1  :100.0 us,  0.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>将cpu增加至4核，查看cpu状态</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">%Cpu0  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span><span class="line"><span class="cl">%Cpu1  : 99.7 us,  0.0 sy,  0.0 ni,  0.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span><span class="line"><span class="cl">%Cpu2  :  0.0 us,  0.3 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span><span class="line"><span class="cl">%Cpu3  : 99.7 us,  0.0 sy,  0.0 ni,  0.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span></code></pre></td></tr></table>
</div>
</div><p><em><strong>2. 限制1颗CPU</strong></em></p>
<p>限制容器只使用1核cpu。观察容器状态。发现容器将使用率均衡在其他核心上。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">%Cpu0  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span><span class="line"><span class="cl">%Cpu1  : 30.4 us,  0.0 sy,  0.0 ni, 69.6 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span><span class="line"><span class="cl">%Cpu2  : 19.7 us,  0.0 sy,  0.0 ni, 80.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span><span class="line"><span class="cl">%Cpu3  : 49.2 us,  0.0 sy,  0.0 ni, 50.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">%Cpu0  :  0.0 us,  0.3 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span><span class="line"><span class="cl">%Cpu1  :  0.0 us,  0.3 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span><span class="line"><span class="cl">%Cpu2  : 49.5 us,  0.0 sy,  0.0 ni, 50.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span><span class="line"><span class="cl">%Cpu3  : 49.7 us,  0.3 sy,  0.0 ni, 50.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>结论：对于进程来说是没有 CPU 个数这一概念的，内核只能通过进程消耗的 CPU 时间片来统计出进程占用 CPU 的百分比。这也是我们看到的各种工具中都使用百分比来说明 CPU 使用率的原因。</strong></p>
<p>官方文档：<a href="https://docs.docker.com/config/containers/resource_constraints/">Limit a container&rsquo;s resources | Docker Documentation</a></p>
<blockquote>
<p><strong>指定固定的 CPU</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run -tid --name cpunum --cpuset-cpus<span class="o">=</span><span class="s2">&#34;2&#34;</span> stress
</span></span><span class="line"><span class="cl">31d72f808e8992bcfbfead1d4d7a78e37235e1e42c8b2011b67a15d542829287
</span></span><span class="line"><span class="cl">$ docker attach cpunum
</span></span><span class="line"><span class="cl">$ stress -c <span class="m">4</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>top查看cpu状态，发现只有固定的一个cpu被使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">%Cpu0  :  0.0 us,  0.3 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span><span class="line"><span class="cl">%Cpu1  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span><span class="line"><span class="cl">%Cpu2  :100.0 us,  0.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span><span class="line"><span class="cl">%Cpu3  :  0.0 us,  0.3 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span></code></pre></td></tr></table>
</div>
</div><p>限制多个cpunum。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run -tid --name cpunum2 --cpuset-cpus<span class="o">=</span><span class="s2">&#34;0,3&#34;</span> stress
</span></span><span class="line"><span class="cl">b4cb513dad71aa9c6cc5578a70253c704dcde59a5b1306943a3967c414e2d9a9
</span></span><span class="line"><span class="cl">$ docker attach cpunum2
</span></span><span class="line"><span class="cl">$ stress -c <span class="m">4</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>top查看cpu状态</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">%Cpu0  :100.0 us,  0.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span><span class="line"><span class="cl">%Cpu1  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span><span class="line"><span class="cl">%Cpu2  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span><span class="line"><span class="cl">%Cpu3  :100.0 us,  0.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>设置CPU权重</strong></p>
</blockquote>
<p>当 CPU 资源充足时，设置 CPU 的权重是没有意义的。只有在容器争用 CPU 资源的情况下， CPU 的权重才能让不同的容器分到不同的 CPU 用量。&ndash;cpu-shares 选项用来设置 CPU 权重，它的默认值为 1024。我们可以把它设置为 2 表示很低的权重，但是设置为 0 表示使用默认值 1024。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -tid --name cpu-test1 --cpuset-cpus<span class="o">=</span><span class="s2">&#34;0&#34;</span> --cpu-shares<span class="o">=</span><span class="m">512</span> stress
</span></span><span class="line"><span class="cl">docker run -tid --name cpu-test2 --cpuset-cpus<span class="o">=</span><span class="s2">&#34;0&#34;</span> --cpu-shares<span class="o">=</span><span class="m">0</span> stress
</span></span></code></pre></td></tr></table>
</div>
</div><p>当只有test-1使用cpu资源时的CPU负载</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">1717c10e24ae        cpu-test2           0.00%               376KiB / 3.686GiB   0.01%              
</span></span><span class="line"><span class="cl">8a1e1a944e2b        cpu-test1           99.96%              680KiB / 3.686GiB   0.02%  
</span></span></code></pre></td></tr></table>
</div>
</div><p>当test-1与test-2争用资源时的CPU负载</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">1717c10e24ae        cpu-test2           66.91%              668KiB / 3.686GiB   
</span></span><span class="line"><span class="cl">8a1e1a944e2b        cpu-test1           33.37%              576KiB / 3.686GiB 
</span></span></code></pre></td></tr></table>
</div>
</div><p>两个容器分享一个 CPU，所以总量应该是 100%。具体每个容器分得的负载则取决于 &ndash;cpu-shares 选项的设置！我们的设置分别是 512 和 1024，则它们分得的比例为 1:2。在本例中如果想让两个容器各占 50%，只要把 &ndash;cpu-shares 选项设为相同的值就可以了。</p>
<p>对容器资源的限制 /sys/fs/cgroup/</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -tid --name cpunum2 --cpuset-cpus<span class="o">=</span><span class="s2">&#34;0,3&#34;</span> stress
</span></span><span class="line"><span class="cl">$ cat cpuset/cpuset.cpus
</span></span><span class="line"><span class="cl">0,3
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>Docker网络</title>
      <link>https://www.oomkill.com/2018/06/docker-network/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2018/06/docker-network/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="docker的四种网络模式">docker的四种网络模式</h2>
<h3 id="bridge模式默认">Bridge模式（默认）</h3>
<p>当Docker进程启动时，会在宿主机上创建一个<font style="background:#fee904;" size=2>名为docker0的虚拟网桥</font>，此主机上启动的Docker容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</p>
<p>默认ip段172.17.0.1/16；<font style="background:#fee904;" size=2>从docker0子网中分配一个IP给容器使用，并设置docker0的IP为容器的默认网关</font>。在主机上创建一对虚拟网卡veth pair设备，Docker将veth pair设备的一端放在新创建的容器中，并命名为eth0（容器的网卡），另一端放在主机中，以vethxxx这样类似的名字命名，并将这个网络设备加入到docker0网桥中。可以通过brctl show命令查看。</p>
<p>使用 <code>docker run -p</code> 时，docker实际是在iptables做了DNAT规则，实现端口转发功能。可以使用 <code>iptables -t nat -nL</code> 查看。</p>
<h3 id="host模式">host模式</h3>
<p>启动容器的时候使用host模式，那么这个容器将<font style="background:#fee904;" size=2>不会获得一个独立的Network Namespace</font>，而是和宿主机共用一个Network Namespace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</p>
<h3 id="none模式">none模式</h3>
<p>使用none模式，Docker容器拥有自己的Network Namespace，但是，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。</p>
<h3 id="container模式">container模式</h3>
<p>这个模式指定新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</p>
<h2 id="容器外部访问原理">容器外部访问原理</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker0: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="m">1500</span>
</span></span><span class="line"><span class="cl">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 0.0.0.0
</span></span><span class="line"><span class="cl">        inet6 fe80::42:a5ff:fe59:2034  prefixlen <span class="m">64</span>  scopeid 0x20&lt;link&gt;
</span></span><span class="line"><span class="cl">        ether 02:42:a5:59:20:34  txqueuelen <span class="m">0</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">56986</span>  bytes <span class="m">2746876</span> <span class="o">(</span>2.6 MiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">64106</span>  bytes <span class="m">503304169</span> <span class="o">(</span>479.9 MiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -itd --name test_network -p 80:80 centos:6
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ iptables -t nat -nL
</span></span><span class="line"><span class="cl">Chain POSTROUTING <span class="o">(</span>policy ACCEPT<span class="o">)</span>
</span></span><span class="line"><span class="cl">target     prot opt <span class="nb">source</span>               destination         
</span></span><span class="line"><span class="cl">MASQUERADE  all  --  172.17.0.0/16        0.0.0.0/0           
</span></span><span class="line"><span class="cl">MASQUERADE  tcp  --  172.17.0.2           172.17.0.2           tcp dpt:80
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Chain DOCKER <span class="o">(</span><span class="m">2</span> references<span class="o">)</span>
</span></span><span class="line"><span class="cl">target     prot opt <span class="nb">source</span>               destination         
</span></span><span class="line"><span class="cl">RETURN     all  --  0.0.0.0/0            0.0.0.0/0           
</span></span><span class="line"><span class="cl">DNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:80 to:172.17.0.2:80
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="配置桥接网络">配置桥接网络</h2>
<h4 id="下载网桥管理工具">下载网桥管理工具</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">yum install bridge-utils -y
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="停止docker并删除docker0网桥">停止docker并删除docker0网桥</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ip link <span class="nb">set</span> dev docker0 down
</span></span><span class="line"><span class="cl">brctl delbr docker0
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="创建新桥接物理网络虚拟网桥test">创建新桥接物理网络虚拟网桥test</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">brctl addbr <span class="nb">test</span>
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> dev <span class="nb">test</span> up
</span></span><span class="line"><span class="cl">ip addr add 10.10.10.0/24 dev <span class="nb">test</span>     <span class="c1">#为br0分配物理网络中的ip地址</span>
</span></span><span class="line"><span class="cl">ip addr del 10.0.0.0/24 dev eth0 <span class="c1">#将宿主机网卡的IP清空</span>
</span></span><span class="line"><span class="cl">brctl addif <span class="nb">test</span> eth0
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run -itd --name centos centos:6
</span></span><span class="line"><span class="cl">26ea6dde6564006f148e4977d131e671b578c2c5df313b1d872940a9e48f0309
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ docker attach centos
</span></span><span class="line"><span class="cl">$ ifconfig
</span></span><span class="line"><span class="cl">eth0      Link encap:Ethernet  HWaddr 02:42:C0:A8:00:02  
</span></span><span class="line"><span class="cl">          inet addr:192.168.0.2  Bcast:0.0.0.0  Mask:255.255.255.0
</span></span><span class="line"><span class="cl">          inet6 addr: fe80::42:c0ff:fea8:2/64 Scope:Link
</span></span><span class="line"><span class="cl">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
</span></span><span class="line"><span class="cl">          RX packets:7 errors:0 dropped:0 overruns:0 frame:0
</span></span><span class="line"><span class="cl">          TX packets:7 errors:0 dropped:0 overruns:0 carrier:0
</span></span><span class="line"><span class="cl">          collisions:0 txqueuelen:0 
</span></span><span class="line"><span class="cl">          RX bytes:578 <span class="o">(</span>578.0 b<span class="o">)</span>  TX bytes:578 <span class="o">(</span>578.0 b<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>将docker0加入网桥中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ brctl show
</span></span><span class="line"><span class="cl">bridge name	bridge id		STP enabled	interfaces
</span></span><span class="line"><span class="cl">docker0		8000.024206e55aa2	no		
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker run -itd --net host centos
</span></span><span class="line"><span class="cl">5237ae95c660a0354046f0e5ff839c9a4babda7c9743ca8f4d2338e6a8445e55
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Networks&#34;</span>: <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;host&#34;</span>: <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;IPAMConfig&#34;</span>: null,
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;Links&#34;</span>: null,
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;Aliases&#34;</span>: null,
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;NetworkID&#34;</span>: <span class="s2">&#34;b2768c9e7cb0de16cde0626abbca8414ca80c96101531aa7842dfed7ee9fc884&#34;</span>,
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;EndpointID&#34;</span>: <span class="s2">&#34;645627ef6384f1f36e3cfeddd5d9346cfdf1e8997b597c2ec1edd8577e17d6f5&#34;</span>,
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;Gateway&#34;</span>: <span class="s2">&#34;&#34;</span>,
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;IPAddress&#34;</span>: <span class="s2">&#34;&#34;</span>,
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;IPPrefixLen&#34;</span>: 0,
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;IPv6Gateway&#34;</span>: <span class="s2">&#34;&#34;</span>,
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;GlobalIPv6Address&#34;</span>: <span class="s2">&#34;&#34;</span>,
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;GlobalIPv6PrefixLen&#34;</span>: 0,
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;MacAddress&#34;</span>: <span class="s2">&#34;&#34;</span>,
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;DriverOpts&#34;</span>: null
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">}</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>查看网络模式</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ docker network ls
</span></span><span class="line"><span class="cl">NETWORK ID          NAME                DRIVER              SCOPE
</span></span><span class="line"><span class="cl">a39cc87800d6        bridge              bridge              <span class="nb">local</span>
</span></span><span class="line"><span class="cl">b2768c9e7cb0        host                host                <span class="nb">local</span>
</span></span><span class="line"><span class="cl">329e3d9d1c3f        none                null                <span class="nb">local</span>
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<p>tags: []</p>
<p>isStarred: false</p>
<p>isTrashed: false</p>
<p>修改docker0默认ip</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ cat /etc/docker/daemon.json 
</span></span><span class="line"><span class="cl"><span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;bip&#34;</span>: <span class="s2">&#34;192.168.100.1/24&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="reference">Reference</h2>
<ul>
<li><a href="https://www.cnblogs.com/weifeng1463/p/7468497.html">Docker Centos7 下建立 Docker 桥接网络 - weifengCorp - 博客园</a></li>
<li><a href="http://blog.51cto.com/zhaoyfcomeon/1968886">centos7 docker宿主机配置桥接物理网络终极实战-zhaoyfcomeon-成长之路-51CTO博客</a></li>
<li><a href="https://blog.csdn.net/jackliu16/article/details/79360581">docker自定义网桥 - CSDN博客</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>macvlan实现docker跨宿主机访问</title>
      <link>https://www.oomkill.com/2018/06/docker-cross-node-network-macvlan/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2018/06/docker-cross-node-network-macvlan/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="关于vlan说明">关于vlan说明</h2>
<p>Macvlan和ipvlan是Linux网络驱动程序，它们将底层或主机接口直接暴露给在主机中运行的VM或容器。</p>
<p>Macvlan允许单个物理接口使用macvlan子接口具有多个mac和ip地址。这与使用vlan在物理接口上创建子接口不同。使用vlan子接口，每个子接口使用vlan属于不同的L2域，所有子接口都具有相同的mac地址。使用macvlan，每个子接口将获得唯一的mac和ip地址，并将直接暴露在底层网络中。Macvlan接口通常用于虚拟化应用程序，每个macvlan接口都连接到Container或VM。每个容器或VM可以直接从公共服务器获取dhcp地址，就像主机一样。这将有助于希望Container成为传统网络的客户使用他们已有的IP寻址方案。Macvlan有4种类型(Private, VEPA, Bridge, Passthru)。常用的类型是Macvlan网桥，它允许单个主机中的端点能够在没有数据包离开主机的情况下相互通信。对于外部连接，使用底层网络。下图显示了两个使用macvlan网桥相互通信以及外部世界的容器。两个容器将使用Macvlan子接口直接暴露在底层网络中。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/24ffba73.png" alt="image"  /></p>
<h2 id="使用mavvlan构建docker网络">使用mavvlan构建docker网络</h2>
<p>Macvlan，MACVLAN或MAC-VLAN允许您在单个物理接口上配置多个第2层（即以太网MAC）地址。 Macvlan允许您配置父物理以太网接口（也称为上层设备）的子接口（也称为从设备），<font style="background:#ffff00;" size=3>每个接口都有自己唯一的（随机生成的）MAC地址，因此也有自己的IP地址</font>。然后，应用程序、VM和容器可以绑定到特定的子接口，以使用自己的MAC和IP地址直接连接到物理网络。</p>
<p><font style="background:#ffff00;" size=2>Mavlan子接口不能直接与父接口通信</font>，即VM不能直接与主机通信。如果需要VM主机通信，则应添加另一个macvlan子接口并将其分配给主机。</p>
<p>Macvlan子接口使用 <font color="#f8070d" size=3><code>eth0.20@eth0</code></font> 表示法来清楚地识别子接口及其父接口。子接口状态绑定到其父级状态。如果eth0关闭，则 <font color="#f8070d" size=3><code>eth0.20@eth0</code></font> 也会关闭。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/49435814.png" alt="image"  /></p>
<h3 id="配置macvlan先决条件">配置macvlan先决条件</h3>
<ul>
<li>至少需要Linux内核版本3.9以上，建议使用4.0或更高版本。</li>
</ul>
<h3 id="环境准备">环境准备</h3>
<table>
<thead>
<tr>
<th>主机名</th>
<th>IP地址</th>
<th>地位</th>
<th>软件环境</th>
</tr>
</thead>
<tbody>
<tr>
<td>物理机</td>
<td>10.0.0.1</td>
<td>物理机</td>
<td>windows10</td>
</tr>
<tr>
<td>网关</td>
<td>10.0.0.2</td>
<td>宿主机网关</td>
<td>vmvare网关</td>
</tr>
<tr>
<td>c1</td>
<td>10.0.0.3</td>
<td>容器01</td>
<td>docker</td>
</tr>
<tr>
<td>c2</td>
<td>10.0.0.4</td>
<td>容器02</td>
<td>docker</td>
</tr>
<tr>
<td>node01</td>
<td>10.0.0.15</td>
<td>宿主机01（vm虚拟机）</td>
<td>centos 7.3/docker-ce1806</td>
</tr>
<tr>
<td>node02</td>
<td>10.0.0.16</td>
<td>宿主机02（vm虚拟机）</td>
<td>centos 7.3/docker-ce1806</td>
</tr>
</tbody>
</table>
<h3 id="23-启动网卡混合模式">2.3 启动网卡混合模式</h3>
<p>两台主机网卡使用桥接模式,网卡混杂模式开启全部允许。</p>
<p>主机上配置的eth0网卡和创建的vlan网卡,均需要开启混杂模式。如果不开启混杂模式会导致macvlan网络无法访问外界,具体在不使用vlan时,表现为无法ping通路由,无法ping通同一网络内其他主机。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ip link <span class="nb">set</span> eth0 promisc on
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> eth0  promisc off
</span></span></code></pre></td></tr></table>
</div>
</div><p>开启后查看网卡状态</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ ip addr
</span></span><span class="line"><span class="cl">2: eth0: &lt;BROADCAST,MULTICAST,PROMISC,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc pfifo_fast state UP qlen <span class="m">1000</span>
</span></span><span class="line"><span class="cl">    link/ether 00:0c:29:84:f3:29 brd ff:ff:ff:ff:ff:ff
</span></span><span class="line"><span class="cl">    inet 10.0.0.15/24 brd 10.0.0.255 scope global eth0
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">    inet6 fe80::20c:29ff:fe84:f329/64 scope link 
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中<font color="#f8070d" size=3><code>BROADCAST,MULTICAST,PROMISC,UP,LOWER_UP</code></font>的<font color="#f8070d" size=3><code>PROMISC</code></font>说明网卡eth0已开启成混杂模式。</p>
<hr>
<p>注：以上设置临时生效</p>
<hr>
<h3 id="基于macvlan构建docker跨宿主机通讯">基于macvlan构建docker跨宿主机通讯</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker network create <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-d macvlan <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--subnet<span class="o">=</span>10.10.0.0/24 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--gateway<span class="o">=</span>10.10.0.254 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-o <span class="nv">parent</span><span class="o">=</span>eth0 mvl1
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<p><font color="#0215cd" size=3> 说明：容器默认使用主机的DNS设置，因此无需配置DNS服务器。</font></p>
<hr>
<p>查看创建结果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ docker network ls 
</span></span><span class="line"><span class="cl">NETWORK ID          NAME                DRIVER              SCOPE
</span></span><span class="line"><span class="cl">3d2449dfe4b1        bridge              bridge              <span class="nb">local</span>
</span></span><span class="line"><span class="cl">7110f9183457        host                host                <span class="nb">local</span>
</span></span><span class="line"><span class="cl">9852fc2a7109        mvl1                macvlan             <span class="nb">local</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在node01上运行容器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker run -tid --name c1 --net mvl1 --ip 10.10.0.1 busybox
</span></span></code></pre></td></tr></table>
</div>
</div><p>在node02上运行容器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker run -tid --name c2 --net mvl1 --ip 10.10.0.2 busybox
</span></span></code></pre></td></tr></table>
</div>
</div><p>在C1上平C2 检查结果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">/ <span class="c1"># ifconfig</span>
</span></span><span class="line"><span class="cl">eth0      Link encap:Ethernet  HWaddr 02:42:0A:0A:00:01  
</span></span><span class="line"><span class="cl">          inet addr:10.10.0.1  Bcast:10.10.0.255  Mask:255.255.255.0
</span></span><span class="line"><span class="cl">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
</span></span><span class="line"><span class="cl">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
</span></span><span class="line"><span class="cl">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
</span></span><span class="line"><span class="cl">          collisions:0 txqueuelen:0 
</span></span><span class="line"><span class="cl">          RX bytes:0 <span class="o">(</span>0.0 B<span class="o">)</span>  TX bytes:0 <span class="o">(</span>0.0 B<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">lo        Link encap:Local Loopback  
</span></span><span class="line"><span class="cl">          inet addr:127.0.0.1  Mask:255.0.0.0
</span></span><span class="line"><span class="cl">          UP LOOPBACK RUNNING  MTU:65536  Metric:1
</span></span><span class="line"><span class="cl">          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
</span></span><span class="line"><span class="cl">          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
</span></span><span class="line"><span class="cl">          collisions:0 txqueuelen:1 
</span></span><span class="line"><span class="cl">          RX bytes:0 <span class="o">(</span>0.0 B<span class="o">)</span>  TX bytes:0 <span class="o">(</span>0.0 B<span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/ <span class="c1"># ping 10.10.0.2</span>
</span></span><span class="line"><span class="cl">PING 10.10.0.2 <span class="o">(</span>10.10.0.2<span class="o">)</span>: <span class="m">56</span> data bytes
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.10.0.2: <span class="nv">seq</span><span class="o">=</span><span class="m">0</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.397 ms
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.10.0.2: <span class="nv">seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.278 ms
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="构建macvlan与宿主机同网段docker网络">构建macvlan与宿主机同网段docker网络</h3>
<blockquote>
<p><strong>在两台主机上分别创建docker网络</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker network create -d macvlan --subnet<span class="o">=</span>10.0.0.0/24 --gateway<span class="o">=</span>10.0.0.2 -o <span class="nv">parent</span><span class="o">=</span>eth0 mvl1
</span></span></code></pre></td></tr></table>
</div>
</div><p>说明：</p>
<ul>
<li><font color="#f8070d" size=3><code>--gateway</code></font>为宿主机的网关，如宿主机为物理机则设置路由器的ip。</li>
<li><font color="#f8070d" size=3><code>--subnet</code></font>为宿主机所在网段。</li>
</ul>
<blockquote>
<p><strong>在两台主机上分别创建容器</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">docker run -ti --net mvl1 --ip 10.0.0.4 busybox
</span></span><span class="line"><span class="cl">docker run -ti --net mvl1 --ip 10.0.0.3 busybox
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>测试网络连通情况</strong></p>
</blockquote>
<p>ping网关，结论：通。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">/ <span class="c1"># ping 10.0.0.2</span>
</span></span><span class="line"><span class="cl">PING 10.0.0.2 <span class="o">(</span>10.0.0.2<span class="o">)</span>: <span class="m">56</span> data bytes
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.0.0.2: <span class="nv">seq</span><span class="o">=</span><span class="m">0</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">128</span> <span class="nv">time</span><span class="o">=</span>0.330 ms
</span></span></code></pre></td></tr></table>
</div>
</div><p>ping宿主机，结论：不通。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">/ <span class="c1"># ping 10.0.0.15</span>
</span></span><span class="line"><span class="cl">PING 10.0.0.15 <span class="o">(</span>10.0.0.15<span class="o">)</span>: <span class="m">56</span> data bytes
</span></span></code></pre></td></tr></table>
</div>
</div><p>ping其他宿主机，结论：通。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">/ <span class="c1"># ping 10.0.0.16</span>
</span></span><span class="line"><span class="cl">PING 10.0.0.16 <span class="o">(</span>10.0.0.16<span class="o">)</span>: <span class="m">56</span> data bytes
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.0.0.16: <span class="nv">seq</span><span class="o">=</span><span class="m">0</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.530 ms
</span></span></code></pre></td></tr></table>
</div>
</div><p>ping其他容器，结论：通。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">/ <span class="c1"># ping 10.0.0.3</span>
</span></span><span class="line"><span class="cl">PING 10.0.0.3 <span class="o">(</span>10.0.0.3<span class="o">)</span>: <span class="m">56</span> data bytes
</span></span><span class="line"><span class="cl"><span class="m">64</span> bytes from 10.0.0.3: <span class="nv">seq</span><span class="o">=</span><span class="m">0</span> <span class="nv">ttl</span><span class="o">=</span><span class="m">64</span> <span class="nv">time</span><span class="o">=</span>0.435 ms
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="带有vlan的macvlan">带有VLAN的macvlan</h2>
<h3 id="说明">说明</h3>
<p>单个Docker主机网络接口只能作为一个macvlan或ipvlan网络的父接口。然而，一个macvlan，一个第2层域和每个物理接口一个子网是现代虚拟化解决方案中相当严重的限制。幸运的是，Docker主机子接口可以作为macvlan网络的父接口。这与VLAN的Linux实现完全一致，其中802.1Q中继连接上的每个VLAN都在物理接口的子接口上。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/36a2cb7d.png" alt="image"  /></p>
<h3 id="vlan介绍">vlan介绍</h3>
<p>VLAN(Virtual Local Area Network)又称虚拟局域网，是指在局域网的基础上，采用网络管理软件构建的可跨越不同网段、不同网络的端到端的逻辑网络。</p>
<p>一个VLAN组成一个逻辑子网，即一个逻辑广播域，它可以覆盖多个网络设备，允许处于不同地理位置的网络用户加入到一个逻辑子网中。使用VLAN功能后，能够将网络分割成多个广播域。</p>
<p>Linux支持在物理网卡上创建vlan子接口。每个vlan子接口属于不同的二层域，所有的vlan子接口拥有相同的MAC地址。这点是和Macvlan子接口不同的地方。</p>
<blockquote>
<p><strong>vlan范围说明</strong></p>
</blockquote>
<table>
<thead>
<tr>
<th>范围</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>0，4095</td>
<td>保留 仅限系统使用 用户不能查看和使用这些VLAN</td>
</tr>
<tr>
<td>1 正常</td>
<td>Cisco默认VLAN 用户能够使用该VLAN，但不能删除它</td>
</tr>
<tr>
<td>2-1001</td>
<td>正常 用于以太网的VLAN 用户可以创建、使用和删除这些VLAN</td>
</tr>
<tr>
<td>1002-1005</td>
<td>正常 用于FDDI和令牌环的Cisco默认VLAN 用户不能删除这些VLAN</td>
</tr>
<tr>
<td>1006-1024</td>
<td>保留 仅限系统使用 用户不能查看和使用这些VLAN</td>
</tr>
<tr>
<td>1025-4094</td>
<td>扩展 仅用于以太网VLAN</td>
</tr>
</tbody>
</table>
<h3 id="环境准备-1">环境准备</h3>
<table>
<thead>
<tr>
<th>主机名</th>
<th>IP地址</th>
<th>地位</th>
<th>软件环境</th>
</tr>
</thead>
<tbody>
<tr>
<td>c1</td>
<td>10.10.0.1</td>
<td>容器01-02</td>
<td>docker</td>
</tr>
<tr>
<td>c2</td>
<td>10.10.0.2</td>
<td>容器01-02</td>
<td>docker</td>
</tr>
<tr>
<td>c3</td>
<td>10.10.0.3</td>
<td>容器02-01</td>
<td>docker</td>
</tr>
<tr>
<td>c4</td>
<td>10.10.0.4</td>
<td>容器02-02</td>
<td>docker</td>
</tr>
<tr>
<td>gateway01</td>
<td>10.0.0.253</td>
<td>容器01网关</td>
<td></td>
</tr>
<tr>
<td>gateway01</td>
<td>10.0.0.254</td>
<td>容器01网关</td>
<td></td>
</tr>
<tr>
<td>node01</td>
<td>10.0.0.15</td>
<td>宿主机01（vm虚拟机）</td>
<td>centos 7.3/docker-ce1806</td>
</tr>
<tr>
<td>node02</td>
<td>10.0.0.16</td>
<td>宿主机02（vm虚拟机）</td>
<td>centos 7.3/docker-ce1806</td>
</tr>
</tbody>
</table>
<h3 id="创建vlan">创建VLAN</h3>
<blockquote>
<p><strong>为node01物理网卡创建macvlan子接口</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ip link add link eth0 name eth0.100 <span class="nb">type</span> vlan id <span class="m">100</span>
</span></span><span class="line"><span class="cl">ip link add link eth0 name eth0.200 <span class="nb">type</span> vlan id <span class="m">200</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>启用macvlan</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">ip link <span class="nb">set</span> eth0.100 up
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> eth0.200 up
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>设置macvlan的ip和网关</strong></p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ip addr add 10.10.0.254/24 dev eth0.100
</span></span><span class="line"><span class="cl">ip addr add 10.20.0.254/24 dev eth0.200
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip route add default via 10.10.0.254 dev eth0.100
</span></span><span class="line"><span class="cl">ip route add default via 10.20.0.254 dev eth0.200
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考网址">参考网址</h2>
<p><a href="https://raid-zero.com/2017/08/02/exploring-docker-networking-host-none-and-macvlan/3/">Exploring Docker Networking – Host, None, and MACVLAN | raid-zero.com | Page 3</a></p>
<p><a href="http://hicu.be/docker-networking-macvlan-vlan-configuration">Docker Networking: macvlans with VLANs – HiCube</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>容器的资源限制</title>
      <link>https://www.oomkill.com/2018/06/container-limit/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2018/06/container-limit/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>默认情况下，容器没有任何资源限制，因此几乎耗尽docker主机之上，内核可分配给当前容器的所有资源。可以使用主机内核调度程序允许的尽可能多的给定资源。在此基础上Docker provides提供了控制容器可以使用多少内存，CPU或块IO的方法，设置docker run命令的运行时配置标志。</p>
<p>容器得以实现主要依赖于内核中的两个属性<font color="#f8070d" size=3><code>namespace cgroup</code></font>。其中许多功能都要求您的内核支持Linux功能。要检查支持，可以使用<code>docker info</code>命令。</p>
<p>Memory
OOME</p>
<p>在Linux主机上，如果内核检测到没有足够的内存来执行重要的系统功能，它会抛出OOME或<code>Out of Memory Exception</code>异常，并开始终止进程以释放内存资源。一旦发生OOME，任何进程都有可能被杀死，包括docker daemon自身在内。为此，Docker特地调整了docker daemon的OOM优选级，以免它被内核“正法”，但容器的优选级并未被调整。</p>
<p>工作逻辑为</p>
<p>在宿主机上跑有很多容器并包括系统级进程。系统级进程也包括docke daemon自身。当内核执行系统管理操作，如内核需要使用内存，发现可以内存已经为空，会启动评估操作，评估谁占用内存高。我们认为哪个资源占用内存高就该将其kill来释放内存空间。（需要注意的是占用内存高的进程也不一定被kill掉。A进程分配10G已使用5G，进程B分配1G已使用1G。A只使用50%内存，而B已经耗尽所有内存）。内核会提供这些进程进行评分，按照优先级逆序强制kill，直至可使用内存空间足够。此时内核就可以使用内存资源创建其他进程。</p>
<p>每一个进程被计算之后会有一个oom scores，得分越高就会被优先kill。得分是由内存申请分配空间等一系列复杂计算得知。当进程得分最高也不能被kill掉时，如docker daemon，此时需要调整优先级。每一个进程有一个oom.adj的参数，将优先级调整越低，计算的分数就越少。</p>
<p>在docker run时可以直接调整容器的OOM.adj参数。如果想限制容器能使用多少内存资源、或CPU资源，有专门的选项可以实现。非常重要的容器化应用需要在启动容器时调整其OOM.adj，还可以定义容器的策略，一旦被kill直接restart</p>
<p><a href="https://docs.docker.com/config/containers/resource_constraints/#limit-a-containers-access-to-memory">Limit a container&rsquo;s resources</a></p>
<p>限制一个容器能使用多少内存资源或CPU资源docker有专门的选项来实现</p>
<p><code>-m</code> 限制容器可用RAM空间。选项参数可以使用KB M G等作为接受单位使用。可单独使用。</p>
<p><code>--memory-swap</code> 设置容器可用交换分区大小。使用swap允许容器在容器耗尽可用的所有RAM时将多余的内存需求写入磁盘。<code>--memory-swap</code>是一个修饰符标志，只有在设置了&ndash;memorys时才有意义。</p>
<p><code>--memory-swap</code></p>
<table>
<thead>
<tr>
<th>--memory-swap</th>
<th style="text-align:left">--memory</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>正数S</td>
<td style="text-align:left">正数 M     </td>
<td>容器可用总空间为S，其中可用ram为M</td>
</tr>
<tr>
<td>0</td>
<td style="text-align:left">正数</td>
<td>M相当于未设置swap（unset）</td>
</tr>
<tr>
<td>unset（未设置）</td>
<td style="text-align:left">正数 M</td>
<td>若主机（Docker Host）启用了swap，则容器的可用swap为 <code>2*M</code></td>
</tr>
<tr>
<td>-1</td>
<td style="text-align:left">正数M</td>
<td>若主机（Docker Host）启用了swap，则容器可使用交换分区总空间大小为宿主机上的所有swap空间的swap资源</td>
</tr>
<tr>
<td></td>
<td style="text-align:left"></td>
<td>注意：在容器内使用free命令可以看到的swap空间并不具有其所展现出的空间指示意义。</td>
</tr>
</tbody>
</table>
<p>&ndash;memory-swappiness</p>
<p>用来限定容器使用交换分区的倾向性。</p>
<p>&ndash;memory-reservation</p>
<p>预留的内存空间</p>
<p>&ndash;oom-kill-disable</p>
<p>禁止oom被kill掉</p>
<p>默认情况下，每个容器对主机CPU周期的访问权限是不受限制的。可以设置各种约束来限制给定容器访问主机的CPU周期。大多数用户使用和配置默认CFS调度程序。在Docker 1.13及更高版本中，还可以配置实时调度程序。
<a href="https://docs.docker.com/config/containers/resource_constraints/#cpu">CPU Limit a container&rsquo;s resources</a></p>
<p>内核中进程管理子系统当中最重要的组件为进程角度器scheduler，非实时优先级,有效范围为100-139[-20,19]。因此每个进程的默认优先级为120。实时优先级0-99。调度100-139之间的进程有个非常重要的调度器CFS scheduler（完全公平调度器），公平调度每一个进程在需要执行时，去分配scores到这个进程上。</p>
<p>在各容器之间分配CPU资源选项：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>&ndash;cpu-shares</td>
<td>限制CPU使用个数的参数按比例切分当前系统上可用cpu资源。<br>例如：当前系统上运行2各容器，第一个为1024，第二个为512。这两个容器都尽可能多个使用CPU，会将CPU资源分3份，1024占2份，第二个容器占1份。可随时按比例调整CPU资源。</td>
</tr>
<tr>
<td>&ndash;cups</td>
<td>指定容器可以使用的可用CPU资源量。例如，如果主机有两个CPU并且已设置&ndash;cpus=&ldquo;1.5&rdquo;，则容器最多保证1.5个CPU。例如：4核CPU，4个使用总量为1.5而不是0使用100%，1使用50%。</td>
</tr>
<tr>
<td>&ndash;cpuset-cpus</td>
<td>限制CPU使用范围的参数。限制容器可以使用的特定CPU或核心。当有多个CPU，则容器可以使用的以逗号分隔的列表或连字符分隔的CPU范围。第一个CPU编号为0.有效值可能是0-3 <code>1,3</code>使用第二个和第四个CPU。</td>
</tr>
</tbody>
</table>
<p>docker pull lorel/docker-stress-ng</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用weave实现docker跨宿主机通讯</title>
      <link>https://www.oomkill.com/2018/06/weave-over-host/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2018/06/weave-over-host/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>项目地址：https://github.com/weaveworks/weave</p>
<blockquote>
<p>注：weave公司与2024年关门</p>
</blockquote>
<h2 id="weaves说明">weaves说明</h2>
<p>Weave是由weaveworks公司开发的解决Docker跨主机网络的解决方案，它能够创建一个虚拟网络，用于连接部署在多台主机上的Docker容器，这样容器就像被接入了同一个网络交换机，那些使用网络的应用程序不必去配置端口映射和链接等信息。</p>
<p>外部设备能够访问Weave网络上的应用程序容器所提供的服务，同时已有的内部系统也能够暴露到应用程序容器上。Weave能够穿透防火墙并运行在部分连接的网络上，另外，Weave的通信支持加密，所以用户可以从一个不受信任的网络连接到主机。</p>
<h3 id="weaves实现原理">weaves实现原理</h3>
<p><code>weave launch</code>初始化时会自动下载三个docker容器来辅助运行，并且创建linux网桥与docker网络</p>
<p>weave 运行了三个容器：</p>
<ul>
<li>weave 是主程序，负责建立<code>weave</code>网络，收发数据，提供 DNS 服务等。</li>
<li>weavevolumes容器提供卷存储</li>
<li>weavedb容器提供数据存储</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ docker images
</span></span><span class="line"><span class="cl">REPOSITORY             TAG                 IMAGE ID            CREATED             SIZE
</span></span><span class="line"><span class="cl">weaveworks/weavedb     latest              15c78a9b1895        <span class="m">4</span> weeks ago         698B
</span></span><span class="line"><span class="cl">weaveworks/weaveexec   2.4.0               bf0c403ea58d        <span class="m">4</span> weeks ago         151MB
</span></span><span class="line"><span class="cl">weaveworks/weave       2.4.0               7aa67bc6bc43        <span class="m">4</span> weeks ago         96.7MB
</span></span><span class="line"><span class="cl">   
</span></span></code></pre></td></tr></table>
</div>
</div><p>自动创建网桥</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ brctl show
</span></span><span class="line"><span class="cl">bridge name	      bridge id		       STP enabled	interfaces
</span></span><span class="line"><span class="cl">docker0		        8000.02426cf29450	 no		
</span></span><span class="line"><span class="cl">docker_gwbridge		8000.02420cb2e439	 no	 
</span></span><span class="line"><span class="cl">weave		          8000.a2ec14f583ef	 no	 vethwe-bridge
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>datapath：是一个openvswitch</li>
<li>vethwe-datapath@vethwe-bridge：是veth pair</li>
<li>vethwe-datapath：父设备是datapath</li>
<li>vxlan-6784：是vxlan interface，其maste也是datapath，weave主机之间通过Vxlan节能型通信</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ ifconfig
</span></span><span class="line"><span class="cl">datapath: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="m">1376</span>
</span></span><span class="line"><span class="cl">        inet6 fe80::e45d:12ff:fee2:9d69  prefixlen <span class="m">64</span>  scopeid 0x20&lt;link&gt;
</span></span><span class="line"><span class="cl">        ether e6:5d:12:e2:9d:69  txqueuelen <span class="m">1000</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">19</span>  bytes <span class="m">1060</span> <span class="o">(</span>1.0 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">8</span>  bytes <span class="m">648</span> <span class="o">(</span>648.0 B<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker0: <span class="nv">flags</span><span class="o">=</span>4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu <span class="m">1500</span>
</span></span><span class="line"><span class="cl">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255
</span></span><span class="line"><span class="cl">        ether 02:42:24:0d:54:06  txqueuelen <span class="m">0</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">0</span>  bytes <span class="m">0</span> <span class="o">(</span>0.0 B<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">0</span>  bytes <span class="m">0</span> <span class="o">(</span>0.0 B<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker_gwbridge: <span class="nv">flags</span><span class="o">=</span>4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu <span class="m">1500</span>
</span></span><span class="line"><span class="cl">        inet 172.18.0.1  netmask 255.255.0.0  broadcast 172.18.255.255
</span></span><span class="line"><span class="cl">        inet6 fe80::42:52ff:fe25:3b18  prefixlen <span class="m">64</span>  scopeid 0x20&lt;link&gt;
</span></span><span class="line"><span class="cl">        ether 02:42:52:25:3b:18  txqueuelen <span class="m">0</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">1032</span>  bytes <span class="m">89148</span> <span class="o">(</span>87.0 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">1032</span>  bytes <span class="m">89148</span> <span class="o">(</span>87.0 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">eth0: <span class="nv">flags</span><span class="o">=</span>4419&lt;UP,BROADCAST,RUNNING,PROMISC,MULTICAST&gt;  mtu <span class="m">1500</span>
</span></span><span class="line"><span class="cl">        inet 10.0.0.15  netmask 255.255.255.0  broadcast 10.0.0.255
</span></span><span class="line"><span class="cl">        inet6 fe80::20c:29ff:fe84:f329  prefixlen <span class="m">64</span>  scopeid 0x20&lt;link&gt;
</span></span><span class="line"><span class="cl">        ether 00:0c:29:84:f3:29  txqueuelen <span class="m">1000</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">97077</span>  bytes <span class="m">109615069</span> <span class="o">(</span>104.5 MiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">244</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">21805</span>  bytes <span class="m">3174138</span> <span class="o">(</span>3.0 MiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">lo: <span class="nv">flags</span><span class="o">=</span>73&lt;UP,LOOPBACK,RUNNING&gt;  mtu <span class="m">65536</span>
</span></span><span class="line"><span class="cl">        inet 127.0.0.1  netmask 255.0.0.0
</span></span><span class="line"><span class="cl">        inet6 ::1  prefixlen <span class="m">128</span>  scopeid 0x10&lt;host&gt;
</span></span><span class="line"><span class="cl">        loop  txqueuelen <span class="m">1</span>  <span class="o">(</span>Local Loopback<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">1032</span>  bytes <span class="m">89148</span> <span class="o">(</span>87.0 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">1032</span>  bytes <span class="m">89148</span> <span class="o">(</span>87.0 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">vethwe-bridge: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="m">1376</span>
</span></span><span class="line"><span class="cl">        inet6 fe80::f056:b7ff:fe0f:c146  prefixlen <span class="m">64</span>  scopeid 0x20&lt;link&gt;
</span></span><span class="line"><span class="cl">        ether f2:56:b7:0f:c1:46  txqueuelen <span class="m">0</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">272</span>  bytes <span class="m">25496</span> <span class="o">(</span>24.8 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">275</span>  bytes <span class="m">25670</span> <span class="o">(</span>25.0 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">vethwe-datapath: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="m">1376</span>
</span></span><span class="line"><span class="cl">        inet6 fe80::c495:98ff:fec0:508d  prefixlen <span class="m">64</span>  scopeid 0x20&lt;link&gt;
</span></span><span class="line"><span class="cl">        ether c6:95:98:c0:50:8d  txqueuelen <span class="m">0</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">1032</span>  bytes <span class="m">89148</span> <span class="o">(</span>87.0 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">1032</span>  bytes <span class="m">89148</span> <span class="o">(</span>87.0 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">vxlan-6784: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="m">65470</span>
</span></span><span class="line"><span class="cl">        ether 7a:a1:d9:e9:f7:39  txqueuelen <span class="m">1000</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">513</span>  bytes <span class="m">372948</span> <span class="o">(</span>364.2 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">520</span>  bytes <span class="m">379884</span> <span class="o">(</span>370.9 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">weave: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="m">1376</span>
</span></span><span class="line"><span class="cl">        inet6 fe80::469:deff:fe6b:f186  prefixlen <span class="m">64</span>  scopeid 0x20&lt;link&gt;
</span></span><span class="line"><span class="cl">        ether 06:69:de:6b:f1:86  txqueuelen <span class="m">1000</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX packets <span class="m">19</span>  bytes <span class="m">1060</span> <span class="o">(</span>1.0 KiB<span class="o">)</span>
</span></span><span class="line"><span class="cl">        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
</span></span><span class="line"><span class="cl">        TX packets <span class="m">8</span>  bytes <span class="m">648</span> <span class="o">(</span>648.0 B<span class="o">)</span>
</span></span><span class="line"><span class="cl">        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$  docker network ls
</span></span><span class="line"><span class="cl">NETWORK ID          NAME                DRIVER              SCOPE
</span></span><span class="line"><span class="cl">0ca046b6232c        bridge              bridge              <span class="nb">local</span>
</span></span><span class="line"><span class="cl">776a38c5868e        docker_gwbridge     bridge              <span class="nb">local</span>
</span></span><span class="line"><span class="cl">51bfcaafee94        weave               weavemesh           <span class="nb">local</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>自动创建docker网络<code>weave</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ brctl show
</span></span><span class="line"><span class="cl">bridge name	      bridge id		        STP enabled	  interfaces
</span></span><span class="line"><span class="cl">docker0		        8000.0242240d5406	  no		
</span></span><span class="line"><span class="cl">docker_gwbridge		8000.024252253b18	  no		         vethcb0a2e3
</span></span><span class="line"><span class="cl">weave		          8000.0669de6bf186	  no		         vethwe-bridge
</span></span><span class="line"><span class="cl">							                                       vethwl95e206ea7
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看<code>weave</code>网络的信息dirver为<code>&quot;Driver&quot;: &quot;weavemesh&quot;</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ docker network inspect weave
</span></span><span class="line"><span class="cl"><span class="o">[</span>
</span></span><span class="line"><span class="cl">    <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Name&#34;</span>: <span class="s2">&#34;weave&#34;</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Id&#34;</span>: <span class="s2">&#34;522dd1c8152750aa5862bdcc3c025bb07b9d66410f267503ae9c4305363d5a82&#34;</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Created&#34;</span>: <span class="s2">&#34;2018-08-27T17:27:37.265691267+08:00&#34;</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Scope&#34;</span>: <span class="s2">&#34;local&#34;</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Driver&#34;</span>: <span class="s2">&#34;weavemesh&#34;</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;EnableIPv6&#34;</span>: false,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;IPAM&#34;</span>: <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Driver&#34;</span>: <span class="s2">&#34;weavemesh&#34;</span>,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Options&#34;</span>: null,
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Config&#34;</span>: <span class="o">[</span>
</span></span><span class="line"><span class="cl">                <span class="o">{</span>
</span></span><span class="line"><span class="cl">                    <span class="s2">&#34;Subnet&#34;</span>: <span class="s2">&#34;10.32.0.0/12&#34;</span>
</span></span><span class="line"><span class="cl">                <span class="o">}</span>
</span></span><span class="line"><span class="cl">            <span class="o">]</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Internal&#34;</span>: false,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Attachable&#34;</span>: false,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Ingress&#34;</span>: false,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;ConfigFrom&#34;</span>: <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;Network&#34;</span>: <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;ConfigOnly&#34;</span>: false,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Containers&#34;</span>: <span class="o">{}</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Options&#34;</span>: <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="s2">&#34;works.weave.multicast&#34;</span>: <span class="s2">&#34;true&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="o">}</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Labels&#34;</span>: <span class="o">{}</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Weave网络会在每个宿主机上创建一个网桥，每个容器通过veth pair连接到这个Weave 网桥。容器里面的veth网卡会获取到Weave网络分配给的IP地址和子网掩码。每当容器启动时，会创建两个网络接口。<code>eth0if51</code> 与<code>docker_gwbridge</code> 同属于一个网段。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="m">65536</span> qdisc noqueue qlen <span class="m">1</span>
</span></span><span class="line"><span class="cl">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
</span></span><span class="line"><span class="cl">    inet 127.0.0.1/8 scope host lo
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">48: ethwe0@if49: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu <span class="m">1376</span> qdisc noqueue 
</span></span><span class="line"><span class="cl">    link/ether 3e:78:8b:2e:c9:4b brd ff:ff:ff:ff:ff:ff
</span></span><span class="line"><span class="cl">    inet 10.40.0.0/12 brd 10.47.255.255 scope global ethwe0
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">50: eth0@if51: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu <span class="m">1500</span> qdisc noqueue 
</span></span><span class="line"><span class="cl">    link/ether 02:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff
</span></span><span class="line"><span class="cl">    inet 172.18.0.2/16 brd 172.18.255.255 scope global eth0
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中<code>ethwe0@if49</code>，从名称上看出与weave相关，其对应的编号是48。我们从宿主机上面ip link进行查看，<code>ethwe0@if49</code>与<code>vethwle9c9e24ce@if48</code>是一对veth pair，而且被挂在了weave网桥上</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">49: vethwle9c9e24ce@if48: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1376</span> qdisc noqueue master weave state UP 
</span></span><span class="line"><span class="cl">    link/ether 1a:c5:52:37:66:72 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="m">1</span>
</span></span><span class="line"><span class="cl">    inet6 fe80::18c5:52ff:fe37:6672/64 scope link 
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">51: veth9c86c85@if50: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc noqueue master docker_gwbridge state UP 
</span></span><span class="line"><span class="cl">    link/ether da:57:cc:0c:7d:32 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="m">1</span>
</span></span><span class="line"><span class="cl">    inet6 fe80::d857:ccff:fe0c:7d32/64 scope link 
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">weave		8000.a2ec14f583ef	no		vethwe-bridge
</span></span><span class="line"><span class="cl">							                  vethwle9c9e24ce
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="weave安装配置">weave安装配置</h2>
<p>项目地址：https://github.com/weaveworks/weave</p>
<h3 id="环境准备">环境准备</h3>
<p>环境要求：</p>
<ul>
<li>linux内核版本为3.8以上</li>
<li>dockers版本为1.10.0或更高</li>
</ul>
<table>
<thead>
<tr>
<th>主机名</th>
<th>IP地址</th>
<th>软件环境</th>
</tr>
</thead>
<tbody>
<tr>
<td>node01</td>
<td>10.0.0.15</td>
<td>docker-1806 weare</td>
</tr>
<tr>
<td>node02</td>
<td>10.0.0.16</td>
<td>docker-1806 weare</td>
</tr>
</tbody>
</table>
<h3 id="下载安装weave">下载安装weave</h3>
<p>Weave不需要集中式的key-value存储，所以安装和运行都很简单。直接把Weave二进制文件下载到系统中就可以了。主从节点都需要安装。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">wget -O /usr/local/bin/weave <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>https://github.com/weaveworks/weave/releases/download/v2.4.0/weave <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>chmod +x /usr/local/bin/weave
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="reference">Reference</h2>
<p>1 <a href="https://www.cnblogs.com/bigberg/p/8694971.html">Docker网络 Weave - Bigberg - 博客园</a></p>
<p>2 <a href="https://thenewstack.io/end-of-an-era-weaveworks-closes-shop-amid-cloud-native-turbulence/">End of an Era: Weaveworks Closes Shop Amid Cloud Native Turbulence</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
