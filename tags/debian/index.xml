<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>debian on Cylon&#39;s Collection</title>
    <link>https://www.oomkill.com/tags/debian/</link>
    <description>Recent content in debian on Cylon&#39;s Collection</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 29 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.oomkill.com/tags/debian/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Debian网络配置</title>
      <link>https://www.oomkill.com/2024/06/debian-network-configration/</link>
      <pubDate>Sat, 29 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2024/06/debian-network-configration/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="设置一个网络接口">设置一个网络接口</h2>
<p>debian 中网络接口的配置文件是在 <em><strong>/etc/network/interfaces</strong></em>，可以设置 “静态地址” 或 “DHCP”</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cat /etc/network/interfaces
</span></span><span class="line"><span class="cl"># This file describes the network interfaces available on your system
</span></span><span class="line"><span class="cl"># and how to activate them. For more information, see interfaces(5).
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">source /etc/network/interfaces.d/*
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># The loopback network interface
</span></span><span class="line"><span class="cl">auto lo
</span></span><span class="line"><span class="cl">auto ens33
</span></span><span class="line"><span class="cl">iface lo inet loopback
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># The primary network interface
</span></span><span class="line"><span class="cl">allow-hotplug ens33
</span></span><span class="line"><span class="cl">iface ens33 inet static
</span></span><span class="line"><span class="cl">address 10.0.0.14
</span></span><span class="line"><span class="cl">netmast 255.255.255.0
</span></span><span class="line"><span class="cl">gateway 10.0.0.2
</span></span><span class="line"><span class="cl">root@debian-template:~# cat /etc/network/interfaces
</span></span><span class="line"><span class="cl"># This file describes the network interfaces available on your system
</span></span><span class="line"><span class="cl"># and how to activate them. For more information, see interfaces(5).
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">source /etc/network/interfaces.d/*
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># The loopback network interface
</span></span><span class="line"><span class="cl"># 网络接口自动启动
</span></span><span class="line"><span class="cl">auto lo
</span></span><span class="line"><span class="cl">auto ens33
</span></span><span class="line"><span class="cl"># 使用dhcp配置网络接口
</span></span><span class="line"><span class="cl">iface eth0 inet dhcp
</span></span><span class="line"><span class="cl">iface lo inet loopback
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># The primary network interface
</span></span><span class="line"><span class="cl">allow-hotplug ens33
</span></span><span class="line"><span class="cl"># 使用静态地址配置网络接口
</span></span><span class="line"><span class="cl">iface ens33 inet static
</span></span><span class="line"><span class="cl">    address 10.0.0.14
</span></span><span class="line"><span class="cl">    netmast 255.255.255.0
</span></span><span class="line"><span class="cl">    gateway 10.0.0.2
</span></span></code></pre></td></tr></table>
</div>
</div><p>Enjoy 👏👏</p>
<h2 id="reference">Reference</h2>
<p><a href="https://wiki.debian.org/NetworkConfiguration">NetworkConfiguration</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>安装Debian12 (Bookworm) Step-by-Step</title>
      <link>https://www.oomkill.com/2024/06/debian12-install-tutorial-step-by-step/</link>
      <pubDate>Sat, 29 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2024/06/debian12-install-tutorial-step-by-step/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="preparation">Preparation</h2>
<p>debian12 几乎可以使用任何旧的计算机硬件，因为最小安装的要求非常低。以下是最低要求和推荐要求：</p>
<table>
<thead>
<tr>
<th>最低要求</th>
<th>推荐要求</th>
</tr>
</thead>
<tbody>
<tr>
<td>存储：10 Gigabytes<br>内存：512 Megabytes<br>CPU: 1 GigaHertz</td>
<td>存储：10 Gigabytes<br/>内存：2 Gigabytes<br/>CPU: 1 GigaHertz or more</td>
</tr>
</tbody>
</table>
<h3 id="如何选择下载安装包">如何选择下载安装包</h3>
<ul>
<li><a href="https://www.debian.org/CD/http-ftp/#stable">offical mirror</a></li>
<li><a href="https://developer.aliyun.com/mirror/debian">aliyun mirror</a></li>
</ul>
<p>官网提供了安装包的下载，其中CD是网络安装，DVD是离线安装</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802174122790.png" alt="image-20220802174122790"  /></p>
<center class="podsc">debian官方下载页面</center>
<blockquote>
<p>Notes：CD安装包很小，下载下来是 <code>debian-11.4.0-amd64-netinst.iso</code> 如名所示，这是一个网络安装包，所以推荐下载DVD部分，可以达到离线安装的效果</p>
<p>截至文章编写日期，debian-12.5.0-amd64-DVD-1.iso 大小是 3.7G</p>
<p>Debian12 EOL：<strong>June 30th, 2028</strong></p>
</blockquote>
<h2 id="安装步骤">安装步骤</h2>
<p>在界面中选择“Install”，安装将开始。如果图形化安装可以选择“Graphical install”，这里选择“Install”。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/cylonchau/imgbed/img/image-20240629210929051.png" alt="image-20240629210929051"  /></p>
<center class="podsc">欢迎页面</center>
<p>完成后，系统将提示选择安装时的“语言”。选择喜欢的语言，然后按“Enter”。这里选择英文</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124137343.png" alt="image-20220802124137343"  /></p>
<center class="podsc">选择语言页面</center>
<p>这将是接下来安装步骤</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124701368.png" alt="image-20220802124701368"  /></p>
<center class="podsc">安装步骤概述</center>
<h3 id="选择位置与键盘布局">选择位置与键盘布局</h3>
<p>选择地区，这里选择美国</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/cylonchau/imgbed/img/image-20240629211110796.png" alt="image-20240629211110796"  /></p>
<center class="podsc">选择区域</center>
<p>下面部署时选择键盘布局：中国大陆使用的键盘布局是美国-英语，不要选择英国-英语之类，布局是不一样的，会存在按键输出的结果会不同</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124219600.png" alt="image-20220802124219600"  /></p>
<center class="podsc">选择键盘布局</center>
<p>完成上述操作后，将开始加载镜像。等待扫描完成。。。。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124450675.png" alt="image-20220802124450675"  /></p>
<center class="podsc">等待扫描组件</center>
<h3 id="设置主机名和域名">设置主机名和域名</h3>
<p>这步骤中将配置一个“主机名”。与一个“域”名称。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124523526.png" alt="image-20220802124523526"  /></p>
<center class="podsc">配置主机名</center>
<p>“域” 可以选择留空确定</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124552521.png" alt="image-20220802124552521"  /></p>
<center class="podsc">配置域</center>
<p>完成上述操作后，安装程序将提示需要设置 root 密码。输入您的 root 密码，然后在重新输入以进行验证后继续。</p>
<blockquote>
<p><strong>Tips</strong>: 这里建议设置密码，不设置密码会导致安装完成后无法进入 root 用户**，**这样就需要根据先登录普通用户，然后通过 sudo切换过去。</p>
</blockquote>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/cylonchau/imgbed/img/image-20240629211449365.png" alt="image-20240629211449365"  /></p>
<center class="podsc">设置Root密码</center>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124732048.png" alt="image-20220802124732048"  /></p>
<center class="podsc">设置Root密码 - 二次确认</center>
<h3 id="设置非root用户名账户和密码">设置非ROOT用户名、账户和密码</h3>
<p>下一步创建一个非ROOT用户，这个步骤是必须的，并为这个新创建的帐户分配一个密码。以下截图将描述将如何完成此操作。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124814435.png" alt="image-20220802124814435"  /></p>
<center class="podsc">配置普通用户</center>
<p>为这个用户配置密码</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124841150.png" alt="image-20220802124841150"  /></p>
<center class="podsc">为普通用户配置密码</center>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124905092.png" alt="image-20220802124905092"  /></p>
<center class="podsc">为普通用户配置密码——二次确认</center>
<h3 id="设置时钟时区">设置时钟时区</h3>
<p>当下面进度条完成后，则会进入设置时区的界面</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/cylonchau/imgbed/img/image-20240629211712907.png" alt="image-20240629211712907"  /></p>
<center class="podsc">从互联网设置网络时间服务</center>
<p>Eastern 美东时间</p>
<p>Central 北美中部</p>
<p>Mountain 北美山区时区</p>
<p>Pacific 太平洋时区</p>
<p>Alaska 阿拉斯加夏令时间</p>
<p>Hawaii 夏威夷时区</p>
<p>Arizona 亞利桑时区</p>
<p>East Indiana 印第安纳时区</p>
<p>Samoa 萨摩亚时间</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124936969.png" alt="image-20220802124936969"  /></p>
<center class="podsc">配置时区</center>
<h3 id="对磁盘分区">对磁盘分区</h3>
<p>此步骤磁盘进行分区。这里选择 “手动” 选项</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802125018955.png" alt="image-20220802125018955"  /></p>
<center class="podsc">选择分区模式</center>
<p>选择手动进行划分为所需的分区。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802125033249.png" alt="image-20220802125033249"  /></p>
<center class="podsc">选择硬盘</center>
<p>创建新的分区表</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802125051231.png" alt="image-20220802125051231"  /></p>
<center class="podsc">创建分区表</center>
<p>选择空闲的空间进行分区</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802125208239.png" alt="image-20220802125208239"  /></p>
<center class="podsc">选择空闲空间</center>
<p>创建一个新分区</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802125220023.png" alt="image-20220802125220023"  /></p>
<center class="podsc">创建一个新分区</center>
<p>为/boot划分分区</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802170825990.png" alt="image-20220802170825990"  /></p>
<center class="podsc">为/boot分区分配空间</center>
<p>挂载点选择 boot</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/cylonchau/imgbed/img/image-20240629212607957.png" alt="image-20240629212607957"  /></p>
<center class="podsc">选择挂载点</center>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802170914699.png" alt="image-20220802170914699"  /></p>
<center class="podsc">最终划分的分区</center>
<p>这里选No就行，提示是指不使用swap分区，No就是继续，Yes将返回分区页面</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802171300600.png" alt="image-20220802171300600"  /></p>
<center class="podsc">对于swap分区的提示</center>
<p>创建新分区需要格式化，当前的分区将会被删除，如果是新磁盘选择Yes格式化分区</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802171406223.png" alt="image-20220802171406223"  /></p>
<center class="podsc">确认格式化，进行分区</center>
<h3 id="base-system安装">Base System安装</h3>
<p>这里等待安装基础系统</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802171427005.png" alt="image-20220802171427005"  /></p>
<center class="podsc">确认格式化，进行分区</center>
<p>几分钟后， 安装后会弹出一个界面，这里会扫描其他的媒介 (media)，这里因为没有，选择No就行。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802171719092.png" alt="image-20220802171719092"  /></p>
<center class="podsc">扫描其他媒介</center>
<p>包管理镜像配置，这里选择 “No” 以加快安装速度</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/cylonchau/imgbed/img/image-20240629212955366.png" alt="image-20240629212955366"  /></p>
<center class="podsc">包管理提示</center>
<h3 id="离线安装">离线安装</h3>
<p>会扫描安装的媒介，这里也有提示，如果没有额外的媒介，可以跳过该步骤</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802175852901.png" alt="image-20220802175852901"  /></p>
<center class="podsc">扫描其他媒介</center>
<p>配置网络镜像，建议配置下，如果不需要No即可</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802180008399.png" alt="image-20220802180008399"  /></p>
<blockquote>
<p>Tips: 如果选择 “No” , 那么安装完后，是没有apt包管理的仓库配置的，需要自行修改 /etc/apt/sources.list 文件</p>
</blockquote>
<center class="podsc">配置网络镜像</center>
<blockquote>
<p>如果上面选择了 “No” 下面配置镜像地址部分则不会出现，可以直接跳转到 “根据要求调整安装” 的步骤</p>
</blockquote>
<p>接下来会弹出一个界面，请选择 “Debian镜像国家” 。这个是配置镜像地址的，选择自己的国家和镜像站即可</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802171823823.png" alt="image-20220802171823823"  /></p>
<center class="podsc">选择镜像国家</center>
<p>这里选择的是中国和中科大镜像</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802171903846.png" alt="image-20220802171903846"  /></p>
<center class="podsc">选择镜像地址</center>
<p>配置HTTP代理，不选择跳过</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802171929992.png" alt="image-20220802171929992"  /></p>
<center class="podsc">配置http代理</center>
<p>如果选择网络安装，到这步骤时安装程序现在将在选择相关的。首先，选择离您所在国家最近的位置。Debian 镜像位置和域后检索剩余的文件</p>
<p>这里提示有一个匿名调查，这里选No即可</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802180137667.png" alt="image-20220802180137667"  /></p>
<center class="podsc">匿名调查</center>
<h3 id="根据要求调整安装">根据要求调整安装</h3>
<p>在检索过程中，系统将提示需要自行选择以下预定义软件中的一个或多个。最小化安装仅选择基础系统与SSH即可</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802180225093.png" alt="image-20220802180225093"  /></p>
<center class="podsc">安装组件选择</center>
<p>接下来等待安装即可</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802180343919.png" alt="image-20220802180343919"  /></p>
<center class="podsc">安装过程</center>
<blockquote>
<p>Notes：选择了DVD ISO将离线完成安装，如果使用了CD ISO，将从互联网上检索包并安装，这个时间将很长。</p>
</blockquote>
<p>其中会提示一个引导按章，直接Yes即可</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802180753937.png" alt="image-20220802180753937"  /></p>
<p>到了这里即将安装完成</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802180829194.png" alt="image-20220802180829194"  /></p>
<center class="podsc">到了这里即将安装完成</center>
<h3 id="完成debian12最小化安装">完成Debian12最小化安装</h3>
<p>看到到这里已经完成了安装，按“Continue”继续重启后即可</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802180902242.png" alt="image-20220802180902242"  /></p>
<center class="podsc">完成安装</center>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802180923668.png" alt="image-20220802180923668"  /></p>
<center class="podsc">看到系统的引导界面</center>
<p>Enjoy 👏👏</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Unix归档模式 Unix ar - 深入剖析与构建deb包</title>
      <link>https://www.oomkill.com/2023/03/deb-package/</link>
      <pubDate>Wed, 29 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2023/03/deb-package/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="deb-概述">deb 概述</h2>
<p>deb包（.deb）是 Debian 和基于 Debian衍生操作系统（如Ubuntu）中使用的一种软件包的格式。deb是一种基于 Unix ar <sup><a href="#3">[3]</a></sup> (<em><strong>Unix archiver</strong></em>) 的归档文件。其中包含二进制文件、配置文件和其他软件所需的资源。deb包可用于安装、升级和卸载软件包。通常，Debian操作系统的用户使用apt（Advanced Package  Tool）等软件包管理器工具来管理deb包。通过这些工具，用户可以轻松下载、安装和管理软件包，而无需手动编译、安装和解决软件包之间的依赖关系。</p>
<h3 id="deb-vs-rpm">deb VS rpm</h3>
<ul>
<li>包的归档格式不同：deb是基于 ar 的归档模式，而RPM是基于 cpio 的归档模式</li>
<li>包的结构不同：deb包要求必须包含一个 <code>DEBIAN</code> 目录；而RPM不需要以来额外的目录结构</li>
<li>包的依赖机制不同：
<ol>
<li>Deb使用epoch，而RPM使用build  number：在Deb中，epoch是一个可选的字段，它允许呈现基准日期之前的先前版本。而在RPM中，build  number表示软件包编译的次数。因此，在Deb中，为了解决版本控制问题，epoch是非常重要的，而在RPM中，则更关注build  number。</li>
<li>Deb使用逆向依赖关系，而RPM使用依赖关系：在Deb中，依赖项是从包本身向外扩展，在解决依赖问题时可以通过逆向依赖关系进行。而在RPM中，则更喜欢使用依赖关系直接指向其他包。</li>
<li>Deb允许代理软件包，而RPM则不允许代理软件包：Deb中，软件包可以使用另一种软件包的代理来提供功能。在RPM中，软件包需要直接引用相关的软件包。这意味着在Deb中，对于版本控制，可以用另一种代理软件包来解决问题，而在RPM中必须直接引用包。</li>
<li>Deb允许多重依赖关系，RPM则不允许：Deb允许使用多个依赖项列表，以便包与不同版本的库兼容。在RPM中，需要在每个包中定义依赖项和其版本，不能使用多重依赖。</li>
</ol>
</li>
</ul>
<h2 id="deb包的分析">deb包的分析</h2>
<h3 id="deb包的结构">deb包的结构</h3>
<p>deb 最重要的是 <strong>控制文件</strong> <code>Control</code> ，该文件记录了deb包与其安装的程序的信息。</p>
<p>在deb包内部包含一组模拟 Linux 文件系统的文件夹，例如 <code>/usr</code>, <code>/usr/bin</code>, <code>/opt</code>等等。  放置在其中一个目录中的文件将在安装期间复制到实际文件系统中的相同位置。  因此，例如将二进制文件放入 <code>&lt;.deb&gt;/usr/local/bin/binaryfile</code> 将被安装到  <code>/usr/local/bin/binaryfile</code>.</p>
<p>对于deb 包的命名是遵循着一个特定的格式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&lt;name&gt;_&lt;version&gt;-&lt;revision&gt;_&lt;architecture&gt;.deb
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>&lt;name&gt;</code> 构建的deb包名称，如nginx</li>
<li><code>&lt;version&gt;</code> 程序的版本号 ，如1.20</li>
<li><code>&lt;revision&gt;</code> 当前 deb 包的版本号</li>
<li><code>&lt;architecture&gt;</code> 表示构建出的包的操作系统架构，如，amd64、i386</li>
</ul>
<p>如果你构建一个nginx-1.20的arm操作系统下的，那么deb包名格式则为 <code>nginx_1.20-1_arm64.deb</code></p>
<h3 id="control文件-supa-id22asup">control文件 <sup><a id="2">[2]</a></sup></h3>
<p>Deb软件包（.deb文件）中的 控制文件 (<em><strong>control</strong></em>) 包含有关软件包的 <font color="#f8070d" size=3>源码元数据</font> 和 <font color="#f8070d" size=3>二进制元数据 </font>，用于描述例如软件包的名称、版本、描述、作者、许可证和依赖关系等信息。在创建和打包Deb软件包时，必须创建和编辑control文件以包含关于软件包的所有必要信息。</p>
<p>控制文件 (<em><strong>control</strong></em>) 由一个或多节组成，各节之间用空行分隔。解析器可以接受仅由空格和制表符组成的行作为节分隔符，但控制文件应该使用空行。一些控制文件只允许一个节；其他人允许多个，在这种情况下，每个节通常指的是不同的包，控制文件中节的顺序很重要。</p>
<p>而 Control 文件存在两种，一种为 <font color="#f8070d" size=3>源代码包控制文件</font> (<em><strong>Source package control files</strong></em>)，这种类型的控制文件主要用于定义源代码在构建时的一些元数据信息，例如需要构建一个nginx.deb，那么源代码控制文件就是用于描述下载下来的源代码相关的数据，这种文件被放置在目录 <code>debian/control</code>；</p>
<p>另一种为<font color="#f8070d" size=3>二进制包控制文件</font> (<em><strong>Binary package control files</strong></em>)，这部分是控制在nginx编译后制作成deb包的控制文件，这种控制文件被放置在  <code>DEBIAN/control</code>。</p>
<p>另外还存在一种 <font color="#f8070d" size=3>源代码控制文件</font> ( <em><strong>Debian source control files</strong></em> ) ，包含完整的源代码和软件包元数据信息。它们通常存储在软件包的源代码存储库中，供开发人员和维护人员使用。包含在源代码控制文件中的信息包括软件包名称、版本、维护人员、许可证、依赖关系、构建和安装指令集等。</p>
<p>例如下面为 <code>control</code> 文件常见的字段类型：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Package</td>
<td>&lt;软件包的名称&gt;</td>
</tr>
<tr>
<td>Priority</td>
<td>&lt;软件包的优先级&gt;</td>
</tr>
<tr>
<td>Section</td>
<td>&lt;软件包的分类&gt;</td>
</tr>
<tr>
<td>Version</td>
<td>&lt;软件包的版本&gt;</td>
</tr>
<tr>
<td>Depends</td>
<td>&lt;软件包的依赖关系&gt;</td>
</tr>
<tr>
<td>Architecture</td>
<td>&lt;软件包的体系结构&gt;</td>
</tr>
<tr>
<td>Maintainer</td>
<td>&lt;软件包的维护者&gt;</td>
</tr>
<tr>
<td>Description</td>
<td>&lt;软件包的描述&gt;</td>
</tr>
<tr>
<td>Rules-Requires-Root <sup><a id="1">[1]</a></sup></td>
<td>Rules-Requires-Root是Debian软件包中一个可选的控制文件，定义了软件包在安装和运行时是否需要超级用户权限；No/Yes</td>
</tr>
<tr>
<td>Standards-Version:</td>
<td>deb包 控制文件 中的一个元素，用于指定软件包所遵循的标准和规范的版本号。该字段的值应该是一个数字，例如：“3.9.8”,  “2.3.0.0”</td>
</tr>
</tbody>
</table>
<p>其中，上面给出的通常是必须指定的字段，如一个control 文件必须包含 <code>Package</code> 、<code>Priority</code>、<code>Section</code>、<code>Version</code>、<code>Architecture</code>、<code>Maintainer</code> 和<code>Description</code> 。由于等 deb软件包通常都安装在系统上，在 control 文件中指定软件包的依赖关系非常重要。这可通过Depends字段完成。</p>
<p>例如下面是一个 control 文件的示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 源代码控制文件
</span></span><span class="line"><span class="cl">Source: nginx
</span></span><span class="line"><span class="cl">Maintainer: root &lt;root@debian-template&gt;
</span></span><span class="line"><span class="cl">Section: comm
</span></span><span class="line"><span class="cl">Priority: optional
</span></span><span class="line"><span class="cl">Homepage: https://nginx.org
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 二进制控制文件
</span></span><span class="line"><span class="cl">Package: nginx
</span></span><span class="line"><span class="cl">Version: 1.22.1
</span></span><span class="line"><span class="cl">Architecture: amd64
</span></span><span class="line"><span class="cl">Standards-Version: 1.0.0
</span></span><span class="line"><span class="cl">Build-Depends: debhelper-compat (= 13)
</span></span><span class="line"><span class="cl">Description: Nginx HTTP server Nginx (&#34;engine x&#34;) is a web server created by Igor Sysoev. It is known for its high performance, stability, and low resource consumption.
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="rules文件-supa-id55asup">rules文件 <sup><a id="5">[5]</a></sup></h3>
<h4 id="rules文件的规范">rules文件的规范</h4>
<p>rules文件在deb中被成为 主要构建脚本 (<em><strong>Main building script</strong></em>)，这个文件必须是一个可执行的Makefile。它包含了特定于包的源代码（如果需要）和构建一个或多个二进制包的指令。</p>
<p>debian/rules文件 必须以 <code>#!/usr/bin/make  -f</code> 开头，这个声明是为了通过调用其名称而不是显式调用make来调用它。也就是说，调用 <code>make -f debian/rules  args...</code> 或 <code>./debian/rules args...</code> 必须产生相同的行为。</p>
<p>在没有使用其他方法的充分理由的情况下，实现Debian软件包构建过程的推荐方式是使用dh工具。这包括debian/rules构建脚本的内容。dh是Debian中最常见的封装辅助工具。使用它通常可以节省遵守本文档中规则的工作，因为dh将自动实现许多规则而无需明确的指示。</p>
<p>rules 文件内置了一些阶段，这标志着整个源码包构建的过程；如 debian/rules 必须由：clean、binary、binary-arch、binary-indep、build、build-arch 和 build-indep，如果通过 <code>dpkg-buildpackage</code> 构建时，这些阶段则是调用的阶段。</p>
<p>需要注意的一点是，由于交互式 debian/rules 脚本无法自动编译该软件包，也使其他人难以复制相同的二进制软件包，因此所有必需的阶段都必须是非交互式的。它还遵循这些阶段所依赖的任何阶段也必须是非交互式的。</p>
<h4 id="rules文件的构建过程">rules文件的构建过程</h4>
<p>通俗来说，rules文件是一个将源码包转换为二进制包的一个构建模式，首先，binarey二进制包写入解压后的源码包的父目录。其次，所需的目标可以写入 /tmp、/var/tmp 和 TMPDIR 环境变量指定的目录，但不得依赖于其中任何一个的内容。</p>
<p>这个限制旨在防止源代码包构建创建和依赖于其外部状态，从而影响多个独立的重建过程。特别地，所需的目标不能尝试写入 HOME 目录。</p>
<p>rules文件的过程，也是阶段：</p>
<ul>
<li><em><strong>build</strong></em> (required)：该阶段应该执行软件包的所有配置和编译操作，例如 make，这个阶段执行前，会先运行 <code>clean</code> 阶段</li>
<li><em><strong>build-indep</strong></em> 和 <em><strong>build-arch</strong></em> (required)
<ul>
<li>build-arch (required)：该阶段必须执行生成所有与架构（<em><strong>architecture</strong></em>）有关的二进制包，例如 make intall 好的 x86 的二进制文件</li>
<li>build-indep (required)： 该阶段执行生成所有与 架构（<em><strong>architecture</strong></em>）无关的二进制包操作，所需的所有配置和编译操作。build 阶段应该依赖于这些阶段，或者采取与调用这些阶段相同的操作，</li>
<li><code>build-arch</code> 和 <code>build-indep</code> 不能执行任何可能需要 root 权限的操作。</li>
<li>通俗来讲，这两个阶段会被用于操作构建完的事情，对于rpmbuild，这里操作就是%files的操作了。</li>
</ul>
</li>
<li><em><strong>binary</strong></em> (required), <em><strong>binary-arch</strong></em> (required), <em><strong>binary-indep</strong></em> (required)：
<ul>
<li><em><strong>binary</strong></em>：该阶段必须是用户从此源代码包生成二进制包所需的全部内容。它分为两个部分：binary-arch用于生成特定架构的二进制包，binary-indep用于生成其他类型的二进制包</li>
<li><em><strong>binary-*</strong></em> 阶段都应该依赖于 build 阶段或适当的 build-arch 或 build-indep 阶段，以便在没有构建该软件包时构建它。然后使用 dpkg-gencontrol 创建其控制文件以及<code>dpkg-deb</code> 构建成一个二进制包，并将它们放置在顶级目录的父目录中（即你执行构建的目录的上级），以创建相应的二进制包。</li>
<li><em><strong>binary-arch</strong></em> 和 <em><strong>binary-indep</strong></em> 两个阶段必须要存在。如果其中一个阶段无事可做（如果源代码仅生成单个二进制包，无论是否架构相关，始终是如此），它仍必须存在并始终成功。</li>
<li>根据Rules-Requires-Root字段的值的配置，binary阶段可能需要作为root用户调用。</li>
</ul>
</li>
<li><em><strong>clean</strong></em> (required)：该阶段将撤消 <em><strong>build</strong></em> 和 <em><strong>binary</strong></em> 阶段可能产生的所有效果，除了它应该保留在上次运行 <em><strong>binary</strong></em>  阶段时在父目录中创建的任何输出文件。</li>
<li><em><strong>patch</strong></em> (optional)：此阶段执行所需的任何其他操作，以使源代码包准备好进行编辑（解包其他上游归档文件、应用补丁等）</li>
</ul>
<p>这些阶段执行构建的工作目录，与deb包的工作目录不同，他的工作目录为当前目录作为包的根目录来使用，有一点需要注意的是，这里的架构的觉得为 dpkg-architecture 命令决定的，在不同架构机器上构建则为不同的架构的包</p>
<h3 id="工作目录">工作目录</h3>
<p>在构建deb软件包（.deb文件）时，通常需要将软件包的文件和目录安排在特定的文件目录中，这个特定目录就是打包时的工作目录，通过上面的解释，已知，deb包分为两种 <font color="#f8070d" size=3>源代码包</font> 和 <font color="#f8070d" size=3>二进制包</font>，而两中类型的工作目录不相同。</p>
<p>例如，我们需要构建一个源码软件包，假设为要为一个nginx制作 deb包，那么他的工作目录则为 debian，而control 文件 和 rule 文件则是必须的，<font color="#f8070d" size=3>封包的内容目录</font> 则为控制文件中 <code>Package</code> 配置的名字，这里配置的为 nginx，那么这个deb包封包时寻找的内容则为 <code>debian/nginx</code></p>
<p>在例如，我们需要构建一个二进制软件包，那么他的工作目录为<code> DEBIAN</code>，control文件与 changelog 则是必须的，而<font color="#f8070d" size=3>封包的内容目录</font> 当前目录，也就是 <code> DEBIAN</code>，制作时的控制文件这些不会被封入包中</p>
<p><strong>那么完整的制作流程为</strong>：</p>
<ul>
<li>在源代码目录下创建一个名为nginx的子目录 <code>mkdir debian</code></li>
<li>在nginx目录下创建名为 <code>DEBIAN</code> 的子目录，包含 <code>control</code> 文件，在<code>DEBIAN</code>目录中包含<code>control</code>文件是必须的，因为它是软件包元数据的中心存储库。</li>
<li>例如我们编译完的内容，nginx 的配置文件在 /etc/下，那么这个 etc 则在 nginx 子目录下</li>
<li>在工作目录下创建 rules 文件，这里面写明了构建的命令，例如：
<ul>
<li><code>build</code>：这个部分用于执行编译和构建软件的命令。</li>
<li><code>clean</code>：这个部分用于清除编译输出，以便你可以重新构建软件包。</li>
<li><code>install</code>：这个部分指定了如何将软件安装到目标系统中。</li>
<li><code>binary</code>：这个部分用于在 Debian 软件包中打包二进制文件。</li>
</ul>
</li>
<li>其中该结构中还包含一些钩子脚本文件 <code>debian/p*</code> 而这个  <code>p*</code>  文件的命名是固定的。下面是一些常见的 <code>p*</code> 文件名：
<ul>
<li><code>debian/package.install</code>：定义软件包中需要安装的文件和目录。</li>
<li><code>debian/package.manpages</code>：将软件包中的 man 页面添加到 man 手册中。</li>
<li><code>debian/package.docs</code>：将软件包中的文档添加到系统上的 <code>/usr/share/doc</code> 目录。</li>
<li><code>debian/package.preinst</code>：在软件包安装前执行的脚本。</li>
<li><code>debian/package.postinst</code>：在软件包安装后执行的脚本。</li>
<li><code>debian/package.prerm</code>：在软件包卸载前执行的脚本。</li>
<li><code>debian/package.postrm</code>：在软件包卸载后执行的脚本。</li>
</ul>
</li>
</ul>
<h2 id="实战从0构建一个-deb-包">实战：从0构建一个 deb 包</h2>
<h3 id="准备条件">准备条件</h3>
<p>上面介绍的为deb包的一些基础，作为实战的一些理论知识，下面将以nginx为代表将其制作为deb包；通过前面知识了解到，deb包分为 <font color="#f8070d" size=3>源代码包</font> 和 <font color="#f8070d" size=3>二进制包</font>，那么nginx明显为源代码包，我们就需要按照 源代码包 =》二进制包 这种顺序依次定义，而 debian 提供了一系列的命令可以帮助生成这些文件，我们只需要改写具体的逻辑就可以完成包的制作，如 <code>dh_make</code> , <code>dh_install</code> 等命令。</p>
<p>对于 deb 包的标准，debian 官方有一些列的教程，称为 <em><strong>Debian Policy Manual</strong></em> <sup><a id="4">[4]</a></sup>  ，可以通过这个手册，整个deb包中所需的一些理论知识，控制文件，维护脚本，包间的依赖关系，共享库等进行详细的说明</p>
<h3 id="dh工具">dh工具</h3>
<p>dh <sup><a id="6">[6]</a></sup>（Debhelper）工具是Debian中自带的一个构建deb包的工具集。dh工具包含了一系列的脚本，用于从打包的源代码中自动化生成debian目录下的文件。这些脚本是 <code>debian/rules</code> 文件中的一部分，它们负责处理诸如构建、安装、打包、删除等任务。</p>
<p>dh工具包括多个命令及其选项，更多的 dh 工具可以参考官方</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>dh_make</td>
<td>创建一个基本的在deb包打包时的工作框架</td>
</tr>
<tr>
<td>dh_auto_configure</td>
<td>自动运行 <code>configure</code> 脚本以生成 <code>Makefile</code></td>
</tr>
<tr>
<td>dh_install</td>
<td>将文件复制到正确的deb包的构建目录中，一些常见选项：<br><code>-s</code> 或 <code>--sourcedir=</code>: 指定源代码目录；<br><code>-X</code> 或 <code>--exclude</code>: 排除在安装中不必要的文件；<br><code>-n</code> 或 <code>--noscripts</code>: 在安装软件包时不运行脚本；<br><code>-Z</code>: 表示安装的文件不要在规则中注册；</td>
</tr>
<tr>
<td>dh_builddeb</td>
<td>以 <code>.deb</code> 文件格式构建软件包</td>
</tr>
<tr>
<td>dh_clean</td>
<td>清理debian目录和生成的文件，以确保它们不会在构建时对结果造成影响。</td>
</tr>
<tr>
<td>dh_gencontrol</td>
<td>生产和安装control文件</td>
</tr>
<tr>
<td>dh_installsystemd</td>
<td>安装systemd单元文件</td>
</tr>
</tbody>
</table>
<h4 id="dh_make">dh_make</h4>
<p><code>dh_make</code> 命令是一个用于快速创建 deb 包的命令行工具。它可以根据用户提供的基本信息和软件包源代码自动创建 deb 包的基础结构，包括 <code>debian/</code> 目录和相关文件，如 <code>control</code>、<code>rules</code> 以及 <code>changelog</code> 等文件。DH 表示 Debian 包含 debhelper 建议的目录和文件结构。</p>
<p>在默认情况下，<code>dh_make</code> 命令是交互式的，它会提示你输入一些必要的软件包信息，如软件包名称、版本号、作者、软件许可证等。如果你想非交互方式运行 <code>dh_make</code> 命令，并指定软件包信息，则可以使用 <code>-s</code> 选项。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ dh_make -s --createorig -f ../<span class="o">{</span>some_package-1.2.3<span class="o">}</span>.tar.gz -p <span class="o">{</span>some_package_1.2.3-1<span class="o">}</span>.deb
</span></span></code></pre></td></tr></table>
</div>
</div><p>在上述命令中，<code>-s</code> 选项表示以非交互方式运行 <code>dh_make</code> 命令，并将软件包的基本信息作为参数指定。<code>--createorig</code> 选项表示我们想要创建一个原始的源代码包，<code>-f</code> 选项指定软件包源代码的文件名和路径，<code>-p</code> 选项指定要创建的 Debian 软件包的名称和版本号。</p>
<p>而上述命令会提示输入一些基本的详细信息，以便在 <code>debian/control</code> 控制文件中为软件包设置元数据。dh_make 会询问输入软件包的名称、版本、描述、组件、维护人员等信息，是否以这些参数作为构建，如果不需要这部确认可以使用 <code>-y</code> 默认同意</p>
<p>下面是通过 <code>dh_make</code> 构建出的在构建deb包的工作目录，这种方式下可以很明了的理解deb包的结构</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ tree debian/
</span></span><span class="line"><span class="cl">debian/
</span></span><span class="line"><span class="cl">├── changelog
</span></span><span class="line"><span class="cl">├── control
</span></span><span class="line"><span class="cl">├── copyright
</span></span><span class="line"><span class="cl">├── manpage.1.ex
</span></span><span class="line"><span class="cl">├── manpage.sgml.ex
</span></span><span class="line"><span class="cl">├── manpage.xml.ex
</span></span><span class="line"><span class="cl">├── nginx.cron.d.ex
</span></span><span class="line"><span class="cl">├── nginx.doc-base.EX
</span></span><span class="line"><span class="cl">├── nginx-docs.docs
</span></span><span class="line"><span class="cl">├── postinst.ex
</span></span><span class="line"><span class="cl">├── postrm.ex
</span></span><span class="line"><span class="cl">├── preinst.ex
</span></span><span class="line"><span class="cl">├── prerm.ex
</span></span><span class="line"><span class="cl">├── README.Debian
</span></span><span class="line"><span class="cl">├── README.source
</span></span><span class="line"><span class="cl">├── rules
</span></span><span class="line"><span class="cl">├── salsa-ci.yml.ex
</span></span><span class="line"><span class="cl">├── <span class="nb">source</span>
</span></span><span class="line"><span class="cl">│   └── format
</span></span><span class="line"><span class="cl">└── watch.ex
</span></span></code></pre></td></tr></table>
</div>
</div><p>到这里，我们就完成了一个源码包的前提条件的构建，只需要稍微修改控制文件即可，进行后续的二进制包的构建。</p>
<p>这里最终的 控制文件 如下所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 源代码控制文件
</span></span><span class="line"><span class="cl">Source: nginx
</span></span><span class="line"><span class="cl">Maintainer: root &lt;root@debian-template&gt;
</span></span><span class="line"><span class="cl">Section: comm
</span></span><span class="line"><span class="cl">Priority: optional
</span></span><span class="line"><span class="cl">Homepage: https://nginx.org
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 二进制控制文件
</span></span><span class="line"><span class="cl">Package: nginx-d
</span></span><span class="line"><span class="cl">Version: 1.22.1
</span></span><span class="line"><span class="cl">Architecture: amd64
</span></span><span class="line"><span class="cl">Standards-Version: 1.0.0
</span></span><span class="line"><span class="cl">Build-Depends: debhelper-compat (= 13)
</span></span><span class="line"><span class="cl">Description: Nginx HTTP server Nginx (&#34;engine x&#34;) is a web server created by Igor Sysoev. It is known for its high performance, stability, and low resource consumption.
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="准备rules文件">准备rules文件</h3>
<p>通过上面的rules文件部分介绍，了解到 rules 文件就是一个 Makefile，并且包含三个阶段</p>
<ul>
<li>
<p><strong>clean</strong> &ndash; 删除所有build与binary阶段产生的内容</p>
</li>
<li>
<p><strong>build</strong> &ndash; 编译与构建的步骤</p>
</li>
<li>
<p><strong>binary</strong> &ndash; binary阶段将创建deb包的root目录，这个目录被包含在 <code>debian</code> 目录下，而目录名则为 control 文件中配置的 <code>Package</code> 名字，即 <code>debian/&lt;source package name&gt;</code></p>
</li>
</ul>
<p>这些阶段都通过 <code>dpkg-buildpackage</code> 在构建时被执行，一个rules文件的模板如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-makefile" data-lang="makefile"><span class="line"><span class="cl"><span class="c">#!/usr/bin/make -f
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl"><span class="nf">clean</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	@# Do nothing
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">build</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	@# Do nothing
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">binary</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	@# Do nothing
</span></span><span class="line"><span class="cl">	dh_gencontrol
</span></span><span class="line"><span class="cl">	dh_builddeb
</span></span></code></pre></td></tr></table>
</div>
</div><p>那这个 nginx 的 rules 文件则为下述所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-make" data-lang="make"><span class="line"><span class="cl"><span class="c">#!/usr/bin/make -f
</span></span></span><span class="line"><span class="cl"><span class="c"></span>
</span></span><span class="line"><span class="cl"><span class="c"># 列出您要編譯的檔案和目錄
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="k">export </span><span class="nv">DH_VERBOSE</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">PACKAGE</span><span class="o">=</span>nginx
</span></span><span class="line"><span class="cl"><span class="nv">UPSTREAM_VERSION</span><span class="o">=</span>1.22.1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 設置打包的參數
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="k">export </span><span class="nv">DEB_BUILD_MAINT_OPTIONS</span> <span class="o">=</span> <span class="nv">hardening</span><span class="o">=</span>+all
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">export </span><span class="nv">BUILDDIR_WORK</span> <span class="o">=</span> <span class="k">$(</span>CURDIR<span class="k">)</span>/debian/<span class="k">$(</span>PACKAGE<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">export </span><span class="nv">BUILDDIR</span><span class="o">=</span><span class="k">$(</span>CURDIR<span class="k">)</span>/debian/tmp
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 定義建立目錄，它會在${CURDIR}/debian/$PACKAGE下創建
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nf">debian/$PACKAGE</span><span class="o">::</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">%</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># build阶段，将完成软件的编译
</span></span></span><span class="line"><span class="cl"><span class="c"></span><span class="nf">build</span><span class="o">:</span> 
</span></span><span class="line"><span class="cl">	tar zxf nginx-<span class="k">$(</span>UPSTREAM_VERSION<span class="k">)</span>.tar.gz
</span></span><span class="line"><span class="cl">	<span class="c1"># 配置 Nginx 以使用必要的模塊和參數</span>
</span></span><span class="line"><span class="cl">	<span class="nb">cd</span> nginx-<span class="k">$(</span>UPSTREAM_VERSION<span class="k">)</span> <span class="o">&amp;&amp;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	    ./configure <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	    --conf-path<span class="o">=</span>/etc/nginx/nginx.conf <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	    --pid-path<span class="o">=</span>/var/run/nginx <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	    --sbin-path<span class="o">=</span>/usr/sbin/nginx <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	    --http-log-path<span class="o">=</span>/var/log/nginx/error.log <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	    --error-log-path<span class="o">=</span>/var/log/nginx/access.log <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>	    --http-client-body-temp-path<span class="o">=</span>/etc/nginx/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>		--http-proxy-temp-path<span class="o">=</span>/var/run/nginx/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>		--http-fastcgi-temp-path<span class="o">=</span>/var/run/nginx/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>		--http-uwsgi-temp-path<span class="o">=</span>/var/run/nginx/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>		--http-scgi-temp-path<span class="o">=</span>/var/run/nginx/ <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>		--pid-path<span class="o">=</span>/var/run/nginx/nginx.pid <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        --with-http_ssl_module <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>		--without-http_gzip_module 
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="nb">cd</span> nginx-<span class="k">$(</span>UPSTREAM_VERSION<span class="k">)</span> <span class="o">&amp;&amp;</span> make
</span></span><span class="line"><span class="cl">	<span class="c1"># 这里存在一个问题，即 prefix 与 DESTDIR 不要同时写，make install 被安装在哪里</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 如果配置了prefix 那么则被安装在 prefix/DESTDIR 变成了双重目录</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 这里不配置 prefix 只配置DESTDIR则会被安装在 deb 包在构建时的工作目录，这里制定了$(BUILDDIR)</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 将被放置在 $(BUILDDIR)</span>
</span></span><span class="line"><span class="cl">	<span class="nb">cd</span> nginx-<span class="k">$(</span>UPSTREAM_VERSION<span class="k">)</span> <span class="o">&amp;&amp;</span> make install <span class="nv">DESTDIR</span><span class="o">=</span><span class="k">$(</span>BUILDDIR<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1"># 清理</span>
</span></span><span class="line"><span class="cl">	rm -rf nginx-<span class="k">$(</span>UPSTREAM_VERSION<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">clean</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	rm -rf nginx-<span class="k">$(</span>UPSTREAM_VERSION<span class="k">)</span>
</span></span><span class="line"><span class="cl">	rm -rf <span class="k">$(</span>BUILDDIR<span class="k">)</span>
</span></span><span class="line"><span class="cl">	rm -rf <span class="k">$(</span>BUILDDIR_WORK<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">build-indep</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 构建前测试目录</span>
</span></span><span class="line"><span class="cl">	dh_testdir
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">build-arch</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	dh_testdir
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">binary-indep</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">	dh_testdir
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c1"># 测试是否有root权限</span>
</span></span><span class="line"><span class="cl">	dh_testroot
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c1"># 在 binary 阶段中，执行的安装操作，创建 /etc/nginx目录</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 这些命令执行的是 install -d</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 为什么使用 dh tool 而不用install，因为dh tool是rules file的一部分，也就是他默认的工作目录是</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 构建deb包的工作目录，这里必须是相对目录</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 而对于第一个的 &#34;/&#34; 与 最后一个 &#34;/&#34; 都不要写，会被自动除虫上</span>
</span></span><span class="line"><span class="cl">	dh_installdirs etc/nginx
</span></span><span class="line"><span class="cl">	dh_installdirs var/log/nginx
</span></span><span class="line"><span class="cl">	dh_installdirs var/run/nginx
</span></span><span class="line"><span class="cl">	dh_install etc/nginx/* etc/nginx
</span></span><span class="line"><span class="cl">	dh_install usr/sbin/* usr/sbin
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c1"># 这里创建了二进制包的目录结构</span>
</span></span><span class="line"><span class="cl">	install -d <span class="k">$(</span>BUILDDIR_WORK<span class="k">)</span>/DEBIAN
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c1"># dh_gencontrol可以根据源码包的配置来生成二进制包的control文件</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 底层封装的是 dh_gencontrol -O --file --package=nginx 为二进制包生成</span>
</span></span><span class="line"><span class="cl">	dh_gencontrol -O --file --package<span class="o">=</span><span class="k">$(</span>PACKAGE<span class="k">)</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c1"># dh_installchangelogs 可以根据源码包中的changelog来生成二进制包的changelog</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># changelog 和 control file是二进制包必须的文件</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># dh_gencontrol -O --file --package=nginx</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># 底层执行的为在 deb 包根目录的/usr/share/doc/nginx 中生成changelog</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># dh_installchangelogs</span>
</span></span><span class="line"><span class="cl">	<span class="c1">#    install -d debian/nginx/usr/share/doc/nginx</span>
</span></span><span class="line"><span class="cl">	<span class="c1">#    install -p -m0644 debian/changelog debian/nginx/usr/share/doc/nginx/changelog.Debian</span>
</span></span><span class="line"><span class="cl">	dh_installchangelogs
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c1"># 这里将修复链接路径及压缩，如果你的一些软连接需要修复时可以使用</span>
</span></span><span class="line"><span class="cl">	dh_compress
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">binary</span><span class="o">:</span> <span class="n">binary</span>-<span class="n">indep</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># dh_builddeb命令将会构建一个二进制包</span>
</span></span><span class="line"><span class="cl">	<span class="c1"># dh_builddeb封装的时dpkg-deb命令</span>
</span></span><span class="line"><span class="cl">	<span class="c1">#   dpkg-deb --build debian/nginx ..</span>
</span></span><span class="line"><span class="cl">	dh_builddeb
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nf">.PHONY</span><span class="o">:</span> <span class="n">clean</span> <span class="n">binary</span>-<span class="n">indep</span> <span class="n">binary</span>-<span class="n">arch</span> <span class="n">binary</span> <span class="n">install</span> <span class="n">build</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="执行构建">执行构建</h3>
<p>通过执行 <code>dpkg-buildpackage -b</code> 来构建二进制源码包</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">	<span class="nx">install</span> <span class="o">-</span><span class="nx">d</span> <span class="nx">debian</span><span class="o">/</span><span class="nx">nginx</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">sbin</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cp</span> <span class="o">--</span><span class="nx">reflink</span><span class="p">=</span><span class="nx">auto</span> <span class="o">-</span><span class="nx">a</span> <span class="nx">debian</span><span class="o">/</span><span class="nx">tmp</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">sbin</span><span class="o">/</span><span class="nx">nginx</span> <span class="nx">debian</span><span class="o">/</span><span class="nx">nginx</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">sbin</span><span class="o">/</span>
</span></span><span class="line"><span class="cl"><span class="nx">install</span> <span class="o">-</span><span class="nx">d</span> <span class="o">/</span><span class="nx">root</span><span class="o">/</span><span class="nx">nginx</span><span class="o">/</span><span class="nx">debian</span><span class="o">/</span><span class="nx">nginx</span><span class="o">/</span><span class="nx">DEBIAN</span>
</span></span><span class="line"><span class="cl"><span class="nx">dh_gencontrol</span> <span class="o">-</span><span class="nx">O</span> <span class="o">--</span><span class="nx">file</span> <span class="o">--</span><span class="kn">package</span><span class="p">=</span><span class="nx">nginx</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dpkg</span><span class="o">-</span><span class="nx">gencontrol</span> <span class="o">-</span><span class="nx">pnginx</span> <span class="o">-</span><span class="nx">ldebian</span><span class="o">/</span><span class="nx">changelog</span> <span class="o">-</span><span class="nx">Tdebian</span><span class="o">/</span><span class="nx">nginx</span><span class="p">.</span><span class="nx">substvars</span> <span class="o">-</span><span class="nx">Pdebian</span><span class="o">/</span><span class="nx">nginx</span>
</span></span><span class="line"><span class="cl"><span class="nx">dpkg</span><span class="o">-</span><span class="nx">gencontrol</span><span class="p">:</span> <span class="nx">warning</span><span class="p">:</span> <span class="nx">unknown</span> <span class="nx">information</span> <span class="nx">field</span> <span class="err">&#39;</span><span class="nx">Version</span><span class="err">&#39;</span> <span class="nx">in</span> <span class="nx">input</span> <span class="nx">data</span> <span class="nx">in</span> <span class="kn">package</span><span class="err">&#39;</span><span class="nx">s</span> <span class="nx">section</span> <span class="nx">of</span> <span class="nx">control</span> <span class="nx">info</span> <span class="nx">file</span>
</span></span><span class="line"><span class="cl"><span class="nx">dpkg</span><span class="o">-</span><span class="nx">gencontrol</span><span class="p">:</span> <span class="nx">warning</span><span class="p">:</span> <span class="nx">unknown</span> <span class="nx">information</span> <span class="nx">field</span> <span class="err">&#39;</span><span class="nx">Standards</span><span class="o">-</span><span class="nx">Version</span><span class="err">&#39;</span> <span class="nx">in</span> <span class="nx">input</span> <span class="nx">data</span> <span class="nx">in</span> <span class="kn">package</span><span class="err">&#39;</span><span class="nx">s</span> <span class="nx">section</span> <span class="nx">of</span> <span class="nx">control</span> <span class="nx">info</span> <span class="nx">file</span>
</span></span><span class="line"><span class="cl">	<span class="nx">chmod</span> <span class="mo">0644</span> <span class="o">--</span> <span class="nx">debian</span><span class="o">/</span><span class="nx">nginx</span><span class="o">/</span><span class="nx">DEBIAN</span><span class="o">/</span><span class="nx">control</span>
</span></span><span class="line"><span class="cl">	<span class="nx">chown</span> <span class="mi">0</span><span class="p">:</span><span class="mi">0</span> <span class="o">--</span> <span class="nx">debian</span><span class="o">/</span><span class="nx">nginx</span><span class="o">/</span><span class="nx">DEBIAN</span><span class="o">/</span><span class="nx">control</span>
</span></span><span class="line"><span class="cl"><span class="nx">dh_installchangelogs</span>
</span></span><span class="line"><span class="cl">	<span class="nx">install</span> <span class="o">-</span><span class="nx">d</span> <span class="nx">debian</span><span class="o">/</span><span class="nx">nginx</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">share</span><span class="o">/</span><span class="nx">doc</span><span class="o">/</span><span class="nx">nginx</span>
</span></span><span class="line"><span class="cl">	<span class="nx">install</span> <span class="o">-</span><span class="nx">p</span> <span class="o">-</span><span class="nx">m0644</span> <span class="nx">debian</span><span class="o">/</span><span class="nx">changelog</span> <span class="nx">debian</span><span class="o">/</span><span class="nx">nginx</span><span class="o">/</span><span class="nx">usr</span><span class="o">/</span><span class="nx">share</span><span class="o">/</span><span class="nx">doc</span><span class="o">/</span><span class="nx">nginx</span><span class="o">/</span><span class="nx">changelog</span><span class="p">.</span><span class="nx">Debian</span>
</span></span><span class="line"><span class="cl"><span class="nx">dh_compress</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cd</span> <span class="nx">debian</span><span class="o">/</span><span class="nx">nginx</span>
</span></span><span class="line"><span class="cl">	<span class="nx">chmod</span> <span class="nx">a</span><span class="o">-</span><span class="nx">x</span> <span class="nx">usr</span><span class="o">/</span><span class="nx">share</span><span class="o">/</span><span class="nx">doc</span><span class="o">/</span><span class="nx">nginx</span><span class="o">/</span><span class="nx">changelog</span><span class="p">.</span><span class="nx">Debian</span>
</span></span><span class="line"><span class="cl">	<span class="nx">gzip</span> <span class="o">-</span><span class="mi">9</span><span class="nx">nf</span> <span class="nx">usr</span><span class="o">/</span><span class="nx">share</span><span class="o">/</span><span class="nx">doc</span><span class="o">/</span><span class="nx">nginx</span><span class="o">/</span><span class="nx">changelog</span><span class="p">.</span><span class="nx">Debian</span>
</span></span><span class="line"><span class="cl">	<span class="nx">cd</span> <span class="err">&#39;</span><span class="o">/</span><span class="nx">root</span><span class="o">/</span><span class="nx">nginx</span><span class="err">&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nx">dh_builddeb</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dpkg</span><span class="o">-</span><span class="nx">deb</span> <span class="o">--</span><span class="nx">build</span> <span class="nx">debian</span><span class="o">/</span><span class="nx">nginx</span> <span class="p">..</span>
</span></span><span class="line"><span class="cl"><span class="nx">dpkg</span><span class="o">-</span><span class="nx">deb</span><span class="p">:</span> <span class="nx">building</span> <span class="kn">package</span> <span class="err">&#39;</span><span class="nx">nginx</span><span class="err">&#39;</span> <span class="nx">in</span> <span class="err">&#39;</span><span class="p">..</span><span class="o">/</span><span class="nx">nginx_1</span><span class="mf">.22.1</span><span class="o">-</span><span class="mi">1_</span><span class="nx">amd64</span><span class="p">.</span><span class="nx">deb</span><span class="err">&#39;</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"> <span class="nx">dpkg</span><span class="o">-</span><span class="nx">genbuildinfo</span> <span class="o">--</span><span class="nx">build</span><span class="p">=</span><span class="nx">binary</span>
</span></span><span class="line"><span class="cl"> <span class="nx">dpkg</span><span class="o">-</span><span class="nx">genchanges</span> <span class="o">--</span><span class="nx">build</span><span class="p">=</span><span class="nx">binary</span> <span class="p">&gt;..</span><span class="o">/</span><span class="nx">nginx_1</span><span class="mf">.22.1</span><span class="o">-</span><span class="mi">1_</span><span class="nx">amd64</span><span class="p">.</span><span class="nx">changes</span>
</span></span><span class="line"><span class="cl"><span class="nx">dpkg</span><span class="o">-</span><span class="nx">genchanges</span><span class="p">:</span> <span class="nx">warning</span><span class="p">:</span> <span class="nx">unknown</span> <span class="nx">information</span> <span class="nx">field</span> <span class="err">&#39;</span><span class="nx">Version</span><span class="err">&#39;</span> <span class="nx">in</span> <span class="nx">input</span> <span class="nx">data</span> <span class="nx">in</span> <span class="kn">package</span><span class="err">&#39;</span><span class="nx">s</span> <span class="nx">section</span> <span class="nx">of</span> <span class="nx">control</span> <span class="nx">info</span> <span class="nx">file</span>
</span></span><span class="line"><span class="cl"><span class="nx">dpkg</span><span class="o">-</span><span class="nx">genchanges</span><span class="p">:</span> <span class="nx">warning</span><span class="p">:</span> <span class="nx">unknown</span> <span class="nx">information</span> <span class="nx">field</span> <span class="err">&#39;</span><span class="nx">Standards</span><span class="o">-</span><span class="nx">Version</span><span class="err">&#39;</span> <span class="nx">in</span> <span class="nx">input</span> <span class="nx">data</span> <span class="nx">in</span> <span class="kn">package</span><span class="err">&#39;</span><span class="nx">s</span> <span class="nx">section</span> <span class="nx">of</span> <span class="nx">control</span> <span class="nx">info</span> <span class="nx">file</span>
</span></span><span class="line"><span class="cl"><span class="nx">dpkg</span><span class="o">-</span><span class="nx">genchanges</span><span class="p">:</span> <span class="nx">warning</span><span class="p">:</span> <span class="nx">unknown</span> <span class="nx">information</span> <span class="nx">field</span> <span class="err">&#39;</span><span class="nx">Build</span><span class="o">-</span><span class="nx">Depends</span><span class="err">&#39;</span> <span class="nx">in</span> <span class="nx">input</span> <span class="nx">data</span> <span class="nx">in</span> <span class="kn">package</span><span class="err">&#39;</span><span class="nx">s</span> <span class="nx">section</span> <span class="nx">of</span> <span class="nx">control</span> <span class="nx">info</span> <span class="nx">file</span>
</span></span><span class="line"><span class="cl"><span class="nx">dpkg</span><span class="o">-</span><span class="nx">genchanges</span><span class="p">:</span> <span class="nx">info</span><span class="p">:</span> <span class="nx">binary</span><span class="o">-</span><span class="nx">only</span> <span class="nf">upload</span> <span class="p">(</span><span class="nx">no</span> <span class="nx">source</span> <span class="nx">code</span> <span class="nx">included</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"> <span class="nx">dpkg</span><span class="o">-</span><span class="nx">source</span> <span class="o">--</span><span class="nx">after</span><span class="o">-</span><span class="nx">build</span> <span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="nx">dpkg</span><span class="o">-</span><span class="nx">source</span><span class="p">:</span> <span class="nx">warning</span><span class="p">:</span> <span class="nx">unknown</span> <span class="nx">information</span> <span class="nx">field</span> <span class="err">&#39;</span><span class="nx">Version</span><span class="err">&#39;</span> <span class="nx">in</span> <span class="nx">input</span> <span class="nx">data</span> <span class="nx">in</span> <span class="kn">package</span><span class="err">&#39;</span><span class="nx">s</span> <span class="nx">section</span> <span class="nx">of</span> <span class="nx">control</span> <span class="nx">info</span> <span class="nx">file</span>
</span></span><span class="line"><span class="cl"><span class="nx">dpkg</span><span class="o">-</span><span class="nx">source</span><span class="p">:</span> <span class="nx">warning</span><span class="p">:</span> <span class="nx">unknown</span> <span class="nx">information</span> <span class="nx">field</span> <span class="err">&#39;</span><span class="nx">Standards</span><span class="o">-</span><span class="nx">Version</span><span class="err">&#39;</span> <span class="nx">in</span> <span class="nx">input</span> <span class="nx">data</span> <span class="nx">in</span> <span class="kn">package</span><span class="err">&#39;</span><span class="nx">s</span> <span class="nx">section</span> <span class="nx">of</span> <span class="nx">control</span> <span class="nx">info</span> <span class="nx">file</span>
</span></span><span class="line"><span class="cl"><span class="nx">dpkg</span><span class="o">-</span><span class="nx">source</span><span class="p">:</span> <span class="nx">warning</span><span class="p">:</span> <span class="nx">unknown</span> <span class="nx">information</span> <span class="nx">field</span> <span class="err">&#39;</span><span class="nx">Build</span><span class="o">-</span><span class="nx">Depends</span><span class="err">&#39;</span> <span class="nx">in</span> <span class="nx">input</span> <span class="nx">data</span> <span class="nx">in</span> <span class="kn">package</span><span class="err">&#39;</span><span class="nx">s</span> <span class="nx">section</span> <span class="nx">of</span> <span class="nx">control</span> <span class="nx">info</span> <span class="nx">file</span>
</span></span><span class="line"><span class="cl"><span class="nx">dpkg</span><span class="o">-</span><span class="nx">buildpackage</span><span class="p">:</span> <span class="nx">info</span><span class="p">:</span> <span class="nx">binary</span><span class="o">-</span><span class="nx">only</span> <span class="nf">upload</span> <span class="p">(</span><span class="nx">no</span> <span class="nx">source</span> <span class="nx">included</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>构建完成后，生成的deb包在当前执行命令的父目录中，而生成的文件名遵守了 <code>&lt;name&gt;_&lt;version&gt;-&lt;revision&gt;_&lt;architecture&gt;.deb</code> 这种格式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ dpkg -c ../nginx_1.22.1-1_amd64.deb
</span></span><span class="line"><span class="cl">./
</span></span><span class="line"><span class="cl">./etc/
</span></span><span class="line"><span class="cl">./etc/nginx/
</span></span><span class="line"><span class="cl">./etc/nginx/fastcgi.conf
</span></span><span class="line"><span class="cl">./etc/nginx/fastcgi.conf.default
</span></span><span class="line"><span class="cl">./etc/nginx/fastcgi_params
</span></span><span class="line"><span class="cl">./etc/nginx/fastcgi_params.default
</span></span><span class="line"><span class="cl">./etc/nginx/koi-utf
</span></span><span class="line"><span class="cl">./etc/nginx/koi-win
</span></span><span class="line"><span class="cl">./etc/nginx/mime.types
</span></span><span class="line"><span class="cl">./etc/nginx/mime.types.default
</span></span><span class="line"><span class="cl">./etc/nginx/nginx.conf
</span></span><span class="line"><span class="cl">./etc/nginx/nginx.conf.default
</span></span><span class="line"><span class="cl">./etc/nginx/scgi_params
</span></span><span class="line"><span class="cl">./etc/nginx/scgi_params.default
</span></span><span class="line"><span class="cl">./etc/nginx/uwsgi_params
</span></span><span class="line"><span class="cl">./etc/nginx/uwsgi_params.default
</span></span><span class="line"><span class="cl">./etc/nginx/win-utf
</span></span><span class="line"><span class="cl">./usr/
</span></span><span class="line"><span class="cl">./usr/sbin/
</span></span><span class="line"><span class="cl">./usr/sbin/nginx
</span></span><span class="line"><span class="cl">./usr/share/
</span></span><span class="line"><span class="cl">./usr/share/doc/
</span></span><span class="line"><span class="cl">./usr/share/doc/nginx/
</span></span><span class="line"><span class="cl">./usr/share/doc/nginx/changelog.Debian.gz
</span></span><span class="line"><span class="cl">./var/
</span></span><span class="line"><span class="cl">./var/log/
</span></span><span class="line"><span class="cl">./var/log/nginx/
</span></span><span class="line"><span class="cl">./var/run/
</span></span><span class="line"><span class="cl">./var/run/nginx/
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="troubleshooting">Troubleshooting</h2>
<h3 id="no-upstream-tarball-found">no upstream tarball found</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">dpkg-source: error: can&#39;t build with source format &#39;3.0 (quilt)&#39;: no upstream tarball found at ../nginx_1.22.1.orig.tar.{bz2,gz,lzma,xz}
</span></span><span class="line"><span class="cl">dpkg-buildpackage: error: dpkg-source -b . subprocess returned exit status 2
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决：需要和你的构建目录 为上级即 <code>debian</code> 的上级</p>
<h3 id="non-native-package-version-does-not-contain-a-revision">non-native package version does not contain a revision</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">dpkg</span><span class="o">-</span><span class="nx">source</span><span class="p">:</span> <span class="kt">error</span><span class="p">:</span> <span class="nx">can</span><span class="err">&#39;</span><span class="nx">t</span> <span class="nx">build</span> <span class="nx">with</span> <span class="nx">source</span> <span class="nx">format</span> <span class="err">&#39;</span><span class="mf">3.0</span> <span class="p">(</span><span class="nx">quilt</span><span class="p">)</span><span class="err">&#39;</span><span class="p">:</span> <span class="nx">non</span><span class="o">-</span><span class="nx">native</span> <span class="kn">package</span> <span class="nx">version</span> <span class="nx">does</span> <span class="nx">not</span> <span class="nx">contain</span> <span class="nx">a</span> <span class="nx">revision</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决：在changelog中定义正确的修订号</p>
<p>Debian 软件包版本号由三个部分组成：Major.Minor.Revision，它们通常定义在软件包的 debian/changelog 文件中。</p>
<p>在 debian/changelog 文件中，每个软件包版本都会记录下来，包括软件包的版本号、构建日期和构建者的姓名和电子邮件等信息，形成一个时间线。每个 Debian 软件包版本号应该遵循 X.Y.Z-r (或 X.Y.Z~rN) 的格式，其中 X.Y.Z 是软件包的版本号，r (或 N) 是软件包的修订号。</p>
<p>用于版本号的changelog文件通常位于软件包源代码的 debian/ 目录中。您可以打开 debian/changelog 文件，找到最近的条目，将其中的版本号中的修订号修改为所需的值，并保存文件。在对 Debian 软件包进行重新打包之前，请确保更新了 debian/changelog 文件，以便反映新版本号的修改。</p>
<p>需要注意的是，当您更改 debian/changelog 文件中的版本号时，请确保更新 debian/control 文件中的软件包版本依赖信息，以便与新的软件包版本号匹配。 这是为了确保软件包依赖关系与实际的软件包版本相匹配，避免在安装和使用软件包时出现问题。</p>
<h3 id="is-not-a-valid-version">is not a valid version</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">dpkg-genchanges: error:  is not a valid version
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决：这个问题是因为制定了 -v 重写了 version 配置，而没有指定具体的版本号</p>
<h3 id="yes-is-invalid-use-binary-targets-instead">&ldquo;yes&rdquo; is invalid; use &ldquo;binary-targets&rdquo; instead</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dpkg-buildpackage: error: Rules-Requires-Root field keyword <span class="s2">&#34;yes&#34;</span> is invalid<span class="p">;</span> use <span class="s2">&#34;binary-targets&#34;</span> instead
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决：control 文件的 <code>Rules-Requires-Root</code> 没有yes选项 <sup><a id="8">[8]</a></sup></p>
<h3 id="compatibility-levels-before-5-are-no-longer-supported-level-1-requested">Compatibility levels before 5 are no longer supported (level 1 requested)</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dh: error: Compatibility levels before <span class="m">5</span> are no longer supported <span class="o">(</span>level <span class="m">1</span> requested<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个错误提示是由于 Debian Policy 从 3.9.0 开始不再支持 compat level 4 以及更低级别的设置，需要使用符合 Debian Policy 3.9.0 或更高版本的规范定义包。</p>
<p>如果您在 <code>debian/control</code> 文件中设置了 compatibility level 较低的版本（如 3, 4），则会遇到这个错误。您需要将这个 compatibility level 提升至 5 或以上版本，即在 <code>debian/control</code> 文件中加入以下设置：</p>
<h3 id="unwanted-binary-file-debiandebiandeb">unwanted binary file: debian/debian.deb</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dpkg-source: error: unwanted binary file: debian/debian.deb
</span></span><span class="line"><span class="cl">dpkg-source: error: detected <span class="m">1</span> unwanted binary file <span class="o">(</span>add it in debian/source/include-binaries to allow its inclusion<span class="o">)</span>.
</span></span><span class="line"><span class="cl">dpkg-buildpackage: error: dpkg-source -b . subprocess returned <span class="nb">exit</span> status <span class="m">255</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决：删除上级目录中多余文件即可</p>
<h3 id="cannot-represent-change-to-xauthority-binary-file-contents-changed">cannot represent change to .Xauthority: binary file contents changed</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">dpkg-source: error: cannot represent change to .Xauthority: binary file contents changed
</span></span><span class="line"><span class="cl">dpkg-source: error: add .Xauthority in debian/source/include-binaries <span class="k">if</span> you want to store the modified binary in the debian tarball
</span></span><span class="line"><span class="cl">dpkg-source: error: unrepresentable changes to <span class="nb">source</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决：这是因为我直接在家目录操作的，家目录存在一些其他文件，如家目录下的隐藏文件</p>
<h2 id="reference">Reference</h2>
<p><sup id="1">[1]</sup> <a href="https://www.debian.org/doc/debian-policy/ch-controlfields.html#rules-requires-root"><em>rules-requires-root</em></a></p>
<p><sup id="2">[2]</sup> <a href="https://www.debian.org/doc/debian-policy/ch-controlfields.html"><em>Control files and their fields</em></a></p>
<p><sup id="3">[3]</sup> <a href="https://zh.wikipedia.org/wiki/Ar_(Unix)"><em>ar (Unix)</em></a></p>
<p><sup id="4">[4]</sup> <a href="https://www.debian.org/doc/debian-policy/index.html"><em>Debian Policy Manual</em></a></p>
<p><sup id="5">[5]</sup> <a href="https://www.debian.org/doc/debian-policy/ch-source.html#main-building-script-debian-rules"><em>Main building script</em></a></p>
<p><sup id="6">[6]</sup> <a href="https://man7.org/linux/man-pages/man7/debhelper.7.html"><em>debhelper(7)</em></a></p>
<p><sup id="7">[7]</sup> <a href="https://github.com/FooBarWidget/debian-packaging-for-the-modern-developer/blob/master/tutorial-2/README.md#debianrules"><em>Tutorial 2: building a binary package using dpkg-buildpackage</em></a></p>
<p><sup id="8">[8]</sup> <a href="https://www.debian.org/doc/debian-policy/ch-controlfields.html#rules-requires-root"><em>5.6.31. Rules-Requires-Root</em></a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>debian11更新内核版本</title>
      <link>https://www.oomkill.com/2022/12/debian-update-kernel/</link>
      <pubDate>Sun, 11 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/12/debian-update-kernel/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>搜索linux 内核 image</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">apt-cache search linux-image
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后安装对应image</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt install linux-image-&lt;flavour&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>安装完成后可以看到对应的image</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ dpkg -l<span class="p">|</span>grep linux-image
</span></span><span class="line"><span class="cl">ri  linux-image-5.10.0-16-amd64      5.10.127-2                     amd64        Linux 5.10 <span class="k">for</span> 64-bit PCs <span class="o">(</span>signed<span class="o">)</span>
</span></span><span class="line"><span class="cl">ii  linux-image-5.10.0-16-amd64-dbg  5.10.127-2                     amd64        Debug symbols <span class="k">for</span> linux-image-5.10.0-16-amd64
</span></span><span class="line"><span class="cl">ii  linux-image-amd64                5.10.127-2                     amd64        Linux <span class="k">for</span> 64-bit PCs <span class="o">(</span>meta-package<span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以通过命令查看拥有的内核启动项</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">grep -e <span class="s2">&#34;menuentry &#34;</span> -e submenu -e linux /boot/grub/grub.cfg
</span></span></code></pre></td></tr></table>
</div>
</div><p>需要修改至新内核可以修改 <code>/etc/default/grub</code> 下的 <code>GRUB_DEFAULT=</code></p>
<p>这里要填的值为上面命令查询出的，例如 <code>menuentry 'Debian GNU/Linux, with Linux 5.10.0-16-amd64'</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">GRUB_DEFAULT</span><span class="o">=</span><span class="s2">&#34;1&gt;Debian GNU/Linux, with Linux 5.10.0-12-amd64&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后执行 <code>update-grub</code></p>
<h2 id="reference">Reference</h2>
<p><a href="https://wiki.debian.org/HowToUpgradeKernel">HowToUpgradeKernel</a></p>
<p><a href="https://unix.stackexchange.com/questions/694323/how-to-set-default-kernel-in-debian">How to set default kernel in Debian?</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>安装Debian11 (bullseye) Step-by-Step</title>
      <link>https://www.oomkill.com/2022/05/debian11-install-tutorial/</link>
      <pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2022/05/debian11-install-tutorial/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="preparation">Preparation</h2>
<p>debian11几乎可以使用任何旧的计算机硬件，因为最小安装的要求非常低。以下是最低要求和推荐要求：</p>
<table>
<thead>
<tr>
<th>最低要求</th>
<th>推荐要求</th>
</tr>
</thead>
<tbody>
<tr>
<td>存储：10 Gigabytes<br>内存：512 Megabytes<br>CPU: 1 GigaHertz</td>
<td>存储：10 Gigabytes<br/>内存：2 Gigabytes<br/>CPU: 1 GigaHertz or more</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Debian11 EOL：<strong>August 31st, 2026</strong></p>
</blockquote>
<h3 id="如何选择下载安装包">如何选择下载安装包</h3>
<ul>
<li><a href="https://www.debian.org/CD/http-ftp/#stable">offical mirror</a></li>
<li><a href="https://developer.aliyun.com/mirror/debian">aliyun mirror</a></li>
</ul>
<p>官网提供了安装包的下载，其中CD是网络安装，DVD是离线安装</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802174122790.png" alt="image-20220802174122790"  /></p>
<center class="podsc">debian官方下载页面</center>
<blockquote>
<p>Notes：CD安装包很小，下载下来是 <code>debian-11.4.0-amd64-netinst.iso</code> 如名所示，这是一个网络安装包，所以推荐下载DVD部分，可以达到离线安装的效果</p>
</blockquote>
<h2 id="安装步骤">安装步骤</h2>
<p>在界面中选择“Install”，安装将开始。如果图形化安装可以选择“Graphical install”，这里选择“Install”。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124054641.png" alt="image-20220802124054641"  /></p>
<center class="podsc">欢迎页面</center>
<p>完成后，系统将提示选择安装时的“语言”。选择喜欢的语言，然后按“Enter”。这里选择英文</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124137343.png" alt="image-20220802124137343"  /></p>
<center class="podsc">选择语言页面</center>
<p>这将是接下来安装步骤</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124701368.png" alt="image-20220802124701368"  /></p>
<center class="podsc">安装步骤概述</center>
<h3 id="选择位置与键盘布局">选择位置与键盘布局</h3>
<p>选择区域</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124200648.png" alt="image-20220802124200648"  /></p>
<center class="podsc">选择区域</center>
<p>下面部署时选择键盘布局：中国大陆使用的键盘布局是美国-英语，不要选择英国-英语之类，布局是不一样的，会存在按键输出的结果会不同</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124219600.png" alt="image-20220802124219600"  /></p>
<center class="podsc">选择键盘布局</center>
<p>完成上述操作后，将开始加载镜像。等待扫描完成。。。。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124450675.png" alt="image-20220802124450675"  /></p>
<center class="podsc">等待扫描组件</center>
<h3 id="设置主机名和域名">设置主机名和域名</h3>
<p>这步骤中将配置一个“主机名”。与一个“域”名称。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124523526.png" alt="image-20220802124523526"  /></p>
<center class="podsc">配置主机名</center>
<p>“域” 可以选择留空确定</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124552521.png" alt="image-20220802124552521"  /></p>
<center class="podsc">配置域</center>
<p>完成上述操作后，安装程序将提示需要设置 root 密码。输入您的 root 密码，然后在重新输入以进行验证后继续。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124732048.png" alt="image-20220802124732048"  /></p>
<center class="podsc">设置Root密码</center>
<h3 id="设置非root用户名账户和密码">设置非ROOT用户名、账户和密码</h3>
<p>下一步创建一个非ROOT用户，这个步骤是必须的，并为这个新创建的帐户分配一个密码。以下截图将描述将如何完成此操作。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124814435.png" alt="image-20220802124814435"  /></p>
<center class="podsc">配置普通用户</center>
<p>为这个用户配置密码</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124841150.png" alt="image-20220802124841150"  /></p>
<center class="podsc">为普通用户配置密码</center>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124905092.png" alt="image-20220802124905092"  /></p>
<center class="podsc">为普通用户配置密码——二次确认</center>
<h3 id="设置时钟时区">设置时钟时区</h3>
<p>Eastern 美东时间</p>
<p>Central 北美中部</p>
<p>Mountain 北美山区时区</p>
<p>Pacific 太平洋时区</p>
<p>Alaska 阿拉斯加夏令时间</p>
<p>Hawaii 夏威夷时区</p>
<p>Arizona 亞利桑时区</p>
<p>East Indiana 印第安纳时区</p>
<p>Samoa 萨摩亚时间</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802124936969.png" alt="image-20220802124936969"  /></p>
<center class="podsc">配置时区</center>
<h3 id="对磁盘分区">对磁盘分区</h3>
<p>此步骤磁盘进行分区。这里选择“手动”选项</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802125018955.png" alt="image-20220802125018955"  /></p>
<center class="podsc">选择分区模式</center>
<p>选择手动进行划分为所需的分区。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802125033249.png" alt="image-20220802125033249"  /></p>
<center class="podsc">选择硬盘</center>
<p>创建新的分区表</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802125051231.png" alt="image-20220802125051231"  /></p>
<center class="podsc">创建分区表</center>
<p>选择空闲的空间进行分区</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802125208239.png" alt="image-20220802125208239"  /></p>
<center class="podsc">选择空闲空间</center>
<p>创建一个新分区</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802125220023.png" alt="image-20220802125220023"  /></p>
<center class="podsc">创建一个新分区</center>
<p>为/boot划分分区</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802170825990.png" alt="image-20220802170825990"  /></p>
<center class="podsc">为/boot划分分区</center>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802170914699.png" alt="image-20220802170914699"  /></p>
<center class="podsc">最终划分的分区</center>
<p>这里选No就行，提示是指不使用swap分区，No就是继续，Yes将返回分区页面</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802171300600.png" alt="image-20220802171300600"  /></p>
<center class="podsc">对于swap分区的提示</center>
<p>创建新分区需要格式化，当前的分区将会被删除，如果是新磁盘选择Yes格式化分区</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802171406223.png" alt="image-20220802171406223"  /></p>
<center class="podsc">确认格式化，进行分区</center>
<h3 id="base-system安装">Base System安装</h3>
<p>这里等待安装基础系统</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802171427005.png" alt="image-20220802171427005"  /></p>
<center class="podsc">确认格式化，进行分区</center>
<p>几分钟后， 安装后会弹出一个界面，这里会扫描其他的media，这里因为没有，选择No就行。</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802171719092.png" alt="image-20220802171719092"  /></p>
<center class="podsc">扫描其他媒介</center>
<h3 id="离线安装">离线安装</h3>
<p>会扫描安装的媒介，这里也有提示，如果没有额外的媒介，可以跳过该步骤</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802175852901.png" alt="image-20220802175852901"  /></p>
<center class="podsc">扫描其他媒介</center>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802175829172.png" alt="image-20220802175829172"  /></p>
<p>配置网络镜像，建议配置下，如果不需要No即可</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802180008399.png" alt="image-20220802180008399"  /></p>
<center class="podsc">配置网络镜像</center>
<p>接下来会弹出一个界面，请选择“Debian镜像国家”。这个是配置镜像地址的，选择自己的国家和镜像站即可</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802171823823.png" alt="image-20220802171823823"  /></p>
<center class="podsc">选择镜像国家</center>
<p>这里选择的是中国和中科大镜像</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802171903846.png" alt="image-20220802171903846"  /></p>
<center class="podsc">选择镜像地址</center>
<p>配置HTTP代理，不选择跳过</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802171929992.png" alt="image-20220802171929992"  /></p>
<center class="podsc">配置http代理</center>
<p>如果选择网络安装，到这步骤时安装程序现在将在选择相关的。首先，选择离您所在国家最近的位置。Debian 镜像位置和域后检索剩余的文件</p>
<p>这里提示有一个匿名调查，这里选No即可</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802180137667.png" alt="image-20220802180137667"  /></p>
<center class="podsc">匿名调查</center>
<h3 id="根据要求调整安装">根据要求调整安装</h3>
<p>在检索过程中，系统将提示需要自行选择以下预定义软件中的一个或多个。最小化安装仅选择基础系统与SSH即可</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802180225093.png" alt="image-20220802180225093"  /></p>
<center class="podsc">安装组件选择</center>
<p>接下来等待安装即可</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802180343919.png" alt="image-20220802180343919"  /></p>
<center class="podsc">安装过程</center>
<blockquote>
<p>Notes：选择了DVD ISO将离线完成安装，如果使用了CD ISO，将从互联网上检索包并安装，这个时间将很长。</p>
</blockquote>
<p>其中会提示一个引导按章，直接Yes即可</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802180753937.png" alt="image-20220802180753937"  /></p>
<p>到了这里即将安装完成</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802180829194.png" alt="image-20220802180829194"  /></p>
<center class="podsc">到了这里即将安装完成</center>
<h3 id="完成debian11最小化安装">完成Debian11最小化安装</h3>
<p>看到到这里已经完成了安装，按“Continue”继续重启后即可</p>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802180902242.png" alt="image-20220802180902242"  /></p>
<center class="podsc">完成安装</center>
<p>
  <img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20220802180923668.png" alt="image-20220802180923668"  /></p>
<center class="podsc">看到系统的引导界面</center>
<p>Enjoy 👏👏</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>ubuntu相关配置</title>
      <link>https://www.oomkill.com/2019/04/ubuntu-configration/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2019/04/ubuntu-configration/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="ubuntu屏幕分辨率无1920-1080">Ubuntu屏幕分辨率无1920 1080</h2>
<p>xrandr</p>
<p>没有1920X1080分辨率，所以手动添加一个1080P分辨率，先输入“cvt 1920 1080”命令，查询一下1080P分辨率的有效扫描频率</p>
<p>然后使用 xrandr 命令新建一种输出分辨率</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo xrandr --newmode <span class="s2">&#34;1920x1080_60.00&#34;</span> 173.00 <span class="m">1920</span> <span class="m">2048</span> <span class="m">2248</span> <span class="m">2576</span> <span class="m">10801083</span> <span class="m">1088</span> <span class="m">1120</span> -hsync +vsync 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo xrandr --addmode Virtual1 <span class="s2">&#34;1920x1080_60.00&#34;</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="ubuntu-制作图标">Ubuntu 制作图标</h2>
<p>进入 /usr/share/applications/下 创建文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cylon@cylon-PC:/usr/share/applications$ cat goland.desktop 
</span></span><span class="line"><span class="cl"><span class="o">[</span>Desktop Entry<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Encoding</span><span class="o">=</span>UTF-8
</span></span><span class="line"><span class="cl"><span class="nv">Name</span><span class="o">=</span>Goland
</span></span><span class="line"><span class="cl"><span class="nv">Exec</span><span class="o">=</span>goland.sh
</span></span><span class="line"><span class="cl"><span class="nv">Icon</span><span class="o">=</span>/home/lc/goland/bin/goland.svg
</span></span><span class="line"><span class="cl"><span class="nv">Terminal</span><span class="o">=</span><span class="nb">false</span>
</span></span><span class="line"><span class="cl"><span class="nv">Type</span><span class="o">=</span>Application
</span></span><span class="line"><span class="cl"><span class="nv">Categories</span><span class="o">=</span>Development<span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>主题目录： /usr/share/themes/</p>
<p>图标主题目录： /usr/share/icons/</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
