<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>VPN on Cylon&#39;s Collection</title>
    <link>https://www.oomkill.com/tags/vpn/</link>
    <description>Recent content in VPN on Cylon&#39;s Collection</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 18 Nov 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://www.oomkill.com/tags/vpn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ch1 VPN与OpenVPN应用场景分析</title>
      <link>https://www.oomkill.com/2019/11/ch1-introduction/</link>
      <pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2019/11/ch1-introduction/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="什么是vpn">什么是VPN</h2>
<p>VPN ( <em><strong>Virtual Private Network</strong></em>) 虚拟专用网络，是依靠ISP和其他的NSP，在公共网络中建立专用的数据通信网络的技术，可以为企业与企业之间或者个人与企业之间提供安全的数据传输隧道服务。在VPN中任意两点之间的连接并没有传统专网所需的端到端的物理链路，而是利用公共网络资源动态组成的，可以理解为通过私有的隧道技术在公共数据网络上模拟出来的和专网有同样功能的点到点的专线技术，所谓虚拟是指不需要去拉实际的长途物理线路，而是借用了公共Internet网络实现。</p>
<p>vpn直观的形象图：</p>
<center>VPN Server/Client <---------------------------------> VPN Server/Client</center>
<h3 id="vpn的作用">VPN的作用</h3>
<p>VPN功能可以帮助公司里的远程用户(出差，家里)、公司的分支机构、商业合作伙伴及供应商等公司和自己的公司内部网络之间建立可信的安全连接或者是局域网连接，确保数据的加密安全传输和业务访问，对至运维工程师来说，还可以连接不同的机房为局域网，处理相关的业务流。我们可以通过一张网络逻辑图来描述VPN的作用。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221024220841869.png" alt="image-20221024220841869" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<center>图：OpenVPN架构</center>
<center><em>Source：</em>https://www.slideteam.net/vpn-tunnel-architecture-connecting-corporate-and-branch-office.html</center><br>
<h3 id="vpn的分类">VPN的分类</h3>
<p>我们根据VPN的常见企业应用，将VPN分为以下4类应用</p>
<h4 id="远程访问vpn服务">远程访问VPN服务</h4>
<p>即通过个人电脑远程拨号到企业办公网络。</p>
<p>一般为企业内部员工出差、休假或特殊情况下在远离办公室的时候，又有需求访问公司的内部网络获取相关资源，就可以通过VPN拨号到公司内部.此时远程拨号的员工和办公室内的员工以及其他拨号的员工之间都相当于一个局域网络内。例如:访问内部的域控制器，文件服务器，OA系统，ERP, HTTP服务，内网聊天工具等局域网服务应用。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221024221026965.png" alt="image-20221024221026965" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<p>对于运维人且就是需要个人电脑远程拨号到企业网站IDC机房，远程维护内网服务器（一般无外网IP）。</p>
<p>此点是技术人员特别是运维人且在工作中会经常用这个方法维护大量的机房内无外网的服务器及网络设备。</p>
<h4 id="企业内部网络之间vpn服务">企业内部网络之间VPN服务</h4>
<p>在公司的分支机构的局域网和公司总部LAN之间的VPN连接。通过公网Internet建立VPN将公司在各地的分支机构的LAN连接到公司总部的LAN。例如:各大超市之间业务结算等。</p>
<p>这是由于地域的原因而产生的VPN的需求，通过VPN让不同地域内的机器可以互相访问，就好像是一个局域网一样。例如：办公室互联协同办公，机房互联数据同步及业务访问等。</p>
<h4 id="互联网公司多idc机房之间vpn服务">互联网公司多IDC机房之间VPN服务</h4>
<p>此处是运维架构人员需要考虑的问题。不同机房之间业务管理和业务访问，数据流动。</p>
<h4 id="企业外部vpn服务">企业外部VPN服务</h4>
<p>在供应商、合作伙伴的LAN和本公司的LAN之间建立的VPN服务。</p>
<h4 id="访问外国网站">访问外国网站</h4>
<p>翻墙的应用</p>
<h3 id="常贝隧道协议介绍">常贝隧道协议介绍</h3>
<h4 id="pptp">PPTP</h4>
<p>点对点隧道协议(PPTP)是由包括微软和3Com等公司组成的PPTP论坛开发的一种点对点隧道协议，基于拨号使用的PPP协议，使用PAP或CHAP之类的加密算法，或者使用Microsoft的点对点加密算法MPPE。其通过跨越基于TCP/IP的数据网络创建VPN。实现了从远程客户端到专用企业服务器之间数据的安全传输。PPTP支持通过公共网络(例如Internet)建立按需的、多协议的、虚拟专用网络。PPTP允许加密IP通讯，然后在要跨越公司IP网络或公共IP网络(如Internet)发送的IP头中对其进行封装。典型的linux平台的开源软件为pptp。</p>
<p>PPTP属于点对点方式的应用，比较适合远程的企业用户拨号到企业进行办公等的应用。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221024221026965.png" alt="image-20221024221026965" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<h4 id="l2tp">L2TP</h4>
<p>L2TP第2层隧道协议(L2TP)是IETF基于L2F (Cisco的第二层转发协议)开发的<font style="background:#fee904;" size=3>PPTP的后续版本</font>。是一种工业标准Internet隧道协议，其可以为跨越面向数据包的媒体发送点到点协议(PPP)框架提供封装。<strong>PPTP</strong>和<strong>L2TP</strong>都使用<strong>PPP</strong>协议对数据进行封装，然后添加附加包头用于数据在互联网络上的传输。PPTP只能在两端点间建立单一隧道。L2TP支持在两端点间使用多隧道，用户可以针对不同的服务质量创建不同的隧道。L2TP可以提供隧道验证，而PPTP则不支持隧道验证。但是当L2TP或PPTP 与 IPSEC 共同使用时，可以由IPSEC提供隧道验证，不需要在第2层协议上验证隧道使用L2TP。PPTP要求互联  网络为IP网络。L2TP只要求隧道媒介提供面向数据包的点对点的连接，L2TP可以在IP(使用UDP)，帧中继永久虚拟电路(PVCs)，X.25虚拟电路(VCs)或ATM VCs网络上使用。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221024221229433.png" alt="image-20221024221229433" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<p>L2TP (Layer 2 Tunneling Protocol)</p>
<p>在计算机网络中，第2层隧道协议（L2TP）是一种隧道协议，用于支持虚拟专用网络（VPN）或作为ISP提供服务的一部分。它本身不提供任何加密或机密性。相反，它依靠它在隧道内传递的加密协议来提供隐私。</p>
<p>由于L2TP协议缺乏固有的机密性，因此通常与IPsec一起实施。这被称为L2TP / IPsec，并在IETF RFC 3193中进行了标准化。</p>
<h2 id="reference">Reference</h2>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Layer_2_Tunneling_Protocol" target="_blank"
   rel="noopener nofollow noreferrer" >L2TP</a></p>
</blockquote>
<h4 id="ipsec">IPSec</h4>
<p>IP安全协议(IPSec: IP Security)实际上是一套协议包而不是一个独立的协议。从1995年开始IPSec的研究以来，IETF IPSec工作组在它的主页上发布了几十个Internet草案文献和12个RFC文件。其中，比较重要的有RFC2409 IKE(互连网密钥交换)、RFC2401 IPSec协议、RFC2402 AH验证包头、RFC2406 ESP加密数据等文件。</p>
<p>IPSec隧道模式隧道是封装、路由与解封装的整个过程。隧道将原始数据包隐藏(或封装)在新的数据包内部。该新的数据包可能会有新的寻址与路由信息，从而使其能够通过网络传输。隧道与数据保密性结合使用时，在网络上窃听通讯的人将无法获取原始数据包数据(以及原始的源和目标)。封装的数据包到达目的地后，会删除封装，原始数据包头用于将数据包路由到最终目的地。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221024221242118.png" alt="image-20221024221242118" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<p>隧道本身是封装数据经过的逻辑数据路径，对原始的源和目的端，隧道是不可见的，而只能看到网络路径中的点对点连接。连接双方并不关心隧道起点和终点之间的任何路由器、交换机、代理服务器或其他安全网关。将隧道和数据保密性结合使用时，可用于提供VPN。</p>
<p>封装的数据包在网络中的隧道内部传输。在此示例中，该网络是Internet。网关可以是外部Internet与专用网络间的周界网关。周界网关可以是路由器、防火墙、代理服务器或其他安全网关。另外，在专用网络内部可使用两个网关来保护网络中不信任的通讯。，</p>
<p>当以隧道模式使用IPSec时，其只为IP通讯提供封装。使用IPSec隧道模式主要是为了与其他不支持IPSec上的L2TP或PPTP VPN隧道技术的路由器、网关或终端系统之间的相互操作。</p>
<h4 id="ssl-vpn">SSL VPN</h4>
<p>SSL VPN，SSL协议提供了数据私密性、端点验证、信息完整性等特性。SSL协议由许多子协议组成，其中两个主要子协议是握手协议和记录协议。握手协议允许服务器和客户端在应用协议传输第一个数据字节以前，彼此确认，协商一种加密算法和密码钥匙。在数据传输期间，记录协议利用握手协议生成的密钥加密和解密后来交换的数据。</p>
<p>SSL独立于应用，因此任何一个应用程序都可以享受它的安全性而不必理会执行细节。SSL置身于网络结构体系的传输层和应用层之间。此外，SSL本身就被几乎所有的Web浏览器支持。这意味着客户端不需要为了支持SSL连接安装额外的软件。这两个特征就是SSL能应用于VPN的关键点。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221024221254674.png" alt="image-20221024221254674" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<p>典型的SSL VPN应用如OpenVPN，是一个比较好的开源软件。9penVPN允许参与建立VPN的单点使用预设的私组，第三方证书，或者用户名/密码来进行身份验证。它大量使用了OpenSSL加密库，以及SSLv3/TLSv1协议。OpenVPN能在Linux, xBSD, Mac OSX与Windows上运行。<font style="background:#fee904;" size=3>它并不是一个基于Web的VPN软件，也不与IPsec及其他VPN软件包兼容（唯一不如PPTP VPN的缺点）</font>。OpenVPN是基于C/S架构的软件，需要单独安装OpenVPN客户端（不如PPTP VPN之处）。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/d03e0af0480e461998e18ab32f732485%7Etplv-k3u1fbpfcp-zoom-in-crop-mark%3A4536%3A0%3A0%3A0.image" alt="虚拟专用网技术- 掘金" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<center>图：VPN信息处理过程</center>
<center><em>Source：</em>https://juejin.cn/post/7061094724047732767</center><br>
<h3 id="实现vpn功能的常见开源产品">实现vpn功能的常见开源产品</h3>
<h4 id="pptp-vpn">PPTP VPN</h4>
<p>使用PPTP VPN的最大优势在于，无需在windows客户端单独安装VPN客户端软件，windows默认就支持PPTP VPN拨号连接功能。另外，PPTP VPN属于点对点方式的应用，比较适合远程的企业用户拨号到企业进行办公等的应用，很多小区及网络设备不支持PPTP导致无法访问。</p>
<h4 id="ssl-vpnopenvpn">SSL VPN（OpenVPN）</h4>
<p>PPTP主要为那些经常外出移动或家庭办公的用户考虑，而OpenVPN不但使用于PPTP的应用场景，还适合针对企业异地两地总分公司之间的VPN不间断按需连接，例如：ERP，OA，及时通讯工具等在企业中的应用。缺点：需要单独安装客户端软件。</p>
<p>典型的开源软件：<code>OpenVPN</code></p>
<h4 id="ipsec-vpn">IPSEC VPN</h4>
<p>IPSEC VPN也适合针对企业异地两地总分公司或多个IDC机房之间的VPN不间断按需连接，并且在部署使用上更简单方便。</p>
<p>典型的开源软件：<code>openswan</code></p>
<h3 id="根据企业生产场景需求选择vpn方案建议">根据企业生产场景需求选择vpn方案建议</h3>
<ol>
<li>如果领导愿意花钱，可以选择相关硬件产品，不错的成熟的很多，例如：防火墙、负载均衡等硬件产品都附带VPN功能。</li>
<li>对于多数互联网公司，为了体现我们运维构顶的价值，我们应该建议老板选择开源产品，优势就是省钱，可扩展性更强，例如:二次开发，相应功能的改动。</li>
<li>对于开源的产品，建议:
<ul>
<li>个人拨号选择 <code>OpenVPN</code>，功能强大、稳定可靠。</li>
<li>如果不希望单独安装客户端拨号，则可选择PPTP。尽量打消使用PPTP VPN的想法。</li>
<li>多个企业之间或者多个IDC机房直接互联，选择 <code>IPSecVPN</code> （openswan）或 <code>OpenVPN</code>。</li>
</ul>
</li>
</ol>
<h2 id="openvpn开源产品介绍">OpenVPN开源产品介绍</h2>
<p>在众多VPN的产品中，OpenVPN无疑是Linux下开源VPN的先锋，它提供了良好的访问性能和友好的用户GUI。</p>
<p>OpenVPN是一个用于创建虚拟专用网络加密通道的软件包，最早由James Yonan编写。OpenVPN允许参与建立VPN的单点使用预设的<strong>私钥</strong>，<strong>第三方证书</strong>，或者<strong>用户名/密码</strong>来进行身份验证.它大量使用了OpenSSL加密库，以及SSLv3/TLSv1协议。OpenVPN能在Linux、xBSD、MacOS X与Windows上运行。OpenVPN是一个服务器和客户端软件，而不是一个基于Web的VPN软件，也不与IPsec及其他VPN软件包兼容。</p>
<h3 id="openvpn依赖的ssl与tls协议介绍">OpenVPN依赖的SSL与TLS协议介绍</h3>
<p>SSL即，安全套接层(Secure Sockets Layer, SSL)是一种安全协议，诞生的目的是为网络通信提供安全及数据完整性保障，SSL在传输层中对网络通信进行加密。</p>
<p>SSL采用公开密钥技术，保证两个应用间通信的保密性和可靠性，使客户与服务器应用之间的通信不被攻击者窃听。它在服务器和客户机两端可同时被支持，目前已成为互联网上保密通讯的工业标准。现行的Web浏览器亦普遍将HTTP和SSL相结合，从而实现安全通信。SSL协议其继任者是TLS。</p>
<p>后来 <a href="www.ietf.org">IETF</a> 将SSL作了标准化，即RFC2246，并将其称为TLS (Transport Layer Security)，其最新版本是RFC 5246，版本1.2。从技术上讲，TLS1.0与SSL3.0的差异非常微小。</p>
<p><strong>TLS(Transport Layer Security)</strong></p>
<p>TLS利用密钥算法在互联网上提供端点身份认证与通讯保密，其基础是公组基础设施(public key infrastructure, PKI)。不过在实现的典型例子中，只有网络服务者被可靠身份验证，而其客户端则不一定。这是因为公钥基础设施普遍商业运营，电子签名证书通常需要付费购买。协议的设计在某种程度上能够使主从架构应用程序通讯本身预防窃听、干扰(Tampering)和消息伪造。</p>
<h3 id="openvpn的加密通信原理过程">OpenVPN的加密通信原理过程</h3>
<p>OpenVPN使用TLS加密是通过使用公开密钥（非对称密钥，加密解密使用不同的key，一个称为Public key，另一个是Private key）对数据进行加密的，对于TLS传输的工作原理，这里暂且先不介绍。对于OpenVPN使用TLS mode，首先Server和Client要有相同CA签发的证书，双方通过交换证书验证双方的合法性以决定是否建立VPN连接，然后使用对方CA把自己目前使用的数据加密方法(类似于密钥)加密后发送给对方，由于使用对方CA加密的，所以只有对方CA对应的Private key才能解密该字串，保证了此密钥的安全性，并且此密钥定期改变，对于窃听者来说，可能还没有破解出密钥，通信双方己经更换密钥了。</p>
<h2 id="openvpn的多种身份验证方式">OpenVPN的多种身份验证方式</h2>
<p>OpenVPN提供了多种身份验证方式，用以确认参与连接双方的身份，包括：预享私钥，第三方证书以及用户名/密码组合等。预享私钥最为简单，但同时它只能用于建立点对点的VPN；基于PKI的第三方证书提供了最完善的功能，但是需要额外的精力去维护一个PKI证书体系。OpenVPN 2.0后引入了用户名/口令组合的身份验证方式，它可以省略客户端预享密钥，但是仍有一份服务器CA证书需要被用作加密，比较好的验证方式还有LDAP或域控制器统一验证等。</p>
<h2 id="openvpn通信原理">OpenVPN通信原理</h2>
<p>OpenVPN所有的通信都基于一个单一的IP端口(默认为1194)，默认使用UDP协议通讯，同时TCP（推荐）也被支持。OpenVPN连接能通过大多数的代理服务器，并且能够在NAT的环境中很好地工作。OpenVPN服务端具有向客户端“推送”某些网络配置信息的功能，这些信息包括：IP地址、路由设置等。OpenVPN提供了两种虚拟网络接口:通用Tun/Tap驱动，通过它们，可以建立三层IP隧道，或者虚拟二层以太网，后者可以传送任何类型的二层以太网络数据。传送的数据可通过LZO算法压缩。OenVPN2.0以后版本每个进程可以同时管理数个并发的隧道。</p>
<p>OpenVPN使用通用网络协议(TCP与UDP)的特点使它成为IPsec等协议的理想替代，尤其是在ISP (Internet service provider)过滤某些特定VPN协议的情况下。</p>
<p>在选择协议时候，需要注意2个加密隧道之间的网络状况，如有高延迟或者丢包较多的情况下，请选择TCP协议作为底层协议，UDP协议由于存在无连接和重传机制，导致要隧道上层的协议进行重传，效率非常低下。这里建议用TCP协议方式。</p>
<blockquote>
<p>参考：</p>
<p><a href="http://www.baike.com/wiki/OpenVPN" target="_blank"
   rel="noopener nofollow noreferrer" >http://www.baike.com/wiki/OpenVPN</a></p>
<p><a href="http://zh.wikipedia.org/zh-cn/OpenVPN" target="_blank"
   rel="noopener nofollow noreferrer" >http://zh.wikipedia.org/zh-cn/OpenVPN</a></p>
</blockquote>
<p>OpenVPN的技术核心是<strong>虚拟网卡</strong>，其次是<strong>SSL协议实现</strong>，SSL协议前面已阐述过，这里重点对虚拟网卡及其在OpenVPN的中的工作机理进行介绍。</p>
<p>虚拟网卡是使用网络底层编程技术实现的一个驱动软件，安装后在主机上多出一个网卡，可以像其它网卡一样进行配置。服务程序可以在应用层打开虚拟网卡，如果应用软件(如IE)向虚拟网卡发送数据，则服务程序可以读取到该数据，如果服务程序写合适的数据到虚拟网卡，应用软件也可以接收得到。虚拟网卡在很多的操作系统下都有相应的实现，这也是OpenVPN能够跨平台一个很重要的理由。</p>
<p>在OpenVPN中，如果用户访问一个远程的虚拟地址(属于虚拟网卡配用的地址系列，区别于真实地址)则操作系统会通过路由机制将数据包(TUN模式)或数据帧(TAP模式)发送到虚拟网卡上，服务程序接收该数据并进行相应的处理后，通过SOCKET从外网给虚拟网卡，则应用软件可以接收到，完成了一个单向传输的过程，反之亦然。</p>
<p>OpenVPN使用OpenSSL库加密数据与控制信息：它使用了OpesSSL的加密以及验证功能意味着，它能够使用任何OpenSSL支持的算法。它提供了可选的数据包HMAC功能以提高连接的安全性。此外，OpenSSL的硬件加速也能提高它的性能。</p>
<ol>
<li>OpenVPN驱动部分实现了网卡处理和字符设备。网卡处理网络数据，字符设备完成与应用层的数据交互。</li>
<li>使用OpenVPN必须修改路由表</li>
</ol>
<p><strong>工作过程，发送数据</strong>：</p>
<ol>
<li>应用程序发送网络数据。</li>
<li>网络数据根据修改后的路由表把数据路由到虚拟网卡。</li>
<li>虚拟网卡把数据放到数据队列中。</li>
<li>字符设备从数据队列中取数据，然后送给应用层。</li>
<li>应用层把数据转发给物理网卡。</li>
<li>物理网卡发送数据。</li>
</ol>
<p><strong>接收过程</strong>：</p>
<ol>
<li>物理网卡接受到数据，并传到应用空间。</li>
<li>应用守护程序通过字符设备，把数据传给驱动网卡。</li>
<li>数据通过虚拟网卡重新进入网络堆栈。</li>
<li>网络堆栈把数据传给上层真实的应用程序。</li>
</ol>
<h2 id="openvpn生产环境常用场景">OpenVPN生产环境常用场景</h2>
<h4 id="远程拨号访问企业网络或idc机房">远程拨号访问企业网络或IDC机房</h4>
<p>即通过个人电脑远程拨号到企业办公网络。一般为企业内部员工出差、休假或特殊情况下在远离办公室的时候，又有需求访问公司的内部网络获取相关资源，就可以通过VPN拨号到公司内部。此时远程拨号的员工和办公室内的员工4及其他拨号的员工之间都相当于一个局域网络内。例如：访问内部的域控制器，文件服务器，OA系统，HTTP服务，内网飞秋聊天工具等局域网服务应用。</p>
<p>对于运维人就是需要个人电脑远程拨号到企业网站IDC机房，远程维护服务器。此点是技术人员特别是运维人员在工作中会经常用这个方法维护大量的机房内无外网IP的服务器及网络设备。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221024221821155.png" alt="image-20221024221821155" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<center>client-LAN类型数据库</center><br>
<h3 id="企业异地内部网络通过vpn连接成局域网">企业异地内部网络通过VPN连接成局域网</h3>
<p>在公司的分支机构的局域网和公司总部LAN之间的VPN连接。通过公网Internet建立VPN将公司在各地的分支机构的LAN连接到公司总部的LAN。例如:各大超市之间业务结算等。</p>
<p>这是由于地域的原因而产生的VPN的需求，通过VPN让不同地域内的机器可以互相访问，就好像是一个局域网一样。例如：办公室互联协同办公，机房互联数据同步及业务访问等。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221024221840103.png" alt="image-20221024221840103" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<center>LAN-LAN类型示意图</center><br>
<h3 id="互联网公司多idc机房之间通过vpn连接交换数据">互联网公司多IDC机房之间通过VPN连接交换数据</h3>
<p>此处是j臼维架构人员需要考虑的问题。不同机房之间业务管理和业务访问，数据流动。</p>
<h3 id="企业外部vpn服务-1">企业外部VPN服务</h3>
<p>在供应商、合作伙伴的LAN和本公司的LAN之间建立的VPN服务。从技术上讲2，3，4的实现是一样的。</p>
<p>路由方式和NAT方式企业实际应用区别和异同小结。</p>
<p>NAT方式适合subnet machine 的网关不是VPNSERVER的场景。</p>
<p>static routing适用于每个subnet machine都要配置对应的路由路由</p>
<p>在企业应用场景中，多数情况下，内部服务器的网关不是VPNSERVER。此时NAT更简便，路由方式更复杂。</p>
<p>企业中OpenVPN服务维护的常见问题</p>
<ul>
<li>
<p>如何增加多个vpn client证书文件</p>
<ul>
<li>方法1：为每一个客户建立一个证书。</li>
</ul>
</li>
<li>
<p>OpenVPN 客户端单多个证书的撤销。</p>
<ul>
<li>如果某个同事离职，那么需要取消其VPN的拨入权限，可以通过在服务器端吊销该客户端证书来实现。官方给出的3个吊销证书的可能情况：<a href="https://OpenVPN.net/community-resources/how-to/#revoking-certificates" target="_blank"
   rel="noopener nofollow noreferrer" >revoking-certificates</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>ch2 从零开始安装OpenVPN</title>
      <link>https://www.oomkill.com/2019/11/ch2-install-and-configuration/</link>
      <pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2019/11/ch2-install-and-configuration/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="openvpn安装环境需求">OpenVPN安装环境需求</h2>
<table>
<thead>
<tr>
<th>设备</th>
<th>IP</th>
</tr>
</thead>
<tbody>
<tr>
<td>笔记本或PC<br>(adsl上网)</td>
<td>10.0.0.0/24 办公室（DHCP）</td>
</tr>
<tr>
<td>OpenVPN Server双网卡</td>
<td>eth0:10.0.0.4/24（外网）<br>eth1:192.168.100.4（内网）</td>
</tr>
<tr>
<td>IDC机房内部局域网服务器</td>
<td>192.168.100.0/24<br>IDC机房内网服务器无外网IP，又希望ADSL上网笔记本（运维人员），在不同的网络能够直接访问</td>
</tr>
<tr>
<td></td>
<td>实现需求：在远端通过VPN客户端(笔记本)拨号到VPN，然后在笔记本电脑上可以直接访问vpnserver所在局域网内的多个servers，进行维护管理</td>
</tr>
<tr>
<td>环境</td>
<td>VPN-Server eth0:10.0.0.4(外网IP)。GW:10.0.0.1, dns:10.0.0.1。<br/><br>eth1:172.0.0.1(内网IP)。GW:不配<br><br/><strong>提示</strong>：检查是否可以ping通client eth0 IP。<br><br/>App client Server:ethO:172.0.0.2。GW:路由器。<br/><br/><strong>提示</strong>：检查是否可以ping通VPN-Server eth1 IP。</td>
</tr>
</tbody>
</table>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221024214947488.png" alt="image-20221024214947488" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<center>OpenVPN 解决方案图解</center>
<h2 id="部署openvpn-server">部署OpenVPN Server</h2>
<h2 id="reference">Reference</h2>
<blockquote>
<p><a href="http://www.oberhumer.com/opensource/lzo/download/" target="_blank"
   rel="noopener nofollow noreferrer" >download lzo</a></p>
<p><a href="https://openvpn.net/community-resources/installing-openvpn/" target="_blank"
   rel="noopener nofollow noreferrer" >installing-openvpn</a></p>
<p><a href="http://build.openvpn.net/downloads/releases/" target="_blank"
   rel="noopener nofollow noreferrer" >openvpn offical releases</a></p>
<p><a href="https://github.com/OpenVPN/openvpn/releases" target="_blank"
   rel="noopener nofollow noreferrer" >openvpn github</a></p>
</blockquote>
<p><strong>安装前准备</strong></p>
<ul>
<li>
<p><strong>openvpn支持的平台</strong>：</p>
<ul>
<li>Linux kernel 2.6+</li>
<li>OpenBSD 5.1+</li>
<li>Mac OS X Darwin 10.5+</li>
<li>FreeBSD 7.4+</li>
<li>Windows (WinXP and higher)</li>
</ul>
</li>
<li>
<p><strong>下载地址</strong>：</p>
<ul>
<li><a href="http://build.openvpn.net/downloads/releases/" target="_blank"
   rel="noopener nofollow noreferrer" >openvpn-releases</a></li>
<li><a href="https://github.com/OpenVPN/openvpn/releases" target="_blank"
   rel="noopener nofollow noreferrer" >openvpn github</a></li>
</ul>
</li>
<li>
<p><strong>安装openvpn的依赖项</strong>：</p>
<ul>
<li>0.9.8版或更高版本的OpenSSL库，对于加密是必需的</li>
<li>PolarSSL库，是加密的替代版本1.1或更高版本</li>
<li>LZO实时压缩库，连接压缩所需</li>
</ul>
</li>
</ul>
<pre><code class="language-bash">yum install openssl-devel lzo-devel pam-devel -y
</code></pre>
<pre><code class="language-bash">./configure \
--sbindir=/usr/sbin/
--sysconfdir=/etc/openvpn/
--libdir=/usr/lib/
--includedir=/usr/include/
--docdir=/usr/doc
</code></pre>
<p>使用<code>rpmbuild</code>安装：<a href="..%5c..%5cimages%5copenvpn%5copenvpn.spec">openvpn.spec</a></p>
<h2 id="配置openvpn-server">配置OpenVPN Server</h2>
<p>openvpn的配配置文件在下面目录中</p>
<ul>
<li>
<p><code>sample/sample-config-files/client.conf</code></p>
</li>
<li>
<p><code>sample/sample-config-files/server.conf</code></p>
</li>
</ul>
<pre><code class="language-bash">cp sample-config-files/server.conf /etc/openvpn/
</code></pre>
<h2 id="建立ca证书">建立CA证书</h2>
<p>easy-rsa是一个基于OpenSSL命令行工具的小型RSA密钥管理包。虽然它主要关注SSL VPN应用程序空间的密钥管理，但它也可用于构建Web证书。它最初被包含在OpenVPN中，但现在是一个单独的项目。</p>
<p>openvpn在2.3-alpha1 -&gt; 2.3-alpha2版本迭代是将easy-rsa分割为单独的子项目。在2.3版本之前easy-rsa包含在openvpn内，在<code>openvpn-2.2.2/easy-rsa/2.0</code>目录下。</p>
<p>证书也可以使用openssl进行生成，<a href="https://github.com/OpenVPN/easy-rsa" target="_blank"
   rel="noopener nofollow noreferrer" >easy-rsa</a>可以简化证书生成流程。</p>
<h3 id="设置并签署第一个请求">设置并签署第一个请求</h3>
<p><code>./easyrsa help [commond]</code> 查看帮助</p>
<p><code>./easyrsa init-pki</code> 初始化公钥基础设施，（初始化单独的PKI目录）</p>
<p><code>./easyrsa build-ca nopass</code> 创建ca</p>
<p><code>./easyrsa gen-req {name} nopass</code> 创建CSR，{name}只是一个名字，不代表任何。</p>
<p><code>./easyrsa import-req pki/{name}.req</code> 将请求文件<code>.req</code>，导入CA</p>
<p><code>./easyrsa sign-req {server|client} {name}</code> 签署请求</p>
<p><code>./easyrsa revoke {name}</code> 吊销证书</p>
<p><code>./easyrsa gen-dh</code>  生成Diffie-Hellman</p>
<blockquote>
<p>Reference</p>
<p><a href="https://github.com/OpenVPN/easy-rsa/blob/master/doc/EasyRSA-Readme.md" target="_blank"
   rel="noopener nofollow noreferrer" >easyrsa readme</a></p>
</blockquote>
<h3 id="easyrsa的配置源">EasyRSA的配置源</h3>
<p>在easyrsa生成证书时，需要提供证书的配置，来设置证书对应的详情。此时就需要easyrsa获取外部的配置来替换证书默认的参数。</p>
<p>easyrsa有四种方式获得外部配置</p>
<ul>
<li>
<p><em><strong>命令行选项</strong></em></p>
</li>
<li>
<p><em><strong>环境变量</strong></em> ：覆盖全局选项</p>
</li>
<li>
<p>env-vars列表，任何设置/覆盖它的（CLI）以及可能的简洁描述如下所示：</p>
<ul>
<li><code>EASYRSA</code> easyrsa脚本所在的Easy-RSA顶级目录。</li>
<li><code>EASYRSA_PKI</code> 保存PKI的文件的目录，默认为<code>$PWD/pki</code>。</li>
<li><code>EASYRSA_DN</code>：设置为字符串<code>cn_only</code>或<code>org</code>更改要包含在请求DN中的字段</li>
<li><code>EASYRSA_REQ_COUNTRY</code>：DN国家</li>
<li><code>EASYRSA_REQ_PROVINCE</code>：DN状态/省</li>
<li><code>EASYRSA_REQ_CITY</code>：DN城市/位置</li>
<li><code>EASYRSA_REQ_ORG</code>：DN组织</li>
<li><code>EASYRSA_REQ_EMAIL</code>：DN电子邮件</li>
<li><code>EASYRSA_REQ_OU</code>：DN组织单位</li>
<li><code>EASYRSA_KEY_SIZE</code>：设置密钥大小单位</li>
<li><code>EASYRSA_ALGO</code>：设置要使用的加密算法：rsa或ec</li>
<li><code>EASYRSA_CA_EXPIRE</code>：设置CA到期时间</li>
<li><code>EASYRSA_CERT_EXPIRE</code>：设置已颁发证书的到期时间：单位天</li>
<li><code>EASYRSA_REQ_CN</code>：默认CN，批量配置时可设置。</li>
</ul>
</li>
<li>
<p><em><strong>vars 文件</strong></em>：无扩展名的vars文件是为Easy-RSA提供配置的文件，该文件优先级低于环境变量与命令行参数。easyrsa对vars文件的检测顺序为：</p>
<ul>
<li><code>--vars</code> 参数引用的文件</li>
<li>环境变量值<code>EASYRSA_VARS_FILE</code></li>
<li>环境变量设置的pki目录 <code>EASYRSA_PKI</code></li>
<li>执行默认目录 <code>$PWD/pki</code></li>
</ul>
</li>
<li>
<p><em><strong>内部默认值</strong></em></p>
</li>
</ul>
<blockquote>
<p><strong>生成服务端证书和密钥KEY文件</strong></p>
</blockquote>
<p>与上一步类似，其中“Common Name”项需要填写VPN服务器的FQDN，其他均可默认为default值。还会出现：“Sign the certificate? [y/n]”和“1 out of 1 certificate requests certified, commit? [y/n]”。都输入y然后回车，其它可参照如下。</p>
<pre><code class="language-bash">### 准备生成证书用的CSR相关配置
export EASYRSA_REQ_COUNTRY=&quot;HK&quot;
export EASYRSA_REQ_PROVINCE=&quot;HK&quot;
export EASYRSA_REQ_CITY=&quot;HongKong&quot;
export EASYRSA_REQ_ORG=&quot;china mobile&quot;
export EASYRSA_REQ_EMAIL=&quot;10086.chinamobile.cn&quot;
#证书有效期
export EASYRSA_CA_EXPIRE=3650
export EASYRSA_CERT_EXPIRE=3650
# 默认cn
export EASYRSA_REQ_CN=&quot;csol&quot;
# 批处理模式
export EASYRSA_BATCH=&quot;enable&quot;
## 初始化pki
./easyrsa init-pki
## 创建CA
./easyrsa build-ca nopass
## 申请csr
./easyrsa gen-req csol nopass
## 导入csr
./easyrsa import-req ./pki/reqs/csol.req csol
## 签发证书
./easyrsa sign-req server csol
</code></pre>
<hr>
<p>注意：easyrsa在执行是也是通过openssl进行，需要<code>openssl-easyrsa.cnf</code> 与 <code>x509-types</code></p>
<hr>
<blockquote>
<p>Reference</p>
<p><a href="https://blog.dianduidian.com/post/openvpn-server%E6%90%AD%E5%BB%BA%E5%B9%B6%E4%BD%BF%E7%94%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%AF%81%E4%B9%A6%E8%AE%A4%E8%AF%81/" target="_blank"
   rel="noopener nofollow noreferrer" >证书认证</a></p>
<p><a href="http://blog.joylau.cn/2020/05/28/OpenVPN-Config/#21-%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" target="_blank"
   rel="noopener nofollow noreferrer" >openvpn配置文件说明</a></p>
<p><a href="https://sexywp.com/use-easyrsa-create-self-signed-cert.htm#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85_EasyRSA" target="_blank"
   rel="noopener nofollow noreferrer" >easyrsa签发证书</a></p>
</blockquote>
<h2 id="加强openvpn安全性">加强OpenVPN安全性</h2>
<p><code>TLS-auth</code> 参数增加所有 <code>SSL/TLS</code> 握手了额外的HMAC签名的完整性验证。任何没有正确HMAC签名的UDP数据包都被丢弃，而无需进一步处理。<strong>TLS-AUTH</strong> 可以防止：</p>
<ul>
<li>OpenVPN UDP端口上的DDoS攻击或Flood DDoS 。</li>
<li>端口扫描以确定哪些UDP端口处于侦听状态。</li>
<li>SSL/TLS缓冲区溢出漏洞。</li>
<li>切断来自未经授权的机器的<code>SSL/TLS</code>握手。</li>
</ul>
<p>生成随机共享密钥（仅适用于非TLS静态密钥加密模式）</p>
<pre><code class="language-bash">openvpn --genkey secret ta.key
</code></pre>
<p>在服务器配置中，添加：</p>
<pre><code>tls-auth ta.key 0
</code></pre>
<p>在客户端配置中，添加：</p>
<pre><code>tls-auth ta.key 1
</code></pre>
<blockquote>
<p>Reference</p>
<p><a href="https://openvpn.net/community-resources/hardening-openvpn-security/" target="_blank"
   rel="noopener nofollow noreferrer" >openvpn-security</a></p>
</blockquote>
<h2 id="调试openvpn服务端">调试OpenVPN服务端</h2>
<ol>
<li>
<p>取消服务器上防火墙iptables对Openvpn(默认1194)的拦截。以及允许服务进行转发。</p>
<p>centos7+ firewalld</p>
<pre><code class="language-bash">firewall-cmd --add-port=1194/udp  --permanent
firewall-cmd --permanent --direct --passthrough ipv4 -t nat -A POSTROUTING -s 192.168.100.0/24 -o eth1 -j MASQUERADE
</code></pre>
<p>iptables</p>
<pre><code>iptables -A INPUT -i eth0 -m state --state NEW -p udp --dport 1194 -j ACCEPT
iptables -t nat -A POSTROUTING -o eth1 -s 192.168.100.0/24 -j MASQUERADE
</code></pre>
</li>
<li>
<p>开启内核转发功能：</p>
<pre><code>sysctl net.ipv4.ip_forward |grep 1 &gt; /dev/null &amp;&amp; \
echo net.ipv4.ip_forward=1 &gt;&gt; /etc/sysctl.conf 
</code></pre>
</li>
<li>
<p>启动OpenVPN server</p>
<pre><code>openvpn --config server.conf
</code></pre>
</li>
<li>
<p>默认情况下，openvpn客户端不能访问客户端上具相同子网的IP的主机。</p>
</li>
</ol>
<h2 id="服务端-serverconf参数详解">服务端 server.conf参数详解</h2>
<p>openvpn默认配置文件在 <code>sample/sample-config-files/server.conf</code> 目录下。</p>
<pre><code class="language-bash">#####################################################
# 多客户端服务器的OpenVPN 2.0配置文件示例				   #
#                                                   #
# 本文件用于多客户端&lt;-&gt;单服务器端的                       #
# OpenVPN服务器端配置                                 #
#                                                   #
# OpenVPN也支持单机&lt;-&gt;单机的配置                        #
# (在网站上的示例页面更多信息)                       	#
#                                               	#
# 这个配置可以在Windows或Linux/BSD系统上工作				#
# Windows的路径名需要加双引号并使用双反斜杠 如			 #
# &quot;C:\\Program Files\\OpenVPN\\config\\foo.key&quot;		#
#                                               	#
# 前面加'#'或';'的是注释                         	   #
#####################################################

# OpenVPN应该监听哪个本地IP地址（可选）
# 如果不设置，默认监听所有IP
;local a.b.c.d

# OpenVPN应该监听哪个端口(TCP/UDP)
# 如果想在同一台计算机上运行多个OpenVPN实例，可以使用不同的端口号来区分它们
# 在防火墙上打开这个端口
port 1194

# 服务器使用TCP还是UDP协议
;proto tcp
proto udp

# 指定OpenVPN创建的通信隧道类型
# &quot;dev tun&quot;将会创建一个路由IP隧道
# &quot;dev tap&quot;将会创建一个以太网隧道
# 如果是以太网桥接模式，并且提前创建了一个名为&quot;tap0&quot;的与以太网接口进行桥接的虚拟接口，则你可以使用&quot;dev tap0&quot;
# 如果想控制VPN的访问策略，必须为TUN/TAP接口创建防火墙规则
# 在非Windows系统中，可以给出明确的单位编号，如&quot;tun0&quot;
# 在Windows中，也可以使用&quot;dev-node&quot;
# 在大多数系统上，除非部分或完全禁用了TUN/TAP接口的防火墙，否则VPN将不起作用。
;dev tap
dev tun

# 如果想配置多个隧道，需要用到网络连接面板中TAP-Win32适配器的名称(如&quot;MyTap&quot;)
# 在XP SP2或更高版本的系统中，可能需要有选择地禁用掉针对TAP适配器的防火墙
# 通常情况下，非Windows系统则不需要该指令。
;dev-node MyTap

# 设置SSL/TLS根证书(ca)、证书(cert)和私钥(key)。
# 每个客户端和服务器端都需要它们各自的证书和私钥文件。
# 服务器端和所有的客户端都将使用相同的CA证书文件。
#
# 通过easy-rsa目录下的一系列脚本可以生成所需的证书和私钥。
# 服务器端和每个客户端的证书必须使用唯一的Common Name。
#
# 也可以使用遵循X509标准的任何密钥管理系统来生成证书和私钥。
# OpenVPN也支持使用一个PKCS #12格式的密钥文件(详情查看站点手册页面的&quot;pkcs12&quot;指令)
ca ca.crt
cert server.crt
key server.key  # 该文件应该保密

# 迪菲·赫尔曼参数
# 使用如下命令生成：
#   openssl dhparam -out dh2048.pem 2048
dh dh2048.pem

# 网络拓扑结构
# 应该为子网(通过IP寻址)
# 除非必须支持Windows客户端v2.0.9及更低版本(net30即每个客户端/30)
# 默认为&quot;net30&quot;(不建议)
;topology subnet

# 设置服务器端模式，并提供一个VPN子网，以从中为客户端分配IP地址
# 本例中服务器端自身占用10.8.0.1，其他的将分配给客户端使用
# 每个客户端将能够通过10.8.0.1访问服务器
# 如果使用的是以太网桥接模式，注释掉本行。更多信息请查看官方手册页面。
server 10.255.255.255.0

# 在此文件中维护客户端与虚拟IP地址之间的关联记录
# 如果OpenVPN重启，重新连接的客户端可以被分配到先前分配的虚拟IP地址
ifconfig-pool-persist ipp.txt

# 该指令仅针对以太网桥接模式
# 首先，必须使用操作系统的桥接能力将以太网网卡接口和TAP接口进行桥接
# 然后，需要手动设置桥接接口的IP地址、子网掩码，这里假设为10.8.0.4和255.255.255.0
# 最后，必须指定子网的一个IP范围(例如从10.8.0.50开始，到10.8.0.100结束)，以便于分配给连接的客户端
# 如果不是以太网桥接模式，直接注释掉这行指令即可
;server-bridge 10.255.255.2510.8.0.50 10.8.0.100

# 该指令仅针对使用DHCP代理的以太网桥接模式
# 此时客户端将请求服务器端的DHCP服务器，从而获得分配给它的IP地址和DNS服务器地址
# 在此之前，也需要先将以太网网卡接口和TAP接口进行桥接
# 注意：该指令仅用于OpenVPN客户端(如Windows)，并且该客户端的TAP适配器需要绑定到一个DHCP客户端上
;server-bridge

# 推送路由信息到客户端，以允许客户端能够连接到服务器后的其他私有子网
# 即允许客户端访问VPN服务器可访问的其他局域网
# 记住，这些私有子网还需要将OpenVPN客户端地址池（10.8.0.0/255.255.255.0）路由回到OpenVPN服务器
;push &quot;route 192.168.1255.255.255.0&quot;
;push &quot;route 192.168.2255.255.255.0&quot;

# 要为指定的客户端分配特定的IP地址，或者客户端后的私有子网也要访问VPN
# 可以针对该客户端的配置文件使用ccd子目录
# 请参阅手册页获取更多信息

# 示例1：假设有个Common Name为&quot;Thelonious&quot;的客户端后有一个小型子网也要连接到VPN
# 该子网为192.168.40.128/255.255.255.248
# 首先，去掉下面两行指令的注释：
;client-config-dir ccd
;route 192.168.40.128 255.255.255.248
# 然后创建一个文件ccd/Thelonious，该文件的内容为(没有&quot;#&quot;)：
#   iroute 192.168.40.128 255.255.255.248
# 客户端所在的子网就可以访问VPN了
# 注意，这个指令只能在基于路由模式而不是基于桥接模式下才能生效
# 比如，你使用了&quot;dev tun&quot;和&quot;server&quot;指令

# 示例1：假设要给Thelonious分配一个固定的IP地址10.9.0.1
# 首先，去掉下面两行指令的注释：
;client-config-dir ccd
;route 10.255.255.255.252
# 然后在文件ccd/Thelonious中添加如下指令(没有&quot;#&quot;)：
#   ifconfig-push 10.10.9.0.2

# 如果想要为不同群组的客户端启用不同的防火墙访问策略，你可以使用如下两种方法：
# (1)运行多个OpenVPN守护进程，每个进程对应一个群组，并为每个进程(群组)启用适当的防火墙规则
# (2)(进阶)创建一个脚本来动态地修改响应于来自不同客户的防火墙规则
# 关于learn-address脚本的更多信息请参考官方手册页面
;learn-address ./script

# 如果启用该行指令，所有客户端的默认网关都将重定向到VPN
# 这将导致诸如web浏览器、DNS查询等所有客户端流量都经过VPN
# (为确保能正常工作，OpenVPN服务器所在计算机可能需要在TUN/TAP接口与以太网之间使用NAT或桥接技术进行连接)
;push &quot;redirect-gateway def1 bypass-dhcp&quot;

# 某些具体的Windows网络设置可以被推送到客户端，例如DNS或WINS服务器地址
# 下列地址来自opendns.com提供的Public DNS服务器
;push &quot;dhcp-option DNS 208.67.222.222&quot;
;push &quot;dhcp-option DNS 208.67.220.220&quot;

# 去掉该行指令的注释将允许不同的客户端之间互相访问
# 默认情况，客户端只能访问服务器
# 为了确保客户端只能看见服务器，还可以在服务器端的TUN/TAP接口上设置适当的防火墙规则
;client-to-client

# 如果多个客户端可能使用相同的证书/私钥文件或Common Name进行连接，那么可以取消该指令的注释
# 建议该指令仅用于测试目的。对于生产环境使用而言，每个客户端都应该拥有自己的证书和私钥
# 如果没有为每个客户端分别生成Common Name唯一的证书/私钥，可以取消该行的注释(不推荐这样做)
;duplicate-cn

# keepalive指令将导致类似于ping命令的消息被来回发送，以便于服务器端和客户端知道对方何时被关闭
# 每10秒钟ping一次，如果120秒内都没有收到对方的回复，则表示远程连接已经关闭
keepalive 10 120

# 出于SSL/TLS之外更多的安全考虑，创建一个&quot;HMAC 防火墙&quot;可以帮助抵御DoS攻击和UDP端口淹没攻击
# 可以使用以下命令来生成：
#   openvpn --genkey --secret ta.key
#
# 服务器和每个客户端都需要拥有该密钥的一个拷贝
# 第二个参数在服务器端应该为'0'，在客户端应该为'1'
tls-auth ta.key 0  # 该文件应该保密

# 选择一个密码加密算法，该配置项也必须复制到每个客户端配置文件中
# 注意，v2.4客户端/服务器将自动以TLS模式协商AES-256-GCM，请参阅手册中的ncp-cipher选项
cipher AES-256-CBC

# 在VPN链接上启用压缩并将选项推送到客户端（仅适用于v+，对于早期版本，请参阅下文）
;compress lz4-v2
;push &quot;compress lz4-v2&quot;

# 对于与旧客户端兼容的压缩，使用comp-lzo
# 如果在此启用，还必须在客户端配置文件中启用它
;comp-lzo

# 允许并发连接的客户端的最大数量
;max-clients 100

# 初始化后减少OpenVPN守护进程的权限是一个好主意
# 该指令仅限于非Windows系统中使用
;user nobody
;group nobody

# 持久化选项可以尽量避免访问那些在重启之后由于用户权限降低而无法访问的某些资源
persist-key
persist-tun

# 输出一个简短的状态文件，用于显示当前的连接状态，该文件每分钟都会清空并重写一次
status openvpn-status.log

# 默认情况下，日志消息将写入syslog(在Windows系统中，如果以服务方式运行，日志消息将写入OpenVPN安装目录的log文件夹中)
# 可以使用log或者log-append来改变这种默认设置
# &quot;log&quot;方式在每次启动时都会清空之前的日志文件
# &quot;log-append&quot;是在之前的日志内容后进行追加
# 你可以使用两种方式之一(不要同时使用)
;log         openvpn.log
;log-append  openvpn.log

# 为日志文件设置适当的冗余级别(0~9)
# 冗余级别越高，输出的信息越详细
#
# 0 表示静默运行，只记录致命错误
# 4 表示合理的常规用法
# 5和6 可以帮助调试连接错误
# 9 表示极度冗余，输出非常详细的日志信息
verb 3

# 忽略过多的重复信息
# 相同类别的信息只有前20条会输出到日志文件中
;mute 20

# 通知客户端，当服务器重新启动时，可以自动重新连接
# 只能是UDP协议使用，TCP使用的话不能启动服务
explicit-exit-notify 1

# （如果不添加该指令则）默认值3600，也就是一个小时进行一次TSL重新协商
# 这个参数在服务端和客户端设置都有效
# 如果两边都设置了，就按照时间短的设定优先
# 当两边同时设置成0，表示禁用TSL重协商。使用OTP认证需要禁用
reneg-sec 0
</code></pre>
<p>可用的服务端配置</p>
<pre><code class="language-conf">local 10.0.0.4
port 1194
proto udp
dev tun
ca ca.crt
cert server.crt
key server.key
dh dh2048.pem
# 分配给客户端的地址池，与dhcp类似
server 192.168.10255.255.255.0
ifconfig-pool-persist ipp.txt

push &quot;route 192.168.10255.255.255.0&quot;
client-to-client
duplicate-cn
keepalive 10 120
comp-lzo
max-clients 100
persist-key
persist-tun
log-append  /var/log/openvpn.log
verb 3
mute 20
explicit-exit-notify 1
reneg-sec 360
tls-auth ta.key 0
</code></pre>
<h2 id="相关证书文件说明">相关证书文件说明</h2>
<table>
<thead>
<tr>
<th>文件名</th>
<th>需要使用者</th>
<th>目的</th>
<th>默认是否加密</th>
</tr>
</thead>
<tbody>
<tr>
<td>ca.crt</td>
<td>server + all clients</td>
<td>Root CA certificate</td>
<td>NO</td>
</tr>
<tr>
<td>ca.key</td>
<td>key signing machine only</td>
<td>Root CA key</td>
<td>YES</td>
</tr>
<tr>
<td>dh{n}.pem</td>
<td>server only</td>
<td>Diffie Hellman parameters</td>
<td>NO</td>
</tr>
<tr>
<td>server.crt</td>
<td>server only</td>
<td>Server Certificate</td>
<td>NO</td>
</tr>
<tr>
<td>server.key</td>
<td>server only</td>
<td>Server Key</td>
<td>YES</td>
</tr>
<tr>
<td>client1.crt</td>
<td>client1 only</td>
<td>Client1 Certificate</td>
<td>NO</td>
</tr>
<tr>
<td>client1.key</td>
<td>client1 only</td>
<td>Client1 Key</td>
<td>YES</td>
</tr>
</tbody>
</table>
<p>reference <a href="https://openvpn.net/community-resources/how-to/#openvpn-quickstart" target="_blank"
   rel="noopener nofollow noreferrer" >explanation of the relevant files</a></p>
<h2 id="openvpn客户端配置使用">OpenVPN客户端配置使用</h2>
<h3 id="下载并安装openvpn客户端">下载并安装openvpn客户端</h3>
<p>在windows上需要下载与Server版本一致的带有GUI的Windows端。下载地址：<a href="https://openvpn.net/community-downloads/" target="_blank"
   rel="noopener nofollow noreferrer" >community</a></p>
<h3 id="配置并下载客户端证书">配置并下载客户端证书</h3>
<p><strong>生成客户端证书和key文件</strong></p>
<p>生成client证书和key文件。若建立多个客户证书，则重复如下步骤即可.只需修改Common Name项oldboy的名称。</p>
<p>在OpenVPN中，这种配置方法是每一个登陆的VPN客户端需要有一个证书，每个证书在同一时刻只能供一个客户端连接（如果有两个机器安装相同证书，同时拨服务器，都能拨上，但是只有第一个拨上的才能连通网络）。所以，如果有多个人，每个人需要建立一份证书。</p>
<p>将ca.crt、redis.crt、redis.key复制到OpenVPN\config。（不同用户使用不同的证书，每个证书包括.crt和.key两个文件。如test.crt和test.key)</p>
<p>在 <code>sample-config-files/client.conf</code>的基础上建立客户端配置文件，改名为client.oven，即先在服务器上建立配置文件，然后再下载改名到客户机上。</p>
<pre><code class="language-bash">client
dev tun
proto udp
remote 10.1194
nobind
resolv-retry infinite
persist-key
persist-tun
mute-replay-warnings
cipher AES-256-CBC
comp-lzo
verb 3
ca ca.crt
cert test.crt
key test.key
tls-auth ta.key 1
</code></pre>
<h3 id="客户端远程连接openvpn服务">客户端远程连接OpenVPN服务</h3>
<p>当配置文件的扩展名为<code>.ovpn</code>，配置文件存放至客户端配置的目录中。ca、证书 与配置文件放置同一个文件夹内。每一组为一个用户。</p>
<p>连接成功后如图所示：</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221024215346067.png" alt="image-20221024215346067" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>ch3 OpenVPN的高可用配置</title>
      <link>https://www.oomkill.com/2019/11/ch3-high-availability/</link>
      <pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2019/11/ch3-high-availability/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="方案1在vpn-客户端使用多个配置文件实现由用户选择拨号类">方案1：在Vpn 客户端使用多个配置文件实现（由用户选择拨号）类</h2>
<p>方案1：需求分析与操作过程讲解。</p>
<p>基本说明：</p>
<p>生产场景中比较规范的做法是让所有的VPN SERVER尽可能共享同一套 server，ca证书或者连接同一个认证系统（即使是跨机房）。这样只需要一份客户端认证和文件和多份指定不同vpn client的配置文件即可实现vpn的负载均衡了。</p>
<p>总结结论：</p>
<p>1）该负载均衡方案操作简单，不引入多余服务（后面的方案都会引入服务），因此不会增加多余的单点故障，当用户连接的vpn不能使用时，用户就可以人工选择拨号其他的VPN服务器。</p>
<p>2）如果使用者为公司内部工作人员，此种方案是值得推荐的。老男孩老师推荐。</p>
<p>3）从广义上讲这是在用户端实现的负载均衡方案，类似早期的华军下载站一样，由用户选择下载站点，而不是用什么智能DNS等复杂的业务模式。</p>
<p>缺点：当一个vpnserver不能使用时，不能自动连上别的vpn server。</p>
<h2 id="方案2通过在客户端配置文件实现负载均衡客户端文件里随机连接服务器">方案2：通过在客户端配置文件实现负载均衡（客户端文件里随机连接服务器）</h2>
<p>提示：同方案1，所有VPN SERVER 需要共享同一套 server，ca证书。openvpn 服务器一套keys的多份拷贝方式式。</p>
<pre><code>remote 10.0.0.28 52115
remote 10.0.0.552115
remote-random
resolv-retry 20
</code></pre>
<p><a href="https://openvpn.net/community-resources/how-to/#implementing-a-load-balancing-failover-configuration" target="_blank"
   rel="noopener nofollow noreferrer" >implementing-a-load-balancing-failover-configuration</a></p>
<p>总结结论：</p>
<p>1）该负载均衡方案操作简单，不引入多余服务（后面的方案都会引入服务），因此不会增加多余的单点故障，，当用户连接的vpn不能使用时，电脑可以重新再次自动拨号连接VPN服务器。</p>
<p>2）如果使用者为公司内部工作人员，此种方案是值得推荐的。-老男孩老师推荐。如果是使用者为外部人员，那么这个方案依然是可以的。</p>
<p>3）本方案是比较标准的在VPN用户端，由客户端配置参数实现的负载均衡的方案，是非常值得推荐的方案。</p>
<p>4）和方案1对比，方案2的配置更简单，仅需一个配置文件多个remote参数，拨号时客户端会随机自动选择拨号，方案1则需要手动选择不同的配置文件拨号。当正在连接的VPN服务端右机时，那么此时方案2不需要人工干预，客户端的VPN会自动判断并且自动重新连接其他的可用vpn服务器。.</p>
<h2 id="方案3通过域名加dns轮询的方式实现负载均衡由dns自动分配vpn">方案3：通过域名加DNS轮询的方式实现负载均衡（由DNS自动分配vpn）</h2>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/1539219005583-ovpn-load-balance.png" alt="SOLVE)OVPN Load Balance Review | Netgate Forum" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<p>总结结论：</p>
<p>1）通过dns轮询实现VPN负载均衡方案操作比较复杂，引入了DNS服务，因此增加了单点故障及维护成本，当用户连接的vpn不能使用时，用户也需要重新人工再次拨号。</p>
<p>2）如果使用者为公司内部工作人员，此种方案是不推荐的。如果是外部的用户可以考虑用这种方式，但是复杂度比方案1大了很多（如果存在DNS服务器加配置还可以）。</p>
<p>3）当机房多，配置文件多时，无需用户选择服务器，只需拨号即可。如果多个VPN在一个机房还好一些，如果多个VPN服务器不在一个机房，还需要通过IPSEC进行连接。
总之，此法很麻烦，中小型公司老男孩老师极不推荐。</p>
<p>4）DNS轮询会遭遇到客户端DNS缓存问题，从而导致服务切换失效。。</p>
<p><a href="https://openvpn.net/access-server-manual/typical-network-configurations/#one-network-interface-on-a-public-network" target="_blank"
   rel="noopener nofollow noreferrer" >one-network-interface-on-a-public-network</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>ch4 OpenVPN的统一身份认证方案及实现方法</title>
      <link>https://www.oomkill.com/2019/11/ch4-authentication/</link>
      <pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2019/11/ch4-authentication/</guid>
      <description></description>
      <content:encoded><![CDATA[<p>OpenVPN 2.0与更高版本允许OpenVPN服务器从客户端安全地获取用户名和密码，并将该信息用作认证基础。</p>
<h3 id="方法1通过本地证书密钥认证">方法1：通过本地证书密钥认证。</h3>
<p>默认不配置，openvpn即使用证书进行身份认证。</p>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20221024220430016.png" alt="image-20221024220430016" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<p>（1）编辑主服务器配置文件/etc/openldap/slapd.conf，取消如下行的注释：</p>
<h3 id="方法2本地文件认证">方法2：本地文件认证</h3>
<p>在使用身份验证时，需要将 <code>auth-user-pass</code> 指令添加到客户端配置文件中，设置后OpenVPN客户端向用户索要用户名/密码，并将其通过安全的TLS通道传递给服务器进行验证。</p>
<p>服务端配置文件需要增加配置指令 <code>auth-user-pass-verify auth-pam.pl via-file</code> 使用脚本插件。<code>auth-pam.pl</code> 在源码包 <code>sample/sample-script</code> 路径下。</p>
<pre><code>plugin /usr/share/openvpn/plugin/lib/openvpn-auth-pam.so login
</code></pre>
<p>生产环境下官方推荐使用 <code>openvpn-auth-pam</code> 插件进行验证，相比于 <strong>auth-pam.pl</strong>，<code>openvpn-auth-pam </code> 插件具有多个优点：</p>
<ul>
<li><code>openvpn-auth-pam</code> 使用拆分权限执行模型来提高安全性。</li>
<li>C编译的插件比脚本运行速度更快。</li>
<li>OpenVPN可以通过虚拟内存（而不是通过文件或环境）将用户名/密码传递给插件，这对于服务器上的本地安全性更好。</li>
</ul>
<h4 id="获取openvpn-auth-pam插件">获取<strong>openvpn-auth-pam</strong>插件</h4>
<p><strong>openvpn-auth-pam</strong>插件在openvpn代码目录<code>src/plugins/auth-pam</code> 下，运行 <code>make &amp;&amp; make install</code> 进行安装，会自动复制到openvpn安装好的 <code>lib/openvpn/plugins</code> 目录下。</p>
<h4 id="开启密码认证">开启密码认证</h4>
<p>默认情况下， 在服务器上使用 <code>auth-user-pass-verify</code> 或用户名/密码 <strong>插件</strong> 将启用<strong>双重身份验证</strong>，要求客户端证书和用户名/密码身份验证都必须成功，才能对客户端进行身份验证。可以选择关闭客户端证书认证。</p>
<pre><code>client-cert-not-required
username-as-common-name # 用户名作为通用名称
</code></pre>
<p>开启后需要在客户端注释 <strong>cert</strong> 和 <strong>key</strong>的配置</p>
<blockquote>
<p>Reference</p>
<p><a href="https://openvpn.net/community-resources/how-to/#using-alternative-authentication-methods" target="_blank"
   rel="noopener nofollow noreferrer" >authentication methods</a></p>
</blockquote>
<h3 id="方法3数据库认证">方法3：数据库认证</h3>
<p>法2：利用的脚本程序（shell，php等）本地文件去读数据库。</p>
<p>法1：用pam_mysql</p>
<h3 id="方法4ldap统一用户认证">方法:4：ldap统一用户认证</h3>
<ul>
<li>openvpn-auth-ldap</li>
<li>利用第一个文件认证的思路，去LDAP查询，还可以和本地文件比较。如</li>
</ul>
<p><img loading="lazy" src="https://cdn.jsdelivr.net/gh/CylonChau/imgbed//img/%E7%BB%98%E5%9B%BE1.png" alt="绘图1" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<center>ldap认证原理图</center>
<h4 id="配置openvpn服务端通过ldap进行身份验证">配置openvpn服务端通过ldap进行身份验证</h4>
<p>配置OpenVPN基 LDAP的身份验证，需要安装用于LDAP身份验证的OpenVPN插件。<code>openvpn-auth-ldap</code>，它通过LDAP为OpenVPN实现身份认证。</p>
<p>CentOS中 <code>openvpn-auth-ldap</code> 插件在EPEL中 ubuntu与Centos都可以通过对应的包管理工具进行插件安装。</p>
<p>安装完成后配置 OpenVPN LDAP身份验证 <code>examples/auth-ldap.conf</code></p>
<pre><code>&lt;LDAP&gt;
	URL		ldaps://ip
	BindDN	dc=kifarunix-demo,dc=com
	Password	P@ssW0rd
	Timeout	  15
	TLSEnable	yes|no
	FollowReferrals no
&lt;/LDAP&gt;
&lt;Authorization&gt;
# 搜索的域
	BaseDN		&quot;ou=people,dc=ldapmaster,dc=kifarunix-demo,dc=com&quot;
# 搜索的条件，这里使用的UID，如其他名称为用户名可以选择其他
	SearchFilter	&quot;(uid=%u)&quot;
	RequireGroup	false
&lt;/Authorization&gt;
</code></pre>
<p>还可以基于组管理</p>
<pre><code>&lt;LDAP&gt;
	URL		ldaps://ip
	BindDN	dc=kifarunix-demo,dc=com
	Password	P@ssW0rd
	Timeout	  15
	TLSEnable	yes|no
	FollowReferrals no
&lt;/LDAP&gt;
&lt;Authorization&gt;
	BaseDN		&quot;ou=people,dc=ldapmaster,dc=kifarunix-demo,dc=com&quot;
	SearchFilter	&quot;(uid=%u)&quot;
	RequireGroup	true # 这里设置为true
	&lt;Group&gt;
		BaseDN		&quot;cn=admin,dc=kifarunix-demo,dc=com&quot;
		SearchFilter	&quot;memberOf=ou=people,dc=seal,dc=com&quot;
		MemberAttribute	uniqueMember # 需要ldap安装memberof，这时memeberof组的属性
	&lt;/Group&gt;
&lt;/Authorization&gt;
</code></pre>
<p>修改openvpn配置</p>
<pre><code>plugin /usr/lib64/openvpn/plugin/lib/openvpn-auth-ldap.so &quot;/etc/openvpn/auth/ldap.conf&quot;
verify-client-cert none
</code></pre>
<p>完整的服务端配置</p>
<pre><code>local 10.0.0.4
port 1194
proto udp
dev tun
ca ca.crt
cert server.crt
key server.key
dh dh2048.pem
tls-auth ta.key 0
server 192.168.100.128 255.255.255.128
ifconfig-pool-persist ipp.txt
push &quot;route 192.168.100.0 255.255.255.0&quot;
client-to-client
duplicate-cn
keepalive 10 120
max-clients 100
persist-key
persist-tun
log-append  /var/log/openvpn.log
verb 3
compress lz4-v2
mute 20
explicit-exit-notify 1
reneg-sec 360
plugin /usr/lib64/openvpn/plugin/lib/openvpn-auth-ldap.so &quot;/etc/openvpn/auth/ldap.conf&quot;
verify-client-cert none
</code></pre>
<h4 id="启动客户端配置">启动客户端配置</h4>
<pre><code>auth-user-pass
remote-cert-tls server
</code></pre>
<p>完整的客户端配置</p>
<pre><code>client
dev tun
proto udp
remote 10.0.0.4 1194
nobind
resolv-retry infinite
persist-key
persist-tun
mute-replay-warnings
cipher AES-256-CBC
#comp-lzo
verb 3
ca ca.crt
tls-auth ta.key 1
compress lz4-v2
#cert client.crt
#key client.key 
auth-user-pass
remote-cert-tls server
</code></pre>
<p>服务端报错 <code>TLS Error: reading acknowledgement record from packet</code></p>
<pre><code>TLS: Initial packet from [AF_INET]10.0.0.1:56531, sid=50a1c0bb 07a548a5
TLS Error: reading acknowledgement record from packet
</code></pre>
<p>原因，客户端开启了安全配置<code>tls-auth ta.key 1</code> 而 服务端没有对应配置</p>
<blockquote>
<p>Reference</p>
<p><a href="https://www.digitalocean.com/community/questions/help-with-the-following-error-tls-error-cannot-locate-hmac-in-incoming-packet-from-af_inet" target="_blank"
   rel="noopener nofollow noreferrer" >auth error</a></p>
<p><a href="https://kifarunix.com/configure-openvpn-ldap-based-authentication/" target="_blank"
   rel="noopener nofollow noreferrer" >how to configure</a></p>
<p><a href="https://openvpn.net/community-resources/how-to/#examples" target="_blank"
   rel="noopener nofollow noreferrer" >openldap howto</a></p>
</blockquote>
<h3 id="方法5配置配置radius认证">方法5：配置配置RADIUS认证。</h3>
<p>RADIUS (<em>Remote Authentication Dial In User Service</em>)，远程用户拨号认证系统由RFC2865，RFC2866定义，是目前应用最广泛的AAA协议。可实现验证、授权、记账等服务的协议。</p>
<h3 id="方法6结合google-authtication等设备进行双重认证">方法6：结合google authtication等设备进行双重认证</h3>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
