<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Elasticsearch on Cylon&#39;s Collection</title>
    <link>https://www.oomkill.com/tags/elasticsearch/</link>
    <description>Recent content in Elasticsearch on Cylon&#39;s Collection</description>
    <generator>Hugo -- 0.125.7</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 22 Mar 2023 23:00:36 +0800</lastBuildDate>
    <atom:link href="https://www.oomkill.com/tags/elasticsearch/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>elasticsearch mapping</title>
      <link>https://www.oomkill.com/2021/11/elasticsearch-mapping/</link>
      <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://www.oomkill.com/2021/11/elasticsearch-mapping/</guid>
      <description>索引管理 创建索引 直接创建索引 PUT newindex1，创建索引可以通过 number_of_shares 和 number_of_replicas 数量来修饰分片和副本的数量。
text 1 2 3 4 5 6 7 8 9 PUT newindex { &amp;#34;settings&amp;#34;: { &amp;#34;index&amp;#34; : { &amp;#34;number_of_shares&amp;#34; : 2, &amp;#34;number_of_replicas&amp;#34;: 1 } } } number_of_shares 分片数在创建索引后不能修改
number_of_replicas 副本数可以随时完成修改
删除索引 DEL index_name
打开/关闭索引 POST {index_name}/_close
POST {index_name}/_open
关闭的索引无法进行【增删改查】操作
text 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { &amp;#34;error&amp;#34; : { &amp;#34;root_cause&amp;#34; : [ { &amp;#34;type&amp;#34; : &amp;#34;index_closed_exception&amp;#34;, &amp;#34;reason&amp;#34; : &amp;#34;closed&amp;#34;, &amp;#34;index_uuid&amp;#34; : &amp;#34;3eCslZZ3Q9amlUyDtqTXWA&amp;#34;, &amp;#34;index&amp;#34; : &amp;#34;newindex&amp;#34; } ], &amp;#34;type&amp;#34; : &amp;#34;index_closed_exception&amp;#34;, &amp;#34;reason&amp;#34; : &amp;#34;closed&amp;#34;, &amp;#34;index_uuid&amp;#34; : &amp;#34;3eCslZZ3Q9amlUyDtqTXWA&amp;#34;, &amp;#34;index&amp;#34; : &amp;#34;newindex&amp;#34; }, &amp;#34;status&amp;#34; : 400 } 索引的映射 mapping mapping是定义文档及包含字段的存储与索引方式。可以理解为是elasticsearch的表结构，定义mapping，即在创建index时，自行判断每个字段的类型，而不是有ES自动自动判断每个纬度的类型。这种更贴合业务场景，如分词、存储。</description>
    </item>
    <item>
      <title>elasticsearch安装</title>
      <link>https://www.oomkill.com/2018/11/es/</link>
      <pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate>
      <guid>https://www.oomkill.com/2018/11/es/</guid>
      <description>1 elasticsearch介绍 ES是一个基于Lucene实现的开源、分布式、基于Restful风格的全文本搜索引擎；此外，它还是一个分布式实时文档存储，其中每个文档的每个field均是被索引的数据，且可被搜索：也是一个带实时分析功能的分布式搜索引擎，能够扩展至数以百计的节点实时处理PB级的数据。
1.1 elasticsearch基本组件 索引（index）：文档容器，换句话说，索引是具有类似属性的文档的集合。类似于表。索引名必须使用小写字母：
类型（type）：类型是索引内部的逻辑分区，其意义完全取决于用户需求。一个索引内部可定义一个或多个类型。一般来说，类型就是拥有相同的域的文档的预定义。
文档（document）：文档是Lucene索引和搜索的原子单位，它包含了一个或多个域。是域的容器：基于J50N格式表示。每个域的组成部分：一个名字，一个或多个值；拥有多个值的域，通常称为多值域：
映射（mapping）：原始内容存储为文档之前需要事先进行分析，例如切词、过滤掉某些词等：映射用于定义此分析机制该如何实现；除此之外，ES还为映射提供了诸如将域中的内容排序等功能。
1.2 es的集群组件 cluster: es的集群标识为集群名称：默认“elasticsearch”。节点就是靠此名字来决定加入到哪个集群中。一个节点只能属性于一个集群。
Node：运行了单个es实例的主机即为节点。用于存储数据、参与集群索引及搜索操作。节点的标识靠节点名。
Shard：将索引切割成为的物理存储组件：但每一个shard都是一个独立且完整的索引；创建索引时，ES默认将其分割为5个shard，用户也可以按需自定义，创建完成之后不可修改。
shard有两种类型：primary shard和replica。replica用于数据冗余及查询时的负载均衡。每个主shard的副本数量可自定义，且可动态修改。
1.3 es的工作过程 es节点启动时默认通过多播方式或单播方式在TCP协议的9300端口查找同一集群中的其他节点，并与之建立通讯。判断是否为同一集群的标准为集群名称，集群中的所有节点会选举出一个主节点负责管理整个集群状态，以及在集群范围内决定各shared的分布方式。站在用户使用中角度而言，每个节点都可以接收并相应各类请求，无需区分哪个为主节点。
当集群中某一节点为down状态时，主节点会读取集群状态信息，并启动修复过程。此过程中主节点会检查所有可用shared的主shared，并确定主shared是否存在。各种shared及对应副本shared是否对数。此时集群状态会转换为yellow。
es集群有三种状态：green、red（不可用）、yellow（修复状态）。
当某状态为down的节点上存在主shared，此时需要从各副本shared中找一个提升为主shared。在yellow状态时，各副本shared均处于未分配模式。此时各个副本都不可用，只能使用主shared。集群虽可基于各组shared进行查询，但此时吞吐能力有限。yellows属于残破不全状态。
接下来的过程中，主节点将会查找所有的冗余shard，并将其配置为主shared。如果某shared的副本数量少于配置参数的数量，会自动启动复制过程，并为其建立副本shared。直至所有条件都满足从yellow转换至green。
es工作过程中主节点会周期性检查各节点是否处于可用状态，任意节点不可用时，修复模式都会启动，此时集群将会进入重新均衡过程。
2 安装elasticsearch 下载地址：http://www.elastic.co/cn/downloads/elasticsearch
官方文档中写明对es每个版本对jdk的要求。
https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html
2.1 常用es配置文件说明 修改配置文件：/etc/elasticsearch/elasticsearch.yml
sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 cluster.</description>
    </item>
  </channel>
</rss>
