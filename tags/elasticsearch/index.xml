<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>elasticsearch on Cylon&#39;s Collection</title>
    <link>https://www.oomkill.com/tags/elasticsearch/</link>
    <description>Recent content in elasticsearch on Cylon&#39;s Collection</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 02 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.oomkill.com/tags/elasticsearch/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>elasticsearch mapping</title>
      <link>https://www.oomkill.com/2021/11/elasticsearch-mapping/</link>
      <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2021/11/elasticsearch-mapping/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="索引管理">索引管理</h2>
<h3 id="创建索引">创建索引</h3>
<p>直接创建索引 <code>PUT newindex1</code>，创建索引可以通过 <code>number_of_shares</code> 和  <code>number_of_replicas</code> 数量来修饰分片和副本的数量。</p>
<pre><code>PUT newindex
{
  &quot;settings&quot;: {
    &quot;index&quot; : {
      &quot;number_of_shares&quot; : 2,
      &quot;number_of_replicas&quot;: 1
    }
  }
}
</code></pre>
<p><code>number_of_shares</code> 分片数在创建索引后不能修改</p>
<p><code>number_of_replicas</code>  副本数可以随时完成修改</p>
<h3 id="删除索引">删除索引</h3>
<p><code>DEL index_name</code></p>
<h3 id="打开关闭索引">打开/关闭索引</h3>
<p><code>POST {index_name}/_close</code></p>
<p><code>POST {index_name}/_open</code></p>
<p>关闭的索引无法进行【增删改查】操作</p>
<pre><code>{
  &quot;error&quot; : {
    &quot;root_cause&quot; : [
      {
        &quot;type&quot; : &quot;index_closed_exception&quot;,
        &quot;reason&quot; : &quot;closed&quot;,
        &quot;index_uuid&quot; : &quot;3eCslZZ3Q9amlUyDtqTXWA&quot;,
        &quot;index&quot; : &quot;newindex&quot;
      }
    ],
    &quot;type&quot; : &quot;index_closed_exception&quot;,
    &quot;reason&quot; : &quot;closed&quot;,
    &quot;index_uuid&quot; : &quot;3eCslZZ3Q9amlUyDtqTXWA&quot;,
    &quot;index&quot; : &quot;newindex&quot;
  },
  &quot;status&quot; : 400
}
</code></pre>
<h3 id="索引的映射-mapping">索引的映射 mapping</h3>
<p>mapping是定义文档及包含字段的存储与索引方式。可以理解为是elasticsearch的表结构，定义mapping，即在创建index时，自行判断每个字段的类型，而不是有ES自动自动判断每个纬度的类型。这种更贴合业务场景，如分词、存储。</p>
<p>每个索引仅有一个映射类型（elasticsearch6.x+，之前版本一个索引下有多个类型），它决定了文档将如何被索引。而映射类型分为两部分 <code>meta-fields</code> 与 <code>field of properties</code></p>
<p><code>meta-fields</code> ：为文档的源数据，如 <code>_index</code> （索引的名称）、<code>_type</code> （文档的类型，7.0+弃用）、<code>_id</code> （索引的ID）和 <code>_source</code>（用于关联文档源数据）字段</p>
<p><code>field of properties</code>：字段属性，包含文档的字段或属性列表。</p>
<h4 id="字段的数据类型">字段的数据类型</h4>
<h5 id="常见类型">常见类型</h5>
<ul>
<li><code>binary</code>：二进制或Base64字符串。</li>
<li><code>boolean</code>: 布尔值<code>true</code>和<code>false</code>。</li>
<li><code>keywords</code>：<code>keyword</code>, <code>constant_keyword</code>, 和 <code>wildcard</code>.</li>
<li><code>Numbers</code>：数值类型，例如<code>long</code>和<code>double</code></li>
<li><code>dates</code>：日期类型，<code>date</code> 和 <code>date_nanos</code>。</li>
<li><code>alias</code>： 为以有字段定义别名。</li>
</ul>
<h5 id="对象嵌套类型">对象嵌套类型</h5>
<ul>
<li><code>object</code> ：JSON对象。</li>
<li><code>flattened</code>：整个JSON对象作为单个字段值。</li>
<li><code>nested</code>：嵌套，与子字段之间保留关系的json对象。</li>
<li><code>join</code>：为同一索引中的文档定义父/子关系。</li>
</ul>
<h5 id="结构化类型">结构化类型</h5>
<ul>
<li><code>range</code>：，<code>long_range</code>，<code>double_range</code>， <code>date_range</code>，和<code>ip_range</code>。</li>
<li><code>ip</code>：IPv4和IPv6地址。</li>
<li><code>version</code> ：软件版本号。支持 <a href="https://semver.org/" target="_blank"
   rel="noopener nofollow noreferrer" >语义化版本号</a> 优先规则。</li>
<li><code>murmur3</code>：计算并存储值的散列。</li>
</ul>
<h5 id="汇总数据类型">汇总数据类型</h5>
<ul>
<li><code>aggregate_metric_double</code>：预汇总的指标值。</li>
<li><code>histogram</code>：以直方图形式预汇总的数值。</li>
</ul>
<h5 id="文字搜寻类型">文字搜寻类型</h5>
<ul>
<li><code>text</code>：分析的非结构化文本。</li>
<li><code>annotated-text</code>：包含特殊标记的文本。用于标识命名实体。</li>
<li><code>completion</code>：用于自动补全建议。</li>
<li><code>search_as_you_type</code> <code>text</code>类似类型，用于按需输入完成。</li>
<li><code>token_count</code>：计数令牌。</li>
</ul>
<p>等等 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html#object-types" target="_blank"
   rel="noopener nofollow noreferrer" >reference</a>。</p>
<h4 id="常用字段数据类型参数">常用字段数据类型参数</h4>
<p>更多参数可以参考官方文档：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html" target="_blank"
   rel="noopener nofollow noreferrer" >mapping-params</a></p>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>analyzer</td>
<td>仅<code>text</code>字段支持 <code>analyzer</code> 映射参数。</td>
</tr>
<tr>
<td>index</td>
<td>选项控制是否对字段值建立索引。默认为<code>true</code>。未索引的字段不可查询。</td>
</tr>
<tr>
<td>index_prefixes</td>
<td>启用术语前缀的索引，以加快前缀搜索的速度</td>
</tr>
<tr>
<td>ignore_above</td>
<td>长度大于 ignore_above设置的字符串将不会被索引或存储</td>
</tr>
</tbody>
</table>
<h4 id="映射的元字段">映射的元字段</h4>
<p>文档的元字段是保证系统正常运转的内置字段，如 <code>_index</code> 索引的字段  <code>_type</code>映射类型（7.0后取消），<code>_id_</code> 文档主键。</p>
<h4 id="动态映射-dynamic">动态映射 dynamic</h4>
<p>在关系型数据库中，需要事先创建好数据库，并在库中插入表。而ES中需要事先创建好索引结构（Mapping），在插入文档到索引中，系统会根据文档内容进行索引的动态映射。自动检测添加新类型和字段，被成为动态映射。</p>
<p>禁用动态映射：<code>{index_name}/_mapping </code>  <code>dynamic</code> 为false</p>
<pre><code>POST student/_mapping
{
  &quot;dynamic&quot;:&quot;false&quot;
}

GET student/_mappings
</code></pre>
<h4 id="显式映射">显式映射</h4>
<p>实现准备好映射关系，包含文档各字段类型，关系等，这种称之为显式映射 <code>Explicit mapping</code></p>
<h4 id="动态模板">动态模板</h4>
<p>动态映射会自动推断数据类型，但这种并不完全符合所有的业务需求，而动态模板可以再动态映射之外更好的控制ES如何映射的数据类型。</p>
<h5 id="模板的匹配">模板的匹配</h5>
<ul>
<li><code>match_mapping_type</code> 对 Elasticsearch 检测到的数据类型进行操作</li>
<li><code>match</code>   <code>unmatch </code>  ： <code>match</code>使用pattern匹配字段名称，<code>unmatch</code> 使用正则排除字段</li>
<li><code>path_match</code>   <code>path_unmatch</code> 使用与match一样，这里为全名称，path指的是多层json的路径。</li>
</ul>
<p>如，需要将所有数字字段映射为integer而不是long，将所有字符串都映射为text与keyword:</p>
<pre><code>{
  &quot;mappings&quot;: {
    &quot;dynamic_templates&quot;: [
      {
        &quot;integers&quot;: {
          &quot;match_mapping_type&quot;: &quot;long&quot;,
          &quot;mapping&quot;: {
            &quot;type&quot;: &quot;integer&quot;
          }
        }
      },
      {
        &quot;strings&quot;: {
          &quot;match_mapping_type&quot;: &quot;string&quot;,
          &quot;mapping&quot;: {
            &quot;type&quot;: &quot;text&quot;,
            &quot;fields&quot;: {
              &quot;raw&quot;: {
                &quot;type&quot;:  &quot;keyword&quot;,
                &quot;ignore_above&quot;: 256
              }
            }
          }
        }
      }
    ]
  }
}
</code></pre>
<p>可以使用正则表达式来匹配字段</p>
<pre><code>PUT student12345
{
  &quot;mappings&quot;: {
    &quot;dynamic_templates&quot;: [
      {
        &quot;longs_as_strings&quot;: {
          &quot;match_mapping_type&quot;: &quot;string&quot;,  // 捕获的类型
          &quot;match&quot;:   &quot;pass*&quot;, // 将以pass开头的string类型的映射为integer
          &quot;unmatch&quot;: &quot;user*&quot;, // 忽略以user开头的
          &quot;mapping&quot;: {
            &quot;type&quot;: &quot;integer&quot;  // 需要映射的类型
          }
        }
      }
    ]
  }
}

PUT student12345/_doc/1
{
  &quot;username&quot;: &quot;zhangsan&quot;, 
  &quot;password&quot;: &quot;123456&quot; 
}
</code></pre>
<p>查看映射后的类型</p>
<pre><code>{
  &quot;student12345&quot; : {
    &quot;mappings&quot; : {
      &quot;dynamic_templates&quot; : [
        {
          &quot;longs_as_strings&quot; : {
            &quot;match&quot; : &quot;pass*&quot;,
            &quot;unmatch&quot; : &quot;user*&quot;,
            &quot;match_mapping_type&quot; : &quot;string&quot;,
            &quot;mapping&quot; : {
              &quot;type&quot; : &quot;integer&quot;
            }
          }
        }
      ],
      &quot;properties&quot; : {
        &quot;password&quot; : {
          &quot;type&quot; : &quot;integer&quot;
        },
        &quot;username&quot; : {
          &quot;type&quot; : &quot;text&quot;,
          &quot;fields&quot; : {
            &quot;keyword&quot; : {
              &quot;type&quot; : &quot;keyword&quot;,
              &quot;ignore_above&quot; : 256
            }
          }
        }
      }
    }
  }
}
</code></pre>
<p><code>path_match</code>   <code>path_unmatch</code></p>
<pre><code class="language-json">PUT test1
{
  &quot;mappings&quot;: {
    &quot;dynamic_templates&quot;: [
      {
        &quot;full_name&quot;: { 
          &quot;path_match&quot;:   &quot;document.*&quot;, // 将name下的所有对象复制到外部顶级字段
          &quot;path_unmatch&quot;: &quot;*.middlename&quot;, // 这个字段除外
          &quot;mapping&quot;: {
            &quot;type&quot;:       &quot;text&quot;,
            &quot;copy_to&quot;:    &quot;full_name&quot;
          }
        }
      }
    ]
  }
}

PUT test1/_doc/1
{
  &quot;document&quot;: {
    &quot;firstname&quot;:  &quot;John&quot;,
    &quot;middlename&quot;: &quot;Winston&quot;,
    &quot;lastname&quot;:   &quot;Lennon&quot;
  }
}
</code></pre>
<p>当插入下列时，不成功，这里映射类型为text，与address中的对象类型不匹配所以不成功</p>
<pre><code>PUT test1/_doc/1
{
  &quot;document&quot;: {
    &quot;firstname&quot;:  &quot;John&quot;,
    &quot;middlename&quot;: &quot;Winston&quot;,
    &quot;address&quot;: {
    	&quot;city&quot;: &quot;beijing&quot;,
    	&quot;province&quot;: &quot;beijing&quot;,
 			&quot;District&quot;: &quot;haidian&quot;
    }
  }
}
</code></pre>
<h5 id="模板变量">模板变量</h5>
<p>{name} {dynamic_type} 占位符，在映射中会替换为字段名和检测到的动态类型</p>
<pre><code class="language-json">PUT student1
{
  &quot;mappings&quot;: {
    &quot;dynamic_templates&quot;: [
      {
        &quot;named_analyzers&quot;: {
          &quot;match_mapping_type&quot;: &quot;string&quot;,
          &quot;match&quot;: &quot;*&quot;,
          &quot;mapping&quot;: {
            &quot;type&quot;: &quot;text&quot;,
            &quot;analyzer&quot;: &quot;{name}&quot;
          }
        }
      },
      {
        &quot;no_doc_values&quot;: {
          &quot;match_mapping_type&quot;:&quot;*&quot;,
          &quot;mapping&quot;: {
            &quot;type&quot;: &quot;{dynamic_type}&quot;,
            &quot;doc_values&quot;: false
          }
        }
      }
    ]
  }
}

PUT student1/_doc/1
{
  &quot;name&quot;: &quot;alex chow&quot;, 
  &quot;age&quot;: 30
}
  PUT student1/_doc/1
  {
    &quot;english&quot;: &quot;Some English text&quot;, 
    &quot;count&quot;:   5 
  }
</code></pre>
<p><strong>reference</strong>  <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/dynamic-templates.html#template-variables" target="_blank"
   rel="noopener nofollow noreferrer" >template-variables</a></p>
<h4 id="索引的类型">索引的类型</h4>
<p>Elasticsearch7.x中，不在需要document的 type</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/removal-of-types.html#_schedule_for_removal_of_mapping_types" target="_blank"
   rel="noopener nofollow noreferrer" >schedule_for_removal_of_mapping_types</a></p>
<p>ElasticSearch在7.x版本之前 <code>index</code> 类似于数据库中的 <code>database</code>，而 <code>type</code> 等同于数据库中的 <code>table</code></p>
<p>如：6.x API</p>
<pre><code>PUT student # index（库）
{
  &quot;mappings&quot;: {
    &quot;_doc&quot;: { # type （表）
      &quot;properties&quot;: {
        &quot;type&quot;: { # filed (字段)
          &quot;type&quot;: &quot;keyword&quot;
        },
        &quot;name&quot;: {
          &quot;type&quot;: &quot;text&quot;
        },
        &quot;user_name&quot;: {
          &quot;type&quot;: &quot;keyword&quot;
        },
        &quot;email&quot;: {
          &quot;type&quot;: &quot;keyword&quot;
        },
        &quot;content&quot;: {
          &quot;type&quot;: &quot;text&quot;
        },
        &quot;tweeted_at&quot;: {
          &quot;type&quot;: &quot;date&quot;
        }
      }
    }
  }
}
</code></pre>
<p>而在7.x之后版本可以不需要</p>
<pre><code>
PUT student
{
  &quot;mappings&quot;: {
      &quot;properties&quot;: {
        &quot;type&quot;: {
          &quot;type&quot;: &quot;keyword&quot;
        },
        &quot;name&quot;: {
          &quot;type&quot;: &quot;text&quot;
        },
        &quot;user_name&quot;: {
          &quot;type&quot;: &quot;keyword&quot;
        },
        &quot;email&quot;: {
          &quot;type&quot;: &quot;keyword&quot;
        },
        &quot;content&quot;: {
          &quot;type&quot;: &quot;text&quot;
        },
        &quot;tweeted_at&quot;: {
          &quot;type&quot;: &quot;date&quot;
        }
      }
    }
}
</code></pre>
<p>在7.0以上版本使用时，必须使用 <code>/{index_name}/_doc/{_id}</code> 进行调用。</p>
<p><code>_doc</code> 为路由永久组成，可以理解为 <code>_doc</code> 替换之前的 <code>type</code></p>
<pre><code>PUT /student/_doc/1
{
  &quot;name&quot;: &quot;zhangsan&quot;,
  &quot;user_name&quot;: &quot;zhangsan&quot;,
  &quot;email&quot;: &quot;1@gmail.com&quot;,
  &quot;content&quot;: &quot;北京分行、天津分行、河北分行、山西分行、辽宁分行&quot;
}

GET /student/_doc/1
</code></pre>
<p>对于7.0之前的<code>/{index}/{type}/{action}</code> ，的操作如<code>_update</code> 、<code>_search</code> 将紧跟<code>{action}</code>后面。</p>
<pre><code>POST /student/_update/1
{
  &quot;doc&quot;: {
    &quot;user_name&quot;: &quot;lisi&quot;
  }
}

GET /student/_search
</code></pre>
]]></content:encoded>
    </item>
    
    <item>
      <title>elasticsearch安装</title>
      <link>https://www.oomkill.com/2018/11/es/</link>
      <pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.oomkill.com/2018/11/es/</guid>
      <description></description>
      <content:encoded><![CDATA[<h2 id="1-elasticsearch介绍">1 elasticsearch介绍</h2>
<p>ES是一个基于Lucene实现的开源、分布式、基于Restful风格的全文本搜索引擎；此外，它还是一个分布式实时文档存储，其中每个文档的每个field均是被索引的数据，且可被搜索：也是一个带实时分析功能的分布式搜索引擎，能够扩展至数以百计的节点实时处理PB级的数据。</p>
<h3 id="11-elasticsearch基本组件">1.1 elasticsearch基本组件</h3>
<p>索引（index）：文档容器，换句话说，索引是具有类似属性的文档的集合。类似于表。索引名必须使用小写字母：</p>
<p>类型（type）：类型是索引内部的逻辑分区，其意义完全取决于用户需求。一个索引内部可定义一个或多个类型。一般来说，类型就是拥有相同的域的文档的预定义。</p>
<p>文档（document）：文档是Lucene索引和搜索的原子单位，它包含了一个或多个域。是域的容器：基于J50N格式表示。每个域的组成部分：一个名字，一个或多个值；拥有多个值的域，通常称为多值域：</p>
<p>映射（mapping）：原始内容存储为文档之前需要事先进行分析，例如切词、过滤掉某些词等：映射用于定义此分析机制该如何实现；除此之外，ES还为映射提供了诸如将域中的内容排序等功能。</p>
<h3 id="12-es的集群组件">1.2 es的集群组件</h3>
<p>cluster: es的集群标识为集群名称：默认“elasticsearch”。节点就是靠此名字来决定加入到哪个集群中。一个节点只能属性于一个集群。</p>
<p>Node：运行了单个es实例的主机即为节点。用于存储数据、参与集群索引及搜索操作。节点的标识靠节点名。</p>
<p>Shard：将索引切割成为的物理存储组件：但每一个shard都是一个独立且完整的索引；创建索引时，ES默认将其分割为5个shard，用户也可以按需自定义，创建完成之后不可修改。</p>
<p>shard有两种类型：primary shard和replica。replica用于数据冗余及查询时的负载均衡。每个主shard的副本数量可自定义，且可动态修改。</p>
<h3 id="13-es的工作过程">1.3 es的工作过程</h3>
<p>es节点启动时默认通过多播方式或单播方式在TCP协议的9300端口查找同一集群中的其他节点，并与之建立通讯。判断是否为同一集群的标准为集群名称，集群中的所有节点会选举出一个主节点负责管理整个集群状态，以及在集群范围内决定各shared的分布方式。站在用户使用中角度而言，每个节点都可以接收并相应各类请求，无需区分哪个为主节点。</p>
<p>当集群中某一节点为down状态时，主节点会读取集群状态信息，并启动修复过程。此过程中主节点会检查所有可用shared的主shared，并确定主shared是否存在。各种shared及对应副本shared是否对数。此时集群状态会转换为yellow。</p>
<p>es集群有三种状态：green、red（不可用）、yellow（修复状态）。</p>
<p>当某状态为down的节点上存在主shared，此时需要从各副本shared中找一个提升为主shared。在yellow状态时，各副本shared均处于未分配模式。此时各个副本都不可用，只能使用主shared。集群虽可基于各组shared进行查询，但此时吞吐能力有限。yellows属于残破不全状态。</p>
<p>接下来的过程中，主节点将会查找所有的冗余shard，并将其配置为主shared。如果某shared的副本数量少于配置参数的数量，会自动启动复制过程，并为其建立副本shared。直至所有条件都满足从yellow转换至green。</p>
<p>es工作过程中主节点会周期性检查各节点是否处于可用状态，任意节点不可用时，修复模式都会启动，此时集群将会进入重新均衡过程。</p>
<h2 id="2-安装elasticsearch">2 安装elasticsearch</h2>
<p>下载地址：http://www.elastic.co/cn/downloads/elasticsearch</p>
<p><img loading="lazy" src="../../images/ES/203" alt="image" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<p><img loading="lazy" src="../../images/ES/206" alt="image" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<p>官方文档中写明对es每个版本对jdk的要求。</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank"
   rel="noopener nofollow noreferrer" >https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html</a></p>
<h3 id="21-常用es配置文件说明">2.1 常用es配置文件说明</h3>
<p>修改配置文件：<font color="#f8070d" size=3><code>/etc/elasticsearch/elasticsearch.yml</code></font></p>
<pre><code class="language-sh">cluster.name: test1 #←集群名称，同一网段下可以有多个集群，通过名称区分不同的集群。

node.name: node-1  #←节点名

node.master: true #←是否有资格被选举成为node
node.data: true

# es5中已废弃
index.number_of_shards: 5  #←默认索引分片个数，默认为5片。
index.number_of_replicas: 1	 #←默认索引副本个数，默认为1个副本

path.conf: /path/to/conf   #←文件的存储路径
path.data: /path/to/data   #←索引数据的存储路径，多个存储路径，用逗号隔开
path.work: /path/to/work   #←日志文件的存储路径
path.plugins: /path/to/plugins   #←插件的存放路径
network.bind_host: 192.168.0.1   #←绑定的ip地址 
network.publish_host: 192.168.0.1  #←设置其它节点和该节点交互的ip地址
network.host: 192.168.0.1  #←同时设置bind_host和publish_host
transport.tcp.port: 9300  #←节点之间交互的tcp端口，默认是9300。
http.port: 9200   #←设置对外服务的http端口，默认为9200。
transport.tcp.compress: true   #←设置是否压缩tcp传输时的数据，默认false不压缩
http.max_content_length: 100mb  #←内容的最大容量，默认100mb
http.enabled: false   #←使用http协议对外提供服务，默认为true开启。

#←默认为local即为本地文件系统，可以设置为本地文件系统，
# 分布式文件系统，hadoop的HDFS，和amazon的s3服务器等。
gateway.type: local 

gateway.expected_nodes: 2   #←集群中节点的数量，默认为2。
discovery.zen.ping.timeout: 3s #←自动发现其它节点时ping连接超时时间，默认为3秒	
discovery.zen.ping.multicast.enabled: false  #←打开多播发现节点，默认是true。

# 设置集群中master节点的初始列表，可以通过这些节点来自动发现新加入集群的节点。
discovery.zen.ping.unicast.hosts: [&quot;host1&quot;, &quot;host2:port&quot;, &quot;host3[portX-portY]&quot;]

# 当你无法关闭系统的swap的时候，建议把这个参数设为true。
# 防止在内存不够用的时候，elasticsearch的内存被交换至交换区，导致性能骤降
bootstrap.mlockal1: true
</code></pre>
<p>参考：https://www.cnblogs.com/hanyouchun/p/5163183.html
修改启动脚本设置启动参数： <font color="#f8070d" size=3><code>/usr/share/elasticsearch/bin/elasticsearch</code></font></p>
<pre><code class="language-sh">export JAVA_HOME=/usr/local/jdk
export PATH=$JAVA_HOME/bin:$PATH
</code></pre>
<p>es2.x支持方式</p>
<pre><code class="language-sh">export ES_HEAP_SIZE=256m
</code></pre>
<p>es5.x支持方式</p>
<pre><code class="language-sh">$ cat /etc/elasticsearch/jvm.options 
-Xms128m
-Xmx128m
</code></pre>
<h3 id="22-安装head插件">2.2 安装head插件</h3>
<p>官方网站：https://github.com/mobz/elasticsearch-head#running-with-built-in-server</p>
<p>对于elasticsearch2.x</p>
<pre><code class="language-sh">elasticsearch/bin/plugin install file:///root/elasticsearch-head.zip
</code></pre>
<p>对于Elasticsearch 5.x，head不支持网站插件。作为独立服务器运行。
<a href="https://www.cnblogs.com/alice626/p/6206722.html" target="_blank"
   rel="noopener nofollow noreferrer" >https://www.cnblogs.com/alice626/p/6206722.html</a></p>
<p><a href="https://www.cnblogs.com/xing901022/p/6030296.html" target="_blank"
   rel="noopener nofollow noreferrer" >https://www.cnblogs.com/xing901022/p/6030296.html</a></p>
<p><a href="https://www.cnblogs.com/valor-xh/p/6293689.html" target="_blank"
   rel="noopener nofollow noreferrer" >https://www.cnblogs.com/valor-xh/p/6293689.html</a></p>
<p><a href="https://github.com/mobz/elasticsearch-head" target="_blank"
   rel="noopener nofollow noreferrer" >https://github.com/mobz/elasticsearch-head</a>，github上下载压缩包。</p>
<p>因为head为独立启动的，所以随便放置任意目录即可。</p>
<h4 id="221-安装nodejs">2.2.1 安装node.js</h4>
<p><a href="https://nodejs.org/en/download/" target="_blank"
   rel="noopener nofollow noreferrer" >https://nodejs.org/en/download/</a></p>
<p>解压后设置环境变量</p>
<pre><code class="language-sh">export NODE_HOME=/usr/local/node-v6.9.1-linux-x64 
export PATH=$PATH:$NODE_HOME/bin
</code></pre>
<p>检查环境变量</p>
<pre><code class="language-sh">$ node -v
v8.11.2
$ npm -v
5.6.0
</code></pre>
<h4 id="222-安装grunt">2.2.2 安装grunt</h4>
<pre><code class="language-sh">npm install grunt-cli
$ grunt -version
grunt-cli v1.2.0
</code></pre>
<h4 id="223-修改head配置">2.2.3 修改head配置</h4>
<p>head/Gruntfile.js，增加hostname属性，设置为*</p>
<pre><code class="language-js">connect: { 
 	server: { 
 		options: { 
 			port: 9100, 
  			hostname: '*', 
 			base: '.', 
 			keepalive: true 
 		} 
 	} 
}
</code></pre>
<p>修改连接地址
head/_site/app.js</p>
<pre><code class="language-js">this.base_uri = 
this.config.base_uri || 
this.prefs.get(&quot;app-base_uri&quot;) || 
&quot;http://10.0.0.12:19200&quot;;
</code></pre>
<h4 id="224-运行head">2.2.4 运行head</h4>
<p>在head目录下，执行npm install 下载以来的包：</p>
<pre><code class="language-sh">nmp install
</code></pre>
<p>出现如下报错</p>
<pre><code class="language-sh">Please report this full log at https://github.com/Medium/phantomjs
npm ERR! Darwin 15.0.0
npm ERR! argv &quot;/usr/local/bin/node&quot; &quot;/usr/local/bin/npm&quot; &quot;install&quot;
npm ERR! node v4.4.3
npm ERR! npm  v3.10.9
npm ERR! code ELIFECYCLE
 
npm ERR! phantomjs-prebuilt@2.1.14 install: `node install.js`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the phantomjs-prebuilt@2.1.14 install script 'node install.js
</code></pre>
<p>解决方法</p>
<pre><code class="language-sh">npm install phantomjs-prebuilt@2.1.14 --ignore-scripts
</code></pre>
<p>运行head</p>
<pre><code class="language-sh">grunt server &amp;
</code></pre>
<p>设置http对外提供服务</p>
<h3 id="23-安装bigdesk">2.3 安装bigdesk</h3>
<p><a href="https://github.com/hlstudio/bigdesk" target="_blank"
   rel="noopener nofollow noreferrer" >https://github.com/hlstudio/bigdesk</a></p>
<p>下载bigdesk</p>
<pre><code class="language-sh">$ cd bigdesk-master
$ ll

bigdesk_es2.png
LICENSE
NOTICE
plugin-descriptor.properties
README.md
【_site】
</code></pre>
<p>进入_site目录</p>
<pre><code class="language-sh">python -m SimpleHTTPServer port 8000
</code></pre>
<p><img loading="lazy" src="../../images/ES/205" alt="image" onerror="this.onerror=null;this.src='/placeholder.svg';this.className='pe-image-placeholder'" /></p>
<p>marven、kopf</p>
<p>2.x plugin 访问 <font color="#f8070d" size=3><code>9200/_plugin/head</code></font></p>
<h2 id="3-es使用">3 ES使用</h2>
<h3 id="31-es-api介绍">3.1 es api介绍</h3>
<p>elasticsearch支持的是Restful风格的API接口</p>
<p>restuful介绍：
<a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html?bsh_bid=516759003" target="_blank"
   rel="noopener nofollow noreferrer" >http://www.ruanyifeng.com/blog/2014/05/restful_api.html?bsh_bid=516759003</a></p>
<p>四类API：</p>
<ul>
<li>检查集群、节点、索引等健康与否，以及获取其相应状态。</li>
<li>管理集群、节点、索引及元数据。</li>
<li>执行CRUD操作。</li>
<li>执行高级操作，例如paging,filtering等。</li>
</ul>
<h3 id="32-es-api使用">3.2 es api使用</h3>
<p>E5访问接口：tcp/9200</p>
<pre><code class="language-sh">curl -X [VERB] [PROTOCOL]://HOST:PORT/[PATH]?[QUERY_STR] -d '&lt;BODY&gt;'
</code></pre>
<ul>
<li>VERB：GET,PUT,DELETE等。</li>
<li>PROTOCOL：http,https。</li>
<li>QUERY_STRING：查询参数，例如？pretty表示用易读的JSON格式输出。</li>
<li>BODY：请求的主体。</li>
</ul>
<h4 id="321-查看es工作状态">3.2.1 查看es工作状态</h4>
<pre><code class="language-sh">$ curl http://10.0.0.12:19200/?pretty
{
  &quot;name&quot; : &quot;node-1&quot;,
  &quot;cluster_name&quot; : &quot;test1&quot;,
  &quot;version&quot; : {
    &quot;number&quot; : &quot;2.0.0&quot;,
    &quot;build_hash&quot; : &quot;de54438d6af8f9340d50c5c786151783ce7d6be5&quot;,
    &quot;build_timestamp&quot; : &quot;2015-10-22T08:09:48Z&quot;,
    &quot;build_snapshot&quot; : false,
    &quot;lucene_version&quot; : &quot;5.2.1&quot;
  },
  &quot;tagline&quot; : &quot;You Know, for Search&quot;
}
</code></pre>
<p>查看集群工作状态，?v查看详细信息。</p>
<pre><code class="language-sh">$ curl 127.0.0.1:19200/_cat/nodes?v
ip        heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name
10.0.0.9            27          90   1    0.07    0.03     0.05 mdi       -      node-1
10.0.0.12           46          91   0    0.00    0.01     0.05 mdi       *      node-2
</code></pre>
<p>health：查看当前集群健康状态的相关信息</p>
<pre><code class="language-sh">$ curl 127.0.0.1:19200/_cat/health?pretty
1526839934 02:12:14 test green 2 2 0 0 0 0 0 0 - 100.0%

$ curl 127.0.0.1:19200/_cat/health?v
epoch      timestamp cluster status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent
1526841115 02:31:55  test    green           2         2      0   0    0    0        0             0                  -                100.0%
</code></pre>
<h4 id="322-自定义查询">3.2.2 自定义查询</h4>
<pre><code class="language-sh">$ curl 127.0.0.1:19200/_cat/nodes?h=ip,name,port,uptime,heap.current
10.0.0.9  node-1 19300 40.7m 107.2mb mdi
10.0.0.12 node-2 19300   57m  89.6mb mdi
</code></pre>
<pre><code class="language-sh">$ curl 127.0.0.1:19200/_cat/master?v 
id                     host      ip        node
CorsR-_VSN2YHj5DCRXiKg 10.0.0.12 10.0.0.12 node-2
</code></pre>
<p>官方文档：https://www.elastic.co/guide/en/elasticsearch/reference/6.2/index.html</p>
<h4 id="323-state-api">3.2.3 state api</h4>
<pre><code class="language-json">curl 127.0.0.1:19200/_cluster/state/nodes?pretty

{
  &quot;cluster_name&quot; : &quot;test&quot;,
  &quot;compressed_size_in_bytes&quot; : 276,
  &quot;nodes&quot; : {
    &quot;cplyIE3WS3a4sKRhjYQPoQ&quot; : {
      &quot;name&quot; : &quot;node-1&quot;,
      &quot;ephemeral_id&quot; : &quot;axJ2wLcZRxyMMfLP7J54HA&quot;,
      &quot;transport_address&quot; : &quot;10.0.0.9:19300&quot;,
      &quot;attributes&quot; : { }
    },
    &quot;CorsR-_VSN2YHj5DCRXiKg&quot; : {
      &quot;name&quot; : &quot;node-2&quot;,
      &quot;ephemeral_id&quot; : &quot;UTGxkPRYSRO_wU_URX_taw&quot;,
      &quot;transport_address&quot; : &quot;10.0.0.12:19300&quot;,
      &quot;attributes&quot; : { }
    }
  }
}
</code></pre>
<p>curl 127.0.0.1:19200/_cluster/state/nodes?pretty
curl 127.0.0.1:19200/_nodes/state?pretty
<a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cluster-state.html" target="_blank"
   rel="noopener nofollow noreferrer" >https://www.elastic.co/guide/en/elasticsearch/reference/6.2/cluster-state.html</a></p>
<h3 id="33-crud-api">3.3 crud api</h3>
<h4 id="331-创建索引">3.3.1 创建索引</h4>
<pre><code class="language-json">curl -X PUT -H &quot;Content-Type: application/json&quot; http://127.0.0.1:19200/students/NO/1?pretty -d '

{
 &quot;first_name&quot;: &quot;jing&quot;,
 &quot;last_name&quot; : &quot;guo&quot;,
 &quot;gender&quot; : &quot;male&quot;,
 &quot;age&quot; :&quot;25&quot;,
 &quot;courses&quot;: &quot;xianglong shiba zhang&quot;
}'
{
  &quot;_index&quot; : &quot;students&quot;,
  &quot;_type&quot; : &quot;NO&quot;,
  &quot;_id&quot; : &quot;1&quot;,
  &quot;_version&quot; : 1,
  &quot;result&quot; : &quot;created&quot;,
  &quot;_shards&quot; : {
    &quot;total&quot; : 2,
    &quot;successful&quot; : 1,
    &quot;failed&quot; : 0
  },
  &quot;_seq_no&quot; : 0,
  &quot;_primary_term&quot; : 1
}
</code></pre>
<pre><code class="language-json">'{
 &quot;first_name&quot;: &quot;rong&quot;,
 &quot;last_name&quot; : &quot;huang&quot;,
 &quot;gender&quot; : &quot;female&quot;,
 &quot;age&quot; :23,
 &quot;courses&quot;: &quot;luoying shenjian zhang&quot;
}'
</code></pre>
<pre><code class="language-sh">curl -XGET http://127.0.0.1:19200/students/NO/1?pretty
{
  &quot;_index&quot; : &quot;students&quot;,
  &quot;_type&quot; : &quot;NO&quot;,
  &quot;_id&quot; : &quot;1&quot;,
  &quot;_version&quot; : 2,
  &quot;found&quot; : true,
  &quot;_source&quot; : {
    &quot;first_name&quot; : &quot;rong&quot;,
    &quot;last_name&quot; : &quot;huang&quot;,
    &quot;gender&quot; : &quot;female&quot;,
    &quot;age&quot; : 23,
    &quot;courses&quot; : &quot;luoying shenjian zhang&quot;
  }
}
</code></pre>
<h4 id="332-更新文档">3.3.2 更新文档</h4>
<pre><code class="language-sh">curl -X POST -H &quot;Content-Type: application/json&quot; http://127.0.0.1:19200/students/NO/1/_update?pretty -d 
'{
  &quot;doc&quot;: { &quot;age&quot;: 18 }
}'
{
  &quot;_index&quot; : &quot;students&quot;,
  &quot;_type&quot; : &quot;NO&quot;,
  &quot;_id&quot; : &quot;1&quot;,
  &quot;_version&quot; : 3,
  &quot;result&quot; : &quot;updated&quot;,
  &quot;_shards&quot; : {
    &quot;total&quot; : 2,
    &quot;successful&quot; : 1,
    &quot;failed&quot; : 0
  },
  &quot;_seq_no&quot; : 2,
  &quot;_primary_term&quot; : 1
}
</code></pre>
<h4 id="333-删除文档">3.3.3 删除文档</h4>
<pre><code class="language-sh">curl  -X DELETE http://10.0.0.12:19200/students/NO/1?pretty
{
  &quot;_index&quot; : &quot;students&quot;,
  &quot;_type&quot; : &quot;NO&quot;,
  &quot;_id&quot; : &quot;1&quot;,
  &quot;_version&quot; : 4,
  &quot;result&quot; : &quot;deleted&quot;,
  &quot;_shards&quot; : {
    &quot;total&quot; : 2,
    &quot;successful&quot; : 2,
    &quot;failed&quot; : 0
  },
  &quot;_seq_no&quot; : 3,
  &quot;_primary_term&quot; : 2
}
</code></pre>
<h4 id="334-删除索引">3.3.4 删除索引</h4>
<pre><code class="language-sh">curl  http://10.0.0.12:19200/_cat/indices
green open test1    cBL6BqIqStyr2a8O2n8Bdw 5 1 0 0  2.5kb  1.2kb
green open students g04VDxTUTEOLmdooHuuRpA 5 1 1 0 26.5kb 13.2kb

curl  -X DELETE http://10.0.0.12:19200/test1
{&quot;acknowledged&quot;:true}

curl  http://10.0.0.12:19200/_cat/indices
green open students g04VDxTUTEOLmdooHuuRpA 5 1 1 0 26.5kb 13.2kb
</code></pre>
<h3 id="34-查询数据">3.4 查询数据</h3>
<p>Query API Query DSL:JS0N based language for building complex queries。</p>
<p>用户实现诸多类型的查询操作，比如，simple term query,phrase,range boolean,fuzzy等：</p>
<p>ES的查询操作执行分为两个阶段：</p>
<ul>
<li>分散阶段：</li>
<li>合并阶段：</li>
</ul>
<p>列出一个索引的所有文档，较小级别时的演示说明</p>
<pre><code class="language-json">curl  http://10.0.0.12:19200/_search?pretty

{
  &quot;took&quot; : 15,  #←执行时长
  &quot;timed_out&quot; : false,  #←是否超时
  &quot;_shards&quot; : {   #←操作设计到多少个分片
    &quot;total&quot; : 5,
    &quot;successful&quot; : 5,
    &quot;skipped&quot; : 0,
    &quot;failed&quot; : 0
  },
  &quot;hits&quot; : {   #←查询结果
    &quot;total&quot; : 2,
    &quot;max_score&quot; : 1.0,
    &quot;hits&quot; : [
      {
        &quot;_index&quot; : &quot;students&quot;,
        &quot;_type&quot; : &quot;NO&quot;,
        &quot;_id&quot; : &quot;2&quot;,
        &quot;_score&quot; : 1.0,  #←文档平分，没有加权
        &quot;_source&quot; : {
          &quot;first_name&quot; : &quot;jing&quot;,
          &quot;last_name&quot; : &quot;guo&quot;,
          &quot;gender&quot; : &quot;male&quot;,
          &quot;age&quot; : &quot;25&quot;,
          &quot;courses&quot; : &quot;xianglong shiba zhang&quot;
        }
      },
      {
        &quot;_index&quot; : &quot;students&quot;,
        &quot;_type&quot; : &quot;NO&quot;,
        &quot;_id&quot; : &quot;1&quot;,
        &quot;_score&quot; : 1.0,
        &quot;_source&quot; : {
          &quot;first_name&quot; : &quot;rong&quot;,
          &quot;last_name&quot; : &quot;huang&quot;,
          &quot;gender&quot; : &quot;female&quot;,
          &quot;age&quot; : 23,
          &quot;courses&quot; : &quot;luoying shenjian zhang&quot;
        }
      }
    ]
  }
}
</code></pre>
<p>默认情况下，只返回前十个。</p>
<pre><code class="language-json">curl -H 'content-type: application/json' http://10.0.0.12:19200/_search?pretty -d '{
    &quot;query&quot;: {&quot;match_all&quot;: {}}
}'
</code></pre>
<h3 id="35-多索引多类型查询">3.5 多索引、多类型查询</h3>
<p>/_search：所有索引：
/INDEX_NAME/_search：单索引：
/INDEX1,INDEX2/_search：多索引：
/s*,t*/_search：
/students/class1/_search：单类型搜索
/students/class1,class2/_search：多类型搜索</p>
<h3 id="36-插入测试数据">3.6 插入测试数据</h3>
<pre><code class="language-sh">curl -H 'content-type: application/json' \
http://10.0.0.12:19200/test1/NO/1?pretty -d '{
   &quot;name&quot;:&quot;zhou yu&quot;,
   &quot;age&quot;: &quot;25&quot;,
   &quot;weapon&quot;: &quot;duan jian&quot;
}'

curl -H 'content-type: application/json' \
http://10.0.0.12:19200/test1/NO/2?pretty -d '{
   &quot;name&quot;:&quot;zhangliang&quot;,
   &quot;age&quot;: 31,
   &quot;weapon&quot;: &quot;fu zhou&quot;
}'

curl -H 'content-type: application/json' \
http://10.0.0.12:19200/test1/NO/3?pretty -d '{
   &quot;name&quot;:&quot;zhang liao&quot;,
   &quot;age&quot;: &quot;31&quot;,
   &quot;weapon&quot;: &quot;dao&quot;
}'

curl -H 'content-type: application/json' \
http://10.0.0.12:19200/test1/NO/4?pretty -d '{
   &quot;name&quot;:&quot;zhang fei&quot;,
   &quot;age&quot;: &quot;30&quot;,
   &quot;weapon&quot;: &quot;zhang ba she mao&quot;
}'

curl -H 'content-type: application/json' \
http://10.0.0.12:19200/test1/NO/5?pretty -d '{
  &quot;name&quot;: &quot;zhu ge liang&quot;,
  &quot;age&quot;: &quot;18&quot;,
  &quot;weapon&quot;: &quot;yu shan&quot;,
  &quot;intro&quot;: &quot;31 years old&quot;
}'
</code></pre>
<p>可以看出，默认按照字符串匹配。文档中的每个域存储为特定类型而非字符串。</p>
<pre><code class="language-json">{ 
&quot;hits&quot;: 
 	{ &quot;total&quot;: 3, &quot;max_score&quot;: 0.87546873, &quot;hits&quot;: 
 	[ { 
 			&quot;_index&quot;: &quot;test1&quot;, 
 		&quot;_type&quot;: &quot;NO&quot;, 
 		&quot;_id&quot;: &quot;3&quot;, 
 		&quot;_score&quot;: 0.87546873, 
 		&quot;_source&quot;: 
 		  { 	
 					&quot;name&quot;: &quot;zhang liao&quot;, 
           		&quot;age&quot;: &quot;31&quot;, 
 				&quot;weapon&quot;: &quot;dao&quot; 
 		  } 
 		}, 
 	  { 
 		&quot;_index&quot;: &quot;test1&quot;, 
 		&quot;_type&quot;: &quot;NO&quot;, 
 			&quot;_id&quot;: &quot;2&quot;, 
 		&quot;_score&quot;: 0.87546873, 
 		&quot;_source&quot;: 	
 			{ 	
 			  &quot;name&quot;: &quot;zhangliang&quot;, 
 				  &quot;age&quot;: 31, 
 			  &quot;weapon&quot;: &quot;fu zhou&quot;
 			} 
 		} ,
 		{ 
 			&quot;_index&quot;: &quot;test1&quot;, 
 			&quot;_type&quot;: &quot;NO&quot;, 
 			&quot;_id&quot;: &quot;5&quot;, 
 			&quot;_score&quot;: 0.2876821, 
 			&quot;_source&quot;: 
 			{ 	
 				&quot;name&quot;: &quot;zhu ge liang&quot;, 
 				&quot;age&quot;: &quot;18&quot;, 
 				&quot;weapon&quot;: &quot;yu shan&quot;, 
 				&quot;intro&quot;: &quot;31 years old&quot; 
 			} 
 		} 
 	] 
} 
</code></pre>
<p>指定域搜索做精确匹配</p>
<pre><code class="language-json">&quot;hits&quot;: [ 
 	{ 
 			&quot;_index&quot;: &quot;test1&quot;, 
 			&quot;_type&quot;: &quot;NO&quot;, 
 			&quot;_id&quot;: &quot;3&quot;, 
 			&quot;_score&quot;: 0.87546873, 
 			&quot;_source&quot;: 
 			{ 
 				&quot;name&quot;: &quot;zhang liao&quot;, 
 				&quot;age&quot;: &quot;31&quot;, 
 				&quot;weapon&quot;: &quot;dao&quot; 
 		 	} 
 		} , 
 		{ 
 		 	&quot;_index&quot;: &quot;test1&quot;, 
 		 	&quot;_type&quot;: &quot;NO&quot;, 
 		 	&quot;_id&quot;: &quot;4&quot;, 
 		 	&quot;_score&quot;: 0.87546873,
 		 	&quot;_source&quot;: 
 		 	{ 
 		 		&quot;name&quot;: &quot;zhang fei&quot;, 
 		 		&quot;age&quot;: &quot;30&quot;, 
 		 		&quot;weapon&quot;: &quot;zhang ba she mao&quot; 
 		 	} 
 	} 
]
</code></pre>
<p>查看指定类型的mapping示例
curl &ldquo;http://10.0.0.12:19200/test1/_mapping/NO?pretty&rdquo;
mapping定义了整个文档中的数据是被当做何种类型对待的。</p>
<pre><code class="language-json">{
	  &quot;test1&quot; : {
		&quot;mappings&quot; : {
		  &quot;NO&quot; : {
			&quot;properties&quot; : {
			  &quot;age&quot; : {
				&quot;type&quot; : &quot;text&quot;,
				&quot;fields&quot; : {
				  &quot;keyword&quot; : {
					&quot;type&quot; : &quot;keyword&quot;,
					&quot;ignore_above&quot; : 256
				  }
				}
			  },
			  &quot;intro&quot; : {
				&quot;type&quot; : &quot;text&quot;,
				&quot;fields&quot; : {
				  &quot;keyword&quot; : {
					&quot;type&quot; : &quot;keyword&quot;,
					&quot;ignore_above&quot; : 256
				  }
				}
			  },
			  &quot;name&quot; : {
				&quot;type&quot; : &quot;text&quot;,
				&quot;fields&quot; : {
				  &quot;keyword&quot; : {
					&quot;type&quot; : &quot;keyword&quot;,
					&quot;ignore_above&quot; : 256
				  }
				}
			  },
			  &quot;weapon&quot; : {
				&quot;type&quot; : &quot;text&quot;,
				&quot;fields&quot; : {
				  &quot;keyword&quot; : {
					&quot;type&quot; : &quot;keyword&quot;,
					&quot;ignore_above&quot; : 256
				  }
				}
			  }
			}
		  }
		}
	  }
	}
</code></pre>
<p>ES中搜索的数据广义上可被理解为两类：</p>
<ul>
<li>types:exact</li>
<li>full-text</li>
</ul>
<p>精确值：指未经加工的原始值；在搜索时进行精确匹配。NOTEBOOK≠notebook</p>
<p>full-text：用于引用文本中数据；判断文档在多大程序上匹配查询请求；即评估文档与用户请求查询的相关度。</p>
<p>为了完成ful1-text搜素，ES必须首先分析文本，并创建出倒排素引：倒排素引中的数据还需进行“正规化”为标准格式：如全部小写、负数变为单数、trees改为tree等。</p>
<p>创建倒排索引需要先分词再normalization。分词加正规化的操作及为分析。</p>
<p>分析需要由分析器(analyzer)进行。分析器由三个组件构成：字符过滤器、分词器、分词过滤器。</p>
<p>ES内置的分析器：</p>
<ul>
<li>Standard analyzer：ES的默认分析器，适用于多种语言，基于Unicode方式进行分析。</li>
<li>Simple analyzer：简单分析器，根据所有的字母进行分析。</li>
<li>Wirtespace analyzer：只把空白字符当做单词分割。</li>
<li>Language analyzer：为多种语言分别提供各种各样的分析器。</li>
</ul>
<p>分析器不仅在创建素引时用到；在构建查询时也会用到。构建索引时的分析器，分析用户查询并构建成查询语句的分词方式。两种方式需要保持一致。</p>
<p>[2018-09-21 05:24:03,381][INFO ][cluster.routing.allocation.decider] [node-1] low disk watermark [85%] exceeded on [JWxQxMkeTj6BkmIx-6DsXg][node-1][/var/lib/elasticsearch/my-application/nodes/0] free: 1gb[11.2%], replicas will not be assigned to this node</p>
<h2 id="4-es错误">4 ES错误</h2>
<h3 id="es索引yellow状态">ES索引yellow状态</h3>
<blockquote>
<p><strong>查看片状态</strong></p>
</blockquote>
<pre><code class="language-sh">curl 172.16.16.18:9200/_cat/shards
</code></pre>
<pre><code class="language-sh">logstash-webapi-2018.10.30 0 p STARTED        1   6.1kb 127.0.0.1 6wPQIP5
logstash-webapi-2018.10.30 0 p STARTED        3  16.4kb 127.0.0.1 6wPQIP5
logstash-webapi-2018.10.30 0 r UNASSIGNED                         
logstash-webapi-2018.10.30 0 p STARTED     1824     1mb 127.0.0.1 6wPQIP5
logstash-webapi-2018.10.30 0 p UNASSIGNED
logstash-webapi-2018.10.30 0 p STARTED      272 363.4kb 127.0.0.1 6wPQIP5
logstash-webapi-2018.10.30 0 p UNASSIGNED
logstash-webapi-2018.10.30 0 p STARTED        0   5.1kb 127.0.0.1 6wPQIP5
logstash-webapi-2018.10.30 0 p UNASSIGNED
logstash-webapi-2018.10.30 0 p STARTED     4888   2.4mb 127.0.0.1 6wPQIP5
logstash-webapi-2018.10.30 0 p UNASSIGNED 
</code></pre>
<p>yellow表示所有主分片可用，但不是所有副本分片都可用，最常见的情景是单节点时，由于es默认是有1个副本，主分片和副本不能在同一个节点上，所以副本就是未分配unassigned</p>
<pre><code class="language-sh">PUT 172.16.16.18:9200/logstash -d '
{
  &quot;settings&quot;:{
           &quot;number_of_shards&quot;:1,     
           &quot;number_of_replicas&quot;:0
  }
}'
</code></pre>
<p>参考网址：<a href="https://blog.csdn.net/qq_21383435/article/details/79323739" target="_blank"
   rel="noopener nofollow noreferrer" >elasticsearch集群健康为黄色</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
