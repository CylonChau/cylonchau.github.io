![image-20200627191905101](https://cdn.jsdelivr.net/gh/CylonChau/imgbed/img/image-20200627191905101.png)

####  签名步骤：

1. 后台⽣生成 `appKey` 和 `appSecurit` 。
- 二者在后台数据库中具有一一对应的关系
- `appKey` 和 `appSecurit` 的映射关系不不作要求，但应当不不易易被猜出
- 客户端与前端秘钥管理理⽅方式需要另⾏行行协商
2. 将所有⾮非空参数按照参数名排序（ASCII从⼩小到⼤大）,以 `querryString` 的格式拼接（k1=v1&k2=v2...)。
   - 参数名`ASCII `码从⼩小到⼤大排序（字典序）
   - 如果参数的值为空不不参与签名
   - 参数名区分大小写
   - 校验⽅方⽣生成校验参数时，接收到的 `sign` 参数不不参与签名
   - `appKey`作为一个普通的参数参与排序和拼接。

3. `appSecurit` 作为参数`appSecurit ` 拼接在 `querryString`  最后（不不参与排序），并做 `BASE64` 编码。

4. 使⽤用 `HMAC-SHA256` 散列列算法，将第 **3**步中⽣生成的 字符串串 使⽤用秘钥 `appSecurit` 签名。
5. 将得到的签名和作为参数 `sign` 拼接在 第**2**步的字符串串后，作为最终参数。

#### 验签步骤:

1. 拿到参数后，使⽤用参数中的 `appKey` 查询对应的 `appSecurit` 。
2. 去掉参数中的 `sign` 字段，按照上⾯面的签名步骤签名，对⽐比⽣生成的签名和参数中的签名字段。

#### 算法加强：

1. 为了增加该算法破解难度，在上⾯面第**2**步的参数中，增加⼀一个随机字符串串参数 `nonce_str` 。

2. 为了给参数增加时效性，在参数中加入 `timestamp` 字段（精确到秒的⻓长整型），后端在验签成功后对比取出该字段，过滤掉超过 8 分钟的请求。

3. 为了了⽅方便便测试及问题排查，约定服务器器在响应头⾥里里添加 signStatus 枚举字段:
  
    0 : 未验签
    1 : 验签成功
    2 : 验签失败

#### 版本兼容与降级：
1. 客户端在请求头中添加 `version` 字段，格式为 `x.x.x` ，服务器器根据不不同的版本选择验签策略略。
2. 在 `getPreInfo` 接⼝口中添加 `isSign` 字段（ `bool` 型），客户端根据此字段判断后续接口是否加签，同时接口对 `getPreInfo` 接口不进行验签。